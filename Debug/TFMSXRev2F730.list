
TFMSXRev2F730.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e18c  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  0800e36c  0800e36c  0001e36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6e8  0800e6e8  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6e8  0800e6e8  0001e6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6f0  0800e6f0  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6f0  0800e6f0  0001e6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6f4  0800e6f4  0001e6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800e6f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000126c  200000f0  0800e7e8  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  2000135c  0800e7e8  0002135c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ede6  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007cbb  00000000  00000000  0005ef06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c78  00000000  00000000  00066bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019a8  00000000  00000000  00068840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ef20  00000000  00000000  0006a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002dbba  00000000  00000000  00099108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6c23  00000000  00000000  000c6cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bd8e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000743c  00000000  00000000  001bd938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000f0 	.word	0x200000f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e354 	.word	0x0800e354

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f4 	.word	0x200000f4
 800021c:	0800e354 	.word	0x0800e354

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800051e:	463b      	mov	r3, r7
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_DAC_Init+0x4c>)
 8000528:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <MX_DAC_Init+0x50>)
 800052a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <MX_DAC_Init+0x4c>)
 800052e:	f001 fd97 	bl	8002060 <HAL_DAC_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000538:	f000 fd18 	bl	8000f6c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800053c:	2300      	movs	r3, #0
 800053e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	4619      	mov	r1, r3
 800054a:	4806      	ldr	r0, [pc, #24]	; (8000564 <MX_DAC_Init+0x4c>)
 800054c:	f001 fe0e 	bl	800216c <HAL_DAC_ConfigChannel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000556:	f000 fd09 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000128 	.word	0x20000128
 8000568:	40007400 	.word	0x40007400

0800056c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a19      	ldr	r2, [pc, #100]	; (80005f0 <HAL_DAC_MspInit+0x84>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d12b      	bne.n	80005e6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800058e:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <HAL_DAC_MspInit+0x88>)
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	4a18      	ldr	r2, [pc, #96]	; (80005f4 <HAL_DAC_MspInit+0x88>)
 8000594:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000598:	6413      	str	r3, [r2, #64]	; 0x40
 800059a:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <HAL_DAC_MspInit+0x88>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <HAL_DAC_MspInit+0x88>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <HAL_DAC_MspInit+0x88>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <HAL_DAC_MspInit+0x88>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005be:	2310      	movs	r3, #16
 80005c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c2:	2303      	movs	r3, #3
 80005c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4619      	mov	r1, r3
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <HAL_DAC_MspInit+0x8c>)
 80005d2:	f002 f825 	bl	8002620 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2102      	movs	r1, #2
 80005da:	2036      	movs	r0, #54	; 0x36
 80005dc:	f001 fd16 	bl	800200c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005e0:	2036      	movs	r0, #54	; 0x36
 80005e2:	f001 fd2f 	bl	8002044 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80005e6:	bf00      	nop
 80005e8:	3728      	adds	r7, #40	; 0x28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40007400 	.word	0x40007400
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40020000 	.word	0x40020000

080005fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <__NVIC_GetPriorityGrouping+0x18>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	0a1b      	lsrs	r3, r3, #8
 8000606:	f003 0307 	and.w	r3, r3, #7
}
 800060a:	4618      	mov	r0, r3
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	6039      	str	r1, [r7, #0]
 8000622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000628:	2b00      	cmp	r3, #0
 800062a:	db0a      	blt.n	8000642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	b2da      	uxtb	r2, r3
 8000630:	490c      	ldr	r1, [pc, #48]	; (8000664 <__NVIC_SetPriority+0x4c>)
 8000632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000636:	0112      	lsls	r2, r2, #4
 8000638:	b2d2      	uxtb	r2, r2
 800063a:	440b      	add	r3, r1
 800063c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000640:	e00a      	b.n	8000658 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4908      	ldr	r1, [pc, #32]	; (8000668 <__NVIC_SetPriority+0x50>)
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	f003 030f 	and.w	r3, r3, #15
 800064e:	3b04      	subs	r3, #4
 8000650:	0112      	lsls	r2, r2, #4
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	440b      	add	r3, r1
 8000656:	761a      	strb	r2, [r3, #24]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	e000e100 	.word	0xe000e100
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800066c:	b480      	push	{r7}
 800066e:	b089      	sub	sp, #36	; 0x24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	f1c3 0307 	rsb	r3, r3, #7
 8000686:	2b04      	cmp	r3, #4
 8000688:	bf28      	it	cs
 800068a:	2304      	movcs	r3, #4
 800068c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3304      	adds	r3, #4
 8000692:	2b06      	cmp	r3, #6
 8000694:	d902      	bls.n	800069c <NVIC_EncodePriority+0x30>
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	3b03      	subs	r3, #3
 800069a:	e000      	b.n	800069e <NVIC_EncodePriority+0x32>
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	f04f 32ff 	mov.w	r2, #4294967295
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	43da      	mvns	r2, r3
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	401a      	ands	r2, r3
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b4:	f04f 31ff 	mov.w	r1, #4294967295
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	fa01 f303 	lsl.w	r3, r1, r3
 80006be:	43d9      	mvns	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	4313      	orrs	r3, r2
         );
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3724      	adds	r7, #36	; 0x24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
	...

080006d4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <LL_SYSCFG_SetEXTISource+0x58>)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	3302      	adds	r3, #2
 80006e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	0c1b      	lsrs	r3, r3, #16
 80006ee:	43db      	mvns	r3, r3
 80006f0:	ea02 0103 	and.w	r1, r2, r3
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	0c1b      	lsrs	r3, r3, #16
 80006f8:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	fa93 f3a3 	rbit	r3, r3
 8000700:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	fab3 f383 	clz	r3, r3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	461a      	mov	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	fa03 f202 	lsl.w	r2, r3, r2
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <LL_SYSCFG_SetEXTISource+0x58>)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	430a      	orrs	r2, r1
 800071a:	3302      	adds	r3, #2
 800071c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40013800 	.word	0x40013800

08000730 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	fa93 f3a3 	rbit	r3, r3
 800074a:	613b      	str	r3, [r7, #16]
  return result;
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	fab3 f383 	clz	r3, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	2103      	movs	r1, #3
 8000758:	fa01 f303 	lsl.w	r3, r1, r3
 800075c:	43db      	mvns	r3, r3
 800075e:	401a      	ands	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	fa93 f3a3 	rbit	r3, r3
 800076a:	61bb      	str	r3, [r7, #24]
  return result;
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	fab3 f383 	clz	r3, r3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	fa01 f303 	lsl.w	r3, r1, r3
 800077c:	431a      	orrs	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	601a      	str	r2, [r3, #0]
}
 8000782:	bf00      	nop
 8000784:	3724      	adds	r7, #36	; 0x24
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800078e:	b480      	push	{r7}
 8000790:	b089      	sub	sp, #36	; 0x24
 8000792:	af00      	add	r7, sp, #0
 8000794:	60f8      	str	r0, [r7, #12]
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	68da      	ldr	r2, [r3, #12]
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	fa93 f3a3 	rbit	r3, r3
 80007a8:	613b      	str	r3, [r7, #16]
  return result;
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	fab3 f383 	clz	r3, r3
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	2103      	movs	r1, #3
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43db      	mvns	r3, r3
 80007bc:	401a      	ands	r2, r3
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	fa93 f3a3 	rbit	r3, r3
 80007c8:	61bb      	str	r3, [r7, #24]
  return result;
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	fab3 f383 	clz	r3, r3
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	431a      	orrs	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	60da      	str	r2, [r3, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3724      	adds	r7, #36	; 0x24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	683a      	ldr	r2, [r7, #0]
 80007fa:	619a      	str	r2, [r3, #24]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	041a      	lsls	r2, r3, #16
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	619a      	str	r2, [r3, #24]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000834:	4907      	ldr	r1, [pc, #28]	; (8000854 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800083e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4013      	ands	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40023800 	.word	0x40023800

08000858 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800085e:	f107 0318 	add.w	r3, r7, #24
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
 8000876:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000878:	2004      	movs	r0, #4
 800087a:	f7ff ffd5 	bl	8000828 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800087e:	2080      	movs	r0, #128	; 0x80
 8000880:	f7ff ffd2 	bl	8000828 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000884:	2001      	movs	r0, #1
 8000886:	f7ff ffcf 	bl	8000828 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800088a:	2002      	movs	r0, #2
 800088c:	f7ff ffcc 	bl	8000828 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000890:	2008      	movs	r0, #8
 8000892:	f7ff ffc9 	bl	8000828 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8000896:	2101      	movs	r1, #1
 8000898:	48bd      	ldr	r0, [pc, #756]	; (8000b90 <MX_GPIO_Init+0x338>)
 800089a:	f7ff ffb5 	bl	8000808 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 800089e:	2102      	movs	r1, #2
 80008a0:	48bb      	ldr	r0, [pc, #748]	; (8000b90 <MX_GPIO_Init+0x338>)
 80008a2:	f7ff ffb1 	bl	8000808 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_2);
 80008a6:	2104      	movs	r1, #4
 80008a8:	48b9      	ldr	r0, [pc, #740]	; (8000b90 <MX_GPIO_Init+0x338>)
 80008aa:	f7ff ffad 	bl	8000808 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 80008ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b2:	48b7      	ldr	r0, [pc, #732]	; (8000b90 <MX_GPIO_Init+0x338>)
 80008b4:	f7ff ff9a 	bl	80007ec <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80008b8:	2108      	movs	r1, #8
 80008ba:	48b5      	ldr	r0, [pc, #724]	; (8000b90 <MX_GPIO_Init+0x338>)
 80008bc:	f7ff ffa4 	bl	8000808 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 80008c0:	2110      	movs	r1, #16
 80008c2:	48b3      	ldr	r0, [pc, #716]	; (8000b90 <MX_GPIO_Init+0x338>)
 80008c4:	f7ff ffa0 	bl	8000808 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80008c8:	2120      	movs	r1, #32
 80008ca:	48b1      	ldr	r0, [pc, #708]	; (8000b90 <MX_GPIO_Init+0x338>)
 80008cc:	f7ff ff9c 	bl	8000808 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 80008d0:	2140      	movs	r1, #64	; 0x40
 80008d2:	48af      	ldr	r0, [pc, #700]	; (8000b90 <MX_GPIO_Init+0x338>)
 80008d4:	f7ff ff98 	bl	8000808 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_7);
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	48ad      	ldr	r0, [pc, #692]	; (8000b90 <MX_GPIO_Init+0x338>)
 80008dc:	f7ff ff94 	bl	8000808 <LL_GPIO_ResetOutputPin>


  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	48ac      	ldr	r0, [pc, #688]	; (8000b94 <MX_GPIO_Init+0x33c>)
 80008e4:	f7ff ff90 	bl	8000808 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10);
 80008e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ec:	48a9      	ldr	r0, [pc, #676]	; (8000b94 <MX_GPIO_Init+0x33c>)
 80008ee:	f7ff ff8b 	bl	8000808 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_11);
 80008f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f6:	48a7      	ldr	r0, [pc, #668]	; (8000b94 <MX_GPIO_Init+0x33c>)
 80008f8:	f7ff ff86 	bl	8000808 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80008fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000900:	48a4      	ldr	r0, [pc, #656]	; (8000b94 <MX_GPIO_Init+0x33c>)
 8000902:	f7ff ff81 	bl	8000808 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_14);
 8000906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800090a:	48a2      	ldr	r0, [pc, #648]	; (8000b94 <MX_GPIO_Init+0x33c>)
 800090c:	f7ff ff7c 	bl	8000808 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_15);
 8000910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000914:	489f      	ldr	r0, [pc, #636]	; (8000b94 <MX_GPIO_Init+0x33c>)
 8000916:	f7ff ff77 	bl	8000808 <LL_GPIO_ResetOutputPin>



  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800091a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000928:	463b      	mov	r3, r7
 800092a:	4619      	mov	r1, r3
 800092c:	4899      	ldr	r0, [pc, #612]	; (8000b94 <MX_GPIO_Init+0x33c>)
 800092e:	f006 fabf 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000932:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000936:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000940:	463b      	mov	r3, r7
 8000942:	4619      	mov	r1, r3
 8000944:	4893      	ldr	r0, [pc, #588]	; (8000b94 <MX_GPIO_Init+0x33c>)
 8000946:	f006 fab3 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800094a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800094e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000958:	463b      	mov	r3, r7
 800095a:	4619      	mov	r1, r3
 800095c:	488d      	ldr	r0, [pc, #564]	; (8000b94 <MX_GPIO_Init+0x33c>)
 800095e:	f006 faa7 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000962:	2302      	movs	r3, #2
 8000964:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4888      	ldr	r0, [pc, #544]	; (8000b94 <MX_GPIO_Init+0x33c>)
 8000974:	f006 fa9c 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000978:	2304      	movs	r3, #4
 800097a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000984:	463b      	mov	r3, r7
 8000986:	4619      	mov	r1, r3
 8000988:	4882      	ldr	r0, [pc, #520]	; (8000b94 <MX_GPIO_Init+0x33c>)
 800098a:	f006 fa91 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800098e:	2301      	movs	r3, #1
 8000990:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	463b      	mov	r3, r7
 800099c:	4619      	mov	r1, r3
 800099e:	487e      	ldr	r0, [pc, #504]	; (8000b98 <MX_GPIO_Init+0x340>)
 80009a0:	f006 fa86 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80009a4:	2302      	movs	r3, #2
 80009a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4878      	ldr	r0, [pc, #480]	; (8000b98 <MX_GPIO_Init+0x340>)
 80009b6:	f006 fa7b 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80009ba:	2304      	movs	r3, #4
 80009bc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	463b      	mov	r3, r7
 80009c8:	4619      	mov	r1, r3
 80009ca:	4873      	ldr	r0, [pc, #460]	; (8000b98 <MX_GPIO_Init+0x340>)
 80009cc:	f006 fa70 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80009d0:	2308      	movs	r3, #8
 80009d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	463b      	mov	r3, r7
 80009de:	4619      	mov	r1, r3
 80009e0:	486d      	ldr	r0, [pc, #436]	; (8000b98 <MX_GPIO_Init+0x340>)
 80009e2:	f006 fa65 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80009e6:	2320      	movs	r3, #32
 80009e8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	463b      	mov	r3, r7
 80009f4:	4619      	mov	r1, r3
 80009f6:	4868      	ldr	r0, [pc, #416]	; (8000b98 <MX_GPIO_Init+0x340>)
 80009f8:	f006 fa5a 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80009fc:	2340      	movs	r3, #64	; 0x40
 80009fe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4862      	ldr	r0, [pc, #392]	; (8000b98 <MX_GPIO_Init+0x340>)
 8000a0e:	f006 fa4f 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4619      	mov	r1, r3
 8000a22:	485d      	ldr	r0, [pc, #372]	; (8000b98 <MX_GPIO_Init+0x340>)
 8000a24:	f006 fa44 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4853      	ldr	r0, [pc, #332]	; (8000b90 <MX_GPIO_Init+0x338>)
 8000a42:	f006 fa35 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000a46:	2302      	movs	r3, #2
 8000a48:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	484c      	ldr	r0, [pc, #304]	; (8000b90 <MX_GPIO_Init+0x338>)
 8000a60:	f006 fa26 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000a64:	2304      	movs	r3, #4
 8000a66:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4844      	ldr	r0, [pc, #272]	; (8000b90 <MX_GPIO_Init+0x338>)
 8000a7e:	f006 fa17 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a86:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	463b      	mov	r3, r7
 8000a92:	4619      	mov	r1, r3
 8000a94:	483e      	ldr	r0, [pc, #248]	; (8000b90 <MX_GPIO_Init+0x338>)
 8000a96:	f006 fa0b 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a9e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4838      	ldr	r0, [pc, #224]	; (8000b90 <MX_GPIO_Init+0x338>)
 8000aae:	f006 f9ff 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000ab2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4830      	ldr	r0, [pc, #192]	; (8000b90 <MX_GPIO_Init+0x338>)
 8000ace:	f006 f9ef 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000ad2:	2340      	movs	r3, #64	; 0x40
 8000ad4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	482c      	ldr	r0, [pc, #176]	; (8000b94 <MX_GPIO_Init+0x33c>)
 8000ae4:	f006 f9e4 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	463b      	mov	r3, r7
 8000af6:	4619      	mov	r1, r3
 8000af8:	4826      	ldr	r0, [pc, #152]	; (8000b94 <MX_GPIO_Init+0x33c>)
 8000afa:	f006 f9d9 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b02:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4820      	ldr	r0, [pc, #128]	; (8000b94 <MX_GPIO_Init+0x33c>)
 8000b12:	f006 f9cd 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	463b      	mov	r3, r7
 8000b26:	4619      	mov	r1, r3
 8000b28:	481a      	ldr	r0, [pc, #104]	; (8000b94 <MX_GPIO_Init+0x33c>)
 8000b2a:	f006 f9c1 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b32:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4814      	ldr	r0, [pc, #80]	; (8000b94 <MX_GPIO_Init+0x33c>)
 8000b42:	f006 f9b5 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000b46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b4a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b54:	463b      	mov	r3, r7
 8000b56:	4619      	mov	r1, r3
 8000b58:	480e      	ldr	r0, [pc, #56]	; (8000b94 <MX_GPIO_Init+0x33c>)
 8000b5a:	f006 f9a9 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b5e:	2308      	movs	r3, #8
 8000b60:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b62:	2301      	movs	r3, #1
 8000b64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	463b      	mov	r3, r7
 8000b74:	4619      	mov	r1, r3
 8000b76:	4806      	ldr	r0, [pc, #24]	; (8000b90 <MX_GPIO_Init+0x338>)
 8000b78:	f006 f99a 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b80:	2301      	movs	r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	e005      	b.n	8000b9c <MX_GPIO_Init+0x344>
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4852      	ldr	r0, [pc, #328]	; (8000cec <MX_GPIO_Init+0x494>)
 8000ba4:	f006 f984 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000ba8:	2320      	movs	r3, #32
 8000baa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bac:	2301      	movs	r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	484a      	ldr	r0, [pc, #296]	; (8000cec <MX_GPIO_Init+0x494>)
 8000bc2:	f006 f975 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000bc6:	2340      	movs	r3, #64	; 0x40
 8000bc8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4843      	ldr	r0, [pc, #268]	; (8000cec <MX_GPIO_Init+0x494>)
 8000be0:	f006 f966 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000be8:	2301      	movs	r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	483b      	ldr	r0, [pc, #236]	; (8000cec <MX_GPIO_Init+0x494>)
 8000bfe:	f006 f957 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c06:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	4835      	ldr	r0, [pc, #212]	; (8000cec <MX_GPIO_Init+0x494>)
 8000c16:	f006 f94b 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c1e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	463b      	mov	r3, r7
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	482f      	ldr	r0, [pc, #188]	; (8000cec <MX_GPIO_Init+0x494>)
 8000c2e:	f006 f93f 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE0);
 8000c32:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000c36:	2002      	movs	r0, #2
 8000c38:	f7ff fd4c 	bl	80006d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE3);
 8000c3c:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000c40:	2002      	movs	r0, #2
 8000c42:	f7ff fd47 	bl	80006d4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000c52:	2301      	movs	r3, #1
 8000c54:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f005 ffa2 	bl	8006ba4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000c60:	2308      	movs	r3, #8
 8000c62:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c64:	2301      	movs	r3, #1
 8000c66:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c70:	f107 0318 	add.w	r3, r7, #24
 8000c74:	4618      	mov	r0, r3
 8000c76:	f005 ff95 	bl	8006ba4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_0, LL_GPIO_PULL_NO);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	481c      	ldr	r0, [pc, #112]	; (8000cf0 <MX_GPIO_Init+0x498>)
 8000c80:	f7ff fd85 	bl	800078e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_3, LL_GPIO_PULL_NO);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2108      	movs	r1, #8
 8000c88:	4819      	ldr	r0, [pc, #100]	; (8000cf0 <MX_GPIO_Init+0x498>)
 8000c8a:	f7ff fd80 	bl	800078e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_0, LL_GPIO_MODE_INPUT);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2101      	movs	r1, #1
 8000c92:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <MX_GPIO_Init+0x498>)
 8000c94:	f7ff fd4c 	bl	8000730 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	4814      	ldr	r0, [pc, #80]	; (8000cf0 <MX_GPIO_Init+0x498>)
 8000c9e:	f7ff fd47 	bl	8000730 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ca2:	f7ff fcab 	bl	80005fc <__NVIC_GetPriorityGrouping>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fcdd 	bl	800066c <NVIC_EncodePriority>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	2006      	movs	r0, #6
 8000cb8:	f7ff fcae 	bl	8000618 <__NVIC_SetPriority>
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cbc:	f7ff fc9e 	bl	80005fc <__NVIC_GetPriorityGrouping>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fcd0 	bl	800066c <NVIC_EncodePriority>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4619      	mov	r1, r3
 8000cd0:	2009      	movs	r0, #9
 8000cd2:	f7ff fca1 	bl	8000618 <__NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cd6:	2006      	movs	r0, #6
 8000cd8:	f001 f9b4 	bl	8002044 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cdc:	2009      	movs	r0, #9
 8000cde:	f001 f9b1 	bl	8002044 <HAL_NVIC_EnableIRQ>

}
 8000ce2:	bf00      	nop
 8000ce4:	3720      	adds	r7, #32
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40020800 	.word	0x40020800

08000cf4 <LL_GPIO_SetOutputPin>:
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	619a      	str	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_GPIO_ResetOutputPin>:
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	041a      	lsls	r2, r3, #16
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	619a      	str	r2, [r3, #24]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <ProcessJoystick>:
#include "joystick.h"

HID_gamepad_Info_TypeDef* joymap;

void ProcessJoystick() {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
			
			SetupJoystick();
 8000d36:	f000 fe65 	bl	8001a04 <SetupJoystick>
			HID_gamepad_Info_TypeDef *joymap = (HID_gamepad_Info_TypeDef *)USBH_Get_Device_Data(HUB_GAMEPAD);
 8000d3a:	2003      	movs	r0, #3
 8000d3c:	f000 fd5e 	bl	80017fc <USBH_Get_Device_Data>
 8000d40:	6078      	str	r0, [r7, #4]

			if (joymap == NULL) return;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d06e      	beq.n	8000e26 <ProcessJoystick+0xf6>
			if ((joymap->gamepad_data & 0x1)) LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7); else LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7); //RIGHT - PC7
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d004      	beq.n	8000d5e <ProcessJoystick+0x2e>
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	4836      	ldr	r0, [pc, #216]	; (8000e30 <ProcessJoystick+0x100>)
 8000d58:	f7ff ffda 	bl	8000d10 <LL_GPIO_ResetOutputPin>
 8000d5c:	e003      	b.n	8000d66 <ProcessJoystick+0x36>
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	4833      	ldr	r0, [pc, #204]	; (8000e30 <ProcessJoystick+0x100>)
 8000d62:	f7ff ffc7 	bl	8000cf4 <LL_GPIO_SetOutputPin>
			if ((joymap->gamepad_data >> 1 & 0x1)) LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10); else LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_10); //LEFT - PC10
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	085b      	lsrs	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d005      	beq.n	8000d82 <ProcessJoystick+0x52>
 8000d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7a:	482d      	ldr	r0, [pc, #180]	; (8000e30 <ProcessJoystick+0x100>)
 8000d7c:	f7ff ffc8 	bl	8000d10 <LL_GPIO_ResetOutputPin>
 8000d80:	e004      	b.n	8000d8c <ProcessJoystick+0x5c>
 8000d82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d86:	482a      	ldr	r0, [pc, #168]	; (8000e30 <ProcessJoystick+0x100>)
 8000d88:	f7ff ffb4 	bl	8000cf4 <LL_GPIO_SetOutputPin>
			if ((joymap->gamepad_data >> 2 & 0x1)) LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_11); else LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_11); //BACK - PC11
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d005      	beq.n	8000da8 <ProcessJoystick+0x78>
 8000d9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da0:	4823      	ldr	r0, [pc, #140]	; (8000e30 <ProcessJoystick+0x100>)
 8000da2:	f7ff ffb5 	bl	8000d10 <LL_GPIO_ResetOutputPin>
 8000da6:	e004      	b.n	8000db2 <ProcessJoystick+0x82>
 8000da8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dac:	4820      	ldr	r0, [pc, #128]	; (8000e30 <ProcessJoystick+0x100>)
 8000dae:	f7ff ffa1 	bl	8000cf4 <LL_GPIO_SetOutputPin>
			if ((joymap->gamepad_data >> 3 & 0x1)) LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13); else LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13); //FORWARD - PC13
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	08db      	lsrs	r3, r3, #3
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d005      	beq.n	8000dce <ProcessJoystick+0x9e>
 8000dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc6:	481a      	ldr	r0, [pc, #104]	; (8000e30 <ProcessJoystick+0x100>)
 8000dc8:	f7ff ffa2 	bl	8000d10 <LL_GPIO_ResetOutputPin>
 8000dcc:	e004      	b.n	8000dd8 <ProcessJoystick+0xa8>
 8000dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd2:	4817      	ldr	r0, [pc, #92]	; (8000e30 <ProcessJoystick+0x100>)
 8000dd4:	f7ff ff8e 	bl	8000cf4 <LL_GPIO_SetOutputPin>
			if ((joymap->gamepad_data >> 4 & 0x1)) LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_15); else LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_15); //TR1 - PC15
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	091b      	lsrs	r3, r3, #4
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <ProcessJoystick+0xc4>
 8000de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dec:	4810      	ldr	r0, [pc, #64]	; (8000e30 <ProcessJoystick+0x100>)
 8000dee:	f7ff ff8f 	bl	8000d10 <LL_GPIO_ResetOutputPin>
 8000df2:	e004      	b.n	8000dfe <ProcessJoystick+0xce>
 8000df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <ProcessJoystick+0x100>)
 8000dfa:	f7ff ff7b 	bl	8000cf4 <LL_GPIO_SetOutputPin>
			if ((joymap->gamepad_data >> 5 & 0x1)) LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_14); else LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_14); //TR2 - PC14
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d005      	beq.n	8000e1a <ProcessJoystick+0xea>
 8000e0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e12:	4807      	ldr	r0, [pc, #28]	; (8000e30 <ProcessJoystick+0x100>)
 8000e14:	f7ff ff7c 	bl	8000d10 <LL_GPIO_ResetOutputPin>
 8000e18:	e006      	b.n	8000e28 <ProcessJoystick+0xf8>
 8000e1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e1e:	4804      	ldr	r0, [pc, #16]	; (8000e30 <ProcessJoystick+0x100>)
 8000e20:	f7ff ff68 	bl	8000cf4 <LL_GPIO_SetOutputPin>
 8000e24:	e000      	b.n	8000e28 <ProcessJoystick+0xf8>
			if (joymap == NULL) return;
 8000e26:	bf00      	nop
}
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40020800 	.word	0x40020800

08000e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 8000e38:	f000 ffdf 	bl	8001dfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3c:	f000 f814 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e40:	f7ff fd0a 	bl	8000858 <MX_GPIO_Init>
  MX_UART5_Init();
 8000e44:	f000 fc02 	bl	800164c <MX_UART5_Init>
  MX_USB_HOST_Init();
 8000e48:	f00c fd6e 	bl	800d928 <MX_USB_HOST_Init>
  MX_DAC_Init();
 8000e4c:	f7ff fb64 	bl	8000518 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  InitMSXKeyboard();
 8000e50:	f000 f904 	bl	800105c <InitMSXKeyboard>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e54:	f00c fdce 	bl	800d9f4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
     ProcessMSXKeyboard();
 8000e58:	f000 f958 	bl	800110c <ProcessMSXKeyboard>
     ProcessJoystick();
 8000e5c:	f7ff ff68 	bl	8000d30 <ProcessJoystick>

     SetLEDs();
 8000e60:	f000 ff70 	bl	8001d44 <SetLEDs>
    MX_USB_HOST_Process();
 8000e64:	e7f6      	b.n	8000e54 <main+0x20>
	...

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b094      	sub	sp, #80	; 0x50
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0320 	add.w	r3, r7, #32
 8000e72:	2230      	movs	r2, #48	; 0x30
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f00d f99c 	bl	800e1b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8c:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <SystemClock_Config+0xd8>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	4a2b      	ldr	r2, [pc, #172]	; (8000f40 <SystemClock_Config+0xd8>)
 8000e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e96:	6413      	str	r3, [r2, #64]	; 0x40
 8000e98:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <SystemClock_Config+0xd8>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <SystemClock_Config+0xdc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a26      	ldr	r2, [pc, #152]	; (8000f44 <SystemClock_Config+0xdc>)
 8000eaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <SystemClock_Config+0xdc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ed0:	2319      	movs	r3, #25
 8000ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000ed4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000ed8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eda:	2302      	movs	r3, #2
 8000edc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ede:	2309      	movs	r3, #9
 8000ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f003 fada 	bl	80044a0 <HAL_RCC_OscConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ef2:	f000 f83b 	bl	8000f6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ef6:	f003 fa83 	bl	8004400 <HAL_PWREx_EnableOverDrive>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f00:	f000 f834 	bl	8000f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f04:	230f      	movs	r3, #15
 8000f06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2107      	movs	r1, #7
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 fd62 	bl	80049ec <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f2e:	f000 f81d 	bl	8000f6c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000f32:	f003 fe47 	bl	8004bc4 <HAL_RCC_EnableCSS>
}
 8000f36:	bf00      	nop
 8000f38:	3750      	adds	r7, #80	; 0x50
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40007000 	.word	0x40007000

08000f48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f5a:	f000 ff5b 	bl	8001e14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40002000 	.word	0x40002000

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <Error_Handler+0x8>

08000f76 <LL_GPIO_ReadInputPort>:
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <LL_GPIO_WriteOutputPort>:
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, PortValue);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	615a      	str	r2, [r3, #20]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <LL_GPIO_ReadOutputPort>:
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_22
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	bf0c      	ite	eq
 8000fda:	2301      	moveq	r3, #1
 8000fdc:	2300      	movne	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	40013c00 	.word	0x40013c00

08000ff0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_22
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6153      	str	r3, [r2, #20]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40013c00 	.word	0x40013c00

08001010 <USB_Keyboard_LED>:

static uint8_t PreviousCapsLockStatus = 1;
static keyboard_led_t LEDStatus = 0;


void USB_Keyboard_LED(keyboard_led_t ld) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af02      	add	r7, sp, #8
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	keyboard_led_t led = ld;
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	72bb      	strb	r3, [r7, #10]
	USBH_StatusTypeDef status;
	int retrygood = 1;
 800101e:	2301      	movs	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
		for (;;) {
			status = USBH_HID_SetReport(&hUsbHostFS, 0x02, 0x00, &led, 1);
 8001022:	f107 030a 	add.w	r3, r7, #10
 8001026:	2201      	movs	r2, #1
 8001028:	9200      	str	r2, [sp, #0]
 800102a:	2200      	movs	r2, #0
 800102c:	2102      	movs	r1, #2
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <USB_Keyboard_LED+0x48>)
 8001030:	f007 fca3 	bl	800897a <USBH_HID_SetReport>
 8001034:	4603      	mov	r3, r0
 8001036:	72fb      	strb	r3, [r7, #11]
			if (status == USBH_OK)
 8001038:	7afb      	ldrb	r3, [r7, #11]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <USB_Keyboard_LED+0x34>
				retrygood--;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3b01      	subs	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
			if (retrygood <= 0)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dd00      	ble.n	800104c <USB_Keyboard_LED+0x3c>
			status = USBH_HID_SetReport(&hUsbHostFS, 0x02, 0x00, &led, 1);
 800104a:	e7ea      	b.n	8001022 <USB_Keyboard_LED+0x12>
				break;
 800104c:	bf00      	nop
		}
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000058c 	.word	0x2000058c

0800105c <InitMSXKeyboard>:



void InitMSXKeyboard()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

	//Reset matrix state etc
	memset(&MSX_Matrix_data, 0, sizeof(MSX_Matrix_data));
 8001060:	2230      	movs	r2, #48	; 0x30
 8001062:	2100      	movs	r1, #0
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <InitMSXKeyboard+0x1c>)
 8001066:	f00d f8a5 	bl	800e1b4 <memset>
	memset(&MSX_Matrix_temp, 0, sizeof(MSX_Matrix_data));
 800106a:	2230      	movs	r2, #48	; 0x30
 800106c:	2100      	movs	r1, #0
 800106e:	4803      	ldr	r0, [pc, #12]	; (800107c <InitMSXKeyboard+0x20>)
 8001070:	f00d f8a0 	bl	800e1b4 <memset>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000140 	.word	0x20000140
 800107c:	20000170 	.word	0x20000170

08001080 <ProcessMSXKey>:

void ProcessMSXKey(uint8_t usbkey)
{
 8001080:	b490      	push	{r4, r7}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx=0; idx < MSX_KEYS_SIZE; idx++)
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	e02f      	b.n	80010f0 <ProcessMSXKey+0x70>
	{
		if (msxkeymap[idx][0]==usbkey)
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	491c      	ldr	r1, [pc, #112]	; (8001104 <ProcessMSXKey+0x84>)
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	440b      	add	r3, r1
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d122      	bne.n	80010ea <ProcessMSXKey+0x6a>
		{
			MSX_Matrix_temp[msxkeymap[idx][1]] |= msxkeymap[idx][2];
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	4917      	ldr	r1, [pc, #92]	; (8001104 <ProcessMSXKey+0x84>)
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	3301      	adds	r3, #1
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <ProcessMSXKey+0x88>)
 80010b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	4811      	ldr	r0, [pc, #68]	; (8001104 <ProcessMSXKey+0x84>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	4403      	add	r3, r0
 80010c8:	3302      	adds	r3, #2
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461c      	mov	r4, r3
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <ProcessMSXKey+0x84>)
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	4403      	add	r3, r0
 80010da:	3301      	adds	r3, #1
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	ea41 0304 	orr.w	r3, r1, r4
 80010e4:	4a08      	ldr	r2, [pc, #32]	; (8001108 <ProcessMSXKey+0x88>)
 80010e6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	for (uint8_t idx=0; idx < MSX_KEYS_SIZE; idx++)
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	3301      	adds	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	2b5d      	cmp	r3, #93	; 0x5d
 80010f4:	d9cc      	bls.n	8001090 <ProcessMSXKey+0x10>
		}
	}

}
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc90      	pop	{r4, r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	0800e374 	.word	0x0800e374
 8001108:	20000170 	.word	0x20000170

0800110c <ProcessMSXKeyboard>:

void ProcessMSXKeyboard(){
 800110c:	b5b0      	push	{r4, r5, r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0

	HID_KEYBD_Info_TypeDef *kb_data = (HID_KEYBD_Info_TypeDef *)USBH_Get_Device_Data(HUB_KEYBOARD);
 8001112:	2001      	movs	r0, #1
 8001114:	f000 fb72 	bl	80017fc <USBH_Get_Device_Data>
 8001118:	6078      	str	r0, [r7, #4]


	//keyboard hasn't return any data, so there was no change in state.
	if (kb_data==NULL) return;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 8093 	beq.w	8001248 <ProcessMSXKeyboard+0x13c>

	//reset temp array to zero
	memset(&MSX_Matrix_temp, 0, sizeof(MSX_Matrix_temp));
 8001122:	2230      	movs	r2, #48	; 0x30
 8001124:	2100      	movs	r1, #0
 8001126:	484a      	ldr	r0, [pc, #296]	; (8001250 <ProcessMSXKeyboard+0x144>)
 8001128:	f00d f844 	bl	800e1b4 <memset>

	//process special keys
	if (kb_data->lctrl)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	785b      	ldrb	r3, [r3, #1]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <ProcessMSXKeyboard+0x34>
	{
		//{KEY_LEFTCONTROL,								KB_ROW_6,		B_BIT_1},
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_1;
 8001134:	4b46      	ldr	r3, [pc, #280]	; (8001250 <ProcessMSXKeyboard+0x144>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	4a44      	ldr	r2, [pc, #272]	; (8001250 <ProcessMSXKeyboard+0x144>)
 800113e:	6193      	str	r3, [r2, #24]
	}

	if (kb_data->rctrl)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	795b      	ldrb	r3, [r3, #5]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <ProcessMSXKeyboard+0x48>
	{
		//{KEY_LEFTCONTROL,								KB_ROW_6,		B_BIT_1},
		MSX_Matrix_temp[KB_ROW_2] |=KB_BIT_5;
 8001148:	4b41      	ldr	r3, [pc, #260]	; (8001250 <ProcessMSXKeyboard+0x144>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f043 0320 	orr.w	r3, r3, #32
 8001150:	4a3f      	ldr	r2, [pc, #252]	; (8001250 <ProcessMSXKeyboard+0x144>)
 8001152:	6093      	str	r3, [r2, #8]
	}

	if (kb_data->lshift|| kb_data->rshift)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	789b      	ldrb	r3, [r3, #2]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d103      	bne.n	8001164 <ProcessMSXKeyboard+0x58>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	799b      	ldrb	r3, [r3, #6]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <ProcessMSXKeyboard+0x64>
	{
		//{KEY_LEFTSHIFT,							KB_ROW_6,		KB_BIT_0},
		//{KEY_RIGHTSHIFT,					KB_ROW_6,		KB_BIT_0},
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_0;
 8001164:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <ProcessMSXKeyboard+0x144>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	4a38      	ldr	r2, [pc, #224]	; (8001250 <ProcessMSXKeyboard+0x144>)
 800116e:	6193      	str	r3, [r2, #24]
	}

	//{KEY_LEFTALT,						KB_ROW_6,		KB_BIT_4},
	//
	if (kb_data->ralt)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	79db      	ldrb	r3, [r3, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <ProcessMSXKeyboard+0x78>
	{
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_4;
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <ProcessMSXKeyboard+0x144>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	4a33      	ldr	r2, [pc, #204]	; (8001250 <ProcessMSXKeyboard+0x144>)
 8001182:	6193      	str	r3, [r2, #24]
	}

	if (kb_data->lalt)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	78db      	ldrb	r3, [r3, #3]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <ProcessMSXKeyboard+0x8c>
	{
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_2;
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <ProcessMSXKeyboard+0x144>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	4a2e      	ldr	r2, [pc, #184]	; (8001250 <ProcessMSXKeyboard+0x144>)
 8001196:	6193      	str	r3, [r2, #24]
	}

	//Interate over all keys - max 6 pressed keys at once
	for (int i = 0; i < 6; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	e011      	b.n	80011c2 <ProcessMSXKeyboard+0xb6>
	{
		if(kb_data->keys[i]!=0x00) ProcessMSXKey(kb_data->keys[i]);
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	3309      	adds	r3, #9
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <ProcessMSXKeyboard+0xb0>
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4413      	add	r3, r2
 80011b2:	3309      	adds	r3, #9
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff62 	bl	8001080 <ProcessMSXKey>
	for (int i = 0; i < 6; i++)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3301      	adds	r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	ddea      	ble.n	800119e <ProcessMSXKeyboard+0x92>
	}

	memcpy(MSX_Matrix_data,MSX_Matrix_temp,sizeof(MSX_Matrix_data));
 80011c8:	4a22      	ldr	r2, [pc, #136]	; (8001254 <ProcessMSXKeyboard+0x148>)
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <ProcessMSXKeyboard+0x144>)
 80011cc:	4614      	mov	r4, r2
 80011ce:	461d      	mov	r5, r3
 80011d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	//handle capslock

	for (int i = 0; i < 6; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	e02c      	b.n	8001240 <ProcessMSXKeyboard+0x134>
	{
		//CAPSLOCK	pressed
		if(kb_data->keys[i]==0x39)
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4413      	add	r3, r2
 80011ec:	3309      	adds	r3, #9
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b39      	cmp	r3, #57	; 0x39
 80011f2:	d122      	bne.n	800123a <ProcessMSXKeyboard+0x12e>
		{
			//check previous capslock status
			if (PreviousCapsLockStatus == 0)
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <ProcessMSXKeyboard+0x14c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10f      	bne.n	800121c <ProcessMSXKeyboard+0x110>
			{
				LEDStatus |= CAPS_LOCK_LED;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <ProcessMSXKeyboard+0x150>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <ProcessMSXKeyboard+0x150>)
 8001208:	701a      	strb	r2, [r3, #0]

				USB_Keyboard_LED(LEDStatus);
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <ProcessMSXKeyboard+0x150>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fefe 	bl	8001010 <USB_Keyboard_LED>
				PreviousCapsLockStatus = 1;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <ProcessMSXKeyboard+0x14c>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
 800121a:	e00e      	b.n	800123a <ProcessMSXKeyboard+0x12e>
			}

		//capslock not pressed
			else
			{
					LEDStatus &= ~CAPS_LOCK_LED;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <ProcessMSXKeyboard+0x150>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	f023 0302 	bic.w	r3, r3, #2
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <ProcessMSXKeyboard+0x150>)
 8001228:	701a      	strb	r2, [r3, #0]
					USB_Keyboard_LED(LEDStatus);
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <ProcessMSXKeyboard+0x150>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff feee 	bl	8001010 <USB_Keyboard_LED>
					PreviousCapsLockStatus = 0;
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <ProcessMSXKeyboard+0x14c>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; i++)
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	3301      	adds	r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	2b05      	cmp	r3, #5
 8001244:	ddcf      	ble.n	80011e6 <ProcessMSXKeyboard+0xda>
 8001246:	e000      	b.n	800124a <ProcessMSXKeyboard+0x13e>
	if (kb_data==NULL) return;
 8001248:	bf00      	nop
			}
		}
	}


}
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bdb0      	pop	{r4, r5, r7, pc}
 8001250:	20000170 	.word	0x20000170
 8001254:	20000140 	.word	0x20000140
 8001258:	20000000 	.word	0x20000000
 800125c:	2000010c 	.word	0x2000010c

08001260 <ProcessIRQ>:

void ProcessIRQ()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	uint8_t row = LL_GPIO_ReadInputPort(GPIOA)&0xF;
 8001266:	4813      	ldr	r0, [pc, #76]	; (80012b4 <ProcessIRQ+0x54>)
 8001268:	f7ff fe85 	bl	8000f76 <LL_GPIO_ReadInputPort>
 800126c:	4603      	mov	r3, r0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	71fb      	strb	r3, [r7, #7]
	uint16_t value = ~MSX_Matrix_data[row] & 0x00FF;
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <ProcessIRQ+0x58>)
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127e:	b29b      	uxth	r3, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	b29b      	uxth	r3, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	80bb      	strh	r3, [r7, #4]
	uint16_t PortValue = LL_GPIO_ReadOutputPort(GPIOB)& 0xFF00;
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <ProcessIRQ+0x5c>)
 800128a:	f7ff fe8e 	bl	8000faa <LL_GPIO_ReadOutputPort>
 800128e:	4603      	mov	r3, r0
 8001290:	b29b      	uxth	r3, r3
 8001292:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001296:	807b      	strh	r3, [r7, #2]
	value = value | PortValue;
 8001298:	88ba      	ldrh	r2, [r7, #4]
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	4313      	orrs	r3, r2
 800129e:	80bb      	strh	r3, [r7, #4]
	LL_GPIO_WriteOutputPort(GPIOB, value);
 80012a0:	88bb      	ldrh	r3, [r7, #4]
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <ProcessIRQ+0x5c>)
 80012a6:	f7ff fe72 	bl	8000f8e <LL_GPIO_WriteOutputPort>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40020000 	.word	0x40020000
 80012b8:	20000140 	.word	0x20000140
 80012bc:	40020400 	.word	0x40020400

080012c0 <EXTI0_IRQHandler>:

//System IRQ handler. It reset flag and executes ProcessIRQ
void EXTI0_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fe7d 	bl	8000fc4 <LL_EXTI_IsActiveFlag_0_31>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d004      	beq.n	80012da <EXTI0_IRQHandler+0x1a>
  {
    ProcessIRQ();
 80012d0:	f7ff ffc6 	bl	8001260 <ProcessIRQ>
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff fe8b 	bl	8000ff0 <LL_EXTI_ClearFlag_0_31>
  }

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_MspInit+0xc8>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <HAL_MspInit+0xc8>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <HAL_MspInit+0xc8>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <HAL_MspInit+0xc8>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a29      	ldr	r2, [pc, #164]	; (80013a8 <HAL_MspInit+0xc8>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <HAL_MspInit+0xc8>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2101      	movs	r1, #1
 800131a:	f06f 000b 	mvn.w	r0, #11
 800131e:	f000 fe75 	bl	800200c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2101      	movs	r1, #1
 8001326:	f06f 000a 	mvn.w	r0, #10
 800132a:	f000 fe6f 	bl	800200c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2101      	movs	r1, #1
 8001332:	f06f 0009 	mvn.w	r0, #9
 8001336:	f000 fe69 	bl	800200c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2101      	movs	r1, #1
 800133e:	f06f 0004 	mvn.w	r0, #4
 8001342:	f000 fe63 	bl	800200c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2101      	movs	r1, #1
 800134a:	f06f 0003 	mvn.w	r0, #3
 800134e:	f000 fe5d 	bl	800200c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2101      	movs	r1, #1
 8001356:	f06f 0001 	mvn.w	r0, #1
 800135a:	f000 fe57 	bl	800200c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2001      	movs	r0, #1
 8001364:	f000 fe52 	bl	800200c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001368:	2001      	movs	r0, #1
 800136a:	f000 fe6b 	bl	8002044 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	2004      	movs	r0, #4
 8001374:	f000 fe4a 	bl	800200c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001378:	2004      	movs	r0, #4
 800137a:	f000 fe63 	bl	8002044 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2005      	movs	r0, #5
 8001384:	f000 fe42 	bl	800200c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001388:	2005      	movs	r0, #5
 800138a:	f000 fe5b 	bl	8002044 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	2051      	movs	r0, #81	; 0x51
 8001394:	f000 fe3a 	bl	800200c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001398:	2051      	movs	r0, #81	; 0x51
 800139a:	f000 fe53 	bl	8002044 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800

080013ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	; 0x38
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80013bc:	4b33      	ldr	r3, [pc, #204]	; (800148c <HAL_InitTick+0xe0>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	4a32      	ldr	r2, [pc, #200]	; (800148c <HAL_InitTick+0xe0>)
 80013c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c6:	6413      	str	r3, [r2, #64]	; 0x40
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <HAL_InitTick+0xe0>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013d4:	f107 0210 	add.w	r2, r7, #16
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fcea 	bl	8004db8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d103      	bne.n	80013f6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013ee:	f003 fcbb 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 80013f2:	6378      	str	r0, [r7, #52]	; 0x34
 80013f4:	e004      	b.n	8001400 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013f6:	f003 fcb7 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 80013fa:	4603      	mov	r3, r0
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001402:	4a23      	ldr	r2, [pc, #140]	; (8001490 <HAL_InitTick+0xe4>)
 8001404:	fba2 2303 	umull	r2, r3, r2, r3
 8001408:	0c9b      	lsrs	r3, r3, #18
 800140a:	3b01      	subs	r3, #1
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <HAL_InitTick+0xe8>)
 8001410:	4a21      	ldr	r2, [pc, #132]	; (8001498 <HAL_InitTick+0xec>)
 8001412:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <HAL_InitTick+0xe8>)
 8001416:	f240 32e7 	movw	r2, #999	; 0x3e7
 800141a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_InitTick+0xe8>)
 800141e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001420:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <HAL_InitTick+0xe8>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <HAL_InitTick+0xe8>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <HAL_InitTick+0xe8>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001434:	4817      	ldr	r0, [pc, #92]	; (8001494 <HAL_InitTick+0xe8>)
 8001436:	f004 f857 	bl	80054e8 <HAL_TIM_Base_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001440:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001444:	2b00      	cmp	r3, #0
 8001446:	d11b      	bne.n	8001480 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001448:	4812      	ldr	r0, [pc, #72]	; (8001494 <HAL_InitTick+0xe8>)
 800144a:	f004 f8af 	bl	80055ac <HAL_TIM_Base_Start_IT>
 800144e:	4603      	mov	r3, r0
 8001450:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001454:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001458:	2b00      	cmp	r3, #0
 800145a:	d111      	bne.n	8001480 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800145c:	202d      	movs	r0, #45	; 0x2d
 800145e:	f000 fdf1 	bl	8002044 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d808      	bhi.n	800147a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	202d      	movs	r0, #45	; 0x2d
 800146e:	f000 fdcd 	bl	800200c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_InitTick+0xf0>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e002      	b.n	8001480 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001480:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001484:	4618      	mov	r0, r3
 8001486:	3738      	adds	r7, #56	; 0x38
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	431bde83 	.word	0x431bde83
 8001494:	200001a0 	.word	0x200001a0
 8001498:	40002000 	.word	0x40002000
 800149c:	20000008 	.word	0x20000008

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80014a4:	f003 fcba 	bl	8004e1c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <NMI_Handler+0x8>

080014aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <MemManage_Handler+0x4>

080014b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80014fe:	f002 ff65 	bl	80043cc <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}

08001506 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800150a:	f000 ff1b 	bl	8002344 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}

08001512 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001526:	f004 f8b9 	bl	800569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200001a0 	.word	0x200001a0

08001534 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <UART5_IRQHandler+0x10>)
 800153a:	f004 fb03 	bl	8005b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200001ec 	.word	0x200001ec

08001548 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <TIM6_DAC_IRQHandler+0x10>)
 800154e:	f000 fda9 	bl	80020a4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000128 	.word	0x20000128

0800155c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <OTG_FS_IRQHandler+0x10>)
 8001562:	f001 fc63 	bl	8002e2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20001048 	.word	0x20001048

08001570 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8001576:	f001 fc59 	bl	8002e2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000d44 	.word	0x20000d44

08001584 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 800158a:	f001 fc4f 	bl	8002e2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000d44 	.word	0x20000d44

08001598 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <OTG_HS_IRQHandler+0x10>)
 800159e:	f001 fc45 	bl	8002e2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000d44 	.word	0x20000d44

080015ac <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <_sbrk+0x5c>)
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <_sbrk+0x60>)
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <_sbrk+0x64>)
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <_sbrk+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d207      	bcs.n	80015fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ec:	f00c fda8 	bl	800e140 <__errno>
 80015f0:	4603      	mov	r3, r0
 80015f2:	220c      	movs	r2, #12
 80015f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	e009      	b.n	8001610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <_sbrk+0x64>)
 800160c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20040000 	.word	0x20040000
 800161c:	00002000 	.word	0x00002000
 8001620:	20000110 	.word	0x20000110
 8001624:	20001360 	.word	0x20001360

08001628 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <SystemInit+0x20>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <SystemInit+0x20>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_UART5_Init+0x58>)
 8001652:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <MX_UART5_Init+0x5c>)
 8001654:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <MX_UART5_Init+0x58>)
 8001658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800165c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_UART5_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_UART5_Init+0x58>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_UART5_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_UART5_Init+0x58>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <MX_UART5_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_UART5_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <MX_UART5_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_UART5_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_UART5_Init+0x58>)
 8001690:	f004 fa0a 	bl	8005aa8 <HAL_UART_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800169a:	f7ff fc67 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200001ec 	.word	0x200001ec
 80016a8:	40005000 	.word	0x40005000

080016ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b0aa      	sub	sp, #168	; 0xa8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2280      	movs	r2, #128	; 0x80
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00c fd71 	bl	800e1b4 <memset>
  if(uartHandle->Instance==UART5)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a36      	ldr	r2, [pc, #216]	; (80017b0 <HAL_UART_MspInit+0x104>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d165      	bne.n	80017a8 <HAL_UART_MspInit+0xfc>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80016dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 fbb2 	bl	8004e54 <HAL_RCCEx_PeriphCLKConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016f6:	f7ff fc39 	bl	8000f6c <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <HAL_UART_MspInit+0x108>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a2d      	ldr	r2, [pc, #180]	; (80017b4 <HAL_UART_MspInit+0x108>)
 8001700:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <HAL_UART_MspInit+0x108>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <HAL_UART_MspInit+0x108>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a27      	ldr	r2, [pc, #156]	; (80017b4 <HAL_UART_MspInit+0x108>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <HAL_UART_MspInit+0x108>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_UART_MspInit+0x108>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <HAL_UART_MspInit+0x108>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <HAL_UART_MspInit+0x108>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800175c:	2308      	movs	r3, #8
 800175e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001762:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001766:	4619      	mov	r1, r3
 8001768:	4813      	ldr	r0, [pc, #76]	; (80017b8 <HAL_UART_MspInit+0x10c>)
 800176a:	f000 ff59 	bl	8002620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800176e:	2304      	movs	r3, #4
 8001770:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001786:	2308      	movs	r3, #8
 8001788:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001790:	4619      	mov	r1, r3
 8001792:	480a      	ldr	r0, [pc, #40]	; (80017bc <HAL_UART_MspInit+0x110>)
 8001794:	f000 ff44 	bl	8002620 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	2035      	movs	r0, #53	; 0x35
 800179e:	f000 fc35 	bl	800200c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80017a2:	2035      	movs	r0, #53	; 0x35
 80017a4:	f000 fc4e 	bl	8002044 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80017a8:	bf00      	nop
 80017aa:	37a8      	adds	r7, #168	; 0xa8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40005000 	.word	0x40005000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020800 	.word	0x40020800
 80017bc:	40020c00 	.word	0x40020c00

080017c0 <LL_GPIO_SetOutputPin>:
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	619a      	str	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_GPIO_ResetOutputPin>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	041a      	lsls	r2, r3, #16
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	619a      	str	r2, [r3, #24]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <USBH_Get_Device_Data>:
#include "utils.h"
#include "usbh_hub.h"

uint8_t *USBH_Get_Device_Data(HUB_DEVICETypeDef deviceType)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
	USBH_HandleTypeDef *phost = &hUsbHostFS;
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <USBH_Get_Device_Data+0x68>)
 8001808:	613b      	str	r3, [r7, #16]
	USBH_HandleTypeDef *phostHS = &hUsbHostHS;
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <USBH_Get_Device_Data+0x6c>)
 800180c:	60fb      	str	r3, [r7, #12]

	uint8_t *pnt = NULL;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]

	if(phost->gState == HOST_CLASS)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b0b      	cmp	r3, #11
 800181a:	d10c      	bne.n	8001836 <USBH_Get_Device_Data+0x3a>
	{
		pnt = USBH_Get_Device_Data_Host(phost,deviceType,Appli_stateFS);
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <USBH_Get_Device_Data+0x70>)
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4619      	mov	r1, r3
 8001824:	6938      	ldr	r0, [r7, #16]
 8001826:	f000 f825 	bl	8001874 <USBH_Get_Device_Data_Host>
 800182a:	6178      	str	r0, [r7, #20]
		if (pnt!=NULL) return pnt;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <USBH_Get_Device_Data+0x3a>
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	e012      	b.n	800185c <USBH_Get_Device_Data+0x60>
	}

	if(phostHS->gState == HOST_CLASS)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b0b      	cmp	r3, #11
 800183e:	d10c      	bne.n	800185a <USBH_Get_Device_Data+0x5e>
	{
		pnt = USBH_Get_Device_Data_Host(phostHS,deviceType,Appli_state);
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <USBH_Get_Device_Data+0x74>)
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4619      	mov	r1, r3
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 f813 	bl	8001874 <USBH_Get_Device_Data_Host>
 800184e:	6178      	str	r0, [r7, #20]
		if (pnt!=NULL) return pnt;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <USBH_Get_Device_Data+0x5e>
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	e000      	b.n	800185c <USBH_Get_Device_Data+0x60>
	}

	return pnt;
 800185a:	697b      	ldr	r3, [r7, #20]

}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	2000058c 	.word	0x2000058c
 8001868:	20000968 	.word	0x20000968
 800186c:	2000011d 	.word	0x2000011d
 8001870:	2000011c 	.word	0x2000011c

08001874 <USBH_Get_Device_Data_Host>:


uint8_t *USBH_Get_Device_Data_Host(USBH_HandleTypeDef *phost,HUB_DEVICETypeDef deviceType, ApplicationTypeDef Application_state)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
 8001880:	4613      	mov	r3, r2
 8001882:	70bb      	strb	r3, [r7, #2]

  //handle device when connected to Hub
  if (phost->device.DevDesc.bDeviceClass == 9 && Application_state == APPLICATION_READY)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
 800188a:	2b09      	cmp	r3, #9
 800188c:	d171      	bne.n	8001972 <USBH_Get_Device_Data_Host+0xfe>
 800188e:	78bb      	ldrb	r3, [r7, #2]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d16e      	bne.n	8001972 <USBH_Get_Device_Data_Host+0xfe>
  {
    HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	613b      	str	r3, [r7, #16]

    for (int port = 0; port <4; port++)
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	e062      	b.n	800196a <USBH_Get_Device_Data_Host+0xf6>
    {
      for (int interface = 0; interface <2; interface ++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	e059      	b.n	800195e <USBH_Get_Device_Data_Host+0xea>
      {
        if (HUB_Handle->Port[port].Interface[interface].DeviceType == deviceType)
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	69b9      	ldr	r1, [r7, #24]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	206c      	movs	r0, #108	; 0x6c
 80018b2:	fb00 f101 	mul.w	r1, r0, r1
 80018b6:	f44f 7071 	mov.w	r0, #964	; 0x3c4
 80018ba:	fb00 f303 	mul.w	r3, r0, r3
 80018be:	440b      	add	r3, r1
 80018c0:	4413      	add	r3, r2
 80018c2:	f203 230d 	addw	r3, r3, #525	; 0x20d
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d144      	bne.n	8001958 <USBH_Get_Device_Data_Host+0xe4>
        {
            if (deviceType == HUB_KEYBOARD) return (uint8_t *)USBH_HUB_GetKeybdInfo(&HUB_Handle->Port[port].Interface[interface]);
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d113      	bne.n	80018fc <USBH_Get_Device_Data_Host+0x88>
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	226c      	movs	r2, #108	; 0x6c
 80018d8:	fb02 f203 	mul.w	r2, r2, r3
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4413      	add	r3, r2
 80018f0:	3304      	adds	r3, #4
 80018f2:	4618      	mov	r0, r3
 80018f4:	f009 fa72 	bl	800addc <USBH_HUB_GetKeybdInfo>
 80018f8:	4603      	mov	r3, r0
 80018fa:	e07f      	b.n	80019fc <USBH_Get_Device_Data_Host+0x188>
            if (deviceType == HUB_MOUSE)    return (uint8_t *)USBH_HUB_GetMouseInfo(&HUB_Handle->Port[port].Interface[interface]);
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d113      	bne.n	800192a <USBH_Get_Device_Data_Host+0xb6>
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	226c      	movs	r2, #108	; 0x6c
 8001906:	fb02 f203 	mul.w	r2, r2, r3
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8001910:	fb01 f303 	mul.w	r3, r1, r3
 8001914:	4413      	add	r3, r2
 8001916:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4413      	add	r3, r2
 800191e:	3304      	adds	r3, #4
 8001920:	4618      	mov	r0, r3
 8001922:	f009 fb5b 	bl	800afdc <USBH_HUB_GetMouseInfo>
 8001926:	4603      	mov	r3, r0
 8001928:	e068      	b.n	80019fc <USBH_Get_Device_Data_Host+0x188>
            if (deviceType == HUB_GAMEPAD)  return (uint8_t *)USBH_HUB_GetGamepadInfo(&HUB_Handle->Port[port].Interface[interface]);
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	2b03      	cmp	r3, #3
 800192e:	d113      	bne.n	8001958 <USBH_Get_Device_Data_Host+0xe4>
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	226c      	movs	r2, #108	; 0x6c
 8001934:	fb02 f203 	mul.w	r2, r2, r3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4413      	add	r3, r2
 8001944:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4413      	add	r3, r2
 800194c:	3304      	adds	r3, #4
 800194e:	4618      	mov	r0, r3
 8001950:	f008 ff40 	bl	800a7d4 <USBH_HUB_GetGamepadInfo>
 8001954:	4603      	mov	r3, r0
 8001956:	e051      	b.n	80019fc <USBH_Get_Device_Data_Host+0x188>
      for (int interface = 0; interface <2; interface ++)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	3301      	adds	r3, #1
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b01      	cmp	r3, #1
 8001962:	dda2      	ble.n	80018aa <USBH_Get_Device_Data_Host+0x36>
    for (int port = 0; port <4; port++)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	3301      	adds	r3, #1
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	2b03      	cmp	r3, #3
 800196e:	dd99      	ble.n	80018a4 <USBH_Get_Device_Data_Host+0x30>
  {
 8001970:	e043      	b.n	80019fa <USBH_Get_Device_Data_Host+0x186>


    }

  }
  else if (Application_state == APPLICATION_READY)
 8001972:	78bb      	ldrb	r3, [r7, #2]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d140      	bne.n	80019fa <USBH_Get_Device_Data_Host+0x186>
  {
      for (int interface = 0; interface <2; interface ++)
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e03a      	b.n	80019f4 <USBH_Get_Device_Data_Host+0x180>
      {
        HID_HandleTypeDef *HID_Handle  = (HID_HandleTypeDef *) phost->pActiveClass->pData[interface];
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	3208      	adds	r2, #8
 8001988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198c:	60fb      	str	r3, [r7, #12]
        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d107      	bne.n	80019ae <USBH_Get_Device_Data_Host+0x13a>
        {
          if (deviceType == HUB_KEYBOARD)
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d104      	bne.n	80019ae <USBH_Get_Device_Data_Host+0x13a>
          {
            return (uint8_t *)USBH_HID_GetKeybdInfo(phost);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f007 fc71 	bl	800928c <USBH_HID_GetKeybdInfo>
 80019aa:	4603      	mov	r3, r0
 80019ac:	e026      	b.n	80019fc <USBH_Get_Device_Data_Host+0x188>
          }

        }

        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <USBH_Get_Device_Data_Host+0x15a>
        {
          if (deviceType == HUB_MOUSE)
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d104      	bne.n	80019ce <USBH_Get_Device_Data_Host+0x15a>
          {
            return (uint8_t *)USBH_HID_GetMouseInfo(phost);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f007 fe07 	bl	80095d8 <USBH_HID_GetMouseInfo>
 80019ca:	4603      	mov	r3, r0
 80019cc:	e016      	b.n	80019fc <USBH_Get_Device_Data_Host+0x188>
          }

        }

        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_JOYSTICK)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d107      	bne.n	80019ee <USBH_Get_Device_Data_Host+0x17a>
        {

          if (deviceType == HUB_GAMEPAD)
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d104      	bne.n	80019ee <USBH_Get_Device_Data_Host+0x17a>
          {
            return (uint8_t *)USBH_HID_GetGamepadInfo(phost);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f007 f951 	bl	8008c8c <USBH_HID_GetGamepadInfo>
 80019ea:	4603      	mov	r3, r0
 80019ec:	e006      	b.n	80019fc <USBH_Get_Device_Data_Host+0x188>
      for (int interface = 0; interface <2; interface ++)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	ddc1      	ble.n	800197e <USBH_Get_Device_Data_Host+0x10a>

      }

  }

return NULL;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3720      	adds	r7, #32
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <SetupJoystick>:



void SetupJoystick()
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0

	uint8_t JoystickFound = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]
	USBH_HandleTypeDef *phost = &hUsbHostFS;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <SetupJoystick+0x60>)
 8001a10:	60bb      	str	r3, [r7, #8]
	USBH_HandleTypeDef *phostHS = &hUsbHostHS;
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <SetupJoystick+0x64>)
 8001a14:	607b      	str	r3, [r7, #4]

	if(phost->gState == HOST_CLASS)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b0b      	cmp	r3, #11
 8001a1e:	d107      	bne.n	8001a30 <SetupJoystick+0x2c>
	{
		JoystickFound = SetupJoystick_Host(phost,Appli_stateFS);
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <SetupJoystick+0x68>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	68b8      	ldr	r0, [r7, #8]
 8001a28:	f000 f824 	bl	8001a74 <SetupJoystick_Host>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	73fb      	strb	r3, [r7, #15]
	}

	if(phostHS->gState == HOST_CLASS)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b0b      	cmp	r3, #11
 8001a38:	d107      	bne.n	8001a4a <SetupJoystick+0x46>
	{
		JoystickFound = SetupJoystick_Host(phostHS,Appli_state);
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <SetupJoystick+0x6c>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f817 	bl	8001a74 <SetupJoystick_Host>
 8001a46:	4603      	mov	r3, r0
 8001a48:	73fb      	strb	r3, [r7, #15]
	}

	if (JoystickFound == 1)
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d102      	bne.n	8001a56 <SetupJoystick+0x52>
	{
		SetPinsOn();
 8001a50:	f000 f874 	bl	8001b3c <SetPinsOn>
	else
	{
		SetPinsOff();
	}

}
 8001a54:	e001      	b.n	8001a5a <SetupJoystick+0x56>
		SetPinsOff();
 8001a56:	f000 f8f5 	bl	8001c44 <SetPinsOff>
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000058c 	.word	0x2000058c
 8001a68:	20000968 	.word	0x20000968
 8001a6c:	2000011d 	.word	0x2000011d
 8001a70:	2000011c 	.word	0x2000011c

08001a74 <SetupJoystick_Host>:



uint8_t SetupJoystick_Host(USBH_HandleTypeDef *phost,ApplicationTypeDef Application_state)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	70fb      	strb	r3, [r7, #3]
  uint8_t JoystickFound = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	74fb      	strb	r3, [r7, #19]
  //handle device when connected to Hub
  if (phost->device.DevDesc.bDeviceClass == 9 && Application_state == APPLICATION_READY)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
 8001a8a:	2b09      	cmp	r3, #9
 8001a8c:	d12f      	bne.n	8001aee <SetupJoystick_Host+0x7a>
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d12c      	bne.n	8001aee <SetupJoystick_Host+0x7a>
  {
    HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	60fb      	str	r3, [r7, #12]

    for (int port = 0; port <4; port++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e020      	b.n	8001ae6 <SetupJoystick_Host+0x72>
    {
      for (int interface = 0; interface <2; interface ++)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	e017      	b.n	8001ada <SetupJoystick_Host+0x66>
      {
        if (HUB_Handle->Port[port].Interface[interface].DeviceType == HUB_GAMEPAD)
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	69b9      	ldr	r1, [r7, #24]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	206c      	movs	r0, #108	; 0x6c
 8001ab2:	fb00 f101 	mul.w	r1, r0, r1
 8001ab6:	f44f 7071 	mov.w	r0, #964	; 0x3c4
 8001aba:	fb00 f303 	mul.w	r3, r0, r3
 8001abe:	440b      	add	r3, r1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d103      	bne.n	8001ad4 <SetupJoystick_Host+0x60>
        {
        	JoystickFound = 1;
 8001acc:	2301      	movs	r3, #1
 8001ace:	74fb      	strb	r3, [r7, #19]
            return JoystickFound;
 8001ad0:	7cfb      	ldrb	r3, [r7, #19]
 8001ad2:	e02d      	b.n	8001b30 <SetupJoystick_Host+0xbc>
      for (int interface = 0; interface <2; interface ++)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	dde4      	ble.n	8001aaa <SetupJoystick_Host+0x36>
    for (int port = 0; port <4; port++)
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	dddb      	ble.n	8001aa4 <SetupJoystick_Host+0x30>
  {
 8001aec:	e01f      	b.n	8001b2e <SetupJoystick_Host+0xba>


    }
    
  }
  else if (Application_state == APPLICATION_READY)
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d11c      	bne.n	8001b2e <SetupJoystick_Host+0xba>
  {
      for (int interface = 0; interface <2; interface ++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e016      	b.n	8001b28 <SetupJoystick_Host+0xb4>
      {
        HID_HandleTypeDef *HID_Handle  = (HID_HandleTypeDef *) phost->pActiveClass->pData[interface]; 
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	3208      	adds	r2, #8
 8001b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b08:	60bb      	str	r3, [r7, #8]


        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_JOYSTICK)
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d103      	bne.n	8001b22 <SetupJoystick_Host+0xae>
        {

            //TURN ON PINS and return
        	JoystickFound = 1;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	74fb      	strb	r3, [r7, #19]
            return JoystickFound;
 8001b1e:	7cfb      	ldrb	r3, [r7, #19]
 8001b20:	e006      	b.n	8001b30 <SetupJoystick_Host+0xbc>
      for (int interface = 0; interface <2; interface ++)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	dde5      	ble.n	8001afa <SetupJoystick_Host+0x86>
      }

  }

  //If we are here, no joystick detected change pins back to Input
  return JoystickFound;
 8001b2e:	7cfb      	ldrb	r3, [r7, #19]


}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3724      	adds	r7, #36	; 0x24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <SetPinsOn>:


void SetPinsOn()
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b42:	463b      	mov	r3, r7
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	615a      	str	r2, [r3, #20]
    /**/

  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_6);
 8001b52:	2140      	movs	r1, #64	; 0x40
 8001b54:	483a      	ldr	r0, [pc, #232]	; (8001c40 <SetPinsOn+0x104>)
 8001b56:	f7ff fe33 	bl	80017c0 <LL_GPIO_SetOutputPin>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6e:	463b      	mov	r3, r7
 8001b70:	4619      	mov	r1, r3
 8001b72:	4833      	ldr	r0, [pc, #204]	; (8001c40 <SetPinsOn+0x104>)
 8001b74:	f005 f99c 	bl	8006eb0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001b78:	2340      	movs	r3, #64	; 0x40
 8001b7a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	4619      	mov	r1, r3
 8001b90:	482b      	ldr	r0, [pc, #172]	; (8001c40 <SetPinsOn+0x104>)
 8001b92:	f005 f98d 	bl	8006eb0 <LL_GPIO_Init>


    /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b9a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bac:	463b      	mov	r3, r7
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4823      	ldr	r0, [pc, #140]	; (8001c40 <SetPinsOn+0x104>)
 8001bb2:	f005 f97d 	bl	8006eb0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001bb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bcc:	463b      	mov	r3, r7
 8001bce:	4619      	mov	r1, r3
 8001bd0:	481b      	ldr	r0, [pc, #108]	; (8001c40 <SetPinsOn+0x104>)
 8001bd2:	f005 f96d 	bl	8006eb0 <LL_GPIO_Init>
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8001bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bda:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bec:	463b      	mov	r3, r7
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4813      	ldr	r0, [pc, #76]	; (8001c40 <SetPinsOn+0x104>)
 8001bf2:	f005 f95d 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8001bf6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bfa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480b      	ldr	r0, [pc, #44]	; (8001c40 <SetPinsOn+0x104>)
 8001c12:	f005 f94d 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2c:	463b      	mov	r3, r7
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4803      	ldr	r0, [pc, #12]	; (8001c40 <SetPinsOn+0x104>)
 8001c32:	f005 f93d 	bl	8006eb0 <LL_GPIO_Init>


}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020800 	.word	0x40020800

08001c44 <SetPinsOff>:


void SetPinsOff()
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
	  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8001c4a:	2180      	movs	r1, #128	; 0x80
 8001c4c:	483c      	ldr	r0, [pc, #240]	; (8001d40 <SetPinsOff+0xfc>)
 8001c4e:	f7ff fdb7 	bl	80017c0 <LL_GPIO_SetOutputPin>
	  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_10);
 8001c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c56:	483a      	ldr	r0, [pc, #232]	; (8001d40 <SetPinsOff+0xfc>)
 8001c58:	f7ff fdb2 	bl	80017c0 <LL_GPIO_SetOutputPin>
	  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_11);
 8001c5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c60:	4837      	ldr	r0, [pc, #220]	; (8001d40 <SetPinsOff+0xfc>)
 8001c62:	f7ff fdad 	bl	80017c0 <LL_GPIO_SetOutputPin>
	  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8001c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6a:	4835      	ldr	r0, [pc, #212]	; (8001d40 <SetPinsOff+0xfc>)
 8001c6c:	f7ff fda8 	bl	80017c0 <LL_GPIO_SetOutputPin>
	  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_14);
 8001c70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c74:	4832      	ldr	r0, [pc, #200]	; (8001d40 <SetPinsOff+0xfc>)
 8001c76:	f7ff fda3 	bl	80017c0 <LL_GPIO_SetOutputPin>
	  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_15);
 8001c7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c7e:	4830      	ldr	r0, [pc, #192]	; (8001d40 <SetPinsOff+0xfc>)
 8001c80:	f7ff fd9e 	bl	80017c0 <LL_GPIO_SetOutputPin>

 //GPIOC->MODER = 0x0;

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	463b      	mov	r3, r7
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	615a      	str	r2, [r3, #20]
    /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4826      	ldr	r0, [pc, #152]	; (8001d40 <SetPinsOff+0xfc>)
 8001ca6:	f005 f903 	bl	8006eb0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001caa:	2340      	movs	r3, #64	; 0x40
 8001cac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4821      	ldr	r0, [pc, #132]	; (8001d40 <SetPinsOff+0xfc>)
 8001cbc:	f005 f8f8 	bl	8006eb0 <LL_GPIO_Init>

    /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cce:	463b      	mov	r3, r7
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	481b      	ldr	r0, [pc, #108]	; (8001d40 <SetPinsOff+0xfc>)
 8001cd4:	f005 f8ec 	bl	8006eb0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001cd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cdc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4815      	ldr	r0, [pc, #84]	; (8001d40 <SetPinsOff+0xfc>)
 8001cec:	f005 f8e0 	bl	8006eb0 <LL_GPIO_Init>
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8001cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfe:	463b      	mov	r3, r7
 8001d00:	4619      	mov	r1, r3
 8001d02:	480f      	ldr	r0, [pc, #60]	; (8001d40 <SetPinsOff+0xfc>)
 8001d04:	f005 f8d4 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8001d08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d0c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d16:	463b      	mov	r3, r7
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4809      	ldr	r0, [pc, #36]	; (8001d40 <SetPinsOff+0xfc>)
 8001d1c:	f005 f8c8 	bl	8006eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d24:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2e:	463b      	mov	r3, r7
 8001d30:	4619      	mov	r1, r3
 8001d32:	4803      	ldr	r0, [pc, #12]	; (8001d40 <SetPinsOff+0xfc>)
 8001d34:	f005 f8bc 	bl	8006eb0 <LL_GPIO_Init>
}
 8001d38:	bf00      	nop
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40020800 	.word	0x40020800

08001d44 <SetLEDs>:

void SetLEDs()
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
	USBH_HandleTypeDef *phost = &hUsbHostFS;
 8001d4a:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <SetLEDs+0x50>)
 8001d4c:	607b      	str	r3, [r7, #4]
	USBH_HandleTypeDef *phostHS = &hUsbHostHS;
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <SetLEDs+0x54>)
 8001d50:	603b      	str	r3, [r7, #0]

	if(phost->gState == HOST_CLASS || phostHS->gState == HOST_CLASS)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b0b      	cmp	r3, #11
 8001d5a:	d004      	beq.n	8001d66 <SetLEDs+0x22>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b0b      	cmp	r3, #11
 8001d64:	d10d      	bne.n	8001d82 <SetLEDs+0x3e>
	{
		if (Appli_stateFS == APPLICATION_READY || Appli_state == APPLICATION_READY)
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <SetLEDs+0x58>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d003      	beq.n	8001d76 <SetLEDs+0x32>
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <SetLEDs+0x5c>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d105      	bne.n	8001d82 <SetLEDs+0x3e>
		{
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_13);
 8001d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d7a:	480a      	ldr	r0, [pc, #40]	; (8001da4 <SetLEDs+0x60>)
 8001d7c:	f7ff fd2e 	bl	80017dc <LL_GPIO_ResetOutputPin>
			return;
 8001d80:	e004      	b.n	8001d8c <SetLEDs+0x48>
		}

	}

	 LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 8001d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d86:	4807      	ldr	r0, [pc, #28]	; (8001da4 <SetLEDs+0x60>)
 8001d88:	f7ff fd1a 	bl	80017c0 <LL_GPIO_SetOutputPin>
}
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000058c 	.word	0x2000058c
 8001d98:	20000968 	.word	0x20000968
 8001d9c:	2000011d 	.word	0x2000011d
 8001da0:	2000011c 	.word	0x2000011c
 8001da4:	40020400 	.word	0x40020400

08001da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dac:	480d      	ldr	r0, [pc, #52]	; (8001de4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dae:	490e      	ldr	r1, [pc, #56]	; (8001de8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001db0:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db4:	e002      	b.n	8001dbc <LoopCopyDataInit>

08001db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dba:	3304      	adds	r3, #4

08001dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc0:	d3f9      	bcc.n	8001db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc2:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dc4:	4c0b      	ldr	r4, [pc, #44]	; (8001df4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc8:	e001      	b.n	8001dce <LoopFillZerobss>

08001dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dcc:	3204      	adds	r2, #4

08001dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd0:	d3fb      	bcc.n	8001dca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dd2:	f7ff fc29 	bl	8001628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dd6:	f00c f9b9 	bl	800e14c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dda:	f7ff f82b 	bl	8000e34 <main>
  bx  lr    
 8001dde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001de0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de8:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8001dec:	0800e6f8 	.word	0x0800e6f8
  ldr r2, =_sbss
 8001df0:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001df4:	2000135c 	.word	0x2000135c

08001df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df8:	e7fe      	b.n	8001df8 <ADC_IRQHandler>

08001dfa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dfe:	2003      	movs	r0, #3
 8001e00:	f000 f8f9 	bl	8001ff6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e04:	200f      	movs	r0, #15
 8001e06:	f7ff fad1 	bl	80013ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e0a:	f7ff fa69 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x20>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x24>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_IncTick+0x24>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	2000000c 	.word	0x2000000c
 8001e38:	20000274 	.word	0x20000274

08001e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_GetTick+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000274 	.word	0x20000274

08001e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff ffee 	bl	8001e3c <HAL_GetTick>
 8001e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d005      	beq.n	8001e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_Delay+0x44>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7a:	bf00      	nop
 8001e7c:	f7ff ffde 	bl	8001e3c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d8f7      	bhi.n	8001e7c <HAL_Delay+0x28>
  {
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000000c 	.word	0x2000000c

08001e9c <__NVIC_SetPriorityGrouping>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <__NVIC_SetPriorityGrouping+0x40>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eca:	4a04      	ldr	r2, [pc, #16]	; (8001edc <__NVIC_SetPriorityGrouping+0x40>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	60d3      	str	r3, [r2, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00
 8001ee0:	05fa0000 	.word	0x05fa0000

08001ee4 <__NVIC_GetPriorityGrouping>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4907      	ldr	r1, [pc, #28]	; (8001f38 <__NVIC_EnableIRQ+0x38>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e100 	.word	0xe000e100

08001f3c <__NVIC_SetPriority>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	6039      	str	r1, [r7, #0]
 8001f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	db0a      	blt.n	8001f66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	490c      	ldr	r1, [pc, #48]	; (8001f88 <__NVIC_SetPriority+0x4c>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	0112      	lsls	r2, r2, #4
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	440b      	add	r3, r1
 8001f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f64:	e00a      	b.n	8001f7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4908      	ldr	r1, [pc, #32]	; (8001f8c <__NVIC_SetPriority+0x50>)
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	3b04      	subs	r3, #4
 8001f74:	0112      	lsls	r2, r2, #4
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	440b      	add	r3, r1
 8001f7a:	761a      	strb	r2, [r3, #24]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000e100 	.word	0xe000e100
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <NVIC_EncodePriority>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f1c3 0307 	rsb	r3, r3, #7
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	bf28      	it	cs
 8001fae:	2304      	movcs	r3, #4
 8001fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d902      	bls.n	8001fc0 <NVIC_EncodePriority+0x30>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3b03      	subs	r3, #3
 8001fbe:	e000      	b.n	8001fc2 <NVIC_EncodePriority+0x32>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	43d9      	mvns	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	4313      	orrs	r3, r2
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ff4c 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201e:	f7ff ff61 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002022:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	6978      	ldr	r0, [r7, #20]
 800202a:	f7ff ffb1 	bl	8001f90 <NVIC_EncodePriority>
 800202e:	4602      	mov	r2, r0
 8002030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff80 	bl	8001f3c <__NVIC_SetPriority>
}
 800203c:	bf00      	nop
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff54 	bl	8001f00 <__NVIC_EnableIRQ>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e014      	b.n	800209c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	791b      	ldrb	r3, [r3, #4]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe fa72 	bl	800056c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ba:	d120      	bne.n	80020fe <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ca:	d118      	bne.n	80020fe <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2204      	movs	r2, #4
 80020d0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f043 0201 	orr.w	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020f6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f82d 	bl	8002158 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800210c:	d120      	bne.n	8002150 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800211c:	d118      	bne.n	8002150 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2204      	movs	r2, #4
 8002122:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f043 0202 	orr.w	r2, r3, #2
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002138:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002148:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f85d 	bl	800220a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002150:	bf00      	nop
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	795b      	ldrb	r3, [r3, #5]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_DAC_ConfigChannel+0x18>
 8002180:	2302      	movs	r3, #2
 8002182:	e03c      	b.n	80021fe <HAL_DAC_ConfigChannel+0x92>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2202      	movs	r2, #2
 800218e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	f640 72fe 	movw	r2, #4094	; 0xffe
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	4013      	ands	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6819      	ldr	r1, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	22c0      	movs	r2, #192	; 0xc0
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43da      	mvns	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	400a      	ands	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	371c      	adds	r7, #28
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff fe06 	bl	8001e3c <HAL_GetTick>
 8002230:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d008      	beq.n	8002250 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2280      	movs	r2, #128	; 0x80
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e052      	b.n	80022f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0216 	bic.w	r2, r2, #22
 800225e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800226e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d103      	bne.n	8002280 <HAL_DMA_Abort+0x62>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227c:	2b00      	cmp	r3, #0
 800227e:	d007      	beq.n	8002290 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0208 	bic.w	r2, r2, #8
 800228e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a0:	e013      	b.n	80022ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022a2:	f7ff fdcb 	bl	8001e3c <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d90c      	bls.n	80022ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2203      	movs	r2, #3
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e015      	b.n	80022f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e4      	bne.n	80022a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	223f      	movs	r2, #63	; 0x3f
 80022de:	409a      	lsls	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d004      	beq.n	800231c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e00c      	b.n	8002336 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2205      	movs	r2, #5
 8002320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
 800234e:	4b56      	ldr	r3, [pc, #344]	; (80024a8 <HAL_FLASH_IRQHandler+0x164>)
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	4a55      	ldr	r2, [pc, #340]	; (80024a8 <HAL_FLASH_IRQHandler+0x164>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
 800235a:	4b53      	ldr	r3, [pc, #332]	; (80024a8 <HAL_FLASH_IRQHandler+0x164>)
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <HAL_FLASH_IRQHandler+0x164>)
 8002360:	f023 0302 	bic.w	r3, r3, #2
 8002364:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
 8002366:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <HAL_FLASH_IRQHandler+0x164>)
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	4a4f      	ldr	r2, [pc, #316]	; (80024a8 <HAL_FLASH_IRQHandler+0x164>)
 800236c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002370:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
 8002372:	4b4d      	ldr	r3, [pc, #308]	; (80024a8 <HAL_FLASH_IRQHandler+0x164>)
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	4a4c      	ldr	r2, [pc, #304]	; (80024a8 <HAL_FLASH_IRQHandler+0x164>)
 8002378:	f023 0304 	bic.w	r3, r3, #4
 800237c:	6113      	str	r3, [r2, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800237e:	4b4a      	ldr	r3, [pc, #296]	; (80024a8 <HAL_FLASH_IRQHandler+0x164>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d048      	beq.n	800241c <HAL_FLASH_IRQHandler+0xd8>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <HAL_FLASH_IRQHandler+0x164>)
 800238c:	2201      	movs	r2, #1
 800238e:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
 8002390:	4b46      	ldr	r3, [pc, #280]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b03      	cmp	r3, #3
 8002398:	d037      	beq.n	800240a <HAL_FLASH_IRQHandler+0xc6>
 800239a:	2b03      	cmp	r3, #3
 800239c:	dc40      	bgt.n	8002420 <HAL_FLASH_IRQHandler+0xdc>
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d002      	beq.n	80023a8 <HAL_FLASH_IRQHandler+0x64>
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d02a      	beq.n	80023fc <HAL_FLASH_IRQHandler+0xb8>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
 80023a6:	e03b      	b.n	8002420 <HAL_FLASH_IRQHandler+0xdc>
        pFlash.NbSectorsToErase--;
 80023a8:	4b40      	ldr	r3, [pc, #256]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	4a3f      	ldr	r2, [pc, #252]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 80023b0:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
 80023b2:	4b3e      	ldr	r3, [pc, #248]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d013      	beq.n	80023e2 <HAL_FLASH_IRQHandler+0x9e>
          temp = pFlash.Sector;
 80023ba:	4b3c      	ldr	r3, [pc, #240]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f875 	bl	80024b0 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 80023c6:	4b39      	ldr	r3, [pc, #228]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	3301      	adds	r3, #1
 80023cc:	4a37      	ldr	r2, [pc, #220]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 80023ce:	60d3      	str	r3, [r2, #12]
 80023d0:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 80023d2:	4b36      	ldr	r3, [pc, #216]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 80023d4:	7a1b      	ldrb	r3, [r3, #8]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	4619      	mov	r1, r3
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f8d4 	bl	8002588 <FLASH_Erase_Sector>
        break;
 80023e0:	e01f      	b.n	8002422 <HAL_FLASH_IRQHandler+0xde>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	4a30      	ldr	r2, [pc, #192]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f85e 	bl	80024b0 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80023f4:	4b2d      	ldr	r3, [pc, #180]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
        break;
 80023fa:	e012      	b.n	8002422 <HAL_FLASH_IRQHandler+0xde>
        HAL_FLASH_EndOfOperationCallback(0);
 80023fc:	2000      	movs	r0, #0
 80023fe:	f000 f857 	bl	80024b0 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002402:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
        break;
 8002408:	e00b      	b.n	8002422 <HAL_FLASH_IRQHandler+0xde>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800240a:	4b28      	ldr	r3, [pc, #160]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f84e 	bl	80024b0 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
        break;
 800241a:	e002      	b.n	8002422 <HAL_FLASH_IRQHandler+0xde>
    }
  }
 800241c:	bf00      	nop
 800241e:	e000      	b.n	8002422 <HAL_FLASH_IRQHandler+0xde>
        break;
 8002420:	bf00      	nop
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8002422:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <HAL_FLASH_IRQHandler+0x164>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d023      	beq.n	8002476 <HAL_FLASH_IRQHandler+0x132>
  {
    switch (pFlash.ProcedureOnGoing)
 800242e:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b03      	cmp	r3, #3
 8002436:	d011      	beq.n	800245c <HAL_FLASH_IRQHandler+0x118>
 8002438:	2b03      	cmp	r3, #3
 800243a:	dc13      	bgt.n	8002464 <HAL_FLASH_IRQHandler+0x120>
 800243c:	2b01      	cmp	r3, #1
 800243e:	d002      	beq.n	8002446 <HAL_FLASH_IRQHandler+0x102>
 8002440:	2b02      	cmp	r3, #2
 8002442:	d008      	beq.n	8002456 <HAL_FLASH_IRQHandler+0x112>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
 8002444:	e00e      	b.n	8002464 <HAL_FLASH_IRQHandler+0x120>
        temp = pFlash.Sector;
 8002446:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
 800244c:	4b17      	ldr	r3, [pc, #92]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 800244e:	f04f 32ff 	mov.w	r2, #4294967295
 8002452:	60da      	str	r2, [r3, #12]
        break;
 8002454:	e007      	b.n	8002466 <HAL_FLASH_IRQHandler+0x122>
        temp = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
        break;
 800245a:	e004      	b.n	8002466 <HAL_FLASH_IRQHandler+0x122>
        temp = pFlash.Address;
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	607b      	str	r3, [r7, #4]
        break;
 8002462:	e000      	b.n	8002466 <HAL_FLASH_IRQHandler+0x122>
      break;
 8002464:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8002466:	f000 f837 	bl	80024d8 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f82a 	bl	80024c4 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10e      	bne.n	800249e <HAL_FLASH_IRQHandler+0x15a>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_FLASH_IRQHandler+0x164>)
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <HAL_FLASH_IRQHandler+0x164>)
 8002486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800248a:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_FLASH_IRQHandler+0x164>)
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <HAL_FLASH_IRQHandler+0x164>)
 8002492:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002496:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <HAL_FLASH_IRQHandler+0x168>)
 800249a:	2200      	movs	r2, #0
 800249c:	751a      	strb	r2, [r3, #20]
  }
  
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023c00 	.word	0x40023c00
 80024ac:	20000278 	.word	0x20000278

080024b0 <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
  */ 
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <FLASH_SetErrorCode+0xa8>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80024e8:	4b26      	ldr	r3, [pc, #152]	; (8002584 <FLASH_SetErrorCode+0xac>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	f043 0320 	orr.w	r3, r3, #32
 80024f0:	4a24      	ldr	r2, [pc, #144]	; (8002584 <FLASH_SetErrorCode+0xac>)
 80024f2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80024f4:	4b22      	ldr	r3, [pc, #136]	; (8002580 <FLASH_SetErrorCode+0xa8>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002500:	4b20      	ldr	r3, [pc, #128]	; (8002584 <FLASH_SetErrorCode+0xac>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f043 0310 	orr.w	r3, r3, #16
 8002508:	4a1e      	ldr	r2, [pc, #120]	; (8002584 <FLASH_SetErrorCode+0xac>)
 800250a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <FLASH_SetErrorCode+0xa8>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002518:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <FLASH_SetErrorCode+0xac>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	4a18      	ldr	r2, [pc, #96]	; (8002584 <FLASH_SetErrorCode+0xac>)
 8002522:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002524:	4b16      	ldr	r3, [pc, #88]	; (8002580 <FLASH_SetErrorCode+0xa8>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <FLASH_SetErrorCode+0xac>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	4a12      	ldr	r2, [pc, #72]	; (8002584 <FLASH_SetErrorCode+0xac>)
 800253a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800253c:	4b10      	ldr	r3, [pc, #64]	; (8002580 <FLASH_SetErrorCode+0xa8>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002548:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <FLASH_SetErrorCode+0xac>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f043 0302 	orr.w	r3, r3, #2
 8002550:	4a0c      	ldr	r2, [pc, #48]	; (8002584 <FLASH_SetErrorCode+0xac>)
 8002552:	6193      	str	r3, [r2, #24]
  }
  
#if defined (FLASH_OPTCR2_PCROP)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002554:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <FLASH_SetErrorCode+0xa8>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <FLASH_SetErrorCode+0x94>
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <FLASH_SetErrorCode+0xac>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002568:	4a06      	ldr	r2, [pc, #24]	; (8002584 <FLASH_SetErrorCode+0xac>)
 800256a:	6193      	str	r3, [r2, #24]
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <FLASH_SetErrorCode+0xa8>)
 800256e:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8002572:	60da      	str	r2, [r3, #12]
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40023c00 	.word	0x40023c00
 8002584:	20000278 	.word	0x20000278

08002588 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d102      	bne.n	80025a4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	e010      	b.n	80025c6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d103      	bne.n	80025b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80025aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	e009      	b.n	80025c6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d103      	bne.n	80025c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80025b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	e002      	b.n	80025c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80025c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025c4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <FLASH_Erase_Sector+0x94>)
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	4a14      	ldr	r2, [pc, #80]	; (800261c <FLASH_Erase_Sector+0x94>)
 80025cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <FLASH_Erase_Sector+0x94>)
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	4911      	ldr	r1, [pc, #68]	; (800261c <FLASH_Erase_Sector+0x94>)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 80025de:	4b0f      	ldr	r3, [pc, #60]	; (800261c <FLASH_Erase_Sector+0x94>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <FLASH_Erase_Sector+0x94>)
 80025e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <FLASH_Erase_Sector+0x94>)
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4313      	orrs	r3, r2
 80025f4:	4a09      	ldr	r2, [pc, #36]	; (800261c <FLASH_Erase_Sector+0x94>)
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <FLASH_Erase_Sector+0x94>)
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <FLASH_Erase_Sector+0x94>)
 8002602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002606:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002608:	f3bf 8f4f 	dsb	sy
}
 800260c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40023c00 	.word	0x40023c00

08002620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	e169      	b.n	8002914 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002640:	2201      	movs	r2, #1
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	429a      	cmp	r2, r3
 800265a:	f040 8158 	bne.w	800290e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b01      	cmp	r3, #1
 8002668:	d005      	beq.n	8002676 <HAL_GPIO_Init+0x56>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d130      	bne.n	80026d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	2203      	movs	r2, #3
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ac:	2201      	movs	r2, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 0201 	and.w	r2, r3, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d017      	beq.n	8002714 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	2203      	movs	r2, #3
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d123      	bne.n	8002768 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	08da      	lsrs	r2, r3, #3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3208      	adds	r2, #8
 8002728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	220f      	movs	r2, #15
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	08da      	lsrs	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3208      	adds	r2, #8
 8002762:	69b9      	ldr	r1, [r7, #24]
 8002764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0203 	and.w	r2, r3, #3
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80b2 	beq.w	800290e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027aa:	4b60      	ldr	r3, [pc, #384]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a5f      	ldr	r2, [pc, #380]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b5d      	ldr	r3, [pc, #372]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027c2:	4a5b      	ldr	r2, [pc, #364]	; (8002930 <HAL_GPIO_Init+0x310>)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a52      	ldr	r2, [pc, #328]	; (8002934 <HAL_GPIO_Init+0x314>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d02b      	beq.n	8002846 <HAL_GPIO_Init+0x226>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a51      	ldr	r2, [pc, #324]	; (8002938 <HAL_GPIO_Init+0x318>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d025      	beq.n	8002842 <HAL_GPIO_Init+0x222>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a50      	ldr	r2, [pc, #320]	; (800293c <HAL_GPIO_Init+0x31c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01f      	beq.n	800283e <HAL_GPIO_Init+0x21e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4f      	ldr	r2, [pc, #316]	; (8002940 <HAL_GPIO_Init+0x320>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d019      	beq.n	800283a <HAL_GPIO_Init+0x21a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4e      	ldr	r2, [pc, #312]	; (8002944 <HAL_GPIO_Init+0x324>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_GPIO_Init+0x216>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4d      	ldr	r2, [pc, #308]	; (8002948 <HAL_GPIO_Init+0x328>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00d      	beq.n	8002832 <HAL_GPIO_Init+0x212>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4c      	ldr	r2, [pc, #304]	; (800294c <HAL_GPIO_Init+0x32c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <HAL_GPIO_Init+0x20e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4b      	ldr	r2, [pc, #300]	; (8002950 <HAL_GPIO_Init+0x330>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d101      	bne.n	800282a <HAL_GPIO_Init+0x20a>
 8002826:	2307      	movs	r3, #7
 8002828:	e00e      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800282a:	2308      	movs	r3, #8
 800282c:	e00c      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800282e:	2306      	movs	r3, #6
 8002830:	e00a      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002832:	2305      	movs	r3, #5
 8002834:	e008      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002836:	2304      	movs	r3, #4
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800283a:	2303      	movs	r3, #3
 800283c:	e004      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800283e:	2302      	movs	r3, #2
 8002840:	e002      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002846:	2300      	movs	r3, #0
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f002 0203 	and.w	r2, r2, #3
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	4093      	lsls	r3, r2
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002858:	4935      	ldr	r1, [pc, #212]	; (8002930 <HAL_GPIO_Init+0x310>)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002866:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <HAL_GPIO_Init+0x334>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800288a:	4a32      	ldr	r2, [pc, #200]	; (8002954 <HAL_GPIO_Init+0x334>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002890:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_GPIO_Init+0x334>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b4:	4a27      	ldr	r2, [pc, #156]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ba:	4b26      	ldr	r3, [pc, #152]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028de:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002908:	4a12      	ldr	r2, [pc, #72]	; (8002954 <HAL_GPIO_Init+0x334>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3301      	adds	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b0f      	cmp	r3, #15
 8002918:	f67f ae92 	bls.w	8002640 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3724      	adds	r7, #36	; 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	40013800 	.word	0x40013800
 8002934:	40020000 	.word	0x40020000
 8002938:	40020400 	.word	0x40020400
 800293c:	40020800 	.word	0x40020800
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021000 	.word	0x40021000
 8002948:	40021400 	.word	0x40021400
 800294c:	40021800 	.word	0x40021800
 8002950:	40021c00 	.word	0x40021c00
 8002954:	40013c00 	.word	0x40013c00

08002958 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295a:	b08f      	sub	sp, #60	; 0x3c
 800295c:	af0a      	add	r7, sp, #40	; 0x28
 800295e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e054      	b.n	8002a14 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d106      	bne.n	800298a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f00b f89f 	bl	800dac8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2203      	movs	r2, #3
 800298e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f004 fb9c 	bl	80070e6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	687e      	ldr	r6, [r7, #4]
 80029b6:	466d      	mov	r5, sp
 80029b8:	f106 0410 	add.w	r4, r6, #16
 80029bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80029cc:	1d33      	adds	r3, r6, #4
 80029ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d0:	6838      	ldr	r0, [r7, #0]
 80029d2:	f004 fae1 	bl	8006f98 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2101      	movs	r1, #1
 80029dc:	4618      	mov	r0, r3
 80029de:	f004 fb93 	bl	8007108 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	687e      	ldr	r6, [r7, #4]
 80029ea:	466d      	mov	r5, sp
 80029ec:	f106 0410 	add.w	r4, r6, #16
 80029f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a00:	1d33      	adds	r3, r6, #4
 8002a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f004 fd73 	bl	80074f0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a1c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af04      	add	r7, sp, #16
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	4608      	mov	r0, r1
 8002a26:	4611      	mov	r1, r2
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	70fb      	strb	r3, [r7, #3]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	70bb      	strb	r3, [r7, #2]
 8002a32:	4613      	mov	r3, r2
 8002a34:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_HCD_HC_Init+0x28>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e076      	b.n	8002b32 <HAL_HCD_HC_Init+0x116>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	333d      	adds	r3, #61	; 0x3d
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3338      	adds	r3, #56	; 0x38
 8002a6c:	787a      	ldrb	r2, [r7, #1]
 8002a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3340      	adds	r3, #64	; 0x40
 8002a7e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a80:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3339      	adds	r3, #57	; 0x39
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	333f      	adds	r3, #63	; 0x3f
 8002aa2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002aa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	78ba      	ldrb	r2, [r7, #2]
 8002aac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ab0:	b2d0      	uxtb	r0, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	333a      	adds	r3, #58	; 0x3a
 8002abe:	4602      	mov	r2, r0
 8002ac0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002ac2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	da09      	bge.n	8002ade <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	333b      	adds	r3, #59	; 0x3b
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e008      	b.n	8002af0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	333b      	adds	r3, #59	; 0x3b
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	333c      	adds	r3, #60	; 0x3c
 8002afe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b02:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	787c      	ldrb	r4, [r7, #1]
 8002b0a:	78ba      	ldrb	r2, [r7, #2]
 8002b0c:	78f9      	ldrb	r1, [r7, #3]
 8002b0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b10:	9302      	str	r3, [sp, #8]
 8002b12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	4623      	mov	r3, r4
 8002b20:	f004 fe60 	bl	80077e4 <USB_HC_Init>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd90      	pop	{r4, r7, pc}

08002b3a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_HCD_HC_Halt+0x1e>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e00f      	b.n	8002b78 <HAL_HCD_HC_Halt+0x3e>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f005 f8b0 	bl	8007cce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	4608      	mov	r0, r1
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	70fb      	strb	r3, [r7, #3]
 8002b92:	460b      	mov	r3, r1
 8002b94:	70bb      	strb	r3, [r7, #2]
 8002b96:	4613      	mov	r3, r2
 8002b98:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	333b      	adds	r3, #59	; 0x3b
 8002ba8:	78ba      	ldrb	r2, [r7, #2]
 8002baa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	333f      	adds	r3, #63	; 0x3f
 8002bba:	787a      	ldrb	r2, [r7, #1]
 8002bbc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002bbe:	7c3b      	ldrb	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d112      	bne.n	8002bea <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	3342      	adds	r3, #66	; 0x42
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	333d      	adds	r3, #61	; 0x3d
 8002be4:	7f3a      	ldrb	r2, [r7, #28]
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e008      	b.n	8002bfc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3342      	adds	r3, #66	; 0x42
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002bfc:	787b      	ldrb	r3, [r7, #1]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	f200 80c6 	bhi.w	8002d90 <HAL_HCD_HC_SubmitRequest+0x210>
 8002c04:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0a:	bf00      	nop
 8002c0c:	08002c1d 	.word	0x08002c1d
 8002c10:	08002d7d 	.word	0x08002d7d
 8002c14:	08002c81 	.word	0x08002c81
 8002c18:	08002cff 	.word	0x08002cff
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002c1c:	7c3b      	ldrb	r3, [r7, #16]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	f040 80b8 	bne.w	8002d94 <HAL_HCD_HC_SubmitRequest+0x214>
 8002c24:	78bb      	ldrb	r3, [r7, #2]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f040 80b4 	bne.w	8002d94 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002c2c:	8b3b      	ldrh	r3, [r7, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d108      	bne.n	8002c44 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	212c      	movs	r1, #44	; 0x2c
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3355      	adds	r3, #85	; 0x55
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	212c      	movs	r1, #44	; 0x2c
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3355      	adds	r3, #85	; 0x55
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3342      	adds	r3, #66	; 0x42
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c6a:	e093      	b.n	8002d94 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3342      	adds	r3, #66	; 0x42
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	701a      	strb	r2, [r3, #0]
      break;
 8002c7e:	e089      	b.n	8002d94 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c80:	78bb      	ldrb	r3, [r7, #2]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d11d      	bne.n	8002cc2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3355      	adds	r3, #85	; 0x55
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3342      	adds	r3, #66	; 0x42
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002cac:	e073      	b.n	8002d96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3342      	adds	r3, #66	; 0x42
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	701a      	strb	r2, [r3, #0]
      break;
 8002cc0:	e069      	b.n	8002d96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	3354      	adds	r3, #84	; 0x54
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3342      	adds	r3, #66	; 0x42
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
      break;
 8002ce8:	e055      	b.n	8002d96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3342      	adds	r3, #66	; 0x42
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	701a      	strb	r2, [r3, #0]
      break;
 8002cfc:	e04b      	b.n	8002d96 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002cfe:	78bb      	ldrb	r3, [r7, #2]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d11d      	bne.n	8002d40 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3355      	adds	r3, #85	; 0x55
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3342      	adds	r3, #66	; 0x42
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d2a:	e034      	b.n	8002d96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3342      	adds	r3, #66	; 0x42
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	701a      	strb	r2, [r3, #0]
      break;
 8002d3e:	e02a      	b.n	8002d96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3354      	adds	r3, #84	; 0x54
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d109      	bne.n	8002d68 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3342      	adds	r3, #66	; 0x42
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
      break;
 8002d66:	e016      	b.n	8002d96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3342      	adds	r3, #66	; 0x42
 8002d76:	2202      	movs	r2, #2
 8002d78:	701a      	strb	r2, [r3, #0]
      break;
 8002d7a:	e00c      	b.n	8002d96 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	3342      	adds	r3, #66	; 0x42
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
      break;
 8002d8e:	e002      	b.n	8002d96 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002d90:	bf00      	nop
 8002d92:	e000      	b.n	8002d96 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002d94:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	212c      	movs	r1, #44	; 0x2c
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	3344      	adds	r3, #68	; 0x44
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	8b3a      	ldrh	r2, [r7, #24]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	202c      	movs	r0, #44	; 0x2c
 8002db0:	fb00 f303 	mul.w	r3, r0, r3
 8002db4:	440b      	add	r3, r1
 8002db6:	334c      	adds	r3, #76	; 0x4c
 8002db8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3360      	adds	r3, #96	; 0x60
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3350      	adds	r3, #80	; 0x50
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	3339      	adds	r3, #57	; 0x39
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3361      	adds	r3, #97	; 0x61
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	222c      	movs	r2, #44	; 0x2c
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	3338      	adds	r3, #56	; 0x38
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	18d1      	adds	r1, r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f004 fe04 	bl	8007a28 <USB_HC_StartXfer>
 8002e20:	4603      	mov	r3, r0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop

08002e2c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f004 fada 	bl	80073fc <USB_GetMode>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	f040 80f6 	bne.w	800303c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f004 fa9d 	bl	8007394 <USB_ReadInterrupts>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80ec 	beq.w	800303a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 fa94 	bl	8007394 <USB_ReadInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e76:	d104      	bne.n	8002e82 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f004 fa84 	bl	8007394 <USB_ReadInterrupts>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e96:	d104      	bne.n	8002ea2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ea0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f004 fa74 	bl	8007394 <USB_ReadInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eb6:	d104      	bne.n	8002ec2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ec0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f004 fa64 	bl	8007394 <USB_ReadInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d103      	bne.n	8002ede <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2202      	movs	r2, #2
 8002edc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f004 fa56 	bl	8007394 <USB_ReadInterrupts>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef2:	d11c      	bne.n	8002f2e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002efc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10f      	bne.n	8002f2e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f0e:	2110      	movs	r1, #16
 8002f10:	6938      	ldr	r0, [r7, #16]
 8002f12:	f004 f945 	bl	80071a0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002f16:	6938      	ldr	r0, [r7, #16]
 8002f18:	f004 f976 	bl	8007208 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2101      	movs	r1, #1
 8002f22:	4618      	mov	r0, r3
 8002f24:	f004 fb98 	bl	8007658 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f00a fec7 	bl	800dcbc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f004 fa2e 	bl	8007394 <USB_ReadInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f42:	d102      	bne.n	8002f4a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f001 f9ce 	bl	80042e6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f004 fa20 	bl	8007394 <USB_ReadInterrupts>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d106      	bne.n	8002f6c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f00a fe90 	bl	800dc84 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2208      	movs	r2, #8
 8002f6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f004 fa0f 	bl	8007394 <USB_ReadInterrupts>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d101      	bne.n	8002f84 <HAL_HCD_IRQHandler+0x158>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <HAL_HCD_IRQHandler+0x15a>
 8002f84:	2300      	movs	r3, #0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d012      	beq.n	8002fb0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0210 	bic.w	r2, r2, #16
 8002f98:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f001 f8d1 	bl	8004142 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0210 	orr.w	r2, r2, #16
 8002fae:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f004 f9ed 	bl	8007394 <USB_ReadInterrupts>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fc4:	d13a      	bne.n	800303c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f004 fe6e 	bl	8007cac <USB_HC_ReadInterrupt>
 8002fd0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	e025      	b.n	8003024 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d018      	beq.n	800301e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003002:	d106      	bne.n	8003012 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	4619      	mov	r1, r3
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f8ab 	bl	8003166 <HCD_HC_IN_IRQHandler>
 8003010:	e005      	b.n	800301e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	4619      	mov	r1, r3
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fcc6 	bl	80039aa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	3301      	adds	r3, #1
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	429a      	cmp	r2, r3
 800302c:	d3d4      	bcc.n	8002fd8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003036:	615a      	str	r2, [r3, #20]
 8003038:	e000      	b.n	800303c <HAL_HCD_IRQHandler+0x210>
      return;
 800303a:	bf00      	nop
    }
  }
}
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_HCD_Start+0x16>
 8003054:	2302      	movs	r3, #2
 8003056:	e013      	b.n	8003080 <HAL_HCD_Start+0x3e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2101      	movs	r1, #1
 8003066:	4618      	mov	r0, r3
 8003068:	f004 fb5a 	bl	8007720 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f004 f827 	bl	80070c4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_HCD_Stop+0x16>
 800309a:	2302      	movs	r3, #2
 800309c:	e00d      	b.n	80030ba <HAL_HCD_Stop+0x32>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f004 ff48 	bl	8007f40 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f004 fafc 	bl	80076cc <USB_ResetPort>
 80030d4:	4603      	mov	r3, r0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	460b      	mov	r3, r1
 80030e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	212c      	movs	r1, #44	; 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	3360      	adds	r3, #96	; 0x60
 80030f8:	781b      	ldrb	r3, [r3, #0]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	460b      	mov	r3, r1
 8003110:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	3350      	adds	r3, #80	; 0x50
 8003120:	681b      	ldr	r3, [r3, #0]
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f004 fb40 	bl	80077c0 <USB_GetCurrentFrame>
 8003140:	4603      	mov	r3, r0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f004 fb1b 	bl	8007792 <USB_GetHostSpeed>
 800315c:	4603      	mov	r3, r0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b086      	sub	sp, #24
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f004 f915 	bl	80073ba <USB_ReadChInterrupts>
 8003190:	4603      	mov	r3, r0
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b04      	cmp	r3, #4
 8003198:	d11a      	bne.n	80031d0 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	461a      	mov	r2, r3
 80031a8:	2304      	movs	r3, #4
 80031aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	3361      	adds	r3, #97	; 0x61
 80031ba:	2207      	movs	r2, #7
 80031bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f004 fd80 	bl	8007cce <USB_HC_Halt>
 80031ce:	e0a2      	b.n	8003316 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	4611      	mov	r1, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	f004 f8ed 	bl	80073ba <USB_ReadChInterrupts>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ea:	d11b      	bne.n	8003224 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f8:	461a      	mov	r2, r3
 80031fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	3361      	adds	r3, #97	; 0x61
 800320e:	2208      	movs	r2, #8
 8003210:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f004 fd56 	bl	8007cce <USB_HC_Halt>
 8003222:	e078      	b.n	8003316 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f004 f8c3 	bl	80073ba <USB_ReadChInterrupts>
 8003234:	4603      	mov	r3, r0
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b08      	cmp	r3, #8
 800323c:	d11a      	bne.n	8003274 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324a:	461a      	mov	r2, r3
 800324c:	2308      	movs	r3, #8
 800324e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	212c      	movs	r1, #44	; 0x2c
 8003256:	fb01 f303 	mul.w	r3, r1, r3
 800325a:	4413      	add	r3, r2
 800325c:	3361      	adds	r3, #97	; 0x61
 800325e:	2206      	movs	r2, #6
 8003260:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f004 fd2e 	bl	8007cce <USB_HC_Halt>
 8003272:	e050      	b.n	8003316 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f004 f89b 	bl	80073ba <USB_ReadChInterrupts>
 8003284:	4603      	mov	r3, r0
 8003286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328e:	d11b      	bne.n	80032c8 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329c:	461a      	mov	r2, r3
 800329e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	3361      	adds	r3, #97	; 0x61
 80032b2:	2209      	movs	r2, #9
 80032b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f004 fd04 	bl	8007cce <USB_HC_Halt>
 80032c6:	e026      	b.n	8003316 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f004 f871 	bl	80073ba <USB_ReadChInterrupts>
 80032d8:	4603      	mov	r3, r0
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b80      	cmp	r3, #128	; 0x80
 80032e0:	d119      	bne.n	8003316 <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ee:	461a      	mov	r2, r3
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	212c      	movs	r1, #44	; 0x2c
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	4413      	add	r3, r2
 8003300:	3361      	adds	r3, #97	; 0x61
 8003302:	2207      	movs	r2, #7
 8003304:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f004 fcdc 	bl	8007cce <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f004 f84a 	bl	80073ba <USB_ReadChInterrupts>
 8003326:	4603      	mov	r3, r0
 8003328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003330:	d112      	bne.n	8003358 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	4611      	mov	r1, r2
 800333c:	4618      	mov	r0, r3
 800333e:	f004 fcc6 	bl	8007cce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4413      	add	r3, r2
 800334a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334e:	461a      	mov	r2, r3
 8003350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003354:	6093      	str	r3, [r2, #8]
 8003356:	e325      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	4611      	mov	r1, r2
 8003362:	4618      	mov	r0, r3
 8003364:	f004 f829 	bl	80073ba <USB_ReadChInterrupts>
 8003368:	4603      	mov	r3, r0
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	f040 80e8 	bne.w	8003544 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003380:	461a      	mov	r2, r3
 8003382:	2320      	movs	r3, #32
 8003384:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d019      	beq.n	80033c2 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	3348      	adds	r3, #72	; 0x48
 800339c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	0159      	lsls	r1, r3, #5
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	440b      	add	r3, r1
 80033a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80033b0:	1ad2      	subs	r2, r2, r3
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	202c      	movs	r0, #44	; 0x2c
 80033b8:	fb00 f303 	mul.w	r3, r0, r3
 80033bc:	440b      	add	r3, r1
 80033be:	3350      	adds	r3, #80	; 0x50
 80033c0:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	3361      	adds	r3, #97	; 0x61
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	335c      	adds	r3, #92	; 0x5c
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f2:	461a      	mov	r2, r3
 80033f4:	2301      	movs	r3, #1
 80033f6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	333f      	adds	r3, #63	; 0x3f
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d009      	beq.n	8003420 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	212c      	movs	r1, #44	; 0x2c
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	4413      	add	r3, r2
 8003418:	333f      	adds	r3, #63	; 0x3f
 800341a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800341c:	2b02      	cmp	r3, #2
 800341e:	d111      	bne.n	8003444 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f004 fc4f 	bl	8007cce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343c:	461a      	mov	r2, r3
 800343e:	2310      	movs	r3, #16
 8003440:	6093      	str	r3, [r2, #8]
 8003442:	e03a      	b.n	80034ba <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	212c      	movs	r1, #44	; 0x2c
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	4413      	add	r3, r2
 8003450:	333f      	adds	r3, #63	; 0x3f
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d009      	beq.n	800346c <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	212c      	movs	r1, #44	; 0x2c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	333f      	adds	r3, #63	; 0x3f
 8003466:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003468:	2b01      	cmp	r3, #1
 800346a:	d126      	bne.n	80034ba <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	0151      	lsls	r1, r2, #5
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	440a      	add	r2, r1
 8003482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003486:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800348a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3360      	adds	r3, #96	; 0x60
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	b2d9      	uxtb	r1, r3
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	202c      	movs	r0, #44	; 0x2c
 80034a8:	fb00 f303 	mul.w	r3, r0, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	3360      	adds	r3, #96	; 0x60
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f00a fc0f 	bl	800dcd8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d12b      	bne.n	800351a <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	3348      	adds	r3, #72	; 0x48
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	202c      	movs	r0, #44	; 0x2c
 80034d8:	fb00 f202 	mul.w	r2, r0, r2
 80034dc:	440a      	add	r2, r1
 80034de:	3240      	adds	r2, #64	; 0x40
 80034e0:	8812      	ldrh	r2, [r2, #0]
 80034e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 825a 	beq.w	80039a4 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	212c      	movs	r1, #44	; 0x2c
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	3354      	adds	r3, #84	; 0x54
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	f083 0301 	eor.w	r3, r3, #1
 8003504:	b2d8      	uxtb	r0, r3
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	212c      	movs	r1, #44	; 0x2c
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	4413      	add	r3, r2
 8003512:	3354      	adds	r3, #84	; 0x54
 8003514:	4602      	mov	r2, r0
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e244      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	212c      	movs	r1, #44	; 0x2c
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	3354      	adds	r3, #84	; 0x54
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	f083 0301 	eor.w	r3, r3, #1
 800352e:	b2d8      	uxtb	r0, r3
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	3354      	adds	r3, #84	; 0x54
 800353e:	4602      	mov	r2, r0
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	e22f      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f003 ff33 	bl	80073ba <USB_ReadChInterrupts>
 8003554:	4603      	mov	r3, r0
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b20      	cmp	r3, #32
 800355c:	d109      	bne.n	8003572 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	461a      	mov	r2, r3
 800356c:	2320      	movs	r3, #32
 800356e:	6093      	str	r3, [r2, #8]
 8003570:	e218      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f003 ff1c 	bl	80073ba <USB_ReadChInterrupts>
 8003582:	4603      	mov	r3, r0
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b02      	cmp	r3, #2
 800358a:	f040 816b 	bne.w	8003864 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4413      	add	r3, r2
 8003596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359a:	461a      	mov	r2, r3
 800359c:	2302      	movs	r3, #2
 800359e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	212c      	movs	r1, #44	; 0x2c
 80035a6:	fb01 f303 	mul.w	r3, r1, r3
 80035aa:	4413      	add	r3, r2
 80035ac:	3361      	adds	r3, #97	; 0x61
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d112      	bne.n	80035da <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	3361      	adds	r3, #97	; 0x61
 80035c2:	2202      	movs	r2, #2
 80035c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	212c      	movs	r1, #44	; 0x2c
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	4413      	add	r3, r2
 80035d2:	3360      	adds	r3, #96	; 0x60
 80035d4:	2201      	movs	r2, #1
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	e135      	b.n	8003846 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	212c      	movs	r1, #44	; 0x2c
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	4413      	add	r3, r2
 80035e6:	3361      	adds	r3, #97	; 0x61
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d112      	bne.n	8003614 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	212c      	movs	r1, #44	; 0x2c
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	3361      	adds	r3, #97	; 0x61
 80035fc:	2202      	movs	r2, #2
 80035fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	3360      	adds	r3, #96	; 0x60
 800360e:	2205      	movs	r2, #5
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	e118      	b.n	8003846 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	212c      	movs	r1, #44	; 0x2c
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	4413      	add	r3, r2
 8003620:	3361      	adds	r3, #97	; 0x61
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b07      	cmp	r3, #7
 8003626:	d009      	beq.n	800363c <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	212c      	movs	r1, #44	; 0x2c
 800362e:	fb01 f303 	mul.w	r3, r1, r3
 8003632:	4413      	add	r3, r2
 8003634:	3361      	adds	r3, #97	; 0x61
 8003636:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003638:	2b09      	cmp	r3, #9
 800363a:	d159      	bne.n	80036f0 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	212c      	movs	r1, #44	; 0x2c
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	4413      	add	r3, r2
 8003648:	3361      	adds	r3, #97	; 0x61
 800364a:	2202      	movs	r2, #2
 800364c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	335c      	adds	r3, #92	; 0x5c
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	202c      	movs	r0, #44	; 0x2c
 8003666:	fb00 f303 	mul.w	r3, r0, r3
 800366a:	440b      	add	r3, r1
 800366c:	335c      	adds	r3, #92	; 0x5c
 800366e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	212c      	movs	r1, #44	; 0x2c
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	4413      	add	r3, r2
 800367c:	335c      	adds	r3, #92	; 0x5c
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d912      	bls.n	80036aa <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	212c      	movs	r1, #44	; 0x2c
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	4413      	add	r3, r2
 8003690:	335c      	adds	r3, #92	; 0x5c
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	212c      	movs	r1, #44	; 0x2c
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	4413      	add	r3, r2
 80036a2:	3360      	adds	r3, #96	; 0x60
 80036a4:	2204      	movs	r2, #4
 80036a6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036a8:	e0cd      	b.n	8003846 <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	212c      	movs	r1, #44	; 0x2c
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	4413      	add	r3, r2
 80036b6:	3360      	adds	r3, #96	; 0x60
 80036b8:	2202      	movs	r2, #2
 80036ba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036d2:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036da:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e8:	461a      	mov	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036ee:	e0aa      	b.n	8003846 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	212c      	movs	r1, #44	; 0x2c
 80036f6:	fb01 f303 	mul.w	r3, r1, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	3361      	adds	r3, #97	; 0x61
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b05      	cmp	r3, #5
 8003702:	d109      	bne.n	8003718 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	212c      	movs	r1, #44	; 0x2c
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	4413      	add	r3, r2
 8003710:	3361      	adds	r3, #97	; 0x61
 8003712:	2202      	movs	r2, #2
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e096      	b.n	8003846 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	212c      	movs	r1, #44	; 0x2c
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	4413      	add	r3, r2
 8003724:	3361      	adds	r3, #97	; 0x61
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d109      	bne.n	8003740 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	212c      	movs	r1, #44	; 0x2c
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	4413      	add	r3, r2
 8003738:	3361      	adds	r3, #97	; 0x61
 800373a:	2202      	movs	r2, #2
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e082      	b.n	8003846 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	212c      	movs	r1, #44	; 0x2c
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4413      	add	r3, r2
 800374c:	3361      	adds	r3, #97	; 0x61
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b04      	cmp	r3, #4
 8003752:	d13f      	bne.n	80037d4 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	212c      	movs	r1, #44	; 0x2c
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	3361      	adds	r3, #97	; 0x61
 8003762:	2202      	movs	r2, #2
 8003764:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	3360      	adds	r3, #96	; 0x60
 8003774:	2202      	movs	r2, #2
 8003776:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	333f      	adds	r3, #63	; 0x3f
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d009      	beq.n	80037a0 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	212c      	movs	r1, #44	; 0x2c
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	4413      	add	r3, r2
 8003798:	333f      	adds	r3, #63	; 0x3f
 800379a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800379c:	2b02      	cmp	r3, #2
 800379e:	d152      	bne.n	8003846 <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037b6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037be:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037cc:	461a      	mov	r2, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e038      	b.n	8003846 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	212c      	movs	r1, #44	; 0x2c
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	4413      	add	r3, r2
 80037e0:	3361      	adds	r3, #97	; 0x61
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d123      	bne.n	8003830 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	212c      	movs	r1, #44	; 0x2c
 80037ee:	fb01 f303 	mul.w	r3, r1, r3
 80037f2:	4413      	add	r3, r2
 80037f4:	3361      	adds	r3, #97	; 0x61
 80037f6:	2202      	movs	r2, #2
 80037f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	212c      	movs	r1, #44	; 0x2c
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4413      	add	r3, r2
 8003806:	335c      	adds	r3, #92	; 0x5c
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	202c      	movs	r0, #44	; 0x2c
 8003812:	fb00 f303 	mul.w	r3, r0, r3
 8003816:	440b      	add	r3, r1
 8003818:	335c      	adds	r3, #92	; 0x5c
 800381a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	212c      	movs	r1, #44	; 0x2c
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	4413      	add	r3, r2
 8003828:	3360      	adds	r3, #96	; 0x60
 800382a:	2204      	movs	r2, #4
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	e00a      	b.n	8003846 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	3361      	adds	r3, #97	; 0x61
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b02      	cmp	r3, #2
 8003842:	f000 80ae 	beq.w	80039a2 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	b2d9      	uxtb	r1, r3
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	202c      	movs	r0, #44	; 0x2c
 8003850:	fb00 f303 	mul.w	r3, r0, r3
 8003854:	4413      	add	r3, r2
 8003856:	3360      	adds	r3, #96	; 0x60
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f00a fa3b 	bl	800dcd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003862:	e09f      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	4611      	mov	r1, r2
 800386e:	4618      	mov	r0, r3
 8003870:	f003 fda3 	bl	80073ba <USB_ReadChInterrupts>
 8003874:	4603      	mov	r3, r0
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d123      	bne.n	80038c6 <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4413      	add	r3, r2
 8003886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388a:	461a      	mov	r2, r3
 800388c:	2340      	movs	r3, #64	; 0x40
 800388e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	212c      	movs	r1, #44	; 0x2c
 8003896:	fb01 f303 	mul.w	r3, r1, r3
 800389a:	4413      	add	r3, r2
 800389c:	3361      	adds	r3, #97	; 0x61
 800389e:	2205      	movs	r2, #5
 80038a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	335c      	adds	r3, #92	; 0x5c
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f004 fa05 	bl	8007cce <USB_HC_Halt>
 80038c4:	e06e      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f003 fd72 	bl	80073ba <USB_ReadChInterrupts>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d161      	bne.n	80039a4 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	212c      	movs	r1, #44	; 0x2c
 80038e6:	fb01 f303 	mul.w	r3, r1, r3
 80038ea:	4413      	add	r3, r2
 80038ec:	333f      	adds	r3, #63	; 0x3f
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d11a      	bne.n	800392a <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	212c      	movs	r1, #44	; 0x2c
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	4413      	add	r3, r2
 8003900:	335c      	adds	r3, #92	; 0x5c
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	212c      	movs	r1, #44	; 0x2c
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	3361      	adds	r3, #97	; 0x61
 8003914:	2204      	movs	r2, #4
 8003916:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	4611      	mov	r1, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f004 f9d3 	bl	8007cce <USB_HC_Halt>
 8003928:	e031      	b.n	800398e <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	212c      	movs	r1, #44	; 0x2c
 8003930:	fb01 f303 	mul.w	r3, r1, r3
 8003934:	4413      	add	r3, r2
 8003936:	333f      	adds	r3, #63	; 0x3f
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	212c      	movs	r1, #44	; 0x2c
 8003944:	fb01 f303 	mul.w	r3, r1, r3
 8003948:	4413      	add	r3, r2
 800394a:	333f      	adds	r3, #63	; 0x3f
 800394c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800394e:	2b02      	cmp	r3, #2
 8003950:	d11d      	bne.n	800398e <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	212c      	movs	r1, #44	; 0x2c
 8003958:	fb01 f303 	mul.w	r3, r1, r3
 800395c:	4413      	add	r3, r2
 800395e:	335c      	adds	r3, #92	; 0x5c
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d110      	bne.n	800398e <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	212c      	movs	r1, #44	; 0x2c
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	4413      	add	r3, r2
 8003978:	3361      	adds	r3, #97	; 0x61
 800397a:	2204      	movs	r2, #4
 800397c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f004 f9a0 	bl	8007cce <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4413      	add	r3, r2
 8003996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399a:	461a      	mov	r2, r3
 800399c:	2310      	movs	r3, #16
 800399e:	6093      	str	r3, [r2, #8]
 80039a0:	e000      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 80039a2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b088      	sub	sp, #32
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	460b      	mov	r3, r1
 80039b4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	4611      	mov	r1, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f003 fcf3 	bl	80073ba <USB_ReadChInterrupts>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d11a      	bne.n	8003a14 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ea:	461a      	mov	r2, r3
 80039ec:	2304      	movs	r3, #4
 80039ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	3361      	adds	r3, #97	; 0x61
 80039fe:	2207      	movs	r2, #7
 8003a00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f004 f95e 	bl	8007cce <USB_HC_Halt>
 8003a12:	e393      	b.n	800413c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f003 fccb 	bl	80073ba <USB_ReadChInterrupts>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d137      	bne.n	8003a9e <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	212c      	movs	r1, #44	; 0x2c
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	333d      	adds	r3, #61	; 0x3d
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	f040 8373 	bne.w	800413c <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	212c      	movs	r1, #44	; 0x2c
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	333d      	adds	r3, #61	; 0x3d
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	212c      	movs	r1, #44	; 0x2c
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	4413      	add	r3, r2
 8003a74:	3360      	adds	r3, #96	; 0x60
 8003a76:	2202      	movs	r2, #2
 8003a78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	212c      	movs	r1, #44	; 0x2c
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	3361      	adds	r3, #97	; 0x61
 8003a88:	2203      	movs	r2, #3
 8003a8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f004 f919 	bl	8007cce <USB_HC_Halt>
 8003a9c:	e34e      	b.n	800413c <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f003 fc86 	bl	80073ba <USB_ReadChInterrupts>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab8:	d112      	bne.n	8003ae0 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003acc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f004 f8f8 	bl	8007cce <USB_HC_Halt>
 8003ade:	e32d      	b.n	800413c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f003 fc65 	bl	80073ba <USB_ReadChInterrupts>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d142      	bne.n	8003b80 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	212c      	movs	r1, #44	; 0x2c
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	4413      	add	r3, r2
 8003b06:	335c      	adds	r3, #92	; 0x5c
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f003 fc4f 	bl	80073ba <USB_ReadChInterrupts>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d111      	bne.n	8003b4a <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	212c      	movs	r1, #44	; 0x2c
 8003b2c:	fb01 f303 	mul.w	r3, r1, r3
 8003b30:	4413      	add	r3, r2
 8003b32:	333d      	adds	r3, #61	; 0x3d
 8003b34:	2201      	movs	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b44:	461a      	mov	r2, r3
 8003b46:	2340      	movs	r3, #64	; 0x40
 8003b48:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b56:	461a      	mov	r2, r3
 8003b58:	2301      	movs	r3, #1
 8003b5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	212c      	movs	r1, #44	; 0x2c
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	4413      	add	r3, r2
 8003b68:	3361      	adds	r3, #97	; 0x61
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	4611      	mov	r1, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f004 f8a8 	bl	8007cce <USB_HC_Halt>
 8003b7e:	e2dd      	b.n	800413c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f003 fc15 	bl	80073ba <USB_ReadChInterrupts>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d12c      	bne.n	8003bf4 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	212c      	movs	r1, #44	; 0x2c
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3361      	adds	r3, #97	; 0x61
 8003ba8:	2205      	movs	r2, #5
 8003baa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	333d      	adds	r3, #61	; 0x3d
 8003bba:	2201      	movs	r2, #1
 8003bbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	212c      	movs	r1, #44	; 0x2c
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	335c      	adds	r3, #92	; 0x5c
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f004 f877 	bl	8007cce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bec:	461a      	mov	r2, r3
 8003bee:	2340      	movs	r3, #64	; 0x40
 8003bf0:	6093      	str	r3, [r2, #8]
 8003bf2:	e2a3      	b.n	800413c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f003 fbdb 	bl	80073ba <USB_ReadChInterrupts>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d11a      	bne.n	8003c44 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	212c      	movs	r1, #44	; 0x2c
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3361      	adds	r3, #97	; 0x61
 8003c2e:	2206      	movs	r2, #6
 8003c30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f004 f846 	bl	8007cce <USB_HC_Halt>
 8003c42:	e27b      	b.n	800413c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f003 fbb3 	bl	80073ba <USB_ReadChInterrupts>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d140      	bne.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	212c      	movs	r1, #44	; 0x2c
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	4413      	add	r3, r2
 8003c6a:	335c      	adds	r3, #92	; 0x5c
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	212c      	movs	r1, #44	; 0x2c
 8003c76:	fb01 f303 	mul.w	r3, r1, r3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3361      	adds	r3, #97	; 0x61
 8003c7e:	2204      	movs	r2, #4
 8003c80:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	212c      	movs	r1, #44	; 0x2c
 8003c88:	fb01 f303 	mul.w	r3, r1, r3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	333d      	adds	r3, #61	; 0x3d
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d112      	bne.n	8003cbc <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	212c      	movs	r1, #44	; 0x2c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	333c      	adds	r3, #60	; 0x3c
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d108      	bne.n	8003cbc <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	212c      	movs	r1, #44	; 0x2c
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	333d      	adds	r3, #61	; 0x3d
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f004 f801 	bl	8007cce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2310      	movs	r3, #16
 8003cdc:	6093      	str	r3, [r2, #8]
 8003cde:	e22d      	b.n	800413c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	4611      	mov	r1, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f003 fb65 	bl	80073ba <USB_ReadChInterrupts>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b80      	cmp	r3, #128	; 0x80
 8003cf8:	d164      	bne.n	8003dc4 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d111      	bne.n	8003d26 <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	212c      	movs	r1, #44	; 0x2c
 8003d08:	fb01 f303 	mul.w	r3, r1, r3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	3361      	adds	r3, #97	; 0x61
 8003d10:	2207      	movs	r2, #7
 8003d12:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f003 ffd5 	bl	8007cce <USB_HC_Halt>
 8003d24:	e044      	b.n	8003db0 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	212c      	movs	r1, #44	; 0x2c
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	335c      	adds	r3, #92	; 0x5c
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	202c      	movs	r0, #44	; 0x2c
 8003d3e:	fb00 f303 	mul.w	r3, r0, r3
 8003d42:	440b      	add	r3, r1
 8003d44:	335c      	adds	r3, #92	; 0x5c
 8003d46:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	212c      	movs	r1, #44	; 0x2c
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	4413      	add	r3, r2
 8003d54:	335c      	adds	r3, #92	; 0x5c
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d920      	bls.n	8003d9e <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	212c      	movs	r1, #44	; 0x2c
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	335c      	adds	r3, #92	; 0x5c
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	212c      	movs	r1, #44	; 0x2c
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	3360      	adds	r3, #96	; 0x60
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	b2d9      	uxtb	r1, r3
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	202c      	movs	r0, #44	; 0x2c
 8003d8a:	fb00 f303 	mul.w	r3, r0, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	3360      	adds	r3, #96	; 0x60
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f009 ff9e 	bl	800dcd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d9c:	e008      	b.n	8003db0 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	212c      	movs	r1, #44	; 0x2c
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	3360      	adds	r3, #96	; 0x60
 8003dac:	2202      	movs	r2, #2
 8003dae:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	6093      	str	r3, [r2, #8]
 8003dc2:	e1bb      	b.n	800413c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f003 faf3 	bl	80073ba <USB_ReadChInterrupts>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dde:	d11b      	bne.n	8003e18 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	212c      	movs	r1, #44	; 0x2c
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	3361      	adds	r3, #97	; 0x61
 8003dee:	2209      	movs	r2, #9
 8003df0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f003 ff66 	bl	8007cce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e14:	6093      	str	r3, [r2, #8]
 8003e16:	e191      	b.n	800413c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	4611      	mov	r1, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f003 fac9 	bl	80073ba <USB_ReadChInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	f040 8184 	bne.w	800413c <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e40:	461a      	mov	r2, r3
 8003e42:	2302      	movs	r3, #2
 8003e44:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	212c      	movs	r1, #44	; 0x2c
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	3361      	adds	r3, #97	; 0x61
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	f040 8087 	bne.w	8003f6a <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	212c      	movs	r1, #44	; 0x2c
 8003e62:	fb01 f303 	mul.w	r3, r1, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	3361      	adds	r3, #97	; 0x61
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	3360      	adds	r3, #96	; 0x60
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	212c      	movs	r1, #44	; 0x2c
 8003e86:	fb01 f303 	mul.w	r3, r1, r3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	333f      	adds	r3, #63	; 0x3f
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d00a      	beq.n	8003eaa <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	212c      	movs	r1, #44	; 0x2c
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	333f      	adds	r3, #63	; 0x3f
 8003ea2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	f040 8139 	bne.w	800411c <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d113      	bne.n	8003eda <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	212c      	movs	r1, #44	; 0x2c
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3355      	adds	r3, #85	; 0x55
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	f083 0301 	eor.w	r3, r3, #1
 8003ec6:	b2d8      	uxtb	r0, r3
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	212c      	movs	r1, #44	; 0x2c
 8003ece:	fb01 f303 	mul.w	r3, r1, r3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3355      	adds	r3, #85	; 0x55
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	f040 811c 	bne.w	800411c <HCD_HC_OUT_IRQHandler+0x772>
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	212c      	movs	r1, #44	; 0x2c
 8003eea:	fb01 f303 	mul.w	r3, r1, r3
 8003eee:	4413      	add	r3, r2
 8003ef0:	334c      	adds	r3, #76	; 0x4c
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8111 	beq.w	800411c <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	212c      	movs	r1, #44	; 0x2c
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	4413      	add	r3, r2
 8003f06:	334c      	adds	r3, #76	; 0x4c
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	202c      	movs	r0, #44	; 0x2c
 8003f10:	fb00 f202 	mul.w	r2, r0, r2
 8003f14:	440a      	add	r2, r1
 8003f16:	3240      	adds	r2, #64	; 0x40
 8003f18:	8812      	ldrh	r2, [r2, #0]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	202c      	movs	r0, #44	; 0x2c
 8003f24:	fb00 f202 	mul.w	r2, r0, r2
 8003f28:	440a      	add	r2, r1
 8003f2a:	3240      	adds	r2, #64	; 0x40
 8003f2c:	8812      	ldrh	r2, [r2, #0]
 8003f2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80ee 	beq.w	800411c <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	212c      	movs	r1, #44	; 0x2c
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3355      	adds	r3, #85	; 0x55
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	f083 0301 	eor.w	r3, r3, #1
 8003f54:	b2d8      	uxtb	r0, r3
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	212c      	movs	r1, #44	; 0x2c
 8003f5c:	fb01 f303 	mul.w	r3, r1, r3
 8003f60:	4413      	add	r3, r2
 8003f62:	3355      	adds	r3, #85	; 0x55
 8003f64:	4602      	mov	r2, r0
 8003f66:	701a      	strb	r2, [r3, #0]
 8003f68:	e0d8      	b.n	800411c <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	212c      	movs	r1, #44	; 0x2c
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	4413      	add	r3, r2
 8003f76:	3361      	adds	r3, #97	; 0x61
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d109      	bne.n	8003f92 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	212c      	movs	r1, #44	; 0x2c
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	3361      	adds	r3, #97	; 0x61
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e0c4      	b.n	800411c <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	212c      	movs	r1, #44	; 0x2c
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3361      	adds	r3, #97	; 0x61
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d112      	bne.n	8003fcc <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	212c      	movs	r1, #44	; 0x2c
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3361      	adds	r3, #97	; 0x61
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	212c      	movs	r1, #44	; 0x2c
 8003fbe:	fb01 f303 	mul.w	r3, r1, r3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3360      	adds	r3, #96	; 0x60
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	e0a7      	b.n	800411c <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	212c      	movs	r1, #44	; 0x2c
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3361      	adds	r3, #97	; 0x61
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b05      	cmp	r3, #5
 8003fde:	d112      	bne.n	8004006 <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	212c      	movs	r1, #44	; 0x2c
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	4413      	add	r3, r2
 8003fec:	3361      	adds	r3, #97	; 0x61
 8003fee:	2202      	movs	r2, #2
 8003ff0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	212c      	movs	r1, #44	; 0x2c
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3360      	adds	r3, #96	; 0x60
 8004000:	2202      	movs	r2, #2
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	e08a      	b.n	800411c <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	212c      	movs	r1, #44	; 0x2c
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	4413      	add	r3, r2
 8004012:	3361      	adds	r3, #97	; 0x61
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b06      	cmp	r3, #6
 8004018:	d112      	bne.n	8004040 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	212c      	movs	r1, #44	; 0x2c
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	4413      	add	r3, r2
 8004026:	3361      	adds	r3, #97	; 0x61
 8004028:	2202      	movs	r2, #2
 800402a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	212c      	movs	r1, #44	; 0x2c
 8004032:	fb01 f303 	mul.w	r3, r1, r3
 8004036:	4413      	add	r3, r2
 8004038:	3360      	adds	r3, #96	; 0x60
 800403a:	2205      	movs	r2, #5
 800403c:	701a      	strb	r2, [r3, #0]
 800403e:	e06d      	b.n	800411c <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	212c      	movs	r1, #44	; 0x2c
 8004046:	fb01 f303 	mul.w	r3, r1, r3
 800404a:	4413      	add	r3, r2
 800404c:	3361      	adds	r3, #97	; 0x61
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b07      	cmp	r3, #7
 8004052:	d009      	beq.n	8004068 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	212c      	movs	r1, #44	; 0x2c
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	4413      	add	r3, r2
 8004060:	3361      	adds	r3, #97	; 0x61
 8004062:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004064:	2b09      	cmp	r3, #9
 8004066:	d168      	bne.n	800413a <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	212c      	movs	r1, #44	; 0x2c
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	4413      	add	r3, r2
 8004074:	3361      	adds	r3, #97	; 0x61
 8004076:	2202      	movs	r2, #2
 8004078:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	212c      	movs	r1, #44	; 0x2c
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	4413      	add	r3, r2
 8004086:	335c      	adds	r3, #92	; 0x5c
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	202c      	movs	r0, #44	; 0x2c
 8004092:	fb00 f303 	mul.w	r3, r0, r3
 8004096:	440b      	add	r3, r1
 8004098:	335c      	adds	r3, #92	; 0x5c
 800409a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	212c      	movs	r1, #44	; 0x2c
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	4413      	add	r3, r2
 80040a8:	335c      	adds	r3, #92	; 0x5c
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d912      	bls.n	80040d6 <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	212c      	movs	r1, #44	; 0x2c
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	335c      	adds	r3, #92	; 0x5c
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	212c      	movs	r1, #44	; 0x2c
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	4413      	add	r3, r2
 80040ce:	3360      	adds	r3, #96	; 0x60
 80040d0:	2204      	movs	r2, #4
 80040d2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040d4:	e021      	b.n	800411a <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	212c      	movs	r1, #44	; 0x2c
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	3360      	adds	r3, #96	; 0x60
 80040e4:	2202      	movs	r2, #2
 80040e6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040fe:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004106:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004114:	461a      	mov	r2, r3
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800411a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	b2d9      	uxtb	r1, r3
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	202c      	movs	r0, #44	; 0x2c
 8004126:	fb00 f303 	mul.w	r3, r0, r3
 800412a:	4413      	add	r3, r2
 800412c:	3360      	adds	r3, #96	; 0x60
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f009 fdd0 	bl	800dcd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004138:	e000      	b.n	800413c <HCD_HC_OUT_IRQHandler+0x792>
      return;
 800413a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b08a      	sub	sp, #40	; 0x28
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	0c5b      	lsrs	r3, r3, #17
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004176:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d004      	beq.n	8004188 <HCD_RXQLVL_IRQHandler+0x46>
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b05      	cmp	r3, #5
 8004182:	f000 80a9 	beq.w	80042d8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004186:	e0aa      	b.n	80042de <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 80a6 	beq.w	80042dc <HCD_RXQLVL_IRQHandler+0x19a>
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	212c      	movs	r1, #44	; 0x2c
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	4413      	add	r3, r2
 800419c:	3344      	adds	r3, #68	; 0x44
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 809b 	beq.w	80042dc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	212c      	movs	r1, #44	; 0x2c
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	3350      	adds	r3, #80	; 0x50
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	441a      	add	r2, r3
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	202c      	movs	r0, #44	; 0x2c
 80041c0:	fb00 f303 	mul.w	r3, r0, r3
 80041c4:	440b      	add	r3, r1
 80041c6:	334c      	adds	r3, #76	; 0x4c
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d87a      	bhi.n	80042c4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	212c      	movs	r1, #44	; 0x2c
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	4413      	add	r3, r2
 80041de:	3344      	adds	r3, #68	; 0x44
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	b292      	uxth	r2, r2
 80041e6:	4619      	mov	r1, r3
 80041e8:	f003 f87c 	bl	80072e4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	212c      	movs	r1, #44	; 0x2c
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	3344      	adds	r3, #68	; 0x44
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	441a      	add	r2, r3
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	202c      	movs	r0, #44	; 0x2c
 8004206:	fb00 f303 	mul.w	r3, r0, r3
 800420a:	440b      	add	r3, r1
 800420c:	3344      	adds	r3, #68	; 0x44
 800420e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	212c      	movs	r1, #44	; 0x2c
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	3350      	adds	r3, #80	; 0x50
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	441a      	add	r2, r3
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	202c      	movs	r0, #44	; 0x2c
 800422a:	fb00 f303 	mul.w	r3, r0, r3
 800422e:	440b      	add	r3, r1
 8004230:	3350      	adds	r3, #80	; 0x50
 8004232:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	4413      	add	r3, r2
 800423c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	0cdb      	lsrs	r3, r3, #19
 8004244:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004248:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	212c      	movs	r1, #44	; 0x2c
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	4413      	add	r3, r2
 8004256:	3340      	adds	r3, #64	; 0x40
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4293      	cmp	r3, r2
 8004260:	d13c      	bne.n	80042dc <HCD_RXQLVL_IRQHandler+0x19a>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d039      	beq.n	80042dc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	4413      	add	r3, r2
 8004270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800427e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004286:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	4413      	add	r3, r2
 8004290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004294:	461a      	mov	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	212c      	movs	r1, #44	; 0x2c
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	3354      	adds	r3, #84	; 0x54
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	f083 0301 	eor.w	r3, r3, #1
 80042ae:	b2d8      	uxtb	r0, r3
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	212c      	movs	r1, #44	; 0x2c
 80042b6:	fb01 f303 	mul.w	r3, r1, r3
 80042ba:	4413      	add	r3, r2
 80042bc:	3354      	adds	r3, #84	; 0x54
 80042be:	4602      	mov	r2, r0
 80042c0:	701a      	strb	r2, [r3, #0]
      break;
 80042c2:	e00b      	b.n	80042dc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	212c      	movs	r1, #44	; 0x2c
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	3360      	adds	r3, #96	; 0x60
 80042d2:	2204      	movs	r2, #4
 80042d4:	701a      	strb	r2, [r3, #0]
      break;
 80042d6:	e001      	b.n	80042dc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80042d8:	bf00      	nop
 80042da:	e000      	b.n	80042de <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80042dc:	bf00      	nop
  }
}
 80042de:	bf00      	nop
 80042e0:	3728      	adds	r7, #40	; 0x28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004312:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b02      	cmp	r3, #2
 800431c:	d10b      	bne.n	8004336 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b01      	cmp	r3, #1
 8004326:	d102      	bne.n	800432e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f009 fcb9 	bl	800dca0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f043 0302 	orr.w	r3, r3, #2
 8004334:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b08      	cmp	r3, #8
 800433e:	d132      	bne.n	80043a6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f043 0308 	orr.w	r3, r3, #8
 8004346:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b04      	cmp	r3, #4
 8004350:	d126      	bne.n	80043a0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d113      	bne.n	8004382 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004360:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004364:	d106      	bne.n	8004374 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2102      	movs	r1, #2
 800436c:	4618      	mov	r0, r3
 800436e:	f003 f973 	bl	8007658 <USB_InitFSLSPClkSel>
 8004372:	e011      	b.n	8004398 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2101      	movs	r1, #1
 800437a:	4618      	mov	r0, r3
 800437c:	f003 f96c 	bl	8007658 <USB_InitFSLSPClkSel>
 8004380:	e00a      	b.n	8004398 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d106      	bne.n	8004398 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004390:	461a      	mov	r2, r3
 8004392:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004396:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f009 fcab 	bl	800dcf4 <HAL_HCD_PortEnabled_Callback>
 800439e:	e002      	b.n	80043a6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f009 fcb5 	bl	800dd10 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d103      	bne.n	80043b8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f043 0320 	orr.w	r3, r3, #32
 80043b6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043be:	461a      	mov	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	6013      	str	r3, [r2, #0]
}
 80043c4:	bf00      	nop
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_PWR_PVD_IRQHandler+0x20>)
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80043dc:	f000 f808 	bl	80043f0 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80043e0:	4b02      	ldr	r3, [pc, #8]	; (80043ec <HAL_PWR_PVD_IRQHandler+0x20>)
 80043e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043e6:	615a      	str	r2, [r3, #20]
  }
}
 80043e8:	bf00      	nop
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40013c00 	.word	0x40013c00

080043f0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80043f4:	bf00      	nop
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800440a:	4b23      	ldr	r3, [pc, #140]	; (8004498 <HAL_PWREx_EnableOverDrive+0x98>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	4a22      	ldr	r2, [pc, #136]	; (8004498 <HAL_PWREx_EnableOverDrive+0x98>)
 8004410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004414:	6413      	str	r3, [r2, #64]	; 0x40
 8004416:	4b20      	ldr	r3, [pc, #128]	; (8004498 <HAL_PWREx_EnableOverDrive+0x98>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004422:	4b1e      	ldr	r3, [pc, #120]	; (800449c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1d      	ldr	r2, [pc, #116]	; (800449c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800442e:	f7fd fd05 	bl	8001e3c <HAL_GetTick>
 8004432:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004434:	e009      	b.n	800444a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004436:	f7fd fd01 	bl	8001e3c <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004444:	d901      	bls.n	800444a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e022      	b.n	8004490 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800444a:	4b14      	ldr	r3, [pc, #80]	; (800449c <HAL_PWREx_EnableOverDrive+0x9c>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004456:	d1ee      	bne.n	8004436 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004458:	4b10      	ldr	r3, [pc, #64]	; (800449c <HAL_PWREx_EnableOverDrive+0x9c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0f      	ldr	r2, [pc, #60]	; (800449c <HAL_PWREx_EnableOverDrive+0x9c>)
 800445e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004462:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004464:	f7fd fcea 	bl	8001e3c <HAL_GetTick>
 8004468:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800446a:	e009      	b.n	8004480 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800446c:	f7fd fce6 	bl	8001e3c <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800447a:	d901      	bls.n	8004480 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e007      	b.n	8004490 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004480:	4b06      	ldr	r3, [pc, #24]	; (800449c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004488:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800448c:	d1ee      	bne.n	800446c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40023800 	.word	0x40023800
 800449c:	40007000 	.word	0x40007000

080044a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80044a8:	2300      	movs	r3, #0
 80044aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e293      	b.n	80049de <HAL_RCC_OscConfig+0x53e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 8089 	beq.w	80045d6 <HAL_RCC_OscConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044c4:	4b97      	ldr	r3, [pc, #604]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 030c 	and.w	r3, r3, #12
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d00c      	beq.n	80044ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d0:	4b94      	ldr	r3, [pc, #592]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d112      	bne.n	8004502 <HAL_RCC_OscConfig+0x62>
 80044dc:	4b91      	ldr	r3, [pc, #580]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e8:	d10b      	bne.n	8004502 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ea:	4b8e      	ldr	r3, [pc, #568]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d06e      	beq.n	80045d4 <HAL_RCC_OscConfig+0x134>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d16a      	bne.n	80045d4 <HAL_RCC_OscConfig+0x134>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e26d      	b.n	80049de <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450a:	d106      	bne.n	800451a <HAL_RCC_OscConfig+0x7a>
 800450c:	4b85      	ldr	r3, [pc, #532]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a84      	ldr	r2, [pc, #528]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	e02e      	b.n	8004578 <HAL_RCC_OscConfig+0xd8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10c      	bne.n	800453c <HAL_RCC_OscConfig+0x9c>
 8004522:	4b80      	ldr	r3, [pc, #512]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a7f      	ldr	r2, [pc, #508]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	4b7d      	ldr	r3, [pc, #500]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a7c      	ldr	r2, [pc, #496]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e01d      	b.n	8004578 <HAL_RCC_OscConfig+0xd8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0xc0>
 8004546:	4b77      	ldr	r3, [pc, #476]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a76      	ldr	r2, [pc, #472]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 800454c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	4b74      	ldr	r3, [pc, #464]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a73      	ldr	r2, [pc, #460]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e00b      	b.n	8004578 <HAL_RCC_OscConfig+0xd8>
 8004560:	4b70      	ldr	r3, [pc, #448]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a6f      	ldr	r2, [pc, #444]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	4b6d      	ldr	r3, [pc, #436]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a6c      	ldr	r2, [pc, #432]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d014      	beq.n	80045aa <HAL_RCC_OscConfig+0x10a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004580:	f7fd fc5c 	bl	8001e3c <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	e009      	b.n	800459c <HAL_RCC_OscConfig+0xfc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004588:	f7fd fc58 	bl	8001e3c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0xfc>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e220      	b.n	80049de <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459c:	4b61      	ldr	r3, [pc, #388]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0ef      	beq.n	8004588 <HAL_RCC_OscConfig+0xe8>
 80045a8:	e015      	b.n	80045d6 <HAL_RCC_OscConfig+0x136>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045aa:	f7fd fc47 	bl	8001e3c <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b0:	e009      	b.n	80045c6 <HAL_RCC_OscConfig+0x126>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b2:	f7fd fc43 	bl	8001e3c <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e20b      	b.n	80049de <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c6:	4b57      	ldr	r3, [pc, #348]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1ef      	bne.n	80045b2 <HAL_RCC_OscConfig+0x112>
 80045d2:	e000      	b.n	80045d6 <HAL_RCC_OscConfig+0x136>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d069      	beq.n	80046b6 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045e2:	4b50      	ldr	r3, [pc, #320]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <HAL_RCC_OscConfig+0x166>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ee:	4b4d      	ldr	r3, [pc, #308]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d11c      	bne.n	8004634 <HAL_RCC_OscConfig+0x194>
 80045fa:	4b4a      	ldr	r3, [pc, #296]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d116      	bne.n	8004634 <HAL_RCC_OscConfig+0x194>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004606:	4b47      	ldr	r3, [pc, #284]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_RCC_OscConfig+0x17e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d001      	beq.n	800461e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e1df      	b.n	80049de <HAL_RCC_OscConfig+0x53e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461e:	4b41      	ldr	r3, [pc, #260]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	493d      	ldr	r1, [pc, #244]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 800462e:	4313      	orrs	r3, r2
 8004630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004632:	e040      	b.n	80046b6 <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d023      	beq.n	8004684 <HAL_RCC_OscConfig+0x1e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800463c:	4b39      	ldr	r3, [pc, #228]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a38      	ldr	r2, [pc, #224]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fd fbf8 	bl	8001e3c <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x1c2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004650:	f7fd fbf4 	bl	8001e3c <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e1bd      	b.n	80049de <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004662:	4b30      	ldr	r3, [pc, #192]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466e:	4b2d      	ldr	r3, [pc, #180]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4929      	ldr	r1, [pc, #164]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 800467e:	4313      	orrs	r3, r2
 8004680:	600b      	str	r3, [r1, #0]
 8004682:	e018      	b.n	80046b6 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004684:	4b27      	ldr	r3, [pc, #156]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a26      	ldr	r2, [pc, #152]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fd fbd4 	bl	8001e3c <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x20a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004698:	f7fd fbd0 	bl	8001e3c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e199      	b.n	80049de <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046aa:	4b1e      	ldr	r3, [pc, #120]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d038      	beq.n	8004734 <HAL_RCC_OscConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d019      	beq.n	80046fe <HAL_RCC_OscConfig+0x25e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ca:	4b16      	ldr	r3, [pc, #88]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 80046cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ce:	4a15      	ldr	r2, [pc, #84]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d6:	f7fd fbb1 	bl	8001e3c <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x250>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046de:	f7fd fbad 	bl	8001e3c <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x250>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e176      	b.n	80049de <HAL_RCC_OscConfig+0x53e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 80046f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x23e>
 80046fc:	e01a      	b.n	8004734 <HAL_RCC_OscConfig+0x294>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fe:	4b09      	ldr	r3, [pc, #36]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004702:	4a08      	ldr	r2, [pc, #32]	; (8004724 <HAL_RCC_OscConfig+0x284>)
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470a:	f7fd fb97 	bl	8001e3c <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004710:	e00a      	b.n	8004728 <HAL_RCC_OscConfig+0x288>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004712:	f7fd fb93 	bl	8001e3c <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d903      	bls.n	8004728 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e15c      	b.n	80049de <HAL_RCC_OscConfig+0x53e>
 8004724:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004728:	4b91      	ldr	r3, [pc, #580]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 800472a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1ee      	bne.n	8004712 <HAL_RCC_OscConfig+0x272>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80a4 	beq.w	800488a <HAL_RCC_OscConfig+0x3ea>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004742:	4b8b      	ldr	r3, [pc, #556]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10d      	bne.n	800476a <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800474e:	4b88      	ldr	r3, [pc, #544]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a87      	ldr	r2, [pc, #540]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 8004754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
 800475a:	4b85      	ldr	r3, [pc, #532]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004766:	2301      	movs	r3, #1
 8004768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476a:	4b82      	ldr	r3, [pc, #520]	; (8004974 <HAL_RCC_OscConfig+0x4d4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004772:	2b00      	cmp	r3, #0
 8004774:	d118      	bne.n	80047a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004776:	4b7f      	ldr	r3, [pc, #508]	; (8004974 <HAL_RCC_OscConfig+0x4d4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a7e      	ldr	r2, [pc, #504]	; (8004974 <HAL_RCC_OscConfig+0x4d4>)
 800477c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004782:	f7fd fb5b 	bl	8001e3c <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478a:	f7fd fb57 	bl	8001e3c <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b64      	cmp	r3, #100	; 0x64
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e120      	b.n	80049de <HAL_RCC_OscConfig+0x53e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800479c:	4b75      	ldr	r3, [pc, #468]	; (8004974 <HAL_RCC_OscConfig+0x4d4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d106      	bne.n	80047be <HAL_RCC_OscConfig+0x31e>
 80047b0:	4b6f      	ldr	r3, [pc, #444]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4a6e      	ldr	r2, [pc, #440]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
 80047bc:	e02d      	b.n	800481a <HAL_RCC_OscConfig+0x37a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x340>
 80047c6:	4b6a      	ldr	r3, [pc, #424]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a69      	ldr	r2, [pc, #420]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70
 80047d2:	4b67      	ldr	r3, [pc, #412]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	4a66      	ldr	r2, [pc, #408]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 80047d8:	f023 0304 	bic.w	r3, r3, #4
 80047dc:	6713      	str	r3, [r2, #112]	; 0x70
 80047de:	e01c      	b.n	800481a <HAL_RCC_OscConfig+0x37a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b05      	cmp	r3, #5
 80047e6:	d10c      	bne.n	8004802 <HAL_RCC_OscConfig+0x362>
 80047e8:	4b61      	ldr	r3, [pc, #388]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	4a60      	ldr	r2, [pc, #384]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 80047ee:	f043 0304 	orr.w	r3, r3, #4
 80047f2:	6713      	str	r3, [r2, #112]	; 0x70
 80047f4:	4b5e      	ldr	r3, [pc, #376]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	4a5d      	ldr	r2, [pc, #372]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004800:	e00b      	b.n	800481a <HAL_RCC_OscConfig+0x37a>
 8004802:	4b5b      	ldr	r3, [pc, #364]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4a5a      	ldr	r2, [pc, #360]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	6713      	str	r3, [r2, #112]	; 0x70
 800480e:	4b58      	ldr	r3, [pc, #352]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 8004810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004812:	4a57      	ldr	r2, [pc, #348]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 8004814:	f023 0304 	bic.w	r3, r3, #4
 8004818:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d015      	beq.n	800484e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004822:	f7fd fb0b 	bl	8001e3c <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004828:	e00a      	b.n	8004840 <HAL_RCC_OscConfig+0x3a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fd fb07 	bl	8001e3c <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f241 3288 	movw	r2, #5000	; 0x1388
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x3a0>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e0ce      	b.n	80049de <HAL_RCC_OscConfig+0x53e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004840:	4b4b      	ldr	r3, [pc, #300]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0ee      	beq.n	800482a <HAL_RCC_OscConfig+0x38a>
 800484c:	e014      	b.n	8004878 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484e:	f7fd faf5 	bl	8001e3c <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004854:	e00a      	b.n	800486c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004856:	f7fd faf1 	bl	8001e3c <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	f241 3288 	movw	r2, #5000	; 0x1388
 8004864:	4293      	cmp	r3, r2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e0b8      	b.n	80049de <HAL_RCC_OscConfig+0x53e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486c:	4b40      	ldr	r3, [pc, #256]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1ee      	bne.n	8004856 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d105      	bne.n	800488a <HAL_RCC_OscConfig+0x3ea>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487e:	4b3c      	ldr	r3, [pc, #240]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	4a3b      	ldr	r2, [pc, #236]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 8004884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004888:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 80a4 	beq.w	80049dc <HAL_RCC_OscConfig+0x53c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004894:	4b36      	ldr	r3, [pc, #216]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b08      	cmp	r3, #8
 800489e:	d06b      	beq.n	8004978 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d149      	bne.n	800493c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a8:	4b31      	ldr	r3, [pc, #196]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a30      	ldr	r2, [pc, #192]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 80048ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fd fac2 	bl	8001e3c <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x42e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048bc:	f7fd fabe 	bl	8001e3c <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e087      	b.n	80049de <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ce:	4b28      	ldr	r3, [pc, #160]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0x41c>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	019b      	lsls	r3, r3, #6
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	085b      	lsrs	r3, r3, #1
 80048f2:	3b01      	subs	r3, #1
 80048f4:	041b      	lsls	r3, r3, #16
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	061b      	lsls	r3, r3, #24
 80048fe:	4313      	orrs	r3, r2
 8004900:	4a1b      	ldr	r2, [pc, #108]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 8004902:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004906:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004908:	4b19      	ldr	r3, [pc, #100]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a18      	ldr	r2, [pc, #96]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 800490e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004914:	f7fd fa92 	bl	8001e3c <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491c:	f7fd fa8e 	bl	8001e3c <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e057      	b.n	80049de <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492e:	4b10      	ldr	r3, [pc, #64]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x47c>
 800493a:	e04f      	b.n	80049dc <HAL_RCC_OscConfig+0x53c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493c:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a0b      	ldr	r2, [pc, #44]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 8004942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fd fa78 	bl	8001e3c <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004950:	f7fd fa74 	bl	8001e3c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e03d      	b.n	80049de <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004962:	4b03      	ldr	r3, [pc, #12]	; (8004970 <HAL_RCC_OscConfig+0x4d0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x4b0>
 800496e:	e035      	b.n	80049dc <HAL_RCC_OscConfig+0x53c>
 8004970:	40023800 	.word	0x40023800
 8004974:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004978:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <HAL_RCC_OscConfig+0x548>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d028      	beq.n	80049d8 <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004990:	429a      	cmp	r2, r3
 8004992:	d121      	bne.n	80049d8 <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	429a      	cmp	r2, r3
 80049a0:	d11a      	bne.n	80049d8 <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049a8:	4013      	ands	r3, r2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d111      	bne.n	80049d8 <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	3b01      	subs	r3, #1
 80049c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d107      	bne.n	80049d8 <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_OscConfig+0x53c>
#endif
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <HAL_RCC_OscConfig+0x53e>
      }
    }
  }
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40023800 	.word	0x40023800

080049ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0d0      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a04:	4b6a      	ldr	r3, [pc, #424]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d910      	bls.n	8004a34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b67      	ldr	r3, [pc, #412]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 020f 	bic.w	r2, r3, #15
 8004a1a:	4965      	ldr	r1, [pc, #404]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b63      	ldr	r3, [pc, #396]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0b8      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d020      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a4c:	4b59      	ldr	r3, [pc, #356]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4a58      	ldr	r2, [pc, #352]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a64:	4b53      	ldr	r3, [pc, #332]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	4a52      	ldr	r2, [pc, #328]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a70:	4b50      	ldr	r3, [pc, #320]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	494d      	ldr	r1, [pc, #308]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d040      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d107      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a96:	4b47      	ldr	r3, [pc, #284]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d115      	bne.n	8004ace <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e07f      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d107      	bne.n	8004abe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aae:	4b41      	ldr	r3, [pc, #260]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e073      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004abe:	4b3d      	ldr	r3, [pc, #244]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e06b      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ace:	4b39      	ldr	r3, [pc, #228]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f023 0203 	bic.w	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4936      	ldr	r1, [pc, #216]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae0:	f7fd f9ac 	bl	8001e3c <HAL_GetTick>
 8004ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae8:	f7fd f9a8 	bl	8001e3c <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e053      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afe:	4b2d      	ldr	r3, [pc, #180]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 020c 	and.w	r2, r3, #12
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d1eb      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b10:	4b27      	ldr	r3, [pc, #156]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d210      	bcs.n	8004b40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1e:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f023 020f 	bic.w	r2, r3, #15
 8004b26:	4922      	ldr	r1, [pc, #136]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2e:	4b20      	ldr	r3, [pc, #128]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e032      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b4c:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4916      	ldr	r1, [pc, #88]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d009      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b6a:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	490e      	ldr	r1, [pc, #56]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b7e:	f000 f831 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8004b82:	4602      	mov	r2, r0
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	091b      	lsrs	r3, r3, #4
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	490a      	ldr	r1, [pc, #40]	; (8004bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8004b90:	5ccb      	ldrb	r3, [r1, r3]
 8004b92:	fa22 f303 	lsr.w	r3, r2, r3
 8004b96:	4a09      	ldr	r2, [pc, #36]	; (8004bbc <HAL_RCC_ClockConfig+0x1d0>)
 8004b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b9a:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <HAL_RCC_ClockConfig+0x1d4>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fc fc04 	bl	80013ac <HAL_InitTick>

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40023c00 	.word	0x40023c00
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	0800e490 	.word	0x0800e490
 8004bbc:	20000004 	.word	0x20000004
 8004bc0:	20000008 	.word	0x20000008

08004bc4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <HAL_RCC_EnableCSS+0x1c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a04      	ldr	r2, [pc, #16]	; (8004be0 <HAL_RCC_EnableCSS+0x1c>)
 8004bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bd2:	6013      	str	r3, [r2, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	40023800 	.word	0x40023800

08004be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be4:	b5b0      	push	{r4, r5, r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004bea:	2100      	movs	r1, #0
 8004bec:	6079      	str	r1, [r7, #4]
 8004bee:	2100      	movs	r1, #0
 8004bf0:	60f9      	str	r1, [r7, #12]
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bfa:	4952      	ldr	r1, [pc, #328]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bfc:	6889      	ldr	r1, [r1, #8]
 8004bfe:	f001 010c 	and.w	r1, r1, #12
 8004c02:	2908      	cmp	r1, #8
 8004c04:	d00d      	beq.n	8004c22 <HAL_RCC_GetSysClockFreq+0x3e>
 8004c06:	2908      	cmp	r1, #8
 8004c08:	f200 8094 	bhi.w	8004d34 <HAL_RCC_GetSysClockFreq+0x150>
 8004c0c:	2900      	cmp	r1, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_RCC_GetSysClockFreq+0x32>
 8004c10:	2904      	cmp	r1, #4
 8004c12:	d003      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x38>
 8004c14:	e08e      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c16:	4b4c      	ldr	r3, [pc, #304]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x164>)
 8004c18:	60bb      	str	r3, [r7, #8]
      break;
 8004c1a:	e08e      	b.n	8004d3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c1c:	4b4b      	ldr	r3, [pc, #300]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x168>)
 8004c1e:	60bb      	str	r3, [r7, #8]
      break;
 8004c20:	e08b      	b.n	8004d3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c22:	4948      	ldr	r1, [pc, #288]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c24:	6849      	ldr	r1, [r1, #4]
 8004c26:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004c2a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c2c:	4945      	ldr	r1, [pc, #276]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c2e:	6849      	ldr	r1, [r1, #4]
 8004c30:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004c34:	2900      	cmp	r1, #0
 8004c36:	d024      	beq.n	8004c82 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c38:	4942      	ldr	r1, [pc, #264]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c3a:	6849      	ldr	r1, [r1, #4]
 8004c3c:	0989      	lsrs	r1, r1, #6
 8004c3e:	4608      	mov	r0, r1
 8004c40:	f04f 0100 	mov.w	r1, #0
 8004c44:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004c48:	f04f 0500 	mov.w	r5, #0
 8004c4c:	ea00 0204 	and.w	r2, r0, r4
 8004c50:	ea01 0305 	and.w	r3, r1, r5
 8004c54:	493d      	ldr	r1, [pc, #244]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x168>)
 8004c56:	fb01 f003 	mul.w	r0, r1, r3
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	fb01 f102 	mul.w	r1, r1, r2
 8004c60:	1844      	adds	r4, r0, r1
 8004c62:	493a      	ldr	r1, [pc, #232]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x168>)
 8004c64:	fba2 0101 	umull	r0, r1, r2, r1
 8004c68:	1863      	adds	r3, r4, r1
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	f7fb fad4 	bl	8000220 <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e04a      	b.n	8004d18 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c82:	4b30      	ldr	r3, [pc, #192]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	099b      	lsrs	r3, r3, #6
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f04f 0300 	mov.w	r3, #0
 8004c8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c92:	f04f 0100 	mov.w	r1, #0
 8004c96:	ea02 0400 	and.w	r4, r2, r0
 8004c9a:	ea03 0501 	and.w	r5, r3, r1
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	014b      	lsls	r3, r1, #5
 8004cac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cb0:	0142      	lsls	r2, r0, #5
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	1b00      	subs	r0, r0, r4
 8004cb8:	eb61 0105 	sbc.w	r1, r1, r5
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	018b      	lsls	r3, r1, #6
 8004cc6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004cca:	0182      	lsls	r2, r0, #6
 8004ccc:	1a12      	subs	r2, r2, r0
 8004cce:	eb63 0301 	sbc.w	r3, r3, r1
 8004cd2:	f04f 0000 	mov.w	r0, #0
 8004cd6:	f04f 0100 	mov.w	r1, #0
 8004cda:	00d9      	lsls	r1, r3, #3
 8004cdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ce0:	00d0      	lsls	r0, r2, #3
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	1912      	adds	r2, r2, r4
 8004ce8:	eb45 0303 	adc.w	r3, r5, r3
 8004cec:	f04f 0000 	mov.w	r0, #0
 8004cf0:	f04f 0100 	mov.w	r1, #0
 8004cf4:	0299      	lsls	r1, r3, #10
 8004cf6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004cfa:	0290      	lsls	r0, r2, #10
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4610      	mov	r0, r2
 8004d02:	4619      	mov	r1, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	461a      	mov	r2, r3
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	f7fb fa88 	bl	8000220 <__aeabi_uldivmod>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4613      	mov	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	0c1b      	lsrs	r3, r3, #16
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	3301      	adds	r3, #1
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	60bb      	str	r3, [r7, #8]
      break;
 8004d32:	e002      	b.n	8004d3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d34:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x164>)
 8004d36:	60bb      	str	r3, [r7, #8]
      break;
 8004d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bdb0      	pop	{r4, r5, r7, pc}
 8004d44:	40023800 	.word	0x40023800
 8004d48:	00f42400 	.word	0x00f42400
 8004d4c:	017d7840 	.word	0x017d7840

08004d50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d54:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d56:	681b      	ldr	r3, [r3, #0]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000004 	.word	0x20000004

08004d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d6c:	f7ff fff0 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0a9b      	lsrs	r3, r3, #10
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4903      	ldr	r1, [pc, #12]	; (8004d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	0800e4a0 	.word	0x0800e4a0

08004d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d94:	f7ff ffdc 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	0b5b      	lsrs	r3, r3, #13
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	4903      	ldr	r1, [pc, #12]	; (8004db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da6:	5ccb      	ldrb	r3, [r1, r3]
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40023800 	.word	0x40023800
 8004db4:	0800e4a0 	.word	0x0800e4a0

08004db8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	220f      	movs	r2, #15
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004dc8:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <HAL_RCC_GetClockConfig+0x5c>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 0203 	and.w	r2, r3, #3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <HAL_RCC_GetClockConfig+0x5c>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <HAL_RCC_GetClockConfig+0x5c>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <HAL_RCC_GetClockConfig+0x5c>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	08db      	lsrs	r3, r3, #3
 8004df2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <HAL_RCC_GetClockConfig+0x60>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 020f 	and.w	r2, r3, #15
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	601a      	str	r2, [r3, #0]
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40023c00 	.word	0x40023c00

08004e1c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <HAL_RCC_NMI_IRQHandler+0x20>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e28:	2b80      	cmp	r3, #128	; 0x80
 8004e2a:	d104      	bne.n	8004e36 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004e2c:	f000 f80a 	bl	8004e44 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004e30:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004e32:	2280      	movs	r2, #128	; 0x80
 8004e34:	701a      	strb	r2, [r3, #0]
  }
}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	4002380e 	.word	0x4002380e

08004e44 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d012      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e78:	4b65      	ldr	r3, [pc, #404]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	4a64      	ldr	r2, [pc, #400]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e82:	6093      	str	r3, [r2, #8]
 8004e84:	4b62      	ldr	r3, [pc, #392]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	4960      	ldr	r1, [pc, #384]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d017      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eaa:	4b59      	ldr	r3, [pc, #356]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb8:	4955      	ldr	r1, [pc, #340]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec8:	d101      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d017      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ee6:	4b4a      	ldr	r3, [pc, #296]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	4946      	ldr	r1, [pc, #280]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f04:	d101      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8004f06:	2301      	movs	r3, #1
 8004f08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8004f12:	2301      	movs	r3, #1
 8004f14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 808b 	beq.w	800503a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f24:	4b3a      	ldr	r3, [pc, #232]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	4a39      	ldr	r2, [pc, #228]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8004f30:	4b37      	ldr	r3, [pc, #220]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f3c:	4b35      	ldr	r3, [pc, #212]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a34      	ldr	r2, [pc, #208]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f48:	f7fc ff78 	bl	8001e3c <HAL_GetTick>
 8004f4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f50:	f7fc ff74 	bl	8001e3c <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	; 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e2bc      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f62:	4b2c      	ldr	r3, [pc, #176]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f6e:	4b28      	ldr	r3, [pc, #160]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d035      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d02e      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f8c:	4b20      	ldr	r3, [pc, #128]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f96:	4b1e      	ldr	r3, [pc, #120]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	4a1d      	ldr	r2, [pc, #116]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa2:	4b1b      	ldr	r3, [pc, #108]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa6:	4a1a      	ldr	r2, [pc, #104]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004fae:	4a18      	ldr	r2, [pc, #96]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fb4:	4b16      	ldr	r3, [pc, #88]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d114      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc0:	f7fc ff3c 	bl	8001e3c <HAL_GetTick>
 8004fc4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc6:	e00a      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc8:	f7fc ff38 	bl	8001e3c <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e27e      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0ee      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ff6:	d111      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005004:	4b04      	ldr	r3, [pc, #16]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005006:	400b      	ands	r3, r1
 8005008:	4901      	ldr	r1, [pc, #4]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800500a:	4313      	orrs	r3, r2
 800500c:	608b      	str	r3, [r1, #8]
 800500e:	e00b      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005010:	40023800 	.word	0x40023800
 8005014:	40007000 	.word	0x40007000
 8005018:	0ffffcff 	.word	0x0ffffcff
 800501c:	4ba4      	ldr	r3, [pc, #656]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	4aa3      	ldr	r2, [pc, #652]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005022:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005026:	6093      	str	r3, [r2, #8]
 8005028:	4ba1      	ldr	r3, [pc, #644]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800502a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005034:	499e      	ldr	r1, [pc, #632]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005036:	4313      	orrs	r3, r2
 8005038:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	2b00      	cmp	r3, #0
 8005044:	d010      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005046:	4b9a      	ldr	r3, [pc, #616]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800504c:	4a98      	ldr	r2, [pc, #608]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800504e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005052:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005056:	4b96      	ldr	r3, [pc, #600]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005058:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	4993      	ldr	r1, [pc, #588]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005074:	4b8e      	ldr	r3, [pc, #568]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005082:	498b      	ldr	r1, [pc, #556]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005096:	4b86      	ldr	r3, [pc, #536]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a4:	4982      	ldr	r1, [pc, #520]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050b8:	4b7d      	ldr	r3, [pc, #500]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050c6:	497a      	ldr	r1, [pc, #488]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050da:	4b75      	ldr	r3, [pc, #468]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e0:	f023 0203 	bic.w	r2, r3, #3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	4971      	ldr	r1, [pc, #452]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050fc:	4b6c      	ldr	r3, [pc, #432]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	f023 020c 	bic.w	r2, r3, #12
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	4969      	ldr	r1, [pc, #420]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800511e:	4b64      	ldr	r3, [pc, #400]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005124:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512c:	4960      	ldr	r1, [pc, #384]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005140:	4b5b      	ldr	r3, [pc, #364]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514e:	4958      	ldr	r1, [pc, #352]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005162:	4b53      	ldr	r3, [pc, #332]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005170:	494f      	ldr	r1, [pc, #316]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005184:	4b4a      	ldr	r3, [pc, #296]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005192:	4947      	ldr	r1, [pc, #284]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80051a6:	4b42      	ldr	r3, [pc, #264]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	493e      	ldr	r1, [pc, #248]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80051c8:	4b39      	ldr	r3, [pc, #228]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d6:	4936      	ldr	r1, [pc, #216]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d011      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051ea:	4b31      	ldr	r3, [pc, #196]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f8:	492d      	ldr	r1, [pc, #180]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005208:	d101      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800520a:	2301      	movs	r3, #1
 800520c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800521a:	4b25      	ldr	r3, [pc, #148]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005220:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005228:	4921      	ldr	r1, [pc, #132]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800523c:	4b1c      	ldr	r3, [pc, #112]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800523e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005242:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800524a:	4919      	ldr	r1, [pc, #100]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800525e:	4b14      	ldr	r3, [pc, #80]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005264:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800526c:	4910      	ldr	r1, [pc, #64]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d006      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 809d 	beq.w	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a08      	ldr	r2, [pc, #32]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800528e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005294:	f7fc fdd2 	bl	8001e3c <HAL_GetTick>
 8005298:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800529a:	e00b      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800529c:	f7fc fdce 	bl	8001e3c <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b64      	cmp	r3, #100	; 0x64
 80052a8:	d904      	bls.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e116      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x688>
 80052ae:	bf00      	nop
 80052b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052b4:	4b8b      	ldr	r3, [pc, #556]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1ed      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d017      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d113      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052d4:	4b83      	ldr	r3, [pc, #524]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80052d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052da:	0e1b      	lsrs	r3, r3, #24
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	019a      	lsls	r2, r3, #6
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	061b      	lsls	r3, r3, #24
 80052ec:	431a      	orrs	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	071b      	lsls	r3, r3, #28
 80052f4:	497b      	ldr	r1, [pc, #492]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d004      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005310:	d00a      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800531a:	2b00      	cmp	r3, #0
 800531c:	d024      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005326:	d11f      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005328:	4b6e      	ldr	r3, [pc, #440]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800532a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800532e:	0f1b      	lsrs	r3, r3, #28
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	019a      	lsls	r2, r3, #6
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	061b      	lsls	r3, r3, #24
 8005342:	431a      	orrs	r2, r3
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	071b      	lsls	r3, r3, #28
 8005348:	4966      	ldr	r1, [pc, #408]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005350:	4b64      	ldr	r3, [pc, #400]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005356:	f023 021f 	bic.w	r2, r3, #31
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	3b01      	subs	r3, #1
 8005360:	4960      	ldr	r1, [pc, #384]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00d      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	019a      	lsls	r2, r3, #6
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	061b      	lsls	r3, r3, #24
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	071b      	lsls	r3, r3, #28
 8005388:	4956      	ldr	r1, [pc, #344]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005390:	4b54      	ldr	r3, [pc, #336]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a53      	ldr	r2, [pc, #332]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005396:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800539a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800539c:	f7fc fd4e 	bl	8001e3c <HAL_GetTick>
 80053a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053a4:	f7fc fd4a 	bl	8001e3c <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b64      	cmp	r3, #100	; 0x64
 80053b0:	d901      	bls.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e092      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053b6:	4b4b      	ldr	r3, [pc, #300]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	f040 8088 	bne.w	80054da <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80053ca:	4b46      	ldr	r3, [pc, #280]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a45      	ldr	r2, [pc, #276]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80053d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d6:	f7fc fd31 	bl	8001e3c <HAL_GetTick>
 80053da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053de:	f7fc fd2d 	bl	8001e3c <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b64      	cmp	r3, #100	; 0x64
 80053ea:	d901      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e075      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053f0:	4b3c      	ldr	r3, [pc, #240]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053fc:	d0ef      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	2b00      	cmp	r3, #0
 8005410:	d009      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800541a:	2b00      	cmp	r3, #0
 800541c:	d024      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005422:	2b00      	cmp	r3, #0
 8005424:	d120      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005426:	4b2f      	ldr	r3, [pc, #188]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	0c1b      	lsrs	r3, r3, #16
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	019a      	lsls	r2, r3, #6
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	041b      	lsls	r3, r3, #16
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	061b      	lsls	r3, r3, #24
 8005446:	4927      	ldr	r1, [pc, #156]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800544e:	4b25      	ldr	r3, [pc, #148]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005454:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	3b01      	subs	r3, #1
 800545e:	021b      	lsls	r3, r3, #8
 8005460:	4920      	ldr	r1, [pc, #128]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d018      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800547c:	d113      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800547e:	4b19      	ldr	r3, [pc, #100]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	0e1b      	lsrs	r3, r3, #24
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	019a      	lsls	r2, r3, #6
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	431a      	orrs	r2, r3
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	061b      	lsls	r3, r3, #24
 800549e:	4911      	ldr	r1, [pc, #68]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054a6:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a0e      	ldr	r2, [pc, #56]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80054ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b2:	f7fc fcc3 	bl	8001e3c <HAL_GetTick>
 80054b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054b8:	e008      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054ba:	f7fc fcbf 	bl	8001e3c <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b64      	cmp	r3, #100	; 0x64
 80054c6:	d901      	bls.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e007      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054cc:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d8:	d1ef      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3720      	adds	r7, #32
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40023800 	.word	0x40023800

080054e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e049      	b.n	800558e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f841 	bl	8005596 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3304      	adds	r3, #4
 8005524:	4619      	mov	r1, r3
 8005526:	4610      	mov	r0, r2
 8005528:	f000 fa00 	bl	800592c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d001      	beq.n	80055c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e054      	b.n	800566e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a26      	ldr	r2, [pc, #152]	; (800567c <HAL_TIM_Base_Start_IT+0xd0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d022      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x80>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ee:	d01d      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x80>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a22      	ldr	r2, [pc, #136]	; (8005680 <HAL_TIM_Base_Start_IT+0xd4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d018      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x80>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a21      	ldr	r2, [pc, #132]	; (8005684 <HAL_TIM_Base_Start_IT+0xd8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d013      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x80>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1f      	ldr	r2, [pc, #124]	; (8005688 <HAL_TIM_Base_Start_IT+0xdc>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00e      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x80>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1e      	ldr	r2, [pc, #120]	; (800568c <HAL_TIM_Base_Start_IT+0xe0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d009      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x80>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1c      	ldr	r2, [pc, #112]	; (8005690 <HAL_TIM_Base_Start_IT+0xe4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x80>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1b      	ldr	r2, [pc, #108]	; (8005694 <HAL_TIM_Base_Start_IT+0xe8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d115      	bne.n	8005658 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	4b19      	ldr	r3, [pc, #100]	; (8005698 <HAL_TIM_Base_Start_IT+0xec>)
 8005634:	4013      	ands	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b06      	cmp	r3, #6
 800563c:	d015      	beq.n	800566a <HAL_TIM_Base_Start_IT+0xbe>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005644:	d011      	beq.n	800566a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005656:	e008      	b.n	800566a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	e000      	b.n	800566c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40010000 	.word	0x40010000
 8005680:	40000400 	.word	0x40000400
 8005684:	40000800 	.word	0x40000800
 8005688:	40000c00 	.word	0x40000c00
 800568c:	40010400 	.word	0x40010400
 8005690:	40014000 	.word	0x40014000
 8005694:	40001800 	.word	0x40001800
 8005698:	00010007 	.word	0x00010007

0800569c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d122      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d11b      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0202 	mvn.w	r2, #2
 80056c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f905 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 80056e4:	e005      	b.n	80056f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f8f7 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f908 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b04      	cmp	r3, #4
 8005704:	d122      	bne.n	800574c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b04      	cmp	r3, #4
 8005712:	d11b      	bne.n	800574c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0204 	mvn.w	r2, #4
 800571c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f8db 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 8005738:	e005      	b.n	8005746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f8cd 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f8de 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b08      	cmp	r3, #8
 8005758:	d122      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b08      	cmp	r3, #8
 8005766:	d11b      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0208 	mvn.w	r2, #8
 8005770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2204      	movs	r2, #4
 8005776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f8b1 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 800578c:	e005      	b.n	800579a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f8a3 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f8b4 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0310 	and.w	r3, r3, #16
 80057aa:	2b10      	cmp	r3, #16
 80057ac:	d122      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d11b      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0210 	mvn.w	r2, #16
 80057c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2208      	movs	r2, #8
 80057ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f887 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 80057e0:	e005      	b.n	80057ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f879 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f88a 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d10e      	bne.n	8005820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b01      	cmp	r3, #1
 800580e:	d107      	bne.n	8005820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0201 	mvn.w	r2, #1
 8005818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fb fb94 	bl	8000f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582a:	2b80      	cmp	r3, #128	; 0x80
 800582c:	d10e      	bne.n	800584c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005838:	2b80      	cmp	r3, #128	; 0x80
 800583a:	d107      	bne.n	800584c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f91a 	bl	8005a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800585a:	d10e      	bne.n	800587a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005866:	2b80      	cmp	r3, #128	; 0x80
 8005868:	d107      	bne.n	800587a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f90d 	bl	8005a94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b40      	cmp	r3, #64	; 0x40
 8005886:	d10e      	bne.n	80058a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b40      	cmp	r3, #64	; 0x40
 8005894:	d107      	bne.n	80058a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800589e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f838 	bl	8005916 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d10e      	bne.n	80058d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d107      	bne.n	80058d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f06f 0220 	mvn.w	r2, #32
 80058ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f8cd 	bl	8005a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a40      	ldr	r2, [pc, #256]	; (8005a40 <TIM_Base_SetConfig+0x114>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594a:	d00f      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a3d      	ldr	r2, [pc, #244]	; (8005a44 <TIM_Base_SetConfig+0x118>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00b      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a3c      	ldr	r2, [pc, #240]	; (8005a48 <TIM_Base_SetConfig+0x11c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3b      	ldr	r2, [pc, #236]	; (8005a4c <TIM_Base_SetConfig+0x120>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a3a      	ldr	r2, [pc, #232]	; (8005a50 <TIM_Base_SetConfig+0x124>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d108      	bne.n	800597e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a2f      	ldr	r2, [pc, #188]	; (8005a40 <TIM_Base_SetConfig+0x114>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d02b      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598c:	d027      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2c      	ldr	r2, [pc, #176]	; (8005a44 <TIM_Base_SetConfig+0x118>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d023      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2b      	ldr	r2, [pc, #172]	; (8005a48 <TIM_Base_SetConfig+0x11c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01f      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <TIM_Base_SetConfig+0x120>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d01b      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a29      	ldr	r2, [pc, #164]	; (8005a50 <TIM_Base_SetConfig+0x124>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d017      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a28      	ldr	r2, [pc, #160]	; (8005a54 <TIM_Base_SetConfig+0x128>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a27      	ldr	r2, [pc, #156]	; (8005a58 <TIM_Base_SetConfig+0x12c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00f      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a26      	ldr	r2, [pc, #152]	; (8005a5c <TIM_Base_SetConfig+0x130>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00b      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a25      	ldr	r2, [pc, #148]	; (8005a60 <TIM_Base_SetConfig+0x134>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d007      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a24      	ldr	r2, [pc, #144]	; (8005a64 <TIM_Base_SetConfig+0x138>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a23      	ldr	r2, [pc, #140]	; (8005a68 <TIM_Base_SetConfig+0x13c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d108      	bne.n	80059f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a0a      	ldr	r2, [pc, #40]	; (8005a40 <TIM_Base_SetConfig+0x114>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_Base_SetConfig+0xf8>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a0c      	ldr	r2, [pc, #48]	; (8005a50 <TIM_Base_SetConfig+0x124>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d103      	bne.n	8005a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	615a      	str	r2, [r3, #20]
}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40000c00 	.word	0x40000c00
 8005a50:	40010400 	.word	0x40010400
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800
 8005a60:	40001800 	.word	0x40001800
 8005a64:	40001c00 	.word	0x40001c00
 8005a68:	40002000 	.word	0x40002000

08005a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e040      	b.n	8005b3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fb fdee 	bl	80016ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2224      	movs	r2, #36	; 0x24
 8005ad4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0201 	bic.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fb1e 	bl	8006128 <UART_SetConfig>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e022      	b.n	8005b3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fd74 	bl	80065ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fdfb 	bl	8006730 <UART_CheckIdleState>
 8005b3a:	4603      	mov	r3, r0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b0ba      	sub	sp, #232	; 0xe8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005b6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b72:	4013      	ands	r3, r2
 8005b74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d115      	bne.n	8005bac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00f      	beq.n	8005bac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b90:	f003 0320 	and.w	r3, r3, #32
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d009      	beq.n	8005bac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 8297 	beq.w	80060d0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	4798      	blx	r3
      }
      return;
 8005baa:	e291      	b.n	80060d0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005bac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8117 	beq.w	8005de4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d106      	bne.n	8005bd0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005bc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005bc6:	4b85      	ldr	r3, [pc, #532]	; (8005ddc <HAL_UART_IRQHandler+0x298>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 810a 	beq.w	8005de4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d011      	beq.n	8005c00 <HAL_UART_IRQHandler+0xbc>
 8005bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00b      	beq.n	8005c00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2201      	movs	r2, #1
 8005bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bf6:	f043 0201 	orr.w	r2, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d011      	beq.n	8005c30 <HAL_UART_IRQHandler+0xec>
 8005c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00b      	beq.n	8005c30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c26:	f043 0204 	orr.w	r2, r3, #4
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d011      	beq.n	8005c60 <HAL_UART_IRQHandler+0x11c>
 8005c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00b      	beq.n	8005c60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2204      	movs	r2, #4
 8005c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c56:	f043 0202 	orr.w	r2, r3, #2
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c64:	f003 0308 	and.w	r3, r3, #8
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d017      	beq.n	8005c9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d105      	bne.n	8005c84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00b      	beq.n	8005c9c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2208      	movs	r2, #8
 8005c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c92:	f043 0208 	orr.w	r2, r3, #8
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d012      	beq.n	8005cce <HAL_UART_IRQHandler+0x18a>
 8005ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00c      	beq.n	8005cce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc4:	f043 0220 	orr.w	r2, r3, #32
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 81fd 	beq.w	80060d4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00d      	beq.n	8005d02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d007      	beq.n	8005d02 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	d005      	beq.n	8005d26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d04f      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fdff 	bl	800692a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d141      	bne.n	8005dbe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3308      	adds	r3, #8
 8005d62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1d9      	bne.n	8005d3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d013      	beq.n	8005db6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d92:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <HAL_UART_IRQHandler+0x29c>)
 8005d94:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fc faaf 	bl	80022fe <HAL_DMA_Abort_IT>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d017      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005db0:	4610      	mov	r0, r2
 8005db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db4:	e00f      	b.n	8005dd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f9a0 	bl	80060fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dbc:	e00b      	b.n	8005dd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f99c 	bl	80060fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc4:	e007      	b.n	8005dd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f998 	bl	80060fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005dd4:	e17e      	b.n	80060d4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd6:	bf00      	nop
    return;
 8005dd8:	e17c      	b.n	80060d4 <HAL_UART_IRQHandler+0x590>
 8005dda:	bf00      	nop
 8005ddc:	04000120 	.word	0x04000120
 8005de0:	080069f3 	.word	0x080069f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	f040 814c 	bne.w	8006086 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 8145 	beq.w	8006086 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 813e 	beq.w	8006086 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2210      	movs	r2, #16
 8005e10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1c:	2b40      	cmp	r3, #64	; 0x40
 8005e1e:	f040 80b6 	bne.w	8005f8e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 8150 	beq.w	80060d8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e42:	429a      	cmp	r2, r3
 8005e44:	f080 8148 	bcs.w	80060d8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5c:	f000 8086 	beq.w	8005f6c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1da      	bne.n	8005e60 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3308      	adds	r3, #8
 8005eb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb4:	e853 3f00 	ldrex	r3, [r3]
 8005eb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ebc:	f023 0301 	bic.w	r3, r3, #1
 8005ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3308      	adds	r3, #8
 8005eca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ece:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e1      	bne.n	8005eaa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3308      	adds	r3, #8
 8005eec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3308      	adds	r3, #8
 8005f06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e3      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f3c:	f023 0310 	bic.w	r3, r3, #16
 8005f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e4      	bne.n	8005f2c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fc f959 	bl	800221e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f8c2 	bl	8006110 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f8c:	e0a4      	b.n	80060d8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 8096 	beq.w	80060dc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005fb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 8091 	beq.w	80060dc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8005fde:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fe2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e4      	bne.n	8005fba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	e853 3f00 	ldrex	r3, [r3]
 8005ffe:	623b      	str	r3, [r7, #32]
   return(result);
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	f023 0301 	bic.w	r3, r3, #1
 8006006:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3308      	adds	r3, #8
 8006010:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006014:	633a      	str	r2, [r7, #48]	; 0x30
 8006016:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800601a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e3      	bne.n	8005ff0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	60fb      	str	r3, [r7, #12]
   return(result);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f023 0310 	bic.w	r3, r3, #16
 8006050:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800605e:	61fb      	str	r3, [r7, #28]
 8006060:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	69b9      	ldr	r1, [r7, #24]
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	617b      	str	r3, [r7, #20]
   return(result);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e4      	bne.n	800603c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f846 	bl	8006110 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006084:	e02a      	b.n	80060dc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800608a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00e      	beq.n	80060b0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	2b00      	cmp	r3, #0
 800609c:	d008      	beq.n	80060b0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01c      	beq.n	80060e0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4798      	blx	r3
    }
    return;
 80060ae:	e017      	b.n	80060e0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d012      	beq.n	80060e2 <HAL_UART_IRQHandler+0x59e>
 80060bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00c      	beq.n	80060e2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fca8 	bl	8006a1e <UART_EndTransmit_IT>
    return;
 80060ce:	e008      	b.n	80060e2 <HAL_UART_IRQHandler+0x59e>
      return;
 80060d0:	bf00      	nop
 80060d2:	e006      	b.n	80060e2 <HAL_UART_IRQHandler+0x59e>
    return;
 80060d4:	bf00      	nop
 80060d6:	e004      	b.n	80060e2 <HAL_UART_IRQHandler+0x59e>
      return;
 80060d8:	bf00      	nop
 80060da:	e002      	b.n	80060e2 <HAL_UART_IRQHandler+0x59e>
      return;
 80060dc:	bf00      	nop
 80060de:	e000      	b.n	80060e2 <HAL_UART_IRQHandler+0x59e>
    return;
 80060e0:	bf00      	nop
  }

}
 80060e2:	37e8      	adds	r7, #232	; 0xe8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	431a      	orrs	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	4ba7      	ldr	r3, [pc, #668]	; (80063f0 <UART_SetConfig+0x2c8>)
 8006154:	4013      	ands	r3, r2
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	6979      	ldr	r1, [r7, #20]
 800615c:	430b      	orrs	r3, r1
 800615e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	430a      	orrs	r2, r1
 8006198:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a95      	ldr	r2, [pc, #596]	; (80063f4 <UART_SetConfig+0x2cc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d120      	bne.n	80061e6 <UART_SetConfig+0xbe>
 80061a4:	4b94      	ldr	r3, [pc, #592]	; (80063f8 <UART_SetConfig+0x2d0>)
 80061a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d816      	bhi.n	80061e0 <UART_SetConfig+0xb8>
 80061b2:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <UART_SetConfig+0x90>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	080061c9 	.word	0x080061c9
 80061bc:	080061d5 	.word	0x080061d5
 80061c0:	080061cf 	.word	0x080061cf
 80061c4:	080061db 	.word	0x080061db
 80061c8:	2301      	movs	r3, #1
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e14f      	b.n	800646e <UART_SetConfig+0x346>
 80061ce:	2302      	movs	r3, #2
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e14c      	b.n	800646e <UART_SetConfig+0x346>
 80061d4:	2304      	movs	r3, #4
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	e149      	b.n	800646e <UART_SetConfig+0x346>
 80061da:	2308      	movs	r3, #8
 80061dc:	77fb      	strb	r3, [r7, #31]
 80061de:	e146      	b.n	800646e <UART_SetConfig+0x346>
 80061e0:	2310      	movs	r3, #16
 80061e2:	77fb      	strb	r3, [r7, #31]
 80061e4:	e143      	b.n	800646e <UART_SetConfig+0x346>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a84      	ldr	r2, [pc, #528]	; (80063fc <UART_SetConfig+0x2d4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d132      	bne.n	8006256 <UART_SetConfig+0x12e>
 80061f0:	4b81      	ldr	r3, [pc, #516]	; (80063f8 <UART_SetConfig+0x2d0>)
 80061f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f6:	f003 030c 	and.w	r3, r3, #12
 80061fa:	2b0c      	cmp	r3, #12
 80061fc:	d828      	bhi.n	8006250 <UART_SetConfig+0x128>
 80061fe:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <UART_SetConfig+0xdc>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	08006239 	.word	0x08006239
 8006208:	08006251 	.word	0x08006251
 800620c:	08006251 	.word	0x08006251
 8006210:	08006251 	.word	0x08006251
 8006214:	08006245 	.word	0x08006245
 8006218:	08006251 	.word	0x08006251
 800621c:	08006251 	.word	0x08006251
 8006220:	08006251 	.word	0x08006251
 8006224:	0800623f 	.word	0x0800623f
 8006228:	08006251 	.word	0x08006251
 800622c:	08006251 	.word	0x08006251
 8006230:	08006251 	.word	0x08006251
 8006234:	0800624b 	.word	0x0800624b
 8006238:	2300      	movs	r3, #0
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	e117      	b.n	800646e <UART_SetConfig+0x346>
 800623e:	2302      	movs	r3, #2
 8006240:	77fb      	strb	r3, [r7, #31]
 8006242:	e114      	b.n	800646e <UART_SetConfig+0x346>
 8006244:	2304      	movs	r3, #4
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e111      	b.n	800646e <UART_SetConfig+0x346>
 800624a:	2308      	movs	r3, #8
 800624c:	77fb      	strb	r3, [r7, #31]
 800624e:	e10e      	b.n	800646e <UART_SetConfig+0x346>
 8006250:	2310      	movs	r3, #16
 8006252:	77fb      	strb	r3, [r7, #31]
 8006254:	e10b      	b.n	800646e <UART_SetConfig+0x346>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a69      	ldr	r2, [pc, #420]	; (8006400 <UART_SetConfig+0x2d8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d120      	bne.n	80062a2 <UART_SetConfig+0x17a>
 8006260:	4b65      	ldr	r3, [pc, #404]	; (80063f8 <UART_SetConfig+0x2d0>)
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006266:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800626a:	2b30      	cmp	r3, #48	; 0x30
 800626c:	d013      	beq.n	8006296 <UART_SetConfig+0x16e>
 800626e:	2b30      	cmp	r3, #48	; 0x30
 8006270:	d814      	bhi.n	800629c <UART_SetConfig+0x174>
 8006272:	2b20      	cmp	r3, #32
 8006274:	d009      	beq.n	800628a <UART_SetConfig+0x162>
 8006276:	2b20      	cmp	r3, #32
 8006278:	d810      	bhi.n	800629c <UART_SetConfig+0x174>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <UART_SetConfig+0x15c>
 800627e:	2b10      	cmp	r3, #16
 8006280:	d006      	beq.n	8006290 <UART_SetConfig+0x168>
 8006282:	e00b      	b.n	800629c <UART_SetConfig+0x174>
 8006284:	2300      	movs	r3, #0
 8006286:	77fb      	strb	r3, [r7, #31]
 8006288:	e0f1      	b.n	800646e <UART_SetConfig+0x346>
 800628a:	2302      	movs	r3, #2
 800628c:	77fb      	strb	r3, [r7, #31]
 800628e:	e0ee      	b.n	800646e <UART_SetConfig+0x346>
 8006290:	2304      	movs	r3, #4
 8006292:	77fb      	strb	r3, [r7, #31]
 8006294:	e0eb      	b.n	800646e <UART_SetConfig+0x346>
 8006296:	2308      	movs	r3, #8
 8006298:	77fb      	strb	r3, [r7, #31]
 800629a:	e0e8      	b.n	800646e <UART_SetConfig+0x346>
 800629c:	2310      	movs	r3, #16
 800629e:	77fb      	strb	r3, [r7, #31]
 80062a0:	e0e5      	b.n	800646e <UART_SetConfig+0x346>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a57      	ldr	r2, [pc, #348]	; (8006404 <UART_SetConfig+0x2dc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d120      	bne.n	80062ee <UART_SetConfig+0x1c6>
 80062ac:	4b52      	ldr	r3, [pc, #328]	; (80063f8 <UART_SetConfig+0x2d0>)
 80062ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062b6:	2bc0      	cmp	r3, #192	; 0xc0
 80062b8:	d013      	beq.n	80062e2 <UART_SetConfig+0x1ba>
 80062ba:	2bc0      	cmp	r3, #192	; 0xc0
 80062bc:	d814      	bhi.n	80062e8 <UART_SetConfig+0x1c0>
 80062be:	2b80      	cmp	r3, #128	; 0x80
 80062c0:	d009      	beq.n	80062d6 <UART_SetConfig+0x1ae>
 80062c2:	2b80      	cmp	r3, #128	; 0x80
 80062c4:	d810      	bhi.n	80062e8 <UART_SetConfig+0x1c0>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <UART_SetConfig+0x1a8>
 80062ca:	2b40      	cmp	r3, #64	; 0x40
 80062cc:	d006      	beq.n	80062dc <UART_SetConfig+0x1b4>
 80062ce:	e00b      	b.n	80062e8 <UART_SetConfig+0x1c0>
 80062d0:	2300      	movs	r3, #0
 80062d2:	77fb      	strb	r3, [r7, #31]
 80062d4:	e0cb      	b.n	800646e <UART_SetConfig+0x346>
 80062d6:	2302      	movs	r3, #2
 80062d8:	77fb      	strb	r3, [r7, #31]
 80062da:	e0c8      	b.n	800646e <UART_SetConfig+0x346>
 80062dc:	2304      	movs	r3, #4
 80062de:	77fb      	strb	r3, [r7, #31]
 80062e0:	e0c5      	b.n	800646e <UART_SetConfig+0x346>
 80062e2:	2308      	movs	r3, #8
 80062e4:	77fb      	strb	r3, [r7, #31]
 80062e6:	e0c2      	b.n	800646e <UART_SetConfig+0x346>
 80062e8:	2310      	movs	r3, #16
 80062ea:	77fb      	strb	r3, [r7, #31]
 80062ec:	e0bf      	b.n	800646e <UART_SetConfig+0x346>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a45      	ldr	r2, [pc, #276]	; (8006408 <UART_SetConfig+0x2e0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d125      	bne.n	8006344 <UART_SetConfig+0x21c>
 80062f8:	4b3f      	ldr	r3, [pc, #252]	; (80063f8 <UART_SetConfig+0x2d0>)
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006306:	d017      	beq.n	8006338 <UART_SetConfig+0x210>
 8006308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800630c:	d817      	bhi.n	800633e <UART_SetConfig+0x216>
 800630e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006312:	d00b      	beq.n	800632c <UART_SetConfig+0x204>
 8006314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006318:	d811      	bhi.n	800633e <UART_SetConfig+0x216>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <UART_SetConfig+0x1fe>
 800631e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006322:	d006      	beq.n	8006332 <UART_SetConfig+0x20a>
 8006324:	e00b      	b.n	800633e <UART_SetConfig+0x216>
 8006326:	2300      	movs	r3, #0
 8006328:	77fb      	strb	r3, [r7, #31]
 800632a:	e0a0      	b.n	800646e <UART_SetConfig+0x346>
 800632c:	2302      	movs	r3, #2
 800632e:	77fb      	strb	r3, [r7, #31]
 8006330:	e09d      	b.n	800646e <UART_SetConfig+0x346>
 8006332:	2304      	movs	r3, #4
 8006334:	77fb      	strb	r3, [r7, #31]
 8006336:	e09a      	b.n	800646e <UART_SetConfig+0x346>
 8006338:	2308      	movs	r3, #8
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	e097      	b.n	800646e <UART_SetConfig+0x346>
 800633e:	2310      	movs	r3, #16
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	e094      	b.n	800646e <UART_SetConfig+0x346>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a30      	ldr	r2, [pc, #192]	; (800640c <UART_SetConfig+0x2e4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d125      	bne.n	800639a <UART_SetConfig+0x272>
 800634e:	4b2a      	ldr	r3, [pc, #168]	; (80063f8 <UART_SetConfig+0x2d0>)
 8006350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006354:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006358:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800635c:	d017      	beq.n	800638e <UART_SetConfig+0x266>
 800635e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006362:	d817      	bhi.n	8006394 <UART_SetConfig+0x26c>
 8006364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006368:	d00b      	beq.n	8006382 <UART_SetConfig+0x25a>
 800636a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800636e:	d811      	bhi.n	8006394 <UART_SetConfig+0x26c>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <UART_SetConfig+0x254>
 8006374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006378:	d006      	beq.n	8006388 <UART_SetConfig+0x260>
 800637a:	e00b      	b.n	8006394 <UART_SetConfig+0x26c>
 800637c:	2301      	movs	r3, #1
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e075      	b.n	800646e <UART_SetConfig+0x346>
 8006382:	2302      	movs	r3, #2
 8006384:	77fb      	strb	r3, [r7, #31]
 8006386:	e072      	b.n	800646e <UART_SetConfig+0x346>
 8006388:	2304      	movs	r3, #4
 800638a:	77fb      	strb	r3, [r7, #31]
 800638c:	e06f      	b.n	800646e <UART_SetConfig+0x346>
 800638e:	2308      	movs	r3, #8
 8006390:	77fb      	strb	r3, [r7, #31]
 8006392:	e06c      	b.n	800646e <UART_SetConfig+0x346>
 8006394:	2310      	movs	r3, #16
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e069      	b.n	800646e <UART_SetConfig+0x346>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a1c      	ldr	r2, [pc, #112]	; (8006410 <UART_SetConfig+0x2e8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d137      	bne.n	8006414 <UART_SetConfig+0x2ec>
 80063a4:	4b14      	ldr	r3, [pc, #80]	; (80063f8 <UART_SetConfig+0x2d0>)
 80063a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063b2:	d017      	beq.n	80063e4 <UART_SetConfig+0x2bc>
 80063b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063b8:	d817      	bhi.n	80063ea <UART_SetConfig+0x2c2>
 80063ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063be:	d00b      	beq.n	80063d8 <UART_SetConfig+0x2b0>
 80063c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c4:	d811      	bhi.n	80063ea <UART_SetConfig+0x2c2>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <UART_SetConfig+0x2aa>
 80063ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ce:	d006      	beq.n	80063de <UART_SetConfig+0x2b6>
 80063d0:	e00b      	b.n	80063ea <UART_SetConfig+0x2c2>
 80063d2:	2300      	movs	r3, #0
 80063d4:	77fb      	strb	r3, [r7, #31]
 80063d6:	e04a      	b.n	800646e <UART_SetConfig+0x346>
 80063d8:	2302      	movs	r3, #2
 80063da:	77fb      	strb	r3, [r7, #31]
 80063dc:	e047      	b.n	800646e <UART_SetConfig+0x346>
 80063de:	2304      	movs	r3, #4
 80063e0:	77fb      	strb	r3, [r7, #31]
 80063e2:	e044      	b.n	800646e <UART_SetConfig+0x346>
 80063e4:	2308      	movs	r3, #8
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e041      	b.n	800646e <UART_SetConfig+0x346>
 80063ea:	2310      	movs	r3, #16
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e03e      	b.n	800646e <UART_SetConfig+0x346>
 80063f0:	efff69f3 	.word	0xefff69f3
 80063f4:	40011000 	.word	0x40011000
 80063f8:	40023800 	.word	0x40023800
 80063fc:	40004400 	.word	0x40004400
 8006400:	40004800 	.word	0x40004800
 8006404:	40004c00 	.word	0x40004c00
 8006408:	40005000 	.word	0x40005000
 800640c:	40011400 	.word	0x40011400
 8006410:	40007800 	.word	0x40007800
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a71      	ldr	r2, [pc, #452]	; (80065e0 <UART_SetConfig+0x4b8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d125      	bne.n	800646a <UART_SetConfig+0x342>
 800641e:	4b71      	ldr	r3, [pc, #452]	; (80065e4 <UART_SetConfig+0x4bc>)
 8006420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006424:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006428:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800642c:	d017      	beq.n	800645e <UART_SetConfig+0x336>
 800642e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006432:	d817      	bhi.n	8006464 <UART_SetConfig+0x33c>
 8006434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006438:	d00b      	beq.n	8006452 <UART_SetConfig+0x32a>
 800643a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800643e:	d811      	bhi.n	8006464 <UART_SetConfig+0x33c>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <UART_SetConfig+0x324>
 8006444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006448:	d006      	beq.n	8006458 <UART_SetConfig+0x330>
 800644a:	e00b      	b.n	8006464 <UART_SetConfig+0x33c>
 800644c:	2300      	movs	r3, #0
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e00d      	b.n	800646e <UART_SetConfig+0x346>
 8006452:	2302      	movs	r3, #2
 8006454:	77fb      	strb	r3, [r7, #31]
 8006456:	e00a      	b.n	800646e <UART_SetConfig+0x346>
 8006458:	2304      	movs	r3, #4
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e007      	b.n	800646e <UART_SetConfig+0x346>
 800645e:	2308      	movs	r3, #8
 8006460:	77fb      	strb	r3, [r7, #31]
 8006462:	e004      	b.n	800646e <UART_SetConfig+0x346>
 8006464:	2310      	movs	r3, #16
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e001      	b.n	800646e <UART_SetConfig+0x346>
 800646a:	2310      	movs	r3, #16
 800646c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006476:	d15a      	bne.n	800652e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006478:	7ffb      	ldrb	r3, [r7, #31]
 800647a:	2b08      	cmp	r3, #8
 800647c:	d827      	bhi.n	80064ce <UART_SetConfig+0x3a6>
 800647e:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <UART_SetConfig+0x35c>)
 8006480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006484:	080064a9 	.word	0x080064a9
 8006488:	080064b1 	.word	0x080064b1
 800648c:	080064b9 	.word	0x080064b9
 8006490:	080064cf 	.word	0x080064cf
 8006494:	080064bf 	.word	0x080064bf
 8006498:	080064cf 	.word	0x080064cf
 800649c:	080064cf 	.word	0x080064cf
 80064a0:	080064cf 	.word	0x080064cf
 80064a4:	080064c7 	.word	0x080064c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064a8:	f7fe fc5e 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 80064ac:	61b8      	str	r0, [r7, #24]
        break;
 80064ae:	e013      	b.n	80064d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064b0:	f7fe fc6e 	bl	8004d90 <HAL_RCC_GetPCLK2Freq>
 80064b4:	61b8      	str	r0, [r7, #24]
        break;
 80064b6:	e00f      	b.n	80064d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064b8:	4b4b      	ldr	r3, [pc, #300]	; (80065e8 <UART_SetConfig+0x4c0>)
 80064ba:	61bb      	str	r3, [r7, #24]
        break;
 80064bc:	e00c      	b.n	80064d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064be:	f7fe fb91 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 80064c2:	61b8      	str	r0, [r7, #24]
        break;
 80064c4:	e008      	b.n	80064d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ca:	61bb      	str	r3, [r7, #24]
        break;
 80064cc:	e004      	b.n	80064d8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	77bb      	strb	r3, [r7, #30]
        break;
 80064d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d074      	beq.n	80065c8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	005a      	lsls	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	085b      	lsrs	r3, r3, #1
 80064e8:	441a      	add	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	2b0f      	cmp	r3, #15
 80064f8:	d916      	bls.n	8006528 <UART_SetConfig+0x400>
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006500:	d212      	bcs.n	8006528 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	b29b      	uxth	r3, r3
 8006506:	f023 030f 	bic.w	r3, r3, #15
 800650a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	085b      	lsrs	r3, r3, #1
 8006510:	b29b      	uxth	r3, r3
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	b29a      	uxth	r2, r3
 8006518:	89fb      	ldrh	r3, [r7, #14]
 800651a:	4313      	orrs	r3, r2
 800651c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	89fa      	ldrh	r2, [r7, #14]
 8006524:	60da      	str	r2, [r3, #12]
 8006526:	e04f      	b.n	80065c8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	77bb      	strb	r3, [r7, #30]
 800652c:	e04c      	b.n	80065c8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800652e:	7ffb      	ldrb	r3, [r7, #31]
 8006530:	2b08      	cmp	r3, #8
 8006532:	d828      	bhi.n	8006586 <UART_SetConfig+0x45e>
 8006534:	a201      	add	r2, pc, #4	; (adr r2, 800653c <UART_SetConfig+0x414>)
 8006536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653a:	bf00      	nop
 800653c:	08006561 	.word	0x08006561
 8006540:	08006569 	.word	0x08006569
 8006544:	08006571 	.word	0x08006571
 8006548:	08006587 	.word	0x08006587
 800654c:	08006577 	.word	0x08006577
 8006550:	08006587 	.word	0x08006587
 8006554:	08006587 	.word	0x08006587
 8006558:	08006587 	.word	0x08006587
 800655c:	0800657f 	.word	0x0800657f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006560:	f7fe fc02 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8006564:	61b8      	str	r0, [r7, #24]
        break;
 8006566:	e013      	b.n	8006590 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006568:	f7fe fc12 	bl	8004d90 <HAL_RCC_GetPCLK2Freq>
 800656c:	61b8      	str	r0, [r7, #24]
        break;
 800656e:	e00f      	b.n	8006590 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006570:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <UART_SetConfig+0x4c0>)
 8006572:	61bb      	str	r3, [r7, #24]
        break;
 8006574:	e00c      	b.n	8006590 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006576:	f7fe fb35 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 800657a:	61b8      	str	r0, [r7, #24]
        break;
 800657c:	e008      	b.n	8006590 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800657e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006582:	61bb      	str	r3, [r7, #24]
        break;
 8006584:	e004      	b.n	8006590 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	77bb      	strb	r3, [r7, #30]
        break;
 800658e:	bf00      	nop
    }

    if (pclk != 0U)
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d018      	beq.n	80065c8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	085a      	lsrs	r2, r3, #1
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	441a      	add	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2b0f      	cmp	r3, #15
 80065ae:	d909      	bls.n	80065c4 <UART_SetConfig+0x49c>
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065b6:	d205      	bcs.n	80065c4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	60da      	str	r2, [r3, #12]
 80065c2:	e001      	b.n	80065c8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80065d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3720      	adds	r7, #32
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	40007c00 	.word	0x40007c00
 80065e4:	40023800 	.word	0x40023800
 80065e8:	00f42400 	.word	0x00f42400

080065ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00a      	beq.n	8006616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00a      	beq.n	800665a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006680:	f003 0310 	and.w	r3, r3, #16
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00a      	beq.n	800669e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01a      	beq.n	8006702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ea:	d10a      	bne.n	8006702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	605a      	str	r2, [r3, #4]
  }
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af02      	add	r7, sp, #8
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006740:	f7fb fb7c 	bl	8001e3c <HAL_GetTick>
 8006744:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	2b08      	cmp	r3, #8
 8006752:	d10e      	bne.n	8006772 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f81b 	bl	800679e <UART_WaitOnFlagUntilTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e011      	b.n	8006796 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2220      	movs	r2, #32
 8006776:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b09c      	sub	sp, #112	; 0x70
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	60f8      	str	r0, [r7, #12]
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	603b      	str	r3, [r7, #0]
 80067aa:	4613      	mov	r3, r2
 80067ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ae:	e0a7      	b.n	8006900 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	f000 80a3 	beq.w	8006900 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ba:	f7fb fb3f 	bl	8001e3c <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d302      	bcc.n	80067d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80067ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d13f      	bne.n	8006850 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067e4:	667b      	str	r3, [r7, #100]	; 0x64
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e6      	bne.n	80067d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3308      	adds	r3, #8
 8006808:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	663b      	str	r3, [r7, #96]	; 0x60
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3308      	adds	r3, #8
 8006820:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006822:	64ba      	str	r2, [r7, #72]	; 0x48
 8006824:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006826:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e5      	bne.n	8006802 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2220      	movs	r2, #32
 800683a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e068      	b.n	8006922 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d050      	beq.n	8006900 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800686c:	d148      	bne.n	8006900 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006876:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800688c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006896:	637b      	str	r3, [r7, #52]	; 0x34
 8006898:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800689c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e6      	bne.n	8006878 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3308      	adds	r3, #8
 80068b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	613b      	str	r3, [r7, #16]
   return(result);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f023 0301 	bic.w	r3, r3, #1
 80068c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3308      	adds	r3, #8
 80068c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068ca:	623a      	str	r2, [r7, #32]
 80068cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	69f9      	ldr	r1, [r7, #28]
 80068d0:	6a3a      	ldr	r2, [r7, #32]
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e5      	bne.n	80068aa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2220      	movs	r2, #32
 80068e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e010      	b.n	8006922 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69da      	ldr	r2, [r3, #28]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	4013      	ands	r3, r2
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	429a      	cmp	r2, r3
 800690e:	bf0c      	ite	eq
 8006910:	2301      	moveq	r3, #1
 8006912:	2300      	movne	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	461a      	mov	r2, r3
 8006918:	79fb      	ldrb	r3, [r7, #7]
 800691a:	429a      	cmp	r2, r3
 800691c:	f43f af48 	beq.w	80067b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3770      	adds	r7, #112	; 0x70
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800692a:	b480      	push	{r7}
 800692c:	b095      	sub	sp, #84	; 0x54
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006950:	643b      	str	r3, [r7, #64]	; 0x40
 8006952:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e6      	bne.n	8006932 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3308      	adds	r3, #8
 800696a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	61fb      	str	r3, [r7, #28]
   return(result);
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f023 0301 	bic.w	r3, r3, #1
 800697a:	64bb      	str	r3, [r7, #72]	; 0x48
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3308      	adds	r3, #8
 8006982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006984:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800698a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e5      	bne.n	8006964 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800699c:	2b01      	cmp	r3, #1
 800699e:	d118      	bne.n	80069d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	e853 3f00 	ldrex	r3, [r3]
 80069ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f023 0310 	bic.w	r3, r3, #16
 80069b4:	647b      	str	r3, [r7, #68]	; 0x44
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069be:	61bb      	str	r3, [r7, #24]
 80069c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	6979      	ldr	r1, [r7, #20]
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	613b      	str	r3, [r7, #16]
   return(result);
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1e6      	bne.n	80069a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2220      	movs	r2, #32
 80069d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80069e6:	bf00      	nop
 80069e8:	3754      	adds	r7, #84	; 0x54
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f7ff fb73 	bl	80060fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a16:	bf00      	nop
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b088      	sub	sp, #32
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a3a:	61fb      	str	r3, [r7, #28]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	461a      	mov	r2, r3
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	6979      	ldr	r1, [r7, #20]
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	613b      	str	r3, [r7, #16]
   return(result);
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e6      	bne.n	8006a26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7ff fb3f 	bl	80060e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a6a:	bf00      	nop
 8006a6c:	3720      	adds	r7, #32
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <LL_EXTI_EnableIT_0_31>:
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <LL_EXTI_EnableIT_0_31+0x20>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	4904      	ldr	r1, [pc, #16]	; (8006a94 <LL_EXTI_EnableIT_0_31+0x20>)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	600b      	str	r3, [r1, #0]
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	40013c00 	.word	0x40013c00

08006a98 <LL_EXTI_DisableIT_0_31>:
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8006aa0:	4b06      	ldr	r3, [pc, #24]	; (8006abc <LL_EXTI_DisableIT_0_31+0x24>)
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	43db      	mvns	r3, r3
 8006aa8:	4904      	ldr	r1, [pc, #16]	; (8006abc <LL_EXTI_DisableIT_0_31+0x24>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	600b      	str	r3, [r1, #0]
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40013c00 	.word	0x40013c00

08006ac0 <LL_EXTI_EnableEvent_0_31>:
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8006ac8:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	4904      	ldr	r1, [pc, #16]	; (8006ae0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	604b      	str	r3, [r1, #4]
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	40013c00 	.word	0x40013c00

08006ae4 <LL_EXTI_DisableEvent_0_31>:
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8006aec:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	43db      	mvns	r3, r3
 8006af4:	4904      	ldr	r1, [pc, #16]	; (8006b08 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	604b      	str	r3, [r1, #4]
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40013c00 	.word	0x40013c00

08006b0c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	4904      	ldr	r1, [pc, #16]	; (8006b2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	608b      	str	r3, [r1, #8]
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	40013c00 	.word	0x40013c00

08006b30 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8006b38:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	43db      	mvns	r3, r3
 8006b40:	4904      	ldr	r1, [pc, #16]	; (8006b54 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006b42:	4013      	ands	r3, r2
 8006b44:	608b      	str	r3, [r1, #8]
}
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	40013c00 	.word	0x40013c00

08006b58 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	4904      	ldr	r1, [pc, #16]	; (8006b78 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60cb      	str	r3, [r1, #12]
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	40013c00 	.word	0x40013c00

08006b7c <LL_EXTI_DisableFallingTrig_0_31>:
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006b86:	68da      	ldr	r2, [r3, #12]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	43db      	mvns	r3, r3
 8006b8c:	4904      	ldr	r1, [pc, #16]	; (8006ba0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006b8e:	4013      	ands	r3, r2
 8006b90:	60cb      	str	r3, [r1, #12]
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40013c00 	.word	0x40013c00

08006ba4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8006bac:	2300      	movs	r3, #0
 8006bae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	791b      	ldrb	r3, [r3, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d065      	beq.n	8006c84 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d06c      	beq.n	8006c9a <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	795b      	ldrb	r3, [r3, #5]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d01c      	beq.n	8006c02 <LL_EXTI_Init+0x5e>
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	dc25      	bgt.n	8006c18 <LL_EXTI_Init+0x74>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <LL_EXTI_Init+0x32>
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d00b      	beq.n	8006bec <LL_EXTI_Init+0x48>
 8006bd4:	e020      	b.n	8006c18 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff ff82 	bl	8006ae4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff ff45 	bl	8006a74 <LL_EXTI_EnableIT_0_31>
          break;
 8006bea:	e018      	b.n	8006c1e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff ff51 	bl	8006a98 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff ff60 	bl	8006ac0 <LL_EXTI_EnableEvent_0_31>
          break;
 8006c00:	e00d      	b.n	8006c1e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff ff34 	bl	8006a74 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff ff55 	bl	8006ac0 <LL_EXTI_EnableEvent_0_31>
          break;
 8006c16:	e002      	b.n	8006c1e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	73fb      	strb	r3, [r7, #15]
          break;
 8006c1c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	799b      	ldrb	r3, [r3, #6]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d039      	beq.n	8006c9a <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	799b      	ldrb	r3, [r3, #6]
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d01c      	beq.n	8006c68 <LL_EXTI_Init+0xc4>
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	dc25      	bgt.n	8006c7e <LL_EXTI_Init+0xda>
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d002      	beq.n	8006c3c <LL_EXTI_Init+0x98>
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d00b      	beq.n	8006c52 <LL_EXTI_Init+0xae>
 8006c3a:	e020      	b.n	8006c7e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff ff9b 	bl	8006b7c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7ff ff5e 	bl	8006b0c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8006c50:	e024      	b.n	8006c9c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff ff6a 	bl	8006b30 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff ff79 	bl	8006b58 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006c66:	e019      	b.n	8006c9c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff ff4d 	bl	8006b0c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff ff6e 	bl	8006b58 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006c7c:	e00e      	b.n	8006c9c <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	73fb      	strb	r3, [r7, #15]
            break;
 8006c82:	e00b      	b.n	8006c9c <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff ff05 	bl	8006a98 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff ff26 	bl	8006ae4 <LL_EXTI_DisableEvent_0_31>
 8006c98:	e000      	b.n	8006c9c <LL_EXTI_Init+0xf8>
      }
 8006c9a:	bf00      	nop
  }
  return status;
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <LL_GPIO_SetPinMode>:
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b089      	sub	sp, #36	; 0x24
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	fa93 f3a3 	rbit	r3, r3
 8006cc0:	613b      	str	r3, [r7, #16]
  return result;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	fab3 f383 	clz	r3, r3
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	2103      	movs	r1, #3
 8006cce:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	401a      	ands	r2, r3
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	fa93 f3a3 	rbit	r3, r3
 8006ce0:	61bb      	str	r3, [r7, #24]
  return result;
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	fab3 f383 	clz	r3, r3
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	601a      	str	r2, [r3, #0]
}
 8006cf8:	bf00      	nop
 8006cfa:	3724      	adds	r7, #36	; 0x24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <LL_GPIO_SetPinOutputType>:
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	43db      	mvns	r3, r3
 8006d18:	401a      	ands	r2, r3
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	6879      	ldr	r1, [r7, #4]
 8006d1e:	fb01 f303 	mul.w	r3, r1, r3
 8006d22:	431a      	orrs	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	605a      	str	r2, [r3, #4]
}
 8006d28:	bf00      	nop
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <LL_GPIO_SetPinSpeed>:
{
 8006d34:	b480      	push	{r7}
 8006d36:	b089      	sub	sp, #36	; 0x24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	fa93 f3a3 	rbit	r3, r3
 8006d4e:	613b      	str	r3, [r7, #16]
  return result;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	fab3 f383 	clz	r3, r3
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	2103      	movs	r1, #3
 8006d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d60:	43db      	mvns	r3, r3
 8006d62:	401a      	ands	r2, r3
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	fa93 f3a3 	rbit	r3, r3
 8006d6e:	61bb      	str	r3, [r7, #24]
  return result;
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	fab3 f383 	clz	r3, r3
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d80:	431a      	orrs	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	609a      	str	r2, [r3, #8]
}
 8006d86:	bf00      	nop
 8006d88:	3724      	adds	r7, #36	; 0x24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <LL_GPIO_SetPinPull>:
{
 8006d92:	b480      	push	{r7}
 8006d94:	b089      	sub	sp, #36	; 0x24
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	fa93 f3a3 	rbit	r3, r3
 8006dac:	613b      	str	r3, [r7, #16]
  return result;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	fab3 f383 	clz	r3, r3
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	2103      	movs	r1, #3
 8006dba:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbe:	43db      	mvns	r3, r3
 8006dc0:	401a      	ands	r2, r3
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	fa93 f3a3 	rbit	r3, r3
 8006dcc:	61bb      	str	r3, [r7, #24]
  return result;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	fab3 f383 	clz	r3, r3
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	fa01 f303 	lsl.w	r3, r1, r3
 8006dde:	431a      	orrs	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	60da      	str	r2, [r3, #12]
}
 8006de4:	bf00      	nop
 8006de6:	3724      	adds	r7, #36	; 0x24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <LL_GPIO_SetAFPin_0_7>:
{
 8006df0:	b480      	push	{r7}
 8006df2:	b089      	sub	sp, #36	; 0x24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a1a      	ldr	r2, [r3, #32]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	fa93 f3a3 	rbit	r3, r3
 8006e0a:	613b      	str	r3, [r7, #16]
  return result;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	fab3 f383 	clz	r3, r3
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	210f      	movs	r1, #15
 8006e18:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1c:	43db      	mvns	r3, r3
 8006e1e:	401a      	ands	r2, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	fa93 f3a3 	rbit	r3, r3
 8006e2a:	61bb      	str	r3, [r7, #24]
  return result;
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	fab3 f383 	clz	r3, r3
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	fa01 f303 	lsl.w	r3, r1, r3
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	621a      	str	r2, [r3, #32]
}
 8006e42:	bf00      	nop
 8006e44:	3724      	adds	r7, #36	; 0x24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <LL_GPIO_SetAFPin_8_15>:
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b089      	sub	sp, #36	; 0x24
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	60b9      	str	r1, [r7, #8]
 8006e58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	0a1b      	lsrs	r3, r3, #8
 8006e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	fa93 f3a3 	rbit	r3, r3
 8006e6a:	613b      	str	r3, [r7, #16]
  return result;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	fab3 f383 	clz	r3, r3
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	210f      	movs	r1, #15
 8006e78:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	401a      	ands	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	0a1b      	lsrs	r3, r3, #8
 8006e84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	fa93 f3a3 	rbit	r3, r3
 8006e8c:	61bb      	str	r3, [r7, #24]
  return result;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	fab3 f383 	clz	r3, r3
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006ea4:	bf00      	nop
 8006ea6:	3724      	adds	r7, #36	; 0x24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b088      	sub	sp, #32
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	fa93 f3a3 	rbit	r3, r3
 8006ece:	613b      	str	r3, [r7, #16]
  return result;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	fab3 f383 	clz	r3, r3
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006eda:	e051      	b.n	8006f80 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee8:	4013      	ands	r3, r2
 8006eea:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d043      	beq.n	8006f7a <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d003      	beq.n	8006f02 <LL_GPIO_Init+0x52>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d10e      	bne.n	8006f20 <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	461a      	mov	r2, r3
 8006f08:	69b9      	ldr	r1, [r7, #24]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff ff12 	bl	8006d34 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	6819      	ldr	r1, [r3, #0]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fef2 	bl	8006d04 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	461a      	mov	r2, r3
 8006f26:	69b9      	ldr	r1, [r7, #24]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7ff ff32 	bl	8006d92 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d11a      	bne.n	8006f6c <LL_GPIO_Init+0xbc>
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	fa93 f3a3 	rbit	r3, r3
 8006f40:	60bb      	str	r3, [r7, #8]
  return result;
 8006f42:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006f44:	fab3 f383 	clz	r3, r3
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b07      	cmp	r3, #7
 8006f4c:	d807      	bhi.n	8006f5e <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	461a      	mov	r2, r3
 8006f54:	69b9      	ldr	r1, [r7, #24]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff ff4a 	bl	8006df0 <LL_GPIO_SetAFPin_0_7>
 8006f5c:	e006      	b.n	8006f6c <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	461a      	mov	r2, r3
 8006f64:	69b9      	ldr	r1, [r7, #24]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff ff71 	bl	8006e4e <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	461a      	mov	r2, r3
 8006f72:	69b9      	ldr	r1, [r7, #24]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff fe96 	bl	8006ca6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1a6      	bne.n	8006edc <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3720      	adds	r7, #32
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f98:	b084      	sub	sp, #16
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	f107 001c 	add.w	r0, r7, #28
 8006fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d126      	bne.n	8006ffe <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	4b3f      	ldr	r3, [pc, #252]	; (80070c0 <USB_CoreInit+0x128>)
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f043 0210 	orr.w	r2, r3, #16
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d105      	bne.n	8006ff2 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa10 	bl	8007418 <USB_CoreReset>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
 8006ffc:	e048      	b.n	8007090 <USB_CoreInit+0xf8>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	2b03      	cmp	r3, #3
 8007002:	d134      	bne.n	800706e <USB_CoreInit+0xd6>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	4b2a      	ldr	r3, [pc, #168]	; (80070c0 <USB_CoreInit+0x128>)
 8007016:	4013      	ands	r3, r2
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f023 0210 	bic.w	r2, r3, #16
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	60da      	str	r2, [r3, #12]
#ifdef USBPHYC
    /* Enable USB HS PHY */
    USBx->GCCFG |= USB_OTG_GCCFG_PHYHSEN;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007038:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enables control of a High Speed USB PHY */
    if (USB_HS_PHYCInit(USBx) != HAL_OK)
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fa1d 	bl	8007480 <USB_HS_PHYCInit>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <USB_CoreInit+0xb8>
    {
      return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e02f      	b.n	80070b0 <USB_CoreInit+0x118>
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8007050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007052:	2b01      	cmp	r3, #1
 8007054:	d105      	bne.n	8007062 <USB_CoreInit+0xca>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f9d8 	bl	8007418 <USB_CoreReset>
 8007068:	4603      	mov	r3, r0
 800706a:	73fb      	strb	r3, [r7, #15]
 800706c:	e010      	b.n	8007090 <USB_CoreInit+0xf8>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f9cc 	bl	8007418 <USB_CoreReset>
 8007080:	4603      	mov	r3, r0
 8007082:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007088:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007092:	2b01      	cmp	r3, #1
 8007094:	d10b      	bne.n	80070ae <USB_CoreInit+0x116>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f043 0206 	orr.w	r2, r3, #6
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f043 0220 	orr.w	r2, r3, #32
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070ba:	b004      	add	sp, #16
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	ffbdffbf 	.word	0xffbdffbf

080070c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f043 0201 	orr.w	r2, r3, #1
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f023 0201 	bic.w	r2, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d115      	bne.n	8007156 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007136:	2001      	movs	r0, #1
 8007138:	f7fa fe8c 	bl	8001e54 <HAL_Delay>
      ms++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f95a 	bl	80073fc <USB_GetMode>
 8007148:	4603      	mov	r3, r0
 800714a:	2b01      	cmp	r3, #1
 800714c:	d01e      	beq.n	800718c <USB_SetCurrentMode+0x84>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b31      	cmp	r3, #49	; 0x31
 8007152:	d9f0      	bls.n	8007136 <USB_SetCurrentMode+0x2e>
 8007154:	e01a      	b.n	800718c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007156:	78fb      	ldrb	r3, [r7, #3]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d115      	bne.n	8007188 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007168:	2001      	movs	r0, #1
 800716a:	f7fa fe73 	bl	8001e54 <HAL_Delay>
      ms++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3301      	adds	r3, #1
 8007172:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f941 	bl	80073fc <USB_GetMode>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <USB_SetCurrentMode+0x84>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b31      	cmp	r3, #49	; 0x31
 8007184:	d9f0      	bls.n	8007168 <USB_SetCurrentMode+0x60>
 8007186:	e001      	b.n	800718c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e005      	b.n	8007198 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b32      	cmp	r3, #50	; 0x32
 8007190:	d101      	bne.n	8007196 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	3301      	adds	r3, #1
 80071b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4a13      	ldr	r2, [pc, #76]	; (8007204 <USB_FlushTxFifo+0x64>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d901      	bls.n	80071c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e01b      	b.n	80071f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	daf2      	bge.n	80071ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	019b      	lsls	r3, r3, #6
 80071d0:	f043 0220 	orr.w	r2, r3, #32
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	3301      	adds	r3, #1
 80071dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	4a08      	ldr	r2, [pc, #32]	; (8007204 <USB_FlushTxFifo+0x64>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d901      	bls.n	80071ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e006      	b.n	80071f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b20      	cmp	r3, #32
 80071f4:	d0f0      	beq.n	80071d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	00030d40 	.word	0x00030d40

08007208 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3301      	adds	r3, #1
 8007218:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4a11      	ldr	r2, [pc, #68]	; (8007264 <USB_FlushRxFifo+0x5c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d901      	bls.n	8007226 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e018      	b.n	8007258 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	daf2      	bge.n	8007214 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2210      	movs	r2, #16
 8007236:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	3301      	adds	r3, #1
 800723c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	4a08      	ldr	r2, [pc, #32]	; (8007264 <USB_FlushRxFifo+0x5c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d901      	bls.n	800724a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e006      	b.n	8007258 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	f003 0310 	and.w	r3, r3, #16
 8007252:	2b10      	cmp	r3, #16
 8007254:	d0f0      	beq.n	8007238 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	00030d40 	.word	0x00030d40

08007268 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007268:	b480      	push	{r7}
 800726a:	b089      	sub	sp, #36	; 0x24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	4611      	mov	r1, r2
 8007274:	461a      	mov	r2, r3
 8007276:	460b      	mov	r3, r1
 8007278:	71fb      	strb	r3, [r7, #7]
 800727a:	4613      	mov	r3, r2
 800727c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007286:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800728a:	2b00      	cmp	r3, #0
 800728c:	d123      	bne.n	80072d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800728e:	88bb      	ldrh	r3, [r7, #4]
 8007290:	3303      	adds	r3, #3
 8007292:	089b      	lsrs	r3, r3, #2
 8007294:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007296:	2300      	movs	r3, #0
 8007298:	61bb      	str	r3, [r7, #24]
 800729a:	e018      	b.n	80072ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	031a      	lsls	r2, r3, #12
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a8:	461a      	mov	r2, r3
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	3301      	adds	r3, #1
 80072b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	3301      	adds	r3, #1
 80072ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	3301      	adds	r3, #1
 80072c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	3301      	adds	r3, #1
 80072c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	3301      	adds	r3, #1
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d3e2      	bcc.n	800729c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3724      	adds	r7, #36	; 0x24
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b08b      	sub	sp, #44	; 0x2c
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80072fa:	88fb      	ldrh	r3, [r7, #6]
 80072fc:	089b      	lsrs	r3, r3, #2
 80072fe:	b29b      	uxth	r3, r3
 8007300:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	f003 0303 	and.w	r3, r3, #3
 8007308:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800730a:	2300      	movs	r3, #0
 800730c:	623b      	str	r3, [r7, #32]
 800730e:	e014      	b.n	800733a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	601a      	str	r2, [r3, #0]
    pDest++;
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	3301      	adds	r3, #1
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	3301      	adds	r3, #1
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	3301      	adds	r3, #1
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	3301      	adds	r3, #1
 8007332:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	3301      	adds	r3, #1
 8007338:	623b      	str	r3, [r7, #32]
 800733a:	6a3a      	ldr	r2, [r7, #32]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	429a      	cmp	r2, r3
 8007340:	d3e6      	bcc.n	8007310 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007342:	8bfb      	ldrh	r3, [r7, #30]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01e      	beq.n	8007386 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007352:	461a      	mov	r2, r3
 8007354:	f107 0310 	add.w	r3, r7, #16
 8007358:	6812      	ldr	r2, [r2, #0]
 800735a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	b2db      	uxtb	r3, r3
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	fa22 f303 	lsr.w	r3, r2, r3
 8007368:	b2da      	uxtb	r2, r3
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	701a      	strb	r2, [r3, #0]
      i++;
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	3301      	adds	r3, #1
 8007372:	623b      	str	r3, [r7, #32]
      pDest++;
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	3301      	adds	r3, #1
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800737a:	8bfb      	ldrh	r3, [r7, #30]
 800737c:	3b01      	subs	r3, #1
 800737e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007380:	8bfb      	ldrh	r3, [r7, #30]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1ea      	bne.n	800735c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007388:	4618      	mov	r0, r3
 800738a:	372c      	adds	r7, #44	; 0x2c
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4013      	ands	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073ac:	68fb      	ldr	r3, [r7, #12]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	4013      	ands	r3, r2
 80073ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073ee:	68bb      	ldr	r3, [r7, #8]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	f003 0301 	and.w	r3, r3, #1
}
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3301      	adds	r3, #1
 8007428:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4a13      	ldr	r2, [pc, #76]	; (800747c <USB_CoreReset+0x64>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d901      	bls.n	8007436 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e01b      	b.n	800746e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	daf2      	bge.n	8007424 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f043 0201 	orr.w	r2, r3, #1
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3301      	adds	r3, #1
 8007452:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4a09      	ldr	r2, [pc, #36]	; (800747c <USB_CoreReset+0x64>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d901      	bls.n	8007460 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e006      	b.n	800746e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b01      	cmp	r3, #1
 800746a:	d0f0      	beq.n	800744e <USB_CoreReset+0x36>

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	00030d40 	.word	0x00030d40

08007480 <USB_HS_PHYCInit>:
  *         Init the low level hardware : GPIO, CLOCK, NVIC...
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_HS_PHYCInit(USB_OTG_GlobalTypeDef *USBx)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  __IO uint32_t count = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]

  /* Enable LDO */
  USB_HS_PHYC->USB_HS_PHYC_LDO |= USB_HS_PHYC_LDO_ENABLE;
 800748c:	4b16      	ldr	r3, [pc, #88]	; (80074e8 <USB_HS_PHYCInit+0x68>)
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	4a15      	ldr	r2, [pc, #84]	; (80074e8 <USB_HS_PHYCInit+0x68>)
 8007492:	f043 0304 	orr.w	r3, r3, #4
 8007496:	6193      	str	r3, [r2, #24]

  /* wait for LDO Ready */
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8007498:	e008      	b.n	80074ac <USB_HS_PHYCInit+0x2c>
  {
    count++;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3301      	adds	r3, #1
 800749e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4a12      	ldr	r2, [pc, #72]	; (80074ec <USB_HS_PHYCInit+0x6c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d901      	bls.n	80074ac <USB_HS_PHYCInit+0x2c>
    {
      return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e019      	b.n	80074e0 <USB_HS_PHYCInit+0x60>
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 80074ac:	4b0e      	ldr	r3, [pc, #56]	; (80074e8 <USB_HS_PHYCInit+0x68>)
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d0f0      	beq.n	800749a <USB_HS_PHYCInit+0x1a>
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x4U << 1);
  }
  else if (HSE_VALUE == 25000000U) /* HSE = 25MHz */
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x5U << 1);
 80074b8:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <USB_HS_PHYCInit+0x68>)
 80074ba:	220a      	movs	r2, #10
 80074bc:	601a      	str	r2, [r3, #0]
  {
    /* ... */
  }

  /* Control the tuning interface of the High Speed PHY */
  USB_HS_PHYC->USB_HS_PHYC_TUNE |= USB_HS_PHYC_TUNE_VALUE;
 80074be:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <USB_HS_PHYCInit+0x68>)
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	4909      	ldr	r1, [pc, #36]	; (80074e8 <USB_HS_PHYCInit+0x68>)
 80074c4:	f640 7313 	movw	r3, #3859	; 0xf13
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60cb      	str	r3, [r1, #12]

  /* Enable PLL internal PHY */
  USB_HS_PHYC->USB_HS_PHYC_PLL |= USB_HS_PHYC_PLL_PLLEN;
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <USB_HS_PHYCInit+0x68>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a05      	ldr	r2, [pc, #20]	; (80074e8 <USB_HS_PHYCInit+0x68>)
 80074d2:	f043 0301 	orr.w	r3, r3, #1
 80074d6:	6013      	str	r3, [r2, #0]


  /* 2ms Delay required to get internal phy clock stable */
  HAL_Delay(2U);
 80074d8:	2002      	movs	r0, #2
 80074da:	f7fa fcbb 	bl	8001e54 <HAL_Delay>

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	40017c00 	.word	0x40017c00
 80074ec:	00030d40 	.word	0x00030d40

080074f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074f0:	b084      	sub	sp, #16
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b086      	sub	sp, #24
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80074fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007510:	461a      	mov	r2, r3
 8007512:	2300      	movs	r3, #0
 8007514:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800752a:	2b00      	cmp	r3, #0
 800752c:	d018      	beq.n	8007560 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	2b01      	cmp	r3, #1
 8007532:	d10a      	bne.n	800754a <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007542:	f043 0304 	orr.w	r3, r3, #4
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	e014      	b.n	8007574 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007558:	f023 0304 	bic.w	r3, r3, #4
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	e009      	b.n	8007574 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800756e:	f023 0304 	bic.w	r3, r3, #4
 8007572:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007574:	2110      	movs	r1, #16
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7ff fe12 	bl	80071a0 <USB_FlushTxFifo>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7ff fe3e 	bl	8007208 <USB_FlushRxFifo>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007596:	2300      	movs	r3, #0
 8007598:	613b      	str	r3, [r7, #16]
 800759a:	e015      	b.n	80075c8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075a8:	461a      	mov	r2, r3
 80075aa:	f04f 33ff 	mov.w	r3, #4294967295
 80075ae:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075bc:	461a      	mov	r2, r3
 80075be:	2300      	movs	r3, #0
 80075c0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	3301      	adds	r3, #1
 80075c6:	613b      	str	r3, [r7, #16]
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d3e5      	bcc.n	800759c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f04f 32ff 	mov.w	r2, #4294967295
 80075dc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00b      	beq.n	8007602 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075f0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a13      	ldr	r2, [pc, #76]	; (8007644 <USB_HostInit+0x154>)
 80075f6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a13      	ldr	r2, [pc, #76]	; (8007648 <USB_HostInit+0x158>)
 80075fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007600:	e009      	b.n	8007616 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2280      	movs	r2, #128	; 0x80
 8007606:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a10      	ldr	r2, [pc, #64]	; (800764c <USB_HostInit+0x15c>)
 800760c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a0f      	ldr	r2, [pc, #60]	; (8007650 <USB_HostInit+0x160>)
 8007612:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	2b00      	cmp	r3, #0
 800761a:	d105      	bne.n	8007628 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	f043 0210 	orr.w	r2, r3, #16
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699a      	ldr	r2, [r3, #24]
 800762c:	4b09      	ldr	r3, [pc, #36]	; (8007654 <USB_HostInit+0x164>)
 800762e:	4313      	orrs	r3, r2
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007634:	7dfb      	ldrb	r3, [r7, #23]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007640:	b004      	add	sp, #16
 8007642:	4770      	bx	lr
 8007644:	01000200 	.word	0x01000200
 8007648:	00e00300 	.word	0x00e00300
 800764c:	00600080 	.word	0x00600080
 8007650:	004000e0 	.word	0x004000e0
 8007654:	a3200008 	.word	0xa3200008

08007658 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007676:	f023 0303 	bic.w	r3, r3, #3
 800767a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	f003 0303 	and.w	r3, r3, #3
 800768a:	68f9      	ldr	r1, [r7, #12]
 800768c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007690:	4313      	orrs	r3, r2
 8007692:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d107      	bne.n	80076aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076a0:	461a      	mov	r2, r3
 80076a2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80076a6:	6053      	str	r3, [r2, #4]
 80076a8:	e009      	b.n	80076be <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80076aa:	78fb      	ldrb	r3, [r7, #3]
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d106      	bne.n	80076be <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076b6:	461a      	mov	r2, r3
 80076b8:	f241 7370 	movw	r3, #6000	; 0x1770
 80076bc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80076ec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80076f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80076fc:	2064      	movs	r0, #100	; 0x64
 80076fe:	f7fa fba9 	bl	8001e54 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800770a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800770e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007710:	200a      	movs	r0, #10
 8007712:	f7fa fb9f 	bl	8001e54 <HAL_Delay>

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007744:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d109      	bne.n	8007764 <USB_DriveVbus+0x44>
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d106      	bne.n	8007764 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800775e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007762:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800776a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776e:	d109      	bne.n	8007784 <USB_DriveVbus+0x64>
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d106      	bne.n	8007784 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800777e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007782:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007792:	b480      	push	{r7}
 8007794:	b085      	sub	sp, #20
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	0c5b      	lsrs	r3, r3, #17
 80077b0:	f003 0303 	and.w	r3, r3, #3
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	b29b      	uxth	r3, r3
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
	...

080077e4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b088      	sub	sp, #32
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	4608      	mov	r0, r1
 80077ee:	4611      	mov	r1, r2
 80077f0:	461a      	mov	r2, r3
 80077f2:	4603      	mov	r3, r0
 80077f4:	70fb      	strb	r3, [r7, #3]
 80077f6:	460b      	mov	r3, r1
 80077f8:	70bb      	strb	r3, [r7, #2]
 80077fa:	4613      	mov	r3, r2
 80077fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007806:	78fb      	ldrb	r3, [r7, #3]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	4413      	add	r3, r2
 800780e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007812:	461a      	mov	r2, r3
 8007814:	f04f 33ff 	mov.w	r3, #4294967295
 8007818:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800781a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800781e:	2b03      	cmp	r3, #3
 8007820:	d87e      	bhi.n	8007920 <USB_HC_Init+0x13c>
 8007822:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <USB_HC_Init+0x44>)
 8007824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007828:	08007839 	.word	0x08007839
 800782c:	080078e3 	.word	0x080078e3
 8007830:	08007839 	.word	0x08007839
 8007834:	080078a5 	.word	0x080078a5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007838:	78fb      	ldrb	r3, [r7, #3]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	4413      	add	r3, r2
 8007840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007844:	461a      	mov	r2, r3
 8007846:	f240 439d 	movw	r3, #1181	; 0x49d
 800784a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800784c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007850:	2b00      	cmp	r3, #0
 8007852:	da10      	bge.n	8007876 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	4413      	add	r3, r2
 800785c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	78fa      	ldrb	r2, [r7, #3]
 8007864:	0151      	lsls	r1, r2, #5
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	440a      	add	r2, r1
 800786a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800786e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007872:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007874:	e057      	b.n	8007926 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787e:	2b00      	cmp	r3, #0
 8007880:	d051      	beq.n	8007926 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	4413      	add	r3, r2
 800788a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	78fa      	ldrb	r2, [r7, #3]
 8007892:	0151      	lsls	r1, r2, #5
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	440a      	add	r2, r1
 8007898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800789c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80078a0:	60d3      	str	r3, [r2, #12]
      break;
 80078a2:	e040      	b.n	8007926 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078a4:	78fb      	ldrb	r3, [r7, #3]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078b0:	461a      	mov	r2, r3
 80078b2:	f240 639d 	movw	r3, #1693	; 0x69d
 80078b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80078b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	da34      	bge.n	800792a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	78fa      	ldrb	r2, [r7, #3]
 80078d0:	0151      	lsls	r1, r2, #5
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	440a      	add	r2, r1
 80078d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078de:	60d3      	str	r3, [r2, #12]
      }

      break;
 80078e0:	e023      	b.n	800792a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078e2:	78fb      	ldrb	r3, [r7, #3]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ee:	461a      	mov	r2, r3
 80078f0:	f240 2325 	movw	r3, #549	; 0x225
 80078f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80078f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	da17      	bge.n	800792e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80078fe:	78fb      	ldrb	r3, [r7, #3]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	4413      	add	r3, r2
 8007906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	78fa      	ldrb	r2, [r7, #3]
 800790e:	0151      	lsls	r1, r2, #5
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	440a      	add	r2, r1
 8007914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007918:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800791c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800791e:	e006      	b.n	800792e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	77fb      	strb	r3, [r7, #31]
      break;
 8007924:	e004      	b.n	8007930 <USB_HC_Init+0x14c>
      break;
 8007926:	bf00      	nop
 8007928:	e002      	b.n	8007930 <USB_HC_Init+0x14c>
      break;
 800792a:	bf00      	nop
 800792c:	e000      	b.n	8007930 <USB_HC_Init+0x14c>
      break;
 800792e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	4413      	add	r3, r2
 8007938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	78fa      	ldrb	r2, [r7, #3]
 8007940:	0151      	lsls	r1, r2, #5
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	440a      	add	r2, r1
 8007946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800794a:	f043 0302 	orr.w	r3, r3, #2
 800794e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007956:	699a      	ldr	r2, [r3, #24]
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	f003 030f 	and.w	r3, r3, #15
 800795e:	2101      	movs	r1, #1
 8007960:	fa01 f303 	lsl.w	r3, r1, r3
 8007964:	6939      	ldr	r1, [r7, #16]
 8007966:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800796a:	4313      	orrs	r3, r2
 800796c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800797a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800797e:	2b00      	cmp	r3, #0
 8007980:	da03      	bge.n	800798a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007986:	61bb      	str	r3, [r7, #24]
 8007988:	e001      	b.n	800798e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7ff feff 	bl	8007792 <USB_GetHostSpeed>
 8007994:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007996:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800799a:	2b02      	cmp	r3, #2
 800799c:	d106      	bne.n	80079ac <USB_HC_Init+0x1c8>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d003      	beq.n	80079ac <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80079a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079a8:	617b      	str	r3, [r7, #20]
 80079aa:	e001      	b.n	80079b0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079b0:	787b      	ldrb	r3, [r7, #1]
 80079b2:	059b      	lsls	r3, r3, #22
 80079b4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80079b8:	78bb      	ldrb	r3, [r7, #2]
 80079ba:	02db      	lsls	r3, r3, #11
 80079bc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079c0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80079c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80079c6:	049b      	lsls	r3, r3, #18
 80079c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80079cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80079ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80079d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80079d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079da:	78fb      	ldrb	r3, [r7, #3]
 80079dc:	0159      	lsls	r1, r3, #5
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	440b      	add	r3, r1
 80079e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079ec:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80079ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d003      	beq.n	80079fe <USB_HC_Init+0x21a>
 80079f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d10f      	bne.n	8007a1e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80079fe:	78fb      	ldrb	r3, [r7, #3]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	78fa      	ldrb	r2, [r7, #3]
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a1c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007a1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3720      	adds	r7, #32
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08c      	sub	sp, #48	; 0x30
 8007a2c:	af02      	add	r7, sp, #8
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	4613      	mov	r3, r2
 8007a34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	785b      	ldrb	r3, [r3, #1]
 8007a3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a44:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d02d      	beq.n	8007aae <USB_HC_StartXfer+0x86>
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	791b      	ldrb	r3, [r3, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d129      	bne.n	8007aae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d117      	bne.n	8007a90 <USB_HC_StartXfer+0x68>
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	79db      	ldrb	r3, [r3, #7]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <USB_HC_StartXfer+0x48>
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	79db      	ldrb	r3, [r3, #7]
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d10f      	bne.n	8007a90 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	69fa      	ldr	r2, [r7, #28]
 8007a80:	0151      	lsls	r1, r2, #5
 8007a82:	6a3a      	ldr	r2, [r7, #32]
 8007a84:	440a      	add	r2, r1
 8007a86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007a90:	79fb      	ldrb	r3, [r7, #7]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10b      	bne.n	8007aae <USB_HC_StartXfer+0x86>
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	795b      	ldrb	r3, [r3, #5]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d107      	bne.n	8007aae <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	785b      	ldrb	r3, [r3, #1]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 fa0f 	bl	8007ec8 <USB_DoPing>
      return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e0f8      	b.n	8007ca0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d018      	beq.n	8007ae8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	8912      	ldrh	r2, [r2, #8]
 8007abe:	4413      	add	r3, r2
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	8912      	ldrh	r2, [r2, #8]
 8007ac6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aca:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007acc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007ace:	8b7b      	ldrh	r3, [r7, #26]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d90b      	bls.n	8007aec <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007ad4:	8b7b      	ldrh	r3, [r7, #26]
 8007ad6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ad8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	8912      	ldrh	r2, [r2, #8]
 8007ade:	fb02 f203 	mul.w	r2, r2, r3
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	611a      	str	r2, [r3, #16]
 8007ae6:	e001      	b.n	8007aec <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	78db      	ldrb	r3, [r3, #3]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d007      	beq.n	8007b04 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007af4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	8912      	ldrh	r2, [r2, #8]
 8007afa:	fb02 f203 	mul.w	r2, r2, r3
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	611a      	str	r2, [r3, #16]
 8007b02:	e003      	b.n	8007b0c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	695a      	ldr	r2, [r3, #20]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b16:	04d9      	lsls	r1, r3, #19
 8007b18:	4b63      	ldr	r3, [pc, #396]	; (8007ca8 <USB_HC_StartXfer+0x280>)
 8007b1a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b1c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	7a9b      	ldrb	r3, [r3, #10]
 8007b22:	075b      	lsls	r3, r3, #29
 8007b24:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b28:	69f9      	ldr	r1, [r7, #28]
 8007b2a:	0148      	lsls	r0, r1, #5
 8007b2c:	6a39      	ldr	r1, [r7, #32]
 8007b2e:	4401      	add	r1, r0
 8007b30:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b34:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b36:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	68d9      	ldr	r1, [r3, #12]
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b4e:	460a      	mov	r2, r1
 8007b50:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bf0c      	ite	eq
 8007b62:	2301      	moveq	r3, #1
 8007b64:	2300      	movne	r3, #0
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	015a      	lsls	r2, r3, #5
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	0151      	lsls	r1, r2, #5
 8007b7c:	6a3a      	ldr	r2, [r7, #32]
 8007b7e:	440a      	add	r2, r1
 8007b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b88:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	7e7b      	ldrb	r3, [r7, #25]
 8007b9a:	075b      	lsls	r3, r3, #29
 8007b9c:	69f9      	ldr	r1, [r7, #28]
 8007b9e:	0148      	lsls	r0, r1, #5
 8007ba0:	6a39      	ldr	r1, [r7, #32]
 8007ba2:	4401      	add	r1, r0
 8007ba4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bc2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	78db      	ldrb	r3, [r3, #3]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d004      	beq.n	8007bd6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd2:	613b      	str	r3, [r7, #16]
 8007bd4:	e003      	b.n	8007bde <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bdc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007be4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e04e      	b.n	8007ca0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	78db      	ldrb	r3, [r3, #3]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d149      	bne.n	8007c9e <USB_HC_StartXfer+0x276>
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d045      	beq.n	8007c9e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	79db      	ldrb	r3, [r3, #7]
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d830      	bhi.n	8007c7c <USB_HC_StartXfer+0x254>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <USB_HC_StartXfer+0x1f8>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c31 	.word	0x08007c31
 8007c24:	08007c55 	.word	0x08007c55
 8007c28:	08007c31 	.word	0x08007c31
 8007c2c:	08007c55 	.word	0x08007c55
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	3303      	adds	r3, #3
 8007c36:	089b      	lsrs	r3, r3, #2
 8007c38:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007c3a:	8afa      	ldrh	r2, [r7, #22]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d91c      	bls.n	8007c80 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	f043 0220 	orr.w	r2, r3, #32
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c52:	e015      	b.n	8007c80 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	3303      	adds	r3, #3
 8007c5a:	089b      	lsrs	r3, r3, #2
 8007c5c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007c5e:	8afa      	ldrh	r2, [r7, #22]
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d90a      	bls.n	8007c84 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c7a:	e003      	b.n	8007c84 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007c7c:	bf00      	nop
 8007c7e:	e002      	b.n	8007c86 <USB_HC_StartXfer+0x25e>
        break;
 8007c80:	bf00      	nop
 8007c82:	e000      	b.n	8007c86 <USB_HC_StartXfer+0x25e>
        break;
 8007c84:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	68d9      	ldr	r1, [r3, #12]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	785a      	ldrb	r2, [r3, #1]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	2000      	movs	r0, #0
 8007c96:	9000      	str	r0, [sp, #0]
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f7ff fae5 	bl	8007268 <USB_WritePacket>
  }

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3728      	adds	r7, #40	; 0x28
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	1ff80000 	.word	0x1ff80000

08007cac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	b29b      	uxth	r3, r3
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b089      	sub	sp, #36	; 0x24
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007cde:	78fb      	ldrb	r3, [r7, #3]
 8007ce0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	0c9b      	lsrs	r3, r3, #18
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	0fdb      	lsrs	r3, r3, #31
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f003 0320 	and.w	r3, r3, #32
 8007d1a:	2b20      	cmp	r3, #32
 8007d1c:	d104      	bne.n	8007d28 <USB_HC_Halt+0x5a>
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	e0c8      	b.n	8007eba <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <USB_HC_Halt+0x66>
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d163      	bne.n	8007dfc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	0151      	lsls	r1, r2, #5
 8007d46:	69fa      	ldr	r2, [r7, #28]
 8007d48:	440a      	add	r2, r1
 8007d4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d52:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	f003 0320 	and.w	r3, r3, #32
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f040 80ab 	bne.w	8007eb8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d133      	bne.n	8007dd6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	0151      	lsls	r1, r2, #5
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	440a      	add	r2, r1
 8007d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d8c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	69ba      	ldr	r2, [r7, #24]
 8007d9e:	0151      	lsls	r1, r2, #5
 8007da0:	69fa      	ldr	r2, [r7, #28]
 8007da2:	440a      	add	r2, r1
 8007da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007dac:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3301      	adds	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dba:	d81d      	bhi.n	8007df8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dd2:	d0ec      	beq.n	8007dae <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007dd4:	e070      	b.n	8007eb8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	0151      	lsls	r1, r2, #5
 8007de8:	69fa      	ldr	r2, [r7, #28]
 8007dea:	440a      	add	r2, r1
 8007dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007df4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007df6:	e05f      	b.n	8007eb8 <USB_HC_Halt+0x1ea>
            break;
 8007df8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007dfa:	e05d      	b.n	8007eb8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	0151      	lsls	r1, r2, #5
 8007e0e:	69fa      	ldr	r2, [r7, #28]
 8007e10:	440a      	add	r2, r1
 8007e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e1a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d133      	bne.n	8007e94 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	0151      	lsls	r1, r2, #5
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	440a      	add	r2, r1
 8007e42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e4a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	0151      	lsls	r1, r2, #5
 8007e5e:	69fa      	ldr	r2, [r7, #28]
 8007e60:	440a      	add	r2, r1
 8007e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e6a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e78:	d81d      	bhi.n	8007eb6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e90:	d0ec      	beq.n	8007e6c <USB_HC_Halt+0x19e>
 8007e92:	e011      	b.n	8007eb8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	0151      	lsls	r1, r2, #5
 8007ea6:	69fa      	ldr	r2, [r7, #28]
 8007ea8:	440a      	add	r2, r1
 8007eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	e000      	b.n	8007eb8 <USB_HC_Halt+0x1ea>
          break;
 8007eb6:	bf00      	nop
    }
  }

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3724      	adds	r7, #36	; 0x24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
	...

08007ec8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007ed8:	78fb      	ldrb	r3, [r7, #3]
 8007eda:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007edc:	2301      	movs	r3, #1
 8007ede:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	04da      	lsls	r2, r3, #19
 8007ee4:	4b15      	ldr	r3, [pc, #84]	; (8007f3c <USB_DoPing+0x74>)
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	0151      	lsls	r1, r2, #5
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	440a      	add	r2, r1
 8007ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ef8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f10:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f18:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f26:	461a      	mov	r2, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	371c      	adds	r7, #28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	1ff80000 	.word	0x1ff80000

08007f40 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7ff f8c6 	bl	80070e6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f5a:	2110      	movs	r1, #16
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff f91f 	bl	80071a0 <USB_FlushTxFifo>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff f94b 	bl	8007208 <USB_FlushRxFifo>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	61bb      	str	r3, [r7, #24]
 8007f80:	e01f      	b.n	8007fc2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fa0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fa8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	61bb      	str	r3, [r7, #24]
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	2b0f      	cmp	r3, #15
 8007fc6:	d9dc      	bls.n	8007f82 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	61bb      	str	r3, [r7, #24]
 8007fcc:	e034      	b.n	8008038 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fe4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ff4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008002:	461a      	mov	r2, r3
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3301      	adds	r3, #1
 800800c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008014:	d80c      	bhi.n	8008030 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	4413      	add	r3, r2
 800801e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800802c:	d0ec      	beq.n	8008008 <USB_StopHost+0xc8>
 800802e:	e000      	b.n	8008032 <USB_StopHost+0xf2>
        break;
 8008030:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	3301      	adds	r3, #1
 8008036:	61bb      	str	r3, [r7, #24]
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	2b0f      	cmp	r3, #15
 800803c:	d9c7      	bls.n	8007fce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008044:	461a      	mov	r2, r3
 8008046:	f04f 33ff 	mov.w	r3, #4294967295
 800804a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f04f 32ff 	mov.w	r2, #4294967295
 8008052:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7ff f835 	bl	80070c4 <USB_EnableGlobalInt>

  return ret;
 800805a:	7ffb      	ldrb	r3, [r7, #31]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3720      	adds	r7, #32
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBH_HID_InterfaceInit>:
 phost->pActiveClass->iface_initnum  - variable where last index of an active interface is hold. It
 is used as an index of HID_Handle index as well.

 phost->pActiveClass->interfaces - this variable hold all successfully initialised interfaces.
 */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost) {
 8008064:	b5b0      	push	{r4, r5, r7, lr}
 8008066:	b08c      	sub	sp, #48	; 0x30
 8008068:	af04      	add	r7, sp, #16
 800806a:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 800806c:	2301      	movs	r3, #1
 800806e:	77fb      	strb	r3, [r7, #31]
	USBH_StatusTypeDef ctlStatus = USBH_BUSY;
 8008070:	2301      	movs	r3, #1
 8008072:	77bb      	strb	r3, [r7, #30]
	HID_HandleTypeDef *HID_Handle;
	USBH_InterfaceDescTypeDef *Itf_Desc;

	uint8_t iface_num = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	76fb      	strb	r3, [r7, #27]
	uint8_t i = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	777b      	strb	r3, [r7, #29]
	uint8_t max_ep;
	uint8_t num = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	773b      	strb	r3, [r7, #28]

	switch (phost->pActiveClass->iface_init) {
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008086:	7f9b      	ldrb	r3, [r3, #30]
 8008088:	2b07      	cmp	r3, #7
 800808a:	f200 829f 	bhi.w	80085cc <USBH_HID_InterfaceInit+0x568>
 800808e:	a201      	add	r2, pc, #4	; (adr r2, 8008094 <USBH_HID_InterfaceInit+0x30>)
 8008090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008094:	080080b5 	.word	0x080080b5
 8008098:	08008167 	.word	0x08008167
 800809c:	080081dd 	.word	0x080081dd
 80080a0:	08008255 	.word	0x08008255
 80080a4:	0800832f 	.word	0x0800832f
 80080a8:	0800848b 	.word	0x0800848b
 80080ac:	080084bb 	.word	0x080084bb
 80080b0:	08008571 	.word	0x08008571
	case IFACE_INIT: {

		phost->pActiveClass->iface_initnum = 0U;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080ba:	2200      	movs	r2, #0
 80080bc:	775a      	strb	r2, [r3, #29]

		//init all possible HID_Handlers even if not all will be used.

		for (; i < USBH_MAX_NUM_INTERFACES; i++) {
 80080be:	e044      	b.n	800814a <USBH_HID_InterfaceInit+0xe6>
			phost->pActiveClass->pData[i] = (HID_HandleTypeDef*) USBH_malloc(
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 4380 	ldr.w	r4, [r3, #896]	; 0x380
 80080c6:	7f7d      	ldrb	r5, [r7, #29]
 80080c8:	206c      	movs	r0, #108	; 0x6c
 80080ca:	f006 f863 	bl	800e194 <malloc>
 80080ce:	4603      	mov	r3, r0
 80080d0:	461a      	mov	r2, r3
 80080d2:	f105 0308 	add.w	r3, r5, #8
 80080d6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
					sizeof(HID_HandleTypeDef));
			HID_Handle = (HID_HandleTypeDef*) phost->pActiveClass->pData[i];
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080e0:	7f7a      	ldrb	r2, [r7, #29]
 80080e2:	3208      	adds	r2, #8
 80080e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e8:	617b      	str	r3, [r7, #20]
			memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 80080ea:	226c      	movs	r2, #108	; 0x6c
 80080ec:	2100      	movs	r1, #0
 80080ee:	6978      	ldr	r0, [r7, #20]
 80080f0:	f006 f860 	bl	800e1b4 <memset>

			// HID_Handle = phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
			HID_Handle->state = HID_INIT;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	2200      	movs	r2, #0
 80080f8:	709a      	strb	r2, [r3, #2]
			HID_Handle->ctl_state = HID_REQ_INIT;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2200      	movs	r2, #0
 80080fe:	715a      	strb	r2, [r3, #5]
			HID_Handle->ep_addr =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].bEndpointAddress;
 8008100:	7f7b      	ldrb	r3, [r7, #29]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	211a      	movs	r1, #26
 8008106:	fb01 f303 	mul.w	r3, r1, r3
 800810a:	4413      	add	r3, r2
 800810c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008110:	781a      	ldrb	r2, [r3, #0]
			HID_Handle->ep_addr =
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	769a      	strb	r2, [r3, #26]
			HID_Handle->length =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].wMaxPacketSize;
 8008116:	7f7b      	ldrb	r3, [r7, #29]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	211a      	movs	r1, #26
 800811c:	fb01 f303 	mul.w	r3, r1, r3
 8008120:	4413      	add	r3, r2
 8008122:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008126:	881a      	ldrh	r2, [r3, #0]
			HID_Handle->length =
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	831a      	strh	r2, [r3, #24]
			HID_Handle->poll =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].bInterval;
 800812c:	7f7b      	ldrb	r3, [r7, #29]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	211a      	movs	r1, #26
 8008132:	fb01 f303 	mul.w	r3, r1, r3
 8008136:	4413      	add	r3, r2
 8008138:	f203 3352 	addw	r3, r3, #850	; 0x352
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	b29a      	uxth	r2, r3
			HID_Handle->poll =
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	839a      	strh	r2, [r3, #28]
		for (; i < USBH_MAX_NUM_INTERFACES; i++) {
 8008144:	7f7b      	ldrb	r3, [r7, #29]
 8008146:	3301      	adds	r3, #1
 8008148:	777b      	strb	r3, [r7, #29]
 800814a:	7f7b      	ldrb	r3, [r7, #29]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d9b7      	bls.n	80080c0 <USBH_HID_InterfaceInit+0x5c>

		}
		phost->pActiveClass->interfaces = 0U;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008156:	2200      	movs	r2, #0
 8008158:	771a      	strb	r2, [r3, #28]
		phost->pActiveClass->iface_init = IFACE_READHID;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008160:	2201      	movs	r2, #1
 8008162:	779a      	strb	r2, [r3, #30]

	}
		break;
 8008164:	e232      	b.n	80085cc <USBH_HID_InterfaceInit+0x568>

	case IFACE_READHID: {
		iface_num =
				phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum].bInterfaceNumber;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800816c:	7f5b      	ldrb	r3, [r3, #29]
 800816e:	4619      	mov	r1, r3
		iface_num =
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	231a      	movs	r3, #26
 8008174:	fb03 f301 	mul.w	r3, r3, r1
 8008178:	4413      	add	r3, r2
 800817a:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	76fb      	strb	r3, [r7, #27]
		USBH_SelectInterface(phost, iface_num);
 8008182:	7efb      	ldrb	r3, [r7, #27]
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f004 f946 	bl	800c418 <USBH_SelectInterface>

		if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE,
				phost->pActiveClass->iface_initnum) == USBH_OK) {
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
		if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE,
 8008192:	7f5b      	ldrb	r3, [r3, #29]
 8008194:	461a      	mov	r2, r3
 8008196:	2109      	movs	r1, #9
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fba3 	bl	80088e4 <USBH_HID_GetHIDDescriptor>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f040 820c 	bne.w	80085be <USBH_HID_InterfaceInit+0x55a>

			HID_Handle =
					phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 80081b2:	7f52      	ldrb	r2, [r2, #29]
			HID_Handle =
 80081b4:	3208      	adds	r2, #8
 80081b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ba:	617b      	str	r3, [r7, #20]
			USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80081c8:	4619      	mov	r1, r3
 80081ca:	4610      	mov	r0, r2
 80081cc:	f000 fc23 	bl	8008a16 <USBH_HID_ParseHIDDesc>
			phost->pActiveClass->iface_init = IFACE_READHIDRPTDESC;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80081d6:	2202      	movs	r2, #2
 80081d8:	779a      	strb	r2, [r3, #30]
		} else {
			//TODO Check if device is XBOX360 game controller as it doesn't do HID Descriptors aparently
		}

	}
		break;
 80081da:	e1f0      	b.n	80085be <USBH_HID_InterfaceInit+0x55a>

	case IFACE_READHIDRPTDESC: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 80081e8:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 80081ea:	3208      	adds	r2, #8
 80081ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f0:	617b      	str	r3, [r7, #20]
		iface_num =
				phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum].bInterfaceNumber;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80081f8:	7f5b      	ldrb	r3, [r3, #29]
 80081fa:	4619      	mov	r1, r3
		iface_num =
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	231a      	movs	r3, #26
 8008200:	fb03 f301 	mul.w	r3, r3, r1
 8008204:	4413      	add	r3, r2
 8008206:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	76fb      	strb	r3, [r7, #27]
		USBH_SelectInterface(phost, iface_num);
 800820e:	7efb      	ldrb	r3, [r7, #27]
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f004 f900 	bl	800c418 <USBH_SelectInterface>

		if (USBH_HID_GetHIDReportDescriptor(phost,
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
				HID_Handle->HID_Desc.wItemLength,
				phost->pActiveClass->iface_initnum) == USBH_OK) {
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
		if (USBH_HID_GetHIDReportDescriptor(phost,
 8008222:	7f5b      	ldrb	r3, [r3, #29]
 8008224:	461a      	mov	r2, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fb3f 	bl	80088aa <USBH_HID_GetHIDReportDescriptor>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	f040 81c7 	bne.w	80085c2 <USBH_HID_InterfaceInit+0x55e>

			parse_report_descriptor(phost->device.Data,
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f503 708e 	add.w	r0, r3, #284	; 0x11c
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	3330      	adds	r3, #48	; 0x30
 8008242:	461a      	mov	r2, r3
 8008244:	f001 fbc4 	bl	80099d0 <parse_report_descriptor>
					HID_Handle->HID_Desc.wItemLength,
					&(HID_Handle->HID_Desc.RptDesc));

			phost->pActiveClass->iface_init = IFACE_INITSUBCLASS;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800824e:	2203      	movs	r2, #3
 8008250:	779a      	strb	r2, [r3, #30]
		}
	}
		break;
 8008252:	e1b6      	b.n	80085c2 <USBH_HID_InterfaceInit+0x55e>

	case IFACE_INITSUBCLASS: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 8008260:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 8008262:	3208      	adds	r2, #8
 8008264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008268:	617b      	str	r3, [r7, #20]

		Itf_Desc =
				&phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum];
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008270:	7f5b      	ldrb	r3, [r3, #29]
 8008272:	461a      	mov	r2, r3
		Itf_Desc =
 8008274:	231a      	movs	r3, #26
 8008276:	fb03 f302 	mul.w	r3, r3, r2
 800827a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	4413      	add	r3, r2
 8008282:	330a      	adds	r3, #10
 8008284:	613b      	str	r3, [r7, #16]

		if ((Itf_Desc->bInterfaceClass == 0x03
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	795b      	ldrb	r3, [r3, #5]
 800828a:	2b03      	cmp	r3, #3
 800828c:	d107      	bne.n	800829e <USBH_HID_InterfaceInit+0x23a>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	799b      	ldrb	r3, [r3, #6]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d103      	bne.n	800829e <USBH_HID_InterfaceInit+0x23a>
				&& Itf_Desc->bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	79db      	ldrb	r3, [r3, #7]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d007      	beq.n	80082ae <USBH_HID_InterfaceInit+0x24a>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD))
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082a4:	f003 0303 	and.w	r3, r3, #3
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d109      	bne.n	80082c2 <USBH_HID_InterfaceInit+0x25e>

				{
			HID_Handle->Init = USBH_HID_KeybdInit;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	4aac      	ldr	r2, [pc, #688]	; (8008564 <USBH_HID_InterfaceInit+0x500>)
 80082b2:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80082ba:	7f1a      	ldrb	r2, [r3, #28]
 80082bc:	3201      	adds	r2, #1
 80082be:	b2d2      	uxtb	r2, r2
 80082c0:	771a      	strb	r2, [r3, #28]
		}

		if ((Itf_Desc->bInterfaceClass == 0x03
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	795b      	ldrb	r3, [r3, #5]
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d107      	bne.n	80082da <USBH_HID_InterfaceInit+0x276>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	799b      	ldrb	r3, [r3, #6]
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d103      	bne.n	80082da <USBH_HID_InterfaceInit+0x276>
				&& Itf_Desc->bInterfaceProtocol == HID_MOUSE_BOOT_CODE)
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	79db      	ldrb	r3, [r3, #7]
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d007      	beq.n	80082ea <USBH_HID_InterfaceInit+0x286>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE))
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d109      	bne.n	80082fe <USBH_HID_InterfaceInit+0x29a>

				{
			HID_Handle->Init = USBH_HID_MouseInit;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	4a9e      	ldr	r2, [pc, #632]	; (8008568 <USBH_HID_InterfaceInit+0x504>)
 80082ee:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80082f6:	7f1a      	ldrb	r2, [r3, #28]
 80082f8:	3201      	adds	r2, #1
 80082fa:	b2d2      	uxtb	r2, r2
 80082fc:	771a      	strb	r2, [r3, #28]
		}

		if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_JOYSTICK) {
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008304:	f003 0303 	and.w	r3, r3, #3
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b03      	cmp	r3, #3
 800830c:	d109      	bne.n	8008322 <USBH_HID_InterfaceInit+0x2be>
			HID_Handle->Init = USBH_HID_GamepadInit;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	4a96      	ldr	r2, [pc, #600]	; (800856c <USBH_HID_InterfaceInit+0x508>)
 8008312:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800831a:	7f1a      	ldrb	r2, [r3, #28]
 800831c:	3201      	adds	r2, #1
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	771a      	strb	r2, [r3, #28]
		}

		phost->pActiveClass->iface_init = IFACE_INITENDPNT;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008328:	2204      	movs	r2, #4
 800832a:	779a      	strb	r2, [r3, #30]
	}
		break;
 800832c:	e14e      	b.n	80085cc <USBH_HID_InterfaceInit+0x568>

	case IFACE_INITENDPNT: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 800833a:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 800833c:	3208      	adds	r2, #8
 800833e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008342:	617b      	str	r3, [r7, #20]

		/* Check fo available number of endpoints*/
		/* Find the number of EPs in the Interface Descriptor*/
		/* Choose the lower number in order not to overrun the buffer allocated*/
		max_ep =
				((phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800834a:	4619      	mov	r1, r3
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	231a      	movs	r3, #26
 8008350:	fb03 f301 	mul.w	r3, r3, r1
 8008354:	4413      	add	r3, r2
 8008356:	f203 3346 	addw	r3, r3, #838	; 0x346
 800835a:	781b      	ldrb	r3, [r3, #0]
		max_ep =
 800835c:	2b02      	cmp	r3, #2
 800835e:	bf28      	it	cs
 8008360:	2302      	movcs	r3, #2
 8008362:	73fb      	strb	r3, [r7, #15]
						<= USBH_MAX_NUM_ENDPOINTS) ?
						phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
						USBH_MAX_NUM_ENDPOINTS);

		/* Decode endpoint IN and OUT address from interface descriptor*/
		for (; num < max_ep; num++) {
 8008364:	e086      	b.n	8008474 <USBH_HID_InterfaceInit+0x410>
			if (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800836c:	4618      	mov	r0, r3
 800836e:	7f3b      	ldrb	r3, [r7, #28]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	3301      	adds	r3, #1
 8008374:	00d9      	lsls	r1, r3, #3
 8008376:	231a      	movs	r3, #26
 8008378:	fb03 f300 	mul.w	r3, r3, r0
 800837c:	440b      	add	r3, r1
 800837e:	4413      	add	r3, r2
 8008380:	f203 3346 	addw	r3, r3, #838	; 0x346
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	b25b      	sxtb	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	da38      	bge.n	80083fe <USBH_HID_InterfaceInit+0x39a>
					& 0x80U) {
				HID_Handle->InEp =
						(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008392:	4618      	mov	r0, r3
 8008394:	7f3b      	ldrb	r3, [r7, #28]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	3301      	adds	r3, #1
 800839a:	00d9      	lsls	r1, r3, #3
 800839c:	231a      	movs	r3, #26
 800839e:	fb03 f300 	mul.w	r3, r3, r0
 80083a2:	440b      	add	r3, r1
 80083a4:	4413      	add	r3, r2
 80083a6:	f203 3346 	addw	r3, r3, #838	; 0x346
 80083aa:	781a      	ldrb	r2, [r3, #0]
				HID_Handle->InEp =
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	711a      	strb	r2, [r3, #4]
				HID_Handle->InPipe =\
 USBH_AllocPipe(phost, HID_Handle->InEp);
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	791b      	ldrb	r3, [r3, #4]
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f005 fa57 	bl	800d86a <USBH_AllocPipe>
 80083bc:	4603      	mov	r3, r0
 80083be:	461a      	mov	r2, r3
				HID_Handle->InPipe =\
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	705a      	strb	r2, [r3, #1]

				/* Open pipe for IN endpoint*/
				USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp,
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	7859      	ldrb	r1, [r3, #1]
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	7918      	ldrb	r0, [r3, #4]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	8b12      	ldrh	r2, [r2, #24]
 80083dc:	9202      	str	r2, [sp, #8]
 80083de:	2203      	movs	r2, #3
 80083e0:	9201      	str	r2, [sp, #4]
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	4623      	mov	r3, r4
 80083e6:	4602      	mov	r2, r0
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f005 fa0f 	bl	800d80c <USBH_OpenPipe>
						phost->device.address, phost->device.speed,
						USB_EP_TYPE_INTR, HID_Handle->length);

				USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	2200      	movs	r2, #0
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f005 fe3b 	bl	800e072 <USBH_LL_SetToggle>
 80083fc:	e037      	b.n	800846e <USBH_HID_InterfaceInit+0x40a>

			} else {
				HID_Handle->OutEp =
						(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008404:	4618      	mov	r0, r3
 8008406:	7f3b      	ldrb	r3, [r7, #28]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	3301      	adds	r3, #1
 800840c:	00d9      	lsls	r1, r3, #3
 800840e:	231a      	movs	r3, #26
 8008410:	fb03 f300 	mul.w	r3, r3, r0
 8008414:	440b      	add	r3, r1
 8008416:	4413      	add	r3, r2
 8008418:	f203 3346 	addw	r3, r3, #838	; 0x346
 800841c:	781a      	ldrb	r2, [r3, #0]
				HID_Handle->OutEp =
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	70da      	strb	r2, [r3, #3]
				HID_Handle->OutPipe =\
 USBH_AllocPipe(phost,
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	78db      	ldrb	r3, [r3, #3]
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f005 fa1e 	bl	800d86a <USBH_AllocPipe>
 800842e:	4603      	mov	r3, r0
 8008430:	461a      	mov	r2, r3
				HID_Handle->OutPipe =\
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	701a      	strb	r2, [r3, #0]
						HID_Handle->OutEp);

				/* Open pipe for OUT endpoint*/
				USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp,
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	7819      	ldrb	r1, [r3, #0]
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	78d8      	ldrb	r0, [r3, #3]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	8b12      	ldrh	r2, [r2, #24]
 800844e:	9202      	str	r2, [sp, #8]
 8008450:	2203      	movs	r2, #3
 8008452:	9201      	str	r2, [sp, #4]
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	4623      	mov	r3, r4
 8008458:	4602      	mov	r2, r0
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f005 f9d6 	bl	800d80c <USBH_OpenPipe>
						phost->device.address, phost->device.speed,
						USB_EP_TYPE_INTR, HID_Handle->length);

				USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2200      	movs	r2, #0
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f005 fe02 	bl	800e072 <USBH_LL_SetToggle>
		for (; num < max_ep; num++) {
 800846e:	7f3b      	ldrb	r3, [r7, #28]
 8008470:	3301      	adds	r3, #1
 8008472:	773b      	strb	r3, [r7, #28]
 8008474:	7f3a      	ldrb	r2, [r7, #28]
 8008476:	7bfb      	ldrb	r3, [r7, #15]
 8008478:	429a      	cmp	r2, r3
 800847a:	f4ff af74 	bcc.w	8008366 <USBH_HID_InterfaceInit+0x302>
			}

		}

		phost->pActiveClass->iface_init = IFACE_SETPROTOCOL;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008484:	2205      	movs	r2, #5
 8008486:	779a      	strb	r2, [r3, #30]
	}
		break;
 8008488:	e0a0      	b.n	80085cc <USBH_HID_InterfaceInit+0x568>

	case IFACE_SETPROTOCOL: {
		//Set protocol (0U boot, 1U report)

		ctlStatus = USBH_HID_SetProtocol(phost, 1U,
				phost->device.current_interface);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
		ctlStatus = USBH_HID_SetProtocol(phost, 1U,
 8008490:	b29b      	uxth	r3, r3
 8008492:	461a      	mov	r2, r3
 8008494:	2101      	movs	r1, #1
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fa9b 	bl	80089d2 <USBH_HID_SetProtocol>
 800849c:	4603      	mov	r3, r0
 800849e:	77bb      	strb	r3, [r7, #30]

		if (ctlStatus == USBH_OK || ctlStatus == USBH_NOT_SUPPORTED) {
 80084a0:	7fbb      	ldrb	r3, [r7, #30]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <USBH_HID_InterfaceInit+0x44a>
 80084a6:	7fbb      	ldrb	r3, [r7, #30]
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	f040 808c 	bne.w	80085c6 <USBH_HID_InterfaceInit+0x562>
			phost->pActiveClass->iface_init = IFACE_SETIDLE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80084b4:	2206      	movs	r2, #6
 80084b6:	779a      	strb	r2, [r3, #30]
		}

	}
		break;
 80084b8:	e085      	b.n	80085c6 <USBH_HID_InterfaceInit+0x562>

	case IFACE_SETIDLE: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 80084c6:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 80084c8:	3208      	adds	r2, #8
 80084ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ce:	617b      	str	r3, [r7, #20]
		Itf_Desc =
				&phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum];
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80084d6:	7f5b      	ldrb	r3, [r3, #29]
 80084d8:	461a      	mov	r2, r3
		Itf_Desc =
 80084da:	231a      	movs	r3, #26
 80084dc:	fb03 f302 	mul.w	r3, r3, r2
 80084e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	4413      	add	r3, r2
 80084e8:	330a      	adds	r3, #10
 80084ea:	613b      	str	r3, [r7, #16]

		if ((Itf_Desc->bInterfaceClass == 0x03
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	795b      	ldrb	r3, [r3, #5]
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d107      	bne.n	8008504 <USBH_HID_InterfaceInit+0x4a0>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	799b      	ldrb	r3, [r3, #6]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d103      	bne.n	8008504 <USBH_HID_InterfaceInit+0x4a0>
				&& Itf_Desc->bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	79db      	ldrb	r3, [r3, #7]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d007      	beq.n	8008514 <USBH_HID_InterfaceInit+0x4b0>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD)) {
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800850a:	f003 0303 	and.w	r3, r3, #3
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b02      	cmp	r3, #2
 8008512:	d10a      	bne.n	800852a <USBH_HID_InterfaceInit+0x4c6>
			//set up polling at 500ms - 1 unit should be 4ms
			ctlStatus = USBH_HID_SetIdle(phost, 125U, 0U,
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800851a:	2200      	movs	r2, #0
 800851c:	217d      	movs	r1, #125	; 0x7d
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f9fd 	bl	800891e <USBH_HID_SetIdle>
 8008524:	4603      	mov	r3, r0
 8008526:	77bb      	strb	r3, [r7, #30]
 8008528:	e009      	b.n	800853e <USBH_HID_InterfaceInit+0x4da>
					phost->device.current_interface);
		} else {
			ctlStatus = USBH_HID_SetIdle(phost, 0U, 0U,
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008530:	2200      	movs	r2, #0
 8008532:	2100      	movs	r1, #0
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f9f2 	bl	800891e <USBH_HID_SetIdle>
 800853a:	4603      	mov	r3, r0
 800853c:	77bb      	strb	r3, [r7, #30]
					phost->device.current_interface);
		}

		if (ctlStatus == USBH_OK) {
 800853e:	7fbb      	ldrb	r3, [r7, #30]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d105      	bne.n	8008550 <USBH_HID_InterfaceInit+0x4ec>
			phost->pActiveClass->iface_init = IFACE_SELECTIFACE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800854a:	2207      	movs	r2, #7
 800854c:	779a      	strb	r2, [r3, #30]

			}
		}

	}
		break;
 800854e:	e03c      	b.n	80085ca <USBH_HID_InterfaceInit+0x566>
			if (ctlStatus == USBH_NOT_SUPPORTED) {
 8008550:	7fbb      	ldrb	r3, [r7, #30]
 8008552:	2b03      	cmp	r3, #3
 8008554:	d139      	bne.n	80085ca <USBH_HID_InterfaceInit+0x566>
				phost->pActiveClass->iface_init = IFACE_SELECTIFACE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800855c:	2207      	movs	r2, #7
 800855e:	779a      	strb	r2, [r3, #30]
		break;
 8008560:	e033      	b.n	80085ca <USBH_HID_InterfaceInit+0x566>
 8008562:	bf00      	nop
 8008564:	080091d5 	.word	0x080091d5
 8008568:	08009525 	.word	0x08009525
 800856c:	08008c15 	.word	0x08008c15

	case IFACE_SELECTIFACE: {
		//Check if we have any other interfaces to phost->device.CfgDesc.bNumInterfaces
		if (++phost->pActiveClass->iface_initnum
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008576:	7f5a      	ldrb	r2, [r3, #29]
 8008578:	3201      	adds	r2, #1
 800857a:	b2d2      	uxtb	r2, r2
 800857c:	775a      	strb	r2, [r3, #29]
 800857e:	7f5a      	ldrb	r2, [r3, #29]
				< phost->device.CfgDesc.bNumInterfaces) {
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
		if (++phost->pActiveClass->iface_initnum
 8008586:	429a      	cmp	r2, r3
 8008588:	d212      	bcs.n	80085b0 <USBH_HID_InterfaceInit+0x54c>
			//Have we reached maximum of interfaces? USBH_MAX_NUM_INTERFACES
			if (phost->pActiveClass->iface_initnum <= USBH_MAX_NUM_INTERFACES) {
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008590:	7f5b      	ldrb	r3, [r3, #29]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d805      	bhi.n	80085a2 <USBH_HID_InterfaceInit+0x53e>
				phost->pActiveClass->iface_init = IFACE_READHID;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800859c:	2201      	movs	r2, #1
 800859e:	779a      	strb	r2, [r3, #30]
			status = USBH_OK;
			phost->device.current_interface = 0;

		}
	}
		break;
 80085a0:	e014      	b.n	80085cc <USBH_HID_InterfaceInit+0x568>
				status = USBH_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	77fb      	strb	r3, [r7, #31]
				phost->device.current_interface = 0;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
		break;
 80085ae:	e00d      	b.n	80085cc <USBH_HID_InterfaceInit+0x568>
			status = USBH_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	77fb      	strb	r3, [r7, #31]
			phost->device.current_interface = 0;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
		break;
 80085bc:	e006      	b.n	80085cc <USBH_HID_InterfaceInit+0x568>
		break;
 80085be:	bf00      	nop
 80085c0:	e004      	b.n	80085cc <USBH_HID_InterfaceInit+0x568>
		break;
 80085c2:	bf00      	nop
 80085c4:	e002      	b.n	80085cc <USBH_HID_InterfaceInit+0x568>
		break;
 80085c6:	bf00      	nop
 80085c8:	e000      	b.n	80085cc <USBH_HID_InterfaceInit+0x568>
		break;
 80085ca:	bf00      	nop
	}

	return status;
 80085cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3720      	adds	r7, #32
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bdb0      	pop	{r4, r5, r7, pc}
 80085d6:	bf00      	nop

080085d8 <USBH_HID_InterfaceDeInit>:
 * @brief  USBH_HID_InterfaceDeInit
 *         The function DeInit the Pipes used for the HID class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef static USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost) {
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]

	HID_HandleTypeDef *HID_Handle;

	uint8_t i = 0;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73fb      	strb	r3, [r7, #15]
	for (; i <= (USBH_MAX_NUM_INTERFACES - 1); i++) {
 80085e4:	e055      	b.n	8008692 <USBH_HID_InterfaceDeInit+0xba>

		HID_Handle = (HID_HandleTypeDef*) phost->pActiveClass->pData[i];
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80085ec:	7bfa      	ldrb	r2, [r7, #15]
 80085ee:	3208      	adds	r2, #8
 80085f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f4:	60bb      	str	r3, [r7, #8]

		if (HID_Handle->InPipe != 0x00U) {
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	785b      	ldrb	r3, [r3, #1]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00e      	beq.n	800861c <USBH_HID_InterfaceDeInit+0x44>
			USBH_ClosePipe(phost, HID_Handle->InPipe);
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	785b      	ldrb	r3, [r3, #1]
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f005 f920 	bl	800d84a <USBH_ClosePipe>
			USBH_FreePipe(phost, HID_Handle->InPipe);
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	785b      	ldrb	r3, [r3, #1]
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f005 f94a 	bl	800d8aa <USBH_FreePipe>
			HID_Handle->InPipe = 0U; /* Reset the pipe as Free */
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2200      	movs	r2, #0
 800861a:	705a      	strb	r2, [r3, #1]
		}

		if (HID_Handle->OutPipe != 0x00U) {
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00e      	beq.n	8008642 <USBH_HID_InterfaceDeInit+0x6a>
			USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f005 f90d 	bl	800d84a <USBH_ClosePipe>
			USBH_FreePipe(phost, HID_Handle->OutPipe);
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f005 f937 	bl	800d8aa <USBH_FreePipe>
			HID_Handle->OutPipe = 0U; /* Reset the pipe as Free */
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2200      	movs	r2, #0
 8008640:	701a      	strb	r2, [r3, #0]
		}

		if (phost->pActiveClass->pData[i]) {
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008648:	7bfa      	ldrb	r2, [r7, #15]
 800864a:	3208      	adds	r2, #8
 800864c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d01b      	beq.n	800868c <USBH_HID_InterfaceDeInit+0xb4>
			USBH_free(phost->pActiveClass->pData[i]);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800865a:	7bfa      	ldrb	r2, [r7, #15]
 800865c:	3208      	adds	r2, #8
 800865e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008662:	4618      	mov	r0, r3
 8008664:	f005 fd9e 	bl	800e1a4 <free>
			free(phost->pActiveClass->pData[i]);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800866e:	7bfa      	ldrb	r2, [r7, #15]
 8008670:	3208      	adds	r2, #8
 8008672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008676:	4618      	mov	r0, r3
 8008678:	f005 fd94 	bl	800e1a4 <free>
			phost->pActiveClass->pData[i] = 0U;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008682:	7bfa      	ldrb	r2, [r7, #15]
 8008684:	3208      	adds	r2, #8
 8008686:	2100      	movs	r1, #0
 8008688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (; i <= (USBH_MAX_NUM_INTERFACES - 1); i++) {
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	3301      	adds	r3, #1
 8008690:	73fb      	strb	r3, [r7, #15]
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d9a6      	bls.n	80085e6 <USBH_HID_InterfaceDeInit+0xe>
		}
	}
	phost->pActiveClass->iface_init = 0U;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800869e:	2200      	movs	r2, #0
 80086a0:	779a      	strb	r2, [r3, #30]
	phost->pActiveClass->iface_initnum = 0U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80086a8:	2200      	movs	r2, #0
 80086aa:	775a      	strb	r2, [r3, #29]
	phost->pActiveClass->interfaces = 0U;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80086b2:	2200      	movs	r2, #0
 80086b4:	771a      	strb	r2, [r3, #28]

	return USBH_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBH_HID_NextInterface>:
 *         for HID class.
 * @param  phost: Host handle
 * @retval USBH Status
 */

void USBH_HID_NextInterface(USBH_HandleTypeDef *phost) {
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
	phost->device.current_interface++;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80086ce:	3301      	adds	r3, #1
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	if (phost->device.current_interface >= phost->pActiveClass->interfaces) {
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80086e4:	7f1b      	ldrb	r3, [r3, #28]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d303      	bcc.n	80086f2 <USBH_HID_NextInterface+0x32>
		phost->device.current_interface = 0;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
	}
}
 80086f2:	bf00      	nop
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <USBH_HID_ClassRequest>:

static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost) {
 80086fe:	b480      	push	{r7}
 8008700:	b083      	sub	sp, #12
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
	//All config has been done already in USBH_HID_InterfaceInit
	return USBH_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <USBH_HID_Process>:
 * @brief  USBH_HID_Process
 *         The function is for managing state machine for HID data transfers
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost) {
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	75fb      	strb	r3, [r7, #23]
	HID_HandleTypeDef *HID_Handle =
			(HID_HandleTypeDef*) phost->pActiveClass->pData[phost->device.current_interface];
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
	HID_HandleTypeDef *HID_Handle =
 800872c:	3208      	adds	r2, #8
 800872e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008732:	613b      	str	r3, [r7, #16]
	uint32_t XferSize;

	switch (HID_Handle->state) {
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	789b      	ldrb	r3, [r3, #2]
 8008738:	2b06      	cmp	r3, #6
 800873a:	f200 8084 	bhi.w	8008846 <USBH_HID_Process+0x132>
 800873e:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <USBH_HID_Process+0x30>)
 8008740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008744:	08008761 	.word	0x08008761
 8008748:	08008847 	.word	0x08008847
 800874c:	08008847 	.word	0x08008847
 8008750:	08008847 	.word	0x08008847
 8008754:	08008793 	.word	0x08008793
 8008758:	0800877d 	.word	0x0800877d
 800875c:	080087c1 	.word	0x080087c1
	case HID_INIT:
		HID_Handle->Init(phost);
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	4798      	blx	r3
		HID_Handle->state = HID_SYNC;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	2205      	movs	r2, #5
 800876c:	709a      	strb	r2, [r3, #2]
		phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8008774:	2102      	movs	r1, #2
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	4798      	blx	r3
		break;
 800877a:	e069      	b.n	8008850 <USBH_HID_Process+0x13c>

	case HID_SYNC:
		/* Sync with start of Even Frame */
		if (phost->Timer & 1U) {
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b00      	cmp	r3, #0
 8008788:	d05f      	beq.n	800884a <USBH_HID_Process+0x136>
			HID_Handle->state = HID_GET_DATA;
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	2204      	movs	r2, #4
 800878e:	709a      	strb	r2, [r3, #2]
		}
		break;
 8008790:	e05b      	b.n	800884a <USBH_HID_Process+0x136>

	case HID_GET_DATA:
		USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	6959      	ldr	r1, [r3, #20]
				(uint8_t) HID_Handle->length, HID_Handle->InPipe);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	8b1b      	ldrh	r3, [r3, #24]
		USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800879a:	b2da      	uxtb	r2, r3
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	785b      	ldrb	r3, [r3, #1]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f005 f814 	bl	800d7ce <USBH_InterruptReceiveData>

		HID_Handle->state = HID_POLL;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	2206      	movs	r2, #6
 80087aa:	709a      	strb	r2, [r3, #2]
		HID_Handle->timer = phost->Timer;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	621a      	str	r2, [r3, #32]
		HID_Handle->DataReady = 0U;
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 80087be:	e047      	b.n	8008850 <USBH_HID_Process+0x13c>

	case HID_POLL:
		if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE) {
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f005 fc32 	bl	800e030 <USBH_LL_GetURBState>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d120      	bne.n	8008814 <USBH_HID_Process+0x100>

			XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	785b      	ldrb	r3, [r3, #1]
 80087d6:	4619      	mov	r1, r3
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f005 fb97 	bl	800df0c <USBH_LL_GetLastXferSize>
 80087de:	60f8      	str	r0, [r7, #12]

			if (HID_Handle->DataReady == 0U && XferSize != 0U) {
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d131      	bne.n	800884e <USBH_HID_Process+0x13a>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d02e      	beq.n	800884e <USBH_HID_Process+0x13a>
				USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData,
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	f103 0008 	add.w	r0, r3, #8
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	6959      	ldr	r1, [r3, #20]
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	8b1b      	ldrh	r3, [r3, #24]
 80087fe:	461a      	mov	r2, r3
 8008800:	f000 f9a9 	bl	8008b56 <USBH_HID_FifoWrite>
						HID_Handle->length);
				HID_Handle->DataReady = 1U;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				USBH_HID_EventCallback(phost);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f9f6 	bl	8008bfe <USBH_HID_EventCallback>
					HID_Handle->state = HID_GET_DATA;
					USBH_HID_NextInterface(phost);
				}
			}
		}
		break;
 8008812:	e01c      	b.n	800884e <USBH_HID_Process+0x13a>
			if (USBH_LL_GetURBState(phost, HID_Handle->InPipe)
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	785b      	ldrb	r3, [r3, #1]
 8008818:	4619      	mov	r1, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f005 fc08 	bl	800e030 <USBH_LL_GetURBState>
 8008820:	4603      	mov	r3, r0
 8008822:	2b05      	cmp	r3, #5
 8008824:	d113      	bne.n	800884e <USBH_HID_Process+0x13a>
				if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK) {
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	7e9b      	ldrb	r3, [r3, #26]
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f004 fbe0 	bl	800cff2 <USBH_ClrFeature>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10a      	bne.n	800884e <USBH_HID_Process+0x13a>
					HID_Handle->state = HID_GET_DATA;
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	2204      	movs	r2, #4
 800883c:	709a      	strb	r2, [r3, #2]
					USBH_HID_NextInterface(phost);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff ff3e 	bl	80086c0 <USBH_HID_NextInterface>
		break;
 8008844:	e003      	b.n	800884e <USBH_HID_Process+0x13a>

	default:
		break;
 8008846:	bf00      	nop
 8008848:	e002      	b.n	8008850 <USBH_HID_Process+0x13c>
		break;
 800884a:	bf00      	nop
 800884c:	e000      	b.n	8008850 <USBH_HID_Process+0x13c>
		break;
 800884e:	bf00      	nop
	}

	return status;
 8008850:	7dfb      	ldrb	r3, [r7, #23]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop

0800885c <USBH_HID_SOFProcess>:
 * @brief  USBH_HID_SOFProcess
 *         The function is for managing the SOF Process
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost) {
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	HID_HandleTypeDef *HID_Handle =
			(HID_HandleTypeDef*) phost->pActiveClass->pData[phost->device.current_interface];
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
	HID_HandleTypeDef *HID_Handle =
 8008870:	3208      	adds	r2, #8
 8008872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008876:	60fb      	str	r3, [r7, #12]

	if (HID_Handle->state == HID_POLL) {
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	789b      	ldrb	r3, [r3, #2]
 800887c:	2b06      	cmp	r3, #6
 800887e:	d10f      	bne.n	80088a0 <USBH_HID_SOFProcess+0x44>
		if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll) {
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	8b92      	ldrh	r2, [r2, #28]
 8008890:	4293      	cmp	r3, r2
 8008892:	d305      	bcc.n	80088a0 <USBH_HID_SOFProcess+0x44>
			HID_Handle->state = HID_GET_DATA;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2204      	movs	r2, #4
 8008898:	709a      	strb	r2, [r3, #2]
			USBH_HID_NextInterface(phost);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7ff ff10 	bl	80086c0 <USBH_HID_NextInterface>
		}
	}
	return USBH_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <USBH_HID_GetHIDReportDescriptor>:
 * @param  phost: Host handle
 * @param  Length : HID Report Descriptor Length
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
		uint16_t length, uint8_t iface_idx) {
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b086      	sub	sp, #24
 80088ae:	af02      	add	r7, sp, #8
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	460b      	mov	r3, r1
 80088b4:	807b      	strh	r3, [r7, #2]
 80088b6:	4613      	mov	r3, r2
 80088b8:	707b      	strb	r3, [r7, #1]

	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID_REPORT, iface_idx, phost->device.Data, length);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
	status = USBH_GetDescriptor(phost,
 80088c0:	7879      	ldrb	r1, [r7, #1]
 80088c2:	887a      	ldrh	r2, [r7, #2]
 80088c4:	9201      	str	r2, [sp, #4]
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	460b      	mov	r3, r1
 80088ca:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 80088ce:	2101      	movs	r1, #1
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f004 fae9 	bl	800cea8 <USBH_GetDescriptor>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73fb      	strb	r3, [r7, #15]
	 In case of USB Boot Mode devices for In report handling ,
	 HID report descriptor parsing is not required.
	 In case, for supporting Non-Boot Protocol devices and output reports,
	 user may parse the report descriptor*/

	return status;
 80088da:	7bfb      	ldrb	r3, [r7, #15]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBH_HID_GetHIDDescriptor>:
 * @param  phost: Host handle
 * @param  Length : HID Descriptor Length
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor(USBH_HandleTypeDef *phost,
		uint16_t length, uint8_t iface_idx) {
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af02      	add	r7, sp, #8
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	807b      	strh	r3, [r7, #2]
 80088f0:	4613      	mov	r3, r2
 80088f2:	707b      	strb	r3, [r7, #1]
	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID, iface_idx, phost->device.Data, length);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
	status = USBH_GetDescriptor(phost,
 80088fa:	7879      	ldrb	r1, [r7, #1]
 80088fc:	887a      	ldrh	r2, [r7, #2]
 80088fe:	9201      	str	r2, [sp, #4]
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	460b      	mov	r3, r1
 8008904:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8008908:	2101      	movs	r1, #1
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f004 facc 	bl	800cea8 <USBH_GetDescriptor>
 8008910:	4603      	mov	r3, r0
 8008912:	73fb      	strb	r3, [r7, #15]

	return status;
 8008914:	7bfb      	ldrb	r3, [r7, #15]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBH_HID_SetIdle>:
 * @param  duration: Duration for HID Idle request
 * @param  reportId : Targeted report ID for Set Idle request
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost, uint8_t duration,
		uint8_t reportId, uint8_t interface) {
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	4608      	mov	r0, r1
 8008928:	4611      	mov	r1, r2
 800892a:	461a      	mov	r2, r3
 800892c:	4603      	mov	r3, r0
 800892e:	70fb      	strb	r3, [r7, #3]
 8008930:	460b      	mov	r3, r1
 8008932:	70bb      	strb	r3, [r7, #2]
 8008934:	4613      	mov	r3, r2
 8008936:	707b      	strb	r3, [r7, #1]

	phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2221      	movs	r2, #33	; 0x21
 800893c:	741a      	strb	r2, [r3, #16]
			|
			USB_REQ_TYPE_CLASS;

	phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	220a      	movs	r2, #10
 8008942:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.w = (uint16_t) (((uint32_t) duration << 8U)
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	b29b      	uxth	r3, r3
 8008948:	021b      	lsls	r3, r3, #8
 800894a:	b29a      	uxth	r2, r3
 800894c:	78bb      	ldrb	r3, [r7, #2]
 800894e:	b29b      	uxth	r3, r3
 8008950:	4313      	orrs	r3, r2
 8008952:	b29a      	uxth	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	825a      	strh	r2, [r3, #18]
			| (uint32_t) reportId);

	phost->Control.setup.b.wIndex.w = 0U;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	829a      	strh	r2, [r3, #20]
	phost->Control.setup.b.wLength.w = interface;
 800895e:	787b      	ldrb	r3, [r7, #1]
 8008960:	b29a      	uxth	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	82da      	strh	r2, [r3, #22]

	return USBH_CtlReq(phost, 0U, 0U);
 8008966:	2200      	movs	r2, #0
 8008968:	2100      	movs	r1, #0
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f004 fd21 	bl	800d3b2 <USBH_CtlReq>
 8008970:	4603      	mov	r3, r0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <USBH_HID_SetReport>:
 * @param  reportLen   : Length of data report to be send
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_SetReport(USBH_HandleTypeDef *phost,
		uint8_t reportType, uint8_t reportId, uint8_t *reportBuff,
		uint8_t reportLen) {
 800897a:	b580      	push	{r7, lr}
 800897c:	b084      	sub	sp, #16
 800897e:	af00      	add	r7, sp, #0
 8008980:	60f8      	str	r0, [r7, #12]
 8008982:	607b      	str	r3, [r7, #4]
 8008984:	460b      	mov	r3, r1
 8008986:	72fb      	strb	r3, [r7, #11]
 8008988:	4613      	mov	r3, r2
 800898a:	72bb      	strb	r3, [r7, #10]

	phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2221      	movs	r2, #33	; 0x21
 8008990:	741a      	strb	r2, [r3, #16]
			|
			USB_REQ_TYPE_CLASS;

	phost->Control.setup.b.bRequest = USB_HID_SET_REPORT;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2209      	movs	r2, #9
 8008996:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.w = (uint16_t) (((uint32_t) reportType << 8U)
 8008998:	7afb      	ldrb	r3, [r7, #11]
 800899a:	b29b      	uxth	r3, r3
 800899c:	021b      	lsls	r3, r3, #8
 800899e:	b29a      	uxth	r2, r3
 80089a0:	7abb      	ldrb	r3, [r7, #10]
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	4313      	orrs	r3, r2
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	825a      	strh	r2, [r3, #18]
			| (uint32_t) reportId);

	phost->Control.setup.b.wIndex.w = 0U;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	829a      	strh	r2, [r3, #20]
	phost->Control.setup.b.wLength.w = reportLen;
 80089b2:	7e3b      	ldrb	r3, [r7, #24]
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	82da      	strh	r2, [r3, #22]

	return USBH_CtlReq(phost, reportBuff, (uint16_t) reportLen);
 80089ba:	7e3b      	ldrb	r3, [r7, #24]
 80089bc:	b29b      	uxth	r3, r3
 80089be:	461a      	mov	r2, r3
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f004 fcf5 	bl	800d3b2 <USBH_CtlReq>
 80089c8:	4603      	mov	r3, r0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBH_HID_SetProtocol>:
 * @param  phost: Host handle
 * @param  protocol : Set Protocol for HID : boot/report protocol
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
		uint8_t protocol, uint16_t interface) {
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b082      	sub	sp, #8
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	460b      	mov	r3, r1
 80089dc:	70fb      	strb	r3, [r7, #3]
 80089de:	4613      	mov	r3, r2
 80089e0:	803b      	strh	r3, [r7, #0]
	phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2221      	movs	r2, #33	; 0x21
 80089e6:	741a      	strb	r2, [r3, #16]
			| USB_REQ_TYPE_CLASS;

	phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	220b      	movs	r2, #11
 80089ec:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.w = protocol;
 80089ee:	78fb      	ldrb	r3, [r7, #3]
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	825a      	strh	r2, [r3, #18]
	phost->Control.setup.b.wIndex.w = interface;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	883a      	ldrh	r2, [r7, #0]
 80089fa:	829a      	strh	r2, [r3, #20]
	phost->Control.setup.b.wLength.w = 0U;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	82da      	strh	r2, [r3, #22]

	return USBH_CtlReq(phost, 0U, 0U);
 8008a02:	2200      	movs	r2, #0
 8008a04:	2100      	movs	r1, #0
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f004 fcd3 	bl	800d3b2 <USBH_CtlReq>
 8008a0c:	4603      	mov	r3, r0

}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBH_HID_ParseHIDDesc>:
 *         This function Parse the HID descriptor
 * @param  desc: HID Descriptor
 * @param  buf: Buffer where the source descriptor is available
 * @retval None
 */
void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf) {
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]

	desc->bLength = *(uint8_t*) (buf + 0);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781a      	ldrb	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	701a      	strb	r2, [r3, #0]
	desc->bDescriptorType = *(uint8_t*) (buf + 1);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	785a      	ldrb	r2, [r3, #1]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	705a      	strb	r2, [r3, #1]
	desc->bcdHID = LE16(buf + 2);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	3302      	adds	r3, #2
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	3303      	adds	r3, #3
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	021b      	lsls	r3, r3, #8
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	4313      	orrs	r3, r2
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	805a      	strh	r2, [r3, #2]
	desc->bCountryCode = *(uint8_t*) (buf + 4);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	791a      	ldrb	r2, [r3, #4]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	711a      	strb	r2, [r3, #4]
	desc->bNumDescriptors = *(uint8_t*) (buf + 5);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	795a      	ldrb	r2, [r3, #5]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	715a      	strb	r2, [r3, #5]
	desc->bReportDescriptorType = *(uint8_t*) (buf + 6);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	799a      	ldrb	r2, [r3, #6]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	719a      	strb	r2, [r3, #6]
	desc->wItemLength = LE16(buf + 7);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	3307      	adds	r3, #7
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	3308      	adds	r3, #8
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	021b      	lsls	r3, r3, #8
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	811a      	strh	r2, [r3, #8]
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <USBH_HID_FifoInit>:
 * @param  f: Fifo address
 * @param  buf: Fifo buffer
 * @param  size: Fifo Size
 * @retval none
 */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size) {
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	80fb      	strh	r3, [r7, #6]
	f->head = 0U;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	809a      	strh	r2, [r3, #4]
	f->tail = 0U;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	80da      	strh	r2, [r3, #6]
	f->lock = 0U;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	729a      	strb	r2, [r3, #10]
	f->size = size;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	88fa      	ldrh	r2, [r7, #6]
 8008ab0:	811a      	strh	r2, [r3, #8]
	f->buf = buf;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	601a      	str	r2, [r3, #0]
}
 8008ab8:	bf00      	nop
 8008aba:	3714      	adds	r7, #20
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <USBH_HID_FifoRead>:
 * @param  f: Fifo address
 * @param  buf: read buffer
 * @param  nbytes: number of item to read
 * @retval number of read items
 */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes) {
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t *p;

	p = (uint8_t*) buf;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	613b      	str	r3, [r7, #16]

	if (f->lock == 0U) {
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	7a9b      	ldrb	r3, [r3, #10]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d131      	bne.n	8008b42 <USBH_HID_FifoRead+0x7e>
		f->lock = 1U;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	729a      	strb	r2, [r3, #10]

		for (i = 0U; i < nbytes; i++) {
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	82fb      	strh	r3, [r7, #22]
 8008ae8:	e027      	b.n	8008b3a <USBH_HID_FifoRead+0x76>
			if (f->tail != f->head) {
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	88da      	ldrh	r2, [r3, #6]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	889b      	ldrh	r3, [r3, #4]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d019      	beq.n	8008b2a <USBH_HID_FifoRead+0x66>
				*p++ = f->buf[f->tail];
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	88d2      	ldrh	r2, [r2, #6]
 8008afe:	441a      	add	r2, r3
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	1c59      	adds	r1, r3, #1
 8008b04:	6139      	str	r1, [r7, #16]
 8008b06:	7812      	ldrb	r2, [r2, #0]
 8008b08:	701a      	strb	r2, [r3, #0]
				f->tail++;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	88db      	ldrh	r3, [r3, #6]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	80da      	strh	r2, [r3, #6]

				if (f->tail == f->size) {
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	88da      	ldrh	r2, [r3, #6]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	891b      	ldrh	r3, [r3, #8]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d108      	bne.n	8008b34 <USBH_HID_FifoRead+0x70>
					f->tail = 0U;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	80da      	strh	r2, [r3, #6]
 8008b28:	e004      	b.n	8008b34 <USBH_HID_FifoRead+0x70>
				}
			} else {
				f->lock = 0U;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	729a      	strb	r2, [r3, #10]
				return i;
 8008b30:	8afb      	ldrh	r3, [r7, #22]
 8008b32:	e00a      	b.n	8008b4a <USBH_HID_FifoRead+0x86>
		for (i = 0U; i < nbytes; i++) {
 8008b34:	8afb      	ldrh	r3, [r7, #22]
 8008b36:	3301      	adds	r3, #1
 8008b38:	82fb      	strh	r3, [r7, #22]
 8008b3a:	8afa      	ldrh	r2, [r7, #22]
 8008b3c:	88fb      	ldrh	r3, [r7, #6]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d3d3      	bcc.n	8008aea <USBH_HID_FifoRead+0x26>
			}
		}
	}

	f->lock = 0U;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	729a      	strb	r2, [r3, #10]

	return nbytes;
 8008b48:	88fb      	ldrh	r3, [r7, #6]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <USBH_HID_FifoWrite>:
 * @param  f: Fifo address
 * @param  buf: read buffer
 * @param  nbytes: number of item to write
 * @retval number of written items
 */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t nbytes) {
 8008b56:	b480      	push	{r7}
 8008b58:	b087      	sub	sp, #28
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	60f8      	str	r0, [r7, #12]
 8008b5e:	60b9      	str	r1, [r7, #8]
 8008b60:	4613      	mov	r3, r2
 8008b62:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t *p;

	p = (uint8_t*) buf;
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	613b      	str	r3, [r7, #16]

	if (f->lock == 0U) {
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	7a9b      	ldrb	r3, [r3, #10]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d13c      	bne.n	8008bea <USBH_HID_FifoWrite+0x94>
		f->lock = 1U;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2201      	movs	r2, #1
 8008b74:	729a      	strb	r2, [r3, #10]

		for (i = 0U; i < nbytes; i++) {
 8008b76:	2300      	movs	r3, #0
 8008b78:	82fb      	strh	r3, [r7, #22]
 8008b7a:	e032      	b.n	8008be2 <USBH_HID_FifoWrite+0x8c>
			if ((f->head + 1U == f->tail)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	889b      	ldrh	r3, [r3, #4]
 8008b80:	3301      	adds	r3, #1
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	88d2      	ldrh	r2, [r2, #6]
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d00a      	beq.n	8008ba0 <USBH_HID_FifoWrite+0x4a>
					|| ((f->head + 1U == f->size) && (f->tail == 0U))) {
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	889b      	ldrh	r3, [r3, #4]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	8912      	ldrh	r2, [r2, #8]
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d108      	bne.n	8008baa <USBH_HID_FifoWrite+0x54>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	88db      	ldrh	r3, [r3, #6]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d104      	bne.n	8008baa <USBH_HID_FifoWrite+0x54>
				f->lock = 0U;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	729a      	strb	r2, [r3, #10]
				return i;
 8008ba6:	8afb      	ldrh	r3, [r7, #22]
 8008ba8:	e023      	b.n	8008bf2 <USBH_HID_FifoWrite+0x9c>
			} else {
				f->buf[f->head] = *p++;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	613a      	str	r2, [r7, #16]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	6812      	ldr	r2, [r2, #0]
 8008bb4:	68f9      	ldr	r1, [r7, #12]
 8008bb6:	8889      	ldrh	r1, [r1, #4]
 8008bb8:	440a      	add	r2, r1
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	7013      	strb	r3, [r2, #0]
				f->head++;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	889b      	ldrh	r3, [r3, #4]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	809a      	strh	r2, [r3, #4]

				if (f->head == f->size) {
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	889a      	ldrh	r2, [r3, #4]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	891b      	ldrh	r3, [r3, #8]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d102      	bne.n	8008bdc <USBH_HID_FifoWrite+0x86>
					f->head = 0U;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	809a      	strh	r2, [r3, #4]
		for (i = 0U; i < nbytes; i++) {
 8008bdc:	8afb      	ldrh	r3, [r7, #22]
 8008bde:	3301      	adds	r3, #1
 8008be0:	82fb      	strh	r3, [r7, #22]
 8008be2:	8afa      	ldrh	r2, [r7, #22]
 8008be4:	88fb      	ldrh	r3, [r7, #6]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d3c8      	bcc.n	8008b7c <USBH_HID_FifoWrite+0x26>
				}
			}
		}
	}

	f->lock = 0U;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	729a      	strb	r2, [r3, #10]

	return nbytes;
 8008bf0:	88fb      	ldrh	r3, [r7, #6]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	371c      	adds	r7, #28
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <USBH_HID_EventCallback>:
/**
 * @brief  The function is a callback about HID Data events
 *  @param  phost: Selected device
 * @retval None
 */
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) {
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(phost);
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
	...

08008c14 <USBH_HID_GamepadInit>:
  *         The function init the HID gamepad.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GamepadInit(USBH_HandleTypeDef *phost)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8008c28:	3208      	adds	r2, #8
 8008c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2e:	60fb      	str	r3, [r7, #12]
  uint8_t reportSize = 0U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	72fb      	strb	r3, [r7, #11]
  reportSize = HID_Handle->HID_Desc.RptDesc.report_size;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008c3a:	72fb      	strb	r3, [r7, #11]





  HID_Handle->length = reportSize;
 8008c3c:	7afb      	ldrb	r3, [r7, #11]
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	831a      	strh	r2, [r3, #24]


  HID_Handle->pData = (uint8_t*) malloc (reportSize *sizeof(uint8_t)); //(uint8_t*)(void *)
 8008c44:	7afb      	ldrb	r3, [r7, #11]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f005 faa4 	bl	800e194 <malloc>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	461a      	mov	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	615a      	str	r2, [r3, #20]
  gamepad_report_data = HID_Handle->pData;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	695b      	ldr	r3, [r3, #20]
 8008c58:	4a0a      	ldr	r2, [pc, #40]	; (8008c84 <USBH_HID_GamepadInit+0x70>)
 8008c5a:	6013      	str	r3, [r2, #0]
  USBH_HID_FifoInit(&HID_Handle->fifo, gamepad_report_data_buf, HID_QUEUE_SIZE * reportSize);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f103 0008 	add.w	r0, r3, #8
 8008c62:	7afb      	ldrb	r3, [r7, #11]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	461a      	mov	r2, r3
 8008c68:	0092      	lsls	r2, r2, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	461a      	mov	r2, r3
 8008c72:	4905      	ldr	r1, [pc, #20]	; (8008c88 <USBH_HID_GamepadInit+0x74>)
 8008c74:	f7ff ff0a 	bl	8008a8c <USBH_HID_FifoInit>

  return USBH_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20000114 	.word	0x20000114
 8008c88:	20000298 	.word	0x20000298

08008c8c <USBH_HID_GetGamepadInfo>:
  *         The function return gamepad information.
  * @param  phost: Host handle
  * @retval gamepad information
  */
HID_gamepad_Info_TypeDef *USBH_HID_GetGamepadInfo(USBH_HandleTypeDef *phost)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
	//refresh value of joymap and return value
	if(USBH_HID_GamepadDecode(phost)== USBH_OK)
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f80d 	bl	8008cb4 <USBH_HID_GamepadDecode>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d101      	bne.n	8008ca4 <USBH_HID_GetGamepadInfo+0x18>
	{
		return &gamepad_info;
 8008ca0:	4b03      	ldr	r3, [pc, #12]	; (8008cb0 <USBH_HID_GetGamepadInfo+0x24>)
 8008ca2:	e000      	b.n	8008ca6 <USBH_HID_GetGamepadInfo+0x1a>
	}
	else
	{
		return NULL;
 8008ca4:	2300      	movs	r3, #0
	}
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	20000294 	.word	0x20000294

08008cb4 <USBH_HID_GamepadDecode>:
  *         The function decode gamepad data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_GamepadDecode(USBH_HandleTypeDef *phost)
{
 8008cb4:	b5b0      	push	{r4, r5, r7, lr}
 8008cb6:	b098      	sub	sp, #96	; 0x60
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8008cc8:	3208      	adds	r2, #8
 8008cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cce:	65bb      	str	r3, [r7, #88]	; 0x58

	  if(HID_Handle->length == 0U)
 8008cd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cd2:	8b1b      	ldrh	r3, [r3, #24]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <USBH_HID_GamepadDecode+0x28>
	  {
	    return USBH_FAIL;
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e275      	b.n	80091c8 <USBH_HID_GamepadDecode+0x514>
	  }

	  if(USBH_HID_FifoRead(&HID_Handle->fifo, gamepad_report_data, HID_Handle->length) ==  HID_Handle->length)
 8008cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cde:	f103 0008 	add.w	r0, r3, #8
 8008ce2:	4bd3      	ldr	r3, [pc, #844]	; (8009030 <USBH_HID_GamepadDecode+0x37c>)
 8008ce4:	6819      	ldr	r1, [r3, #0]
 8008ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ce8:	8b1b      	ldrh	r3, [r3, #24]
 8008cea:	461a      	mov	r2, r3
 8008cec:	f7ff feea 	bl	8008ac4 <USBH_HID_FifoRead>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cf6:	8b1b      	ldrh	r3, [r3, #24]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	f040 8264 	bne.w	80091c6 <USBH_HID_GamepadDecode+0x512>
	    {


		uint8_t jmap = 0;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		uint8_t btn = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		uint8_t btn_extra = 0;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		int16_t a[2];
		uint8_t i;

		hid_report_t conf = HID_Handle->HID_Desc.RptDesc;
 8008d10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d12:	f107 040c 	add.w	r4, r7, #12
 8008d16:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8008d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008d2a:	6020      	str	r0, [r4, #0]
 8008d2c:	3404      	adds	r4, #4
 8008d2e:	8021      	strh	r1, [r4, #0]

		// skip report id if present
		uint8_t *p = gamepad_report_data+(conf.report_id?1:0);
 8008d30:	4bbf      	ldr	r3, [pc, #764]	; (8009030 <USBH_HID_GamepadDecode+0x37c>)
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	7b7b      	ldrb	r3, [r7, #13]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <USBH_HID_GamepadDecode+0x8a>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e000      	b.n	8008d40 <USBH_HID_GamepadDecode+0x8c>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	4413      	add	r3, r2
 8008d42:	657b      	str	r3, [r7, #84]	; 0x54


		//process axis
		// two axes ...
				for(i=0;i<2;i++) {
 8008d44:	2300      	movs	r3, #0
 8008d46:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008d4a:	e03d      	b.n	8008dc8 <USBH_HID_GamepadDecode+0x114>
					// if logical minimum is > logical maximum then logical minimum
					// is signed. This means that the value itself is also signed
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 8008d4c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d50:	3301      	adds	r3, #1
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008d58:	4413      	add	r3, r2
 8008d5a:	f833 2c50 	ldrh.w	r2, [r3, #-80]
					conf.joystick_mouse.axis[i].logical.max;
 8008d5e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d62:	3301      	adds	r3, #1
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008d6a:	440b      	add	r3, r1
 8008d6c:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 8008d70:	429a      	cmp	r2, r3
 8008d72:	bf8c      	ite	hi
 8008d74:	2301      	movhi	r3, #1
 8008d76:	2300      	movls	r3, #0
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	64bb      	str	r3, [r7, #72]	; 0x48
					a[i] = collect_bits(p, conf.joystick_mouse.axis[i].offset,
 8008d7c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d80:	3301      	adds	r3, #1
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008d88:	4413      	add	r3, r2
 8008d8a:	f833 1c54 	ldrh.w	r1, [r3, #-84]
 8008d8e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d92:	3301      	adds	r3, #1
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f813 2c52 	ldrb.w	r2, [r3, #-82]
 8008da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008da4:	f000 fb2a 	bl	80093fc <collect_bits>
 8008da8:	4603      	mov	r3, r0
 8008daa:	461a      	mov	r2, r3
 8008dac:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008db0:	b212      	sxth	r2, r2
 8008db2:	005b      	lsls	r3, r3, #1
 8008db4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008db8:	440b      	add	r3, r1
 8008dba:	f823 2c1c 	strh.w	r2, [r3, #-28]
				for(i=0;i<2;i++) {
 8008dbe:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008dc8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d9bd      	bls.n	8008d4c <USBH_HID_GamepadDecode+0x98>
								conf.joystick_mouse.axis[i].size, is_signed);
				}

		//process 4 first buttons
		for(i=0;i<4;i++)
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008dd6:	e02a      	b.n	8008e2e <USBH_HID_GamepadDecode+0x17a>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008dd8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008ddc:	330c      	adds	r3, #12
 8008dde:	005b      	lsls	r3, r3, #1
 8008de0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008de4:	4413      	add	r3, r2
 8008de6:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8008dea:	461a      	mov	r2, r3
 8008dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dee:	4413      	add	r3, r2
 8008df0:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 8008df2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008df6:	330c      	adds	r3, #12
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008dfe:	440b      	add	r3, r1
 8008e00:	f813 3c53 	ldrb.w	r3, [r3, #-83]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008e04:	4013      	ands	r3, r2
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00b      	beq.n	8008e24 <USBH_HID_GamepadDecode+0x170>
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 8008e0c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e10:	2201      	movs	r2, #1
 8008e12:	fa02 f303 	lsl.w	r3, r2, r3
 8008e16:	b25a      	sxtb	r2, r3
 8008e18:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	b25b      	sxtb	r3, r3
 8008e20:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		for(i=0;i<4;i++)
 8008e24:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e28:	3301      	adds	r3, #1
 8008e2a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008e2e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d9d0      	bls.n	8008dd8 <USBH_HID_GamepadDecode+0x124>

		// ... and the eight extra buttons
		for(i=4;i<12;i++)
 8008e36:	2304      	movs	r3, #4
 8008e38:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008e3c:	e02b      	b.n	8008e96 <USBH_HID_GamepadDecode+0x1e2>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008e3e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e42:	330c      	adds	r3, #12
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8008e50:	461a      	mov	r2, r3
 8008e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e54:	4413      	add	r3, r2
 8008e56:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8008e58:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e5c:	330c      	adds	r3, #12
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008e64:	440b      	add	r3, r1
 8008e66:	f813 3c53 	ldrb.w	r3, [r3, #-83]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00c      	beq.n	8008e8c <USBH_HID_GamepadDecode+0x1d8>
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8008e72:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e76:	3b04      	subs	r3, #4
 8008e78:	2201      	movs	r2, #1
 8008e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7e:	b25a      	sxtb	r2, r3
 8008e80:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8008e84:	4313      	orrs	r3, r2
 8008e86:	b25b      	sxtb	r3, r3
 8008e88:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		for(i=4;i<12;i++)
 8008e8c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e90:	3301      	adds	r3, #1
 8008e92:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008e96:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e9a:	2b0b      	cmp	r3, #11
 8008e9c:	d9cf      	bls.n	8008e3e <USBH_HID_GamepadDecode+0x18a>



	for(i=0;i<2;i++) {
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008ea4:	e14e      	b.n	8009144 <USBH_HID_GamepadDecode+0x490>

		int hrange = (conf.joystick_mouse.axis[i].logical.max - abs(conf.joystick_mouse.axis[i].logical.min)) / 2;
 8008ea6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008eaa:	3301      	adds	r3, #1
 8008eac:	00db      	lsls	r3, r3, #3
 8008eae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	00db      	lsls	r3, r3, #3
 8008ec2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008ec6:	440b      	add	r3, r1
 8008ec8:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	da00      	bge.n	8008ed4 <USBH_HID_GamepadDecode+0x220>
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	105b      	asrs	r3, r3, #1
 8008ed6:	653b      	str	r3, [r7, #80]	; 0x50
		int dead = hrange/63;
 8008ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eda:	4a56      	ldr	r2, [pc, #344]	; (8009034 <USBH_HID_GamepadDecode+0x380>)
 8008edc:	fb82 1203 	smull	r1, r2, r2, r3
 8008ee0:	441a      	add	r2, r3
 8008ee2:	1152      	asrs	r2, r2, #5
 8008ee4:	17db      	asrs	r3, r3, #31
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (a[i] < conf.joystick_mouse.axis[i].logical.min) a[i] = conf.joystick_mouse.axis[i].logical.min;
 8008eea:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008eee:	005b      	lsls	r3, r3, #1
 8008ef0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008efa:	461a      	mov	r2, r3
 8008efc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f00:	3301      	adds	r3, #1
 8008f02:	00db      	lsls	r3, r3, #3
 8008f04:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008f08:	440b      	add	r3, r1
 8008f0a:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	da12      	bge.n	8008f38 <USBH_HID_GamepadDecode+0x284>
 8008f12:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f16:	3301      	adds	r3, #1
 8008f18:	00db      	lsls	r3, r3, #3
 8008f1a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008f1e:	4413      	add	r3, r2
 8008f20:	f833 2c50 	ldrh.w	r2, [r3, #-80]
 8008f24:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f28:	b212      	sxth	r2, r2
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008f30:	440b      	add	r3, r1
 8008f32:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8008f36:	e025      	b.n	8008f84 <USBH_HID_GamepadDecode+0x2d0>
		else if (a[i] > conf.joystick_mouse.axis[i].logical.max) a[i] = conf.joystick_mouse.axis[i].logical.max;
 8008f38:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008f42:	4413      	add	r3, r2
 8008f44:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008f48:	461a      	mov	r2, r3
 8008f4a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f4e:	3301      	adds	r3, #1
 8008f50:	00db      	lsls	r3, r3, #3
 8008f52:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008f56:	440b      	add	r3, r1
 8008f58:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	dd11      	ble.n	8008f84 <USBH_HID_GamepadDecode+0x2d0>
 8008f60:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f64:	3301      	adds	r3, #1
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008f6c:	4413      	add	r3, r2
 8008f6e:	f833 2c4e 	ldrh.w	r2, [r3, #-78]
 8008f72:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f76:	b212      	sxth	r2, r2
 8008f78:	005b      	lsls	r3, r3, #1
 8008f7a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008f7e:	440b      	add	r3, r1
 8008f80:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i] = a[i] - (abs(conf.joystick_mouse.axis[i].logical.min) + conf.joystick_mouse.axis[i].logical.max) / 2;
 8008f84:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f88:	005b      	lsls	r3, r3, #1
 8008f8a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008f8e:	4413      	add	r3, r2
 8008f90:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008fa2:	440b      	add	r3, r1
 8008fa4:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8008fa8:	4619      	mov	r1, r3
 8008faa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008fae:	3301      	adds	r3, #1
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8008fb6:	4403      	add	r3, r0
 8008fb8:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8008fbc:	440b      	add	r3, r1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	da00      	bge.n	8008fc4 <USBH_HID_GamepadDecode+0x310>
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	105b      	asrs	r3, r3, #1
 8008fc6:	425b      	negs	r3, r3
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	4413      	add	r3, r2
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008fd2:	b212      	sxth	r2, r2
 8008fd4:	005b      	lsls	r3, r3, #1
 8008fd6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008fda:	440b      	add	r3, r1
 8008fdc:	f823 2c1c 	strh.w	r2, [r3, #-28]

		hrange -= dead;
 8008fe0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	653b      	str	r3, [r7, #80]	; 0x50
		if (a[i] < -dead) a[i] += dead;
 8008fe8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008fec:	005b      	lsls	r3, r3, #1
 8008fee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ffc:	425b      	negs	r3, r3
 8008ffe:	429a      	cmp	r2, r3
 8009000:	da1a      	bge.n	8009038 <USBH_HID_GamepadDecode+0x384>
 8009002:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009006:	005b      	lsls	r3, r3, #1
 8009008:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800900c:	4413      	add	r3, r2
 800900e:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8009012:	b29a      	uxth	r2, r3
 8009014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009016:	b29b      	uxth	r3, r3
 8009018:	4413      	add	r3, r2
 800901a:	b29a      	uxth	r2, r3
 800901c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009020:	b212      	sxth	r2, r2
 8009022:	005b      	lsls	r3, r3, #1
 8009024:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8009028:	440b      	add	r3, r1
 800902a:	f823 2c1c 	strh.w	r2, [r3, #-28]
 800902e:	e02f      	b.n	8009090 <USBH_HID_GamepadDecode+0x3dc>
 8009030:	20000114 	.word	0x20000114
 8009034:	82082083 	.word	0x82082083
		else if (a[i] > dead) a[i] -= dead;
 8009038:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009042:	4413      	add	r3, r2
 8009044:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8009048:	461a      	mov	r2, r3
 800904a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800904c:	4293      	cmp	r3, r2
 800904e:	da16      	bge.n	800907e <USBH_HID_GamepadDecode+0x3ca>
 8009050:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009054:	005b      	lsls	r3, r3, #1
 8009056:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800905a:	4413      	add	r3, r2
 800905c:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8009060:	b29a      	uxth	r2, r3
 8009062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009064:	b29b      	uxth	r3, r3
 8009066:	1ad3      	subs	r3, r2, r3
 8009068:	b29a      	uxth	r2, r3
 800906a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800906e:	b212      	sxth	r2, r2
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8009076:	440b      	add	r3, r1
 8009078:	f823 2c1c 	strh.w	r2, [r3, #-28]
 800907c:	e008      	b.n	8009090 <USBH_HID_GamepadDecode+0x3dc>
		else a[i] = 0;
 800907e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009082:	005b      	lsls	r3, r3, #1
 8009084:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009088:	4413      	add	r3, r2
 800908a:	2200      	movs	r2, #0
 800908c:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i] = (a[i] * 127) / hrange;
 8009090:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800909a:	4413      	add	r3, r2
 800909c:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80090a0:	461a      	mov	r2, r3
 80090a2:	4613      	mov	r3, r2
 80090a4:	01db      	lsls	r3, r3, #7
 80090a6:	1a9a      	subs	r2, r3, r2
 80090a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090aa:	fb92 f2f3 	sdiv	r2, r2, r3
 80090ae:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80090b2:	b212      	sxth	r2, r2
 80090b4:	005b      	lsls	r3, r3, #1
 80090b6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80090ba:	440b      	add	r3, r1
 80090bc:	f823 2c1c 	strh.w	r2, [r3, #-28]

		if (a[i] < -127) a[i] = -127;
 80090c0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80090c4:	005b      	lsls	r3, r3, #1
 80090c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80090ca:	4413      	add	r3, r2
 80090cc:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80090d0:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80090d4:	da0a      	bge.n	80090ec <USBH_HID_GamepadDecode+0x438>
 80090d6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80090da:	005b      	lsls	r3, r3, #1
 80090dc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80090e0:	4413      	add	r3, r2
 80090e2:	f64f 7281 	movw	r2, #65409	; 0xff81
 80090e6:	f823 2c1c 	strh.w	r2, [r3, #-28]
 80090ea:	e012      	b.n	8009112 <USBH_HID_GamepadDecode+0x45e>
		else if (a[i] > 127) a[i] = 127;
 80090ec:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80090f0:	005b      	lsls	r3, r3, #1
 80090f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80090f6:	4413      	add	r3, r2
 80090f8:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80090fc:	2b7f      	cmp	r3, #127	; 0x7f
 80090fe:	dd08      	ble.n	8009112 <USBH_HID_GamepadDecode+0x45e>
 8009100:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800910a:	4413      	add	r3, r2
 800910c:	227f      	movs	r2, #127	; 0x7f
 800910e:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i]=a[i]+127; // mist wants a value in the range [0..255]
 8009112:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800911c:	4413      	add	r3, r2
 800911e:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8009122:	b29b      	uxth	r3, r3
 8009124:	337f      	adds	r3, #127	; 0x7f
 8009126:	b29a      	uxth	r2, r3
 8009128:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800912c:	b212      	sxth	r2, r2
 800912e:	005b      	lsls	r3, r3, #1
 8009130:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8009134:	440b      	add	r3, r1
 8009136:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for(i=0;i<2;i++) {
 800913a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800913e:	3301      	adds	r3, #1
 8009140:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8009144:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009148:	2b01      	cmp	r3, #1
 800914a:	f67f aeac 	bls.w	8008ea6 <USBH_HID_GamepadDecode+0x1f2>
	}

				if(a[0] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_LEFT;
 800914e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8009152:	2b3f      	cmp	r3, #63	; 0x3f
 8009154:	dc05      	bgt.n	8009162 <USBH_HID_GamepadDecode+0x4ae>
 8009156:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800915a:	f043 0302 	orr.w	r3, r3, #2
 800915e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[0] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_RIGHT;
 8009162:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8009166:	2bc0      	cmp	r3, #192	; 0xc0
 8009168:	dd05      	ble.n	8009176 <USBH_HID_GamepadDecode+0x4c2>
 800916a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800916e:	f043 0301 	orr.w	r3, r3, #1
 8009172:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[1] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_UP;
 8009176:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800917a:	2b3f      	cmp	r3, #63	; 0x3f
 800917c:	dc05      	bgt.n	800918a <USBH_HID_GamepadDecode+0x4d6>
 800917e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009182:	f043 0308 	orr.w	r3, r3, #8
 8009186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[1] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_DOWN;
 800918a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800918e:	2bc0      	cmp	r3, #192	; 0xc0
 8009190:	dd05      	ble.n	800919e <USBH_HID_GamepadDecode+0x4ea>
 8009192:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009196:	f043 0304 	orr.w	r3, r3, #4
 800919a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				jmap |= btn << JOY_BTN_SHIFT;      // add buttons
 800919e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80091a2:	011b      	lsls	r3, r3, #4
 80091a4:	b25a      	sxtb	r2, r3
 80091a6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80091aa:	4313      	orrs	r3, r2
 80091ac:	b25b      	sxtb	r3, r3
 80091ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

				gamepad_info.gamepad_data = jmap;
 80091b2:	4a07      	ldr	r2, [pc, #28]	; (80091d0 <USBH_HID_GamepadDecode+0x51c>)
 80091b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091b8:	7013      	strb	r3, [r2, #0]
				gamepad_info.gamepad_extraBtn = btn_extra;
 80091ba:	4a05      	ldr	r2, [pc, #20]	; (80091d0 <USBH_HID_GamepadDecode+0x51c>)
 80091bc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80091c0:	7053      	strb	r3, [r2, #1]

		  return USBH_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	e000      	b.n	80091c8 <USBH_HID_GamepadDecode+0x514>
	    }



	  return USBH_FAIL;
 80091c6:	2302      	movs	r3, #2

}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3760      	adds	r7, #96	; 0x60
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bdb0      	pop	{r4, r5, r7, pc}
 80091d0:	20000294 	.word	0x20000294

080091d4 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 80091e8:	3208      	adds	r2, #8
 80091ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ee:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 80091f0:	4b22      	ldr	r3, [pc, #136]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	709a      	strb	r2, [r3, #2]
 80091f6:	4b21      	ldr	r3, [pc, #132]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 80091f8:	789a      	ldrb	r2, [r3, #2]
 80091fa:	4b20      	ldr	r3, [pc, #128]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 80091fc:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 80091fe:	4b1f      	ldr	r3, [pc, #124]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 8009200:	2200      	movs	r2, #0
 8009202:	711a      	strb	r2, [r3, #4]
 8009204:	4b1d      	ldr	r3, [pc, #116]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 8009206:	791a      	ldrb	r2, [r3, #4]
 8009208:	4b1c      	ldr	r3, [pc, #112]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 800920a:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 800920c:	4b1b      	ldr	r3, [pc, #108]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 800920e:	2200      	movs	r2, #0
 8009210:	719a      	strb	r2, [r3, #6]
 8009212:	4b1a      	ldr	r3, [pc, #104]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 8009214:	799a      	ldrb	r2, [r3, #6]
 8009216:	4b19      	ldr	r3, [pc, #100]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 8009218:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 800921a:	4b18      	ldr	r3, [pc, #96]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 800921c:	2200      	movs	r2, #0
 800921e:	721a      	strb	r2, [r3, #8]
 8009220:	4b16      	ldr	r3, [pc, #88]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 8009222:	7a1a      	ldrb	r2, [r3, #8]
 8009224:	4b15      	ldr	r3, [pc, #84]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 8009226:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8009228:	2300      	movs	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	e00c      	b.n	8009248 <USBH_HID_KeybdInit+0x74>
  {
    keybd_report_data[x] = 0U;
 800922e:	4a14      	ldr	r2, [pc, #80]	; (8009280 <USBH_HID_KeybdInit+0xac>)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2100      	movs	r1, #0
 8009234:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8009238:	4a12      	ldr	r2, [pc, #72]	; (8009284 <USBH_HID_KeybdInit+0xb0>)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2100      	movs	r1, #0
 800923e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3301      	adds	r3, #1
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d9ef      	bls.n	800922e <USBH_HID_KeybdInit+0x5a>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	8b1b      	ldrh	r3, [r3, #24]
 8009252:	2b08      	cmp	r3, #8
 8009254:	d902      	bls.n	800925c <USBH_HID_KeybdInit+0x88>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2208      	movs	r2, #8
 800925a:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	4a09      	ldr	r2, [pc, #36]	; (8009284 <USBH_HID_KeybdInit+0xb0>)
 8009260:	615a      	str	r2, [r3, #20]

  USBH_HID_FifoInit(&HID_Handle->fifo, keybd_fifo_buf, 256);
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	3308      	adds	r3, #8
 8009266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800926a:	4907      	ldr	r1, [pc, #28]	; (8009288 <USBH_HID_KeybdInit+0xb4>)
 800926c:	4618      	mov	r0, r3
 800926e:	f7ff fc0d 	bl	8008a8c <USBH_HID_FifoInit>

  return USBH_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	20000328 	.word	0x20000328
 8009280:	20000318 	.word	0x20000318
 8009284:	20000320 	.word	0x20000320
 8009288:	20000338 	.word	0x20000338

0800928c <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f80d 	bl	80092b4 <USBH_HID_KeybdDecode>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 80092a0:	4b03      	ldr	r3, [pc, #12]	; (80092b0 <USBH_HID_GetKeybdInfo+0x24>)
 80092a2:	e000      	b.n	80092a6 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 80092a4:	2300      	movs	r3, #0
  }
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20000328 	.word	0x20000328

080092b4 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 80092c8:	3208      	adds	r2, #8
 80092ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ce:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	8b1b      	ldrh	r3, [r3, #24]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <USBH_HID_KeybdDecode+0x28>
  {
    return USBH_FAIL;
 80092d8:	2302      	movs	r3, #2
 80092da:	e072      	b.n	80093c2 <USBH_HID_KeybdDecode+0x10e>
  }
  /*Fill report */

  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	f103 0008 	add.w	r0, r3, #8
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	8b1b      	ldrh	r3, [r3, #24]
 80092e6:	461a      	mov	r2, r3
 80092e8:	4938      	ldr	r1, [pc, #224]	; (80093cc <USBH_HID_KeybdDecode+0x118>)
 80092ea:	f7ff fbeb 	bl	8008ac4 <USBH_HID_FifoRead>
 80092ee:	4603      	mov	r3, r0
 80092f0:	461a      	mov	r2, r3
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	8b1b      	ldrh	r3, [r3, #24]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d162      	bne.n	80093c0 <USBH_HID_KeybdDecode+0x10c>
  {
	  if (keybd_report_data[0] == 0x1010000 && keybd_report_data[1]==0x1010101)
 80092fa:	4b34      	ldr	r3, [pc, #208]	; (80093cc <USBH_HID_KeybdDecode+0x118>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a34      	ldr	r2, [pc, #208]	; (80093d0 <USBH_HID_KeybdDecode+0x11c>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d106      	bne.n	8009312 <USBH_HID_KeybdDecode+0x5e>
 8009304:	4b31      	ldr	r3, [pc, #196]	; (80093cc <USBH_HID_KeybdDecode+0x118>)
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 800930c:	d101      	bne.n	8009312 <USBH_HID_KeybdDecode+0x5e>
	  {
		  return USBH_FAIL;
 800930e:	2302      	movs	r3, #2
 8009310:	e057      	b.n	80093c2 <USBH_HID_KeybdDecode+0x10e>
	  }
	//  if keybd_re  5055
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8009312:	2100      	movs	r1, #0
 8009314:	482f      	ldr	r0, [pc, #188]	; (80093d4 <USBH_HID_KeybdDecode+0x120>)
 8009316:	f000 fa8d 	bl	8009834 <HID_ReadItem>
 800931a:	4603      	mov	r3, r0
 800931c:	b2da      	uxtb	r2, r3
 800931e:	4b2e      	ldr	r3, [pc, #184]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009320:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 8009322:	2100      	movs	r1, #0
 8009324:	482d      	ldr	r0, [pc, #180]	; (80093dc <USBH_HID_KeybdDecode+0x128>)
 8009326:	f000 fa85 	bl	8009834 <HID_ReadItem>
 800932a:	4603      	mov	r3, r0
 800932c:	b2da      	uxtb	r2, r3
 800932e:	4b2a      	ldr	r3, [pc, #168]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009330:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8009332:	2100      	movs	r1, #0
 8009334:	482a      	ldr	r0, [pc, #168]	; (80093e0 <USBH_HID_KeybdDecode+0x12c>)
 8009336:	f000 fa7d 	bl	8009834 <HID_ReadItem>
 800933a:	4603      	mov	r3, r0
 800933c:	b2da      	uxtb	r2, r3
 800933e:	4b26      	ldr	r3, [pc, #152]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009340:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8009342:	2100      	movs	r1, #0
 8009344:	4827      	ldr	r0, [pc, #156]	; (80093e4 <USBH_HID_KeybdDecode+0x130>)
 8009346:	f000 fa75 	bl	8009834 <HID_ReadItem>
 800934a:	4603      	mov	r3, r0
 800934c:	b2da      	uxtb	r2, r3
 800934e:	4b22      	ldr	r3, [pc, #136]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009350:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8009352:	2100      	movs	r1, #0
 8009354:	4824      	ldr	r0, [pc, #144]	; (80093e8 <USBH_HID_KeybdDecode+0x134>)
 8009356:	f000 fa6d 	bl	8009834 <HID_ReadItem>
 800935a:	4603      	mov	r3, r0
 800935c:	b2da      	uxtb	r2, r3
 800935e:	4b1e      	ldr	r3, [pc, #120]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009360:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8009362:	2100      	movs	r1, #0
 8009364:	4821      	ldr	r0, [pc, #132]	; (80093ec <USBH_HID_KeybdDecode+0x138>)
 8009366:	f000 fa65 	bl	8009834 <HID_ReadItem>
 800936a:	4603      	mov	r3, r0
 800936c:	b2da      	uxtb	r2, r3
 800936e:	4b1a      	ldr	r3, [pc, #104]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009370:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 8009372:	2100      	movs	r1, #0
 8009374:	481e      	ldr	r0, [pc, #120]	; (80093f0 <USBH_HID_KeybdDecode+0x13c>)
 8009376:	f000 fa5d 	bl	8009834 <HID_ReadItem>
 800937a:	4603      	mov	r3, r0
 800937c:	b2da      	uxtb	r2, r3
 800937e:	4b16      	ldr	r3, [pc, #88]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009380:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8009382:	2100      	movs	r1, #0
 8009384:	481b      	ldr	r0, [pc, #108]	; (80093f4 <USBH_HID_KeybdDecode+0x140>)
 8009386:	f000 fa55 	bl	8009834 <HID_ReadItem>
 800938a:	4603      	mov	r3, r0
 800938c:	b2da      	uxtb	r2, r3
 800938e:	4b12      	ldr	r3, [pc, #72]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009390:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8009392:	2300      	movs	r3, #0
 8009394:	73fb      	strb	r3, [r7, #15]
 8009396:	e00e      	b.n	80093b6 <USBH_HID_KeybdDecode+0x102>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	4619      	mov	r1, r3
 800939c:	4816      	ldr	r0, [pc, #88]	; (80093f8 <USBH_HID_KeybdDecode+0x144>)
 800939e:	f000 fa49 	bl	8009834 <HID_ReadItem>
 80093a2:	4602      	mov	r2, r0
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
 80093a6:	b2d1      	uxtb	r1, r2
 80093a8:	4a0b      	ldr	r2, [pc, #44]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 80093aa:	4413      	add	r3, r2
 80093ac:	460a      	mov	r2, r1
 80093ae:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
 80093b2:	3301      	adds	r3, #1
 80093b4:	73fb      	strb	r3, [r7, #15]
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	2b05      	cmp	r3, #5
 80093ba:	d9ed      	bls.n	8009398 <USBH_HID_KeybdDecode+0xe4>
    }

    return USBH_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	e000      	b.n	80093c2 <USBH_HID_KeybdDecode+0x10e>
  }
  return   USBH_FAIL;
 80093c0:	2302      	movs	r3, #2
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20000318 	.word	0x20000318
 80093d0:	01010000 	.word	0x01010000
 80093d4:	0800e4a8 	.word	0x0800e4a8
 80093d8:	20000328 	.word	0x20000328
 80093dc:	0800e4c8 	.word	0x0800e4c8
 80093e0:	0800e4e8 	.word	0x0800e4e8
 80093e4:	0800e508 	.word	0x0800e508
 80093e8:	0800e528 	.word	0x0800e528
 80093ec:	0800e548 	.word	0x0800e548
 80093f0:	0800e568 	.word	0x0800e568
 80093f4:	0800e588 	.word	0x0800e588
 80093f8:	0800e5a8 	.word	0x0800e5a8

080093fc <collect_bits>:


/**
  * @}
  */
uint16_t collect_bits(uint8_t *p, uint16_t offset, uint8_t size, int is_signed) {
 80093fc:	b480      	push	{r7}
 80093fe:	b089      	sub	sp, #36	; 0x24
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	607b      	str	r3, [r7, #4]
 8009406:	460b      	mov	r3, r1
 8009408:	817b      	strh	r3, [r7, #10]
 800940a:	4613      	mov	r3, r2
 800940c:	727b      	strb	r3, [r7, #9]
  // mask unused bits of first byte
  uint8_t mask = 0xff << (offset&7);
 800940e:	897b      	ldrh	r3, [r7, #10]
 8009410:	f003 0307 	and.w	r3, r3, #7
 8009414:	22ff      	movs	r2, #255	; 0xff
 8009416:	fa02 f303 	lsl.w	r3, r2, r3
 800941a:	75fb      	strb	r3, [r7, #23]
  uint8_t byte = offset/8;
 800941c:	897b      	ldrh	r3, [r7, #10]
 800941e:	08db      	lsrs	r3, r3, #3
 8009420:	b29b      	uxth	r3, r3
 8009422:	77fb      	strb	r3, [r7, #31]
  uint8_t bits = size;
 8009424:	7a7b      	ldrb	r3, [r7, #9]
 8009426:	77bb      	strb	r3, [r7, #30]
  uint8_t shift = offset&7;
 8009428:	897b      	ldrh	r3, [r7, #10]
 800942a:	b2db      	uxtb	r3, r3
 800942c:	f003 0307 	and.w	r3, r3, #7
 8009430:	777b      	strb	r3, [r7, #29]


  uint16_t rval = (p[byte++] & mask) >> shift;
 8009432:	7ffb      	ldrb	r3, [r7, #31]
 8009434:	1c5a      	adds	r2, r3, #1
 8009436:	77fa      	strb	r2, [r7, #31]
 8009438:	461a      	mov	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	4413      	add	r3, r2
 800943e:	781a      	ldrb	r2, [r3, #0]
 8009440:	7dfb      	ldrb	r3, [r7, #23]
 8009442:	4013      	ands	r3, r2
 8009444:	b2db      	uxtb	r3, r3
 8009446:	461a      	mov	r2, r3
 8009448:	7f7b      	ldrb	r3, [r7, #29]
 800944a:	fa42 f303 	asr.w	r3, r2, r3
 800944e:	837b      	strh	r3, [r7, #26]
  mask = 0xff;
 8009450:	23ff      	movs	r3, #255	; 0xff
 8009452:	75fb      	strb	r3, [r7, #23]
  shift = 8-shift;
 8009454:	7f7b      	ldrb	r3, [r7, #29]
 8009456:	f1c3 0308 	rsb	r3, r3, #8
 800945a:	777b      	strb	r3, [r7, #29]
  bits -= shift;
 800945c:	7fba      	ldrb	r2, [r7, #30]
 800945e:	7f7b      	ldrb	r3, [r7, #29]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	77bb      	strb	r3, [r7, #30]

  // first byte already contained more bits than we need
  if(shift > size) {
 8009464:	7f7a      	ldrb	r2, [r7, #29]
 8009466:	7a7b      	ldrb	r3, [r7, #9]
 8009468:	429a      	cmp	r2, r3
 800946a:	d937      	bls.n	80094dc <collect_bits+0xe0>
    // mask unused bits
    rval &= (1<<size)-1;
 800946c:	7a7b      	ldrb	r3, [r7, #9]
 800946e:	2201      	movs	r2, #1
 8009470:	fa02 f303 	lsl.w	r3, r2, r3
 8009474:	b29b      	uxth	r3, r3
 8009476:	3b01      	subs	r3, #1
 8009478:	b29b      	uxth	r3, r3
 800947a:	b21a      	sxth	r2, r3
 800947c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009480:	4013      	ands	r3, r2
 8009482:	b21b      	sxth	r3, r3
 8009484:	837b      	strh	r3, [r7, #26]
 8009486:	e02c      	b.n	80094e2 <collect_bits+0xe6>
  } else {
    // further bytes if required
    while(bits) {
      mask = (bits<8)?(0xff>>(8-bits)):0xff;
 8009488:	7fbb      	ldrb	r3, [r7, #30]
 800948a:	2b07      	cmp	r3, #7
 800948c:	d807      	bhi.n	800949e <collect_bits+0xa2>
 800948e:	7fbb      	ldrb	r3, [r7, #30]
 8009490:	f1c3 0308 	rsb	r3, r3, #8
 8009494:	22ff      	movs	r2, #255	; 0xff
 8009496:	fa42 f303 	asr.w	r3, r2, r3
 800949a:	b2db      	uxtb	r3, r3
 800949c:	e000      	b.n	80094a0 <collect_bits+0xa4>
 800949e:	23ff      	movs	r3, #255	; 0xff
 80094a0:	75fb      	strb	r3, [r7, #23]
      rval += (p[byte++] & mask) << shift;
 80094a2:	7ffb      	ldrb	r3, [r7, #31]
 80094a4:	1c5a      	adds	r2, r3, #1
 80094a6:	77fa      	strb	r2, [r7, #31]
 80094a8:	461a      	mov	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	4413      	add	r3, r2
 80094ae:	781a      	ldrb	r2, [r3, #0]
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
 80094b2:	4013      	ands	r3, r2
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	461a      	mov	r2, r3
 80094b8:	7f7b      	ldrb	r3, [r7, #29]
 80094ba:	fa02 f303 	lsl.w	r3, r2, r3
 80094be:	b29a      	uxth	r2, r3
 80094c0:	8b7b      	ldrh	r3, [r7, #26]
 80094c2:	4413      	add	r3, r2
 80094c4:	837b      	strh	r3, [r7, #26]
      shift += 8;
 80094c6:	7f7b      	ldrb	r3, [r7, #29]
 80094c8:	3308      	adds	r3, #8
 80094ca:	777b      	strb	r3, [r7, #29]
      bits -= (bits>8)?8:bits;
 80094cc:	7fbb      	ldrb	r3, [r7, #30]
 80094ce:	2b08      	cmp	r3, #8
 80094d0:	bf28      	it	cs
 80094d2:	2308      	movcs	r3, #8
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	7fba      	ldrb	r2, [r7, #30]
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	77bb      	strb	r3, [r7, #30]
    while(bits) {
 80094dc:	7fbb      	ldrb	r3, [r7, #30]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1d2      	bne.n	8009488 <collect_bits+0x8c>
    }
  }

  if(is_signed) {
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d016      	beq.n	8009516 <collect_bits+0x11a>
    // do sign expansion
    uint16_t sign_bit = 1<<(size-1);
 80094e8:	7a7b      	ldrb	r3, [r7, #9]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	2201      	movs	r2, #1
 80094ee:	fa02 f303 	lsl.w	r3, r2, r3
 80094f2:	833b      	strh	r3, [r7, #24]
    if(rval & sign_bit) {
 80094f4:	8b7a      	ldrh	r2, [r7, #26]
 80094f6:	8b3b      	ldrh	r3, [r7, #24]
 80094f8:	4013      	ands	r3, r2
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00a      	beq.n	8009516 <collect_bits+0x11a>
      while(sign_bit) {
 8009500:	e006      	b.n	8009510 <collect_bits+0x114>
	rval |= sign_bit;
 8009502:	8b7a      	ldrh	r2, [r7, #26]
 8009504:	8b3b      	ldrh	r3, [r7, #24]
 8009506:	4313      	orrs	r3, r2
 8009508:	837b      	strh	r3, [r7, #26]
	sign_bit <<= 1;
 800950a:	8b3b      	ldrh	r3, [r7, #24]
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	833b      	strh	r3, [r7, #24]
      while(sign_bit) {
 8009510:	8b3b      	ldrh	r3, [r7, #24]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1f5      	bne.n	8009502 <collect_bits+0x106>
      }
    }
  }

  return rval;
 8009516:	8b7b      	ldrh	r3, [r7, #26]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3724      	adds	r7, #36	; 0x24
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8009538:	3208      	adds	r2, #8
 800953a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800953e:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8009540:	4b21      	ldr	r3, [pc, #132]	; (80095c8 <USBH_HID_MouseInit+0xa4>)
 8009542:	2200      	movs	r2, #0
 8009544:	801a      	strh	r2, [r3, #0]
  mouse_info.y = 0U;
 8009546:	4b20      	ldr	r3, [pc, #128]	; (80095c8 <USBH_HID_MouseInit+0xa4>)
 8009548:	2200      	movs	r2, #0
 800954a:	805a      	strh	r2, [r3, #2]
  mouse_info.buttons[0] = 0U;
 800954c:	4b1e      	ldr	r3, [pc, #120]	; (80095c8 <USBH_HID_MouseInit+0xa4>)
 800954e:	2200      	movs	r2, #0
 8009550:	711a      	strb	r2, [r3, #4]
  mouse_info.buttons[1] = 0U;
 8009552:	4b1d      	ldr	r3, [pc, #116]	; (80095c8 <USBH_HID_MouseInit+0xa4>)
 8009554:	2200      	movs	r2, #0
 8009556:	715a      	strb	r2, [r3, #5]
  mouse_info.buttons[2] = 0U;
 8009558:	4b1b      	ldr	r3, [pc, #108]	; (80095c8 <USBH_HID_MouseInit+0xa4>)
 800955a:	2200      	movs	r2, #0
 800955c:	719a      	strb	r2, [r3, #6]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	e00c      	b.n	800957e <USBH_HID_MouseInit+0x5a>
  {
    mouse_report_data[i] = 0U;
 8009564:	4a19      	ldr	r2, [pc, #100]	; (80095cc <USBH_HID_MouseInit+0xa8>)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4413      	add	r3, r2
 800956a:	2200      	movs	r2, #0
 800956c:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800956e:	4a18      	ldr	r2, [pc, #96]	; (80095d0 <USBH_HID_MouseInit+0xac>)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2100      	movs	r1, #0
 8009574:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3301      	adds	r3, #1
 800957c:	60fb      	str	r3, [r7, #12]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d9ef      	bls.n	8009564 <USBH_HID_MouseInit+0x40>

  //if (HID_Handle->length > sizeof(mouse_report_data))
  //{
  //  HID_Handle->length = sizeof(mouse_report_data);
  //}
  HID_Handle->length = HID_Handle->HID_Desc.RptDesc.report_size+ (HID_Handle->HID_Desc.RptDesc.report_id?1:0);
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800958a:	b29a      	uxth	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009592:	2b00      	cmp	r3, #0
 8009594:	bf14      	ite	ne
 8009596:	2301      	movne	r3, #1
 8009598:	2300      	moveq	r3, #0
 800959a:	b2db      	uxtb	r3, r3
 800959c:	b29b      	uxth	r3, r3
 800959e:	4413      	add	r3, r2
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	831a      	strh	r2, [r3, #24]
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	4a09      	ldr	r2, [pc, #36]	; (80095d0 <USBH_HID_MouseInit+0xac>)
 80095aa:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, mouse_fifo_buf, 256);
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	3308      	adds	r3, #8
 80095b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095b4:	4907      	ldr	r1, [pc, #28]	; (80095d4 <USBH_HID_MouseInit+0xb0>)
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7ff fa68 	bl	8008a8c <USBH_HID_FifoInit>

  return USBH_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	20000438 	.word	0x20000438
 80095cc:	20000440 	.word	0x20000440
 80095d0:	20000448 	.word	0x20000448
 80095d4:	20000450 	.word	0x20000450

080095d8 <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f80d 	bl	8009600 <USBH_HID_MouseDecode>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 80095ec:	4b03      	ldr	r3, [pc, #12]	; (80095fc <USBH_HID_GetMouseInfo+0x24>)
 80095ee:	e000      	b.n	80095f2 <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 80095f0:	2300      	movs	r3, #0
  }
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20000438 	.word	0x20000438

08009600 <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8009614:	3208      	adds	r2, #8
 8009616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961a:	61bb      	str	r3, [r7, #24]

  if (HID_Handle->length == 0U)
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	8b1b      	ldrh	r3, [r3, #24]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d101      	bne.n	8009628 <USBH_HID_MouseDecode+0x28>
  {
    return USBH_FAIL;
 8009624:	2302      	movs	r3, #2
 8009626:	e0fb      	b.n	8009820 <USBH_HID_MouseDecode+0x220>
  }

  //Clear mouse_report_data

  memset(&mouse_report_data,0,sizeof(mouse_report_data));
 8009628:	2208      	movs	r2, #8
 800962a:	2100      	movs	r1, #0
 800962c:	487e      	ldr	r0, [pc, #504]	; (8009828 <USBH_HID_MouseDecode+0x228>)
 800962e:	f004 fdc1 	bl	800e1b4 <memset>


  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) !=0)
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	f103 0008 	add.w	r0, r3, #8
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	8b1b      	ldrh	r3, [r3, #24]
 800963c:	461a      	mov	r2, r3
 800963e:	497a      	ldr	r1, [pc, #488]	; (8009828 <USBH_HID_MouseDecode+0x228>)
 8009640:	f7ff fa40 	bl	8008ac4 <USBH_HID_FifoRead>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 80e9 	beq.w	800981e <USBH_HID_MouseDecode+0x21e>
  {

	  uint8_t btn = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	77fb      	strb	r3, [r7, #31]
	  uint8_t btn_extra = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	77bb      	strb	r3, [r7, #30]
	  uint8_t i;



	  // skip report id if present
	  uint8_t *p = mouse_report_data + (HID_Handle->HID_Desc.RptDesc.report_id?1:0);
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800965a:	2b00      	cmp	r3, #0
 800965c:	d001      	beq.n	8009662 <USBH_HID_MouseDecode+0x62>
 800965e:	4b73      	ldr	r3, [pc, #460]	; (800982c <USBH_HID_MouseDecode+0x22c>)
 8009660:	e000      	b.n	8009664 <USBH_HID_MouseDecode+0x64>
 8009662:	4b71      	ldr	r3, [pc, #452]	; (8009828 <USBH_HID_MouseDecode+0x228>)
 8009664:	617b      	str	r3, [r7, #20]


	  //process axis
	  // two axes ...
	  		for(i=0;i<2;i++) {
 8009666:	2300      	movs	r3, #0
 8009668:	777b      	strb	r3, [r7, #29]
 800966a:	e02e      	b.n	80096ca <USBH_HID_MouseDecode+0xca>
	  			// if logical minimum is > logical maximum then logical minimum
	  			// is signed. This means that the value itself is also signed
	  			int is_signed = HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.min >
 800966c:	7f7b      	ldrb	r3, [r7, #29]
 800966e:	69ba      	ldr	r2, [r7, #24]
 8009670:	3306      	adds	r3, #6
 8009672:	00db      	lsls	r3, r3, #3
 8009674:	4413      	add	r3, r2
 8009676:	899a      	ldrh	r2, [r3, #12]
	  				HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.max;
 8009678:	7f7b      	ldrb	r3, [r7, #29]
 800967a:	69b9      	ldr	r1, [r7, #24]
 800967c:	3306      	adds	r3, #6
 800967e:	00db      	lsls	r3, r3, #3
 8009680:	440b      	add	r3, r1
 8009682:	89db      	ldrh	r3, [r3, #14]
	  			int is_signed = HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.min >
 8009684:	429a      	cmp	r2, r3
 8009686:	bf8c      	ite	hi
 8009688:	2301      	movhi	r3, #1
 800968a:	2300      	movls	r3, #0
 800968c:	b2db      	uxtb	r3, r3
 800968e:	613b      	str	r3, [r7, #16]
	  			a[i] = collect_bits(p, HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].offset,
 8009690:	7f7b      	ldrb	r3, [r7, #29]
 8009692:	69ba      	ldr	r2, [r7, #24]
 8009694:	3306      	adds	r3, #6
 8009696:	00db      	lsls	r3, r3, #3
 8009698:	4413      	add	r3, r2
 800969a:	8919      	ldrh	r1, [r3, #8]
 800969c:	7f7b      	ldrb	r3, [r7, #29]
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	3306      	adds	r3, #6
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	4413      	add	r3, r2
 80096a6:	7a9a      	ldrb	r2, [r3, #10]
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	6978      	ldr	r0, [r7, #20]
 80096ac:	f7ff fea6 	bl	80093fc <collect_bits>
 80096b0:	4603      	mov	r3, r0
 80096b2:	461a      	mov	r2, r3
 80096b4:	7f7b      	ldrb	r3, [r7, #29]
 80096b6:	b212      	sxth	r2, r2
 80096b8:	005b      	lsls	r3, r3, #1
 80096ba:	f107 0120 	add.w	r1, r7, #32
 80096be:	440b      	add	r3, r1
 80096c0:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		for(i=0;i<2;i++) {
 80096c4:	7f7b      	ldrb	r3, [r7, #29]
 80096c6:	3301      	adds	r3, #1
 80096c8:	777b      	strb	r3, [r7, #29]
 80096ca:	7f7b      	ldrb	r3, [r7, #29]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d9cd      	bls.n	800966c <USBH_HID_MouseDecode+0x6c>
	  					HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].size, is_signed);
	  		}

	  //process 4 first buttons
	  for(i=0;i<4;i++)
 80096d0:	2300      	movs	r3, #0
 80096d2:	777b      	strb	r3, [r7, #29]
 80096d4:	e020      	b.n	8009718 <USBH_HID_MouseDecode+0x118>
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 80096d6:	7f7b      	ldrb	r3, [r7, #29]
 80096d8:	69ba      	ldr	r2, [r7, #24]
 80096da:	3320      	adds	r3, #32
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	4413      	add	r3, r2
 80096e0:	7a1b      	ldrb	r3, [r3, #8]
 80096e2:	461a      	mov	r2, r3
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	4413      	add	r3, r2
 80096e8:	781a      	ldrb	r2, [r3, #0]
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 80096ea:	7f7b      	ldrb	r3, [r7, #29]
 80096ec:	69b9      	ldr	r1, [r7, #24]
 80096ee:	3320      	adds	r3, #32
 80096f0:	005b      	lsls	r3, r3, #1
 80096f2:	440b      	add	r3, r1
 80096f4:	7a5b      	ldrb	r3, [r3, #9]
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 80096f6:	4013      	ands	r3, r2
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d009      	beq.n	8009712 <USBH_HID_MouseDecode+0x112>
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 80096fe:	7f7b      	ldrb	r3, [r7, #29]
 8009700:	2201      	movs	r2, #1
 8009702:	fa02 f303 	lsl.w	r3, r2, r3
 8009706:	b25a      	sxtb	r2, r3
 8009708:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800970c:	4313      	orrs	r3, r2
 800970e:	b25b      	sxtb	r3, r3
 8009710:	77fb      	strb	r3, [r7, #31]
	  for(i=0;i<4;i++)
 8009712:	7f7b      	ldrb	r3, [r7, #29]
 8009714:	3301      	adds	r3, #1
 8009716:	777b      	strb	r3, [r7, #29]
 8009718:	7f7b      	ldrb	r3, [r7, #29]
 800971a:	2b03      	cmp	r3, #3
 800971c:	d9db      	bls.n	80096d6 <USBH_HID_MouseDecode+0xd6>

	  // ... and the eight extra buttons
	  for(i=4;i<12;i++)
 800971e:	2304      	movs	r3, #4
 8009720:	777b      	strb	r3, [r7, #29]
 8009722:	e021      	b.n	8009768 <USBH_HID_MouseDecode+0x168>
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 8009724:	7f7b      	ldrb	r3, [r7, #29]
 8009726:	69ba      	ldr	r2, [r7, #24]
 8009728:	3320      	adds	r3, #32
 800972a:	005b      	lsls	r3, r3, #1
 800972c:	4413      	add	r3, r2
 800972e:	7a1b      	ldrb	r3, [r3, #8]
 8009730:	461a      	mov	r2, r3
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	4413      	add	r3, r2
 8009736:	781a      	ldrb	r2, [r3, #0]
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8009738:	7f7b      	ldrb	r3, [r7, #29]
 800973a:	69b9      	ldr	r1, [r7, #24]
 800973c:	3320      	adds	r3, #32
 800973e:	005b      	lsls	r3, r3, #1
 8009740:	440b      	add	r3, r1
 8009742:	7a5b      	ldrb	r3, [r3, #9]
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 8009744:	4013      	ands	r3, r2
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00a      	beq.n	8009762 <USBH_HID_MouseDecode+0x162>
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800974c:	7f7b      	ldrb	r3, [r7, #29]
 800974e:	3b04      	subs	r3, #4
 8009750:	2201      	movs	r2, #1
 8009752:	fa02 f303 	lsl.w	r3, r2, r3
 8009756:	b25a      	sxtb	r2, r3
 8009758:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800975c:	4313      	orrs	r3, r2
 800975e:	b25b      	sxtb	r3, r3
 8009760:	77bb      	strb	r3, [r7, #30]
	  for(i=4;i<12;i++)
 8009762:	7f7b      	ldrb	r3, [r7, #29]
 8009764:	3301      	adds	r3, #1
 8009766:	777b      	strb	r3, [r7, #29]
 8009768:	7f7b      	ldrb	r3, [r7, #29]
 800976a:	2b0b      	cmp	r3, #11
 800976c:	d9da      	bls.n	8009724 <USBH_HID_MouseDecode+0x124>

	  //process mouse
	  if(HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE) {
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009774:	f003 0303 	and.w	r3, r3, #3
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b01      	cmp	r3, #1
 800977c:	d14d      	bne.n	800981a <USBH_HID_MouseDecode+0x21a>
	  		// iprintf("mouse %d %d %x\n", (int16_t)a[0], (int16_t)a[1], btn);
	  		// limit mouse movement to +/- 128
	  		for(i=0;i<2;i++) {
 800977e:	2300      	movs	r3, #0
 8009780:	777b      	strb	r3, [r7, #29]
 8009782:	e026      	b.n	80097d2 <USBH_HID_MouseDecode+0x1d2>
	  		if((int16_t)a[i] >  127) a[i] =  127;
 8009784:	7f7b      	ldrb	r3, [r7, #29]
 8009786:	005b      	lsls	r3, r3, #1
 8009788:	f107 0220 	add.w	r2, r7, #32
 800978c:	4413      	add	r3, r2
 800978e:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8009792:	2b7f      	cmp	r3, #127	; 0x7f
 8009794:	dd07      	ble.n	80097a6 <USBH_HID_MouseDecode+0x1a6>
 8009796:	7f7b      	ldrb	r3, [r7, #29]
 8009798:	005b      	lsls	r3, r3, #1
 800979a:	f107 0220 	add.w	r2, r7, #32
 800979e:	4413      	add	r3, r2
 80097a0:	227f      	movs	r2, #127	; 0x7f
 80097a2:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		if((int16_t)a[i] < -128) a[i] = -128;
 80097a6:	7f7b      	ldrb	r3, [r7, #29]
 80097a8:	005b      	lsls	r3, r3, #1
 80097aa:	f107 0220 	add.w	r2, r7, #32
 80097ae:	4413      	add	r3, r2
 80097b0:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80097b4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80097b8:	da08      	bge.n	80097cc <USBH_HID_MouseDecode+0x1cc>
 80097ba:	7f7b      	ldrb	r3, [r7, #29]
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	f107 0220 	add.w	r2, r7, #32
 80097c2:	4413      	add	r3, r2
 80097c4:	f64f 7280 	movw	r2, #65408	; 0xff80
 80097c8:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		for(i=0;i<2;i++) {
 80097cc:	7f7b      	ldrb	r3, [r7, #29]
 80097ce:	3301      	adds	r3, #1
 80097d0:	777b      	strb	r3, [r7, #29]
 80097d2:	7f7b      	ldrb	r3, [r7, #29]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d9d5      	bls.n	8009784 <USBH_HID_MouseDecode+0x184>
	  		}
	  		//btn
	  	  mouse_info.x = a[0];
 80097d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80097dc:	4b14      	ldr	r3, [pc, #80]	; (8009830 <USBH_HID_MouseDecode+0x230>)
 80097de:	801a      	strh	r2, [r3, #0]
	  	  mouse_info.y = a[1];
 80097e0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80097e4:	4b12      	ldr	r3, [pc, #72]	; (8009830 <USBH_HID_MouseDecode+0x230>)
 80097e6:	805a      	strh	r2, [r3, #2]
	  	  mouse_info.buttons[0] = btn&0x1;
 80097e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80097ec:	f003 0301 	and.w	r3, r3, #1
 80097f0:	b25a      	sxtb	r2, r3
 80097f2:	4b0f      	ldr	r3, [pc, #60]	; (8009830 <USBH_HID_MouseDecode+0x230>)
 80097f4:	711a      	strb	r2, [r3, #4]
	  	  mouse_info.buttons[1] = (btn>>1)&0x1;
 80097f6:	7ffb      	ldrb	r3, [r7, #31]
 80097f8:	085b      	lsrs	r3, r3, #1
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	b25b      	sxtb	r3, r3
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	b25a      	sxtb	r2, r3
 8009804:	4b0a      	ldr	r3, [pc, #40]	; (8009830 <USBH_HID_MouseDecode+0x230>)
 8009806:	715a      	strb	r2, [r3, #5]
	  	  mouse_info.buttons[2] = (btn>>2)&0x1;
 8009808:	7ffb      	ldrb	r3, [r7, #31]
 800980a:	089b      	lsrs	r3, r3, #2
 800980c:	b2db      	uxtb	r3, r3
 800980e:	b25b      	sxtb	r3, r3
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	b25a      	sxtb	r2, r3
 8009816:	4b06      	ldr	r3, [pc, #24]	; (8009830 <USBH_HID_MouseDecode+0x230>)
 8009818:	719a      	strb	r2, [r3, #6]
	  	}
    return USBH_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	e000      	b.n	8009820 <USBH_HID_MouseDecode+0x220>
  }
  return   USBH_FAIL;
 800981e:	2302      	movs	r3, #2
}
 8009820:	4618      	mov	r0, r3
 8009822:	3720      	adds	r7, #32
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20000440 	.word	0x20000440
 800982c:	20000441 	.word	0x20000441
 8009830:	20000438 	.word	0x20000438

08009834 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8009834:	b480      	push	{r7}
 8009836:	b089      	sub	sp, #36	; 0x24
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8009840:	2300      	movs	r3, #0
 8009842:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8009844:	2300      	movs	r3, #0
 8009846:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	7a1b      	ldrb	r3, [r3, #8]
 8009852:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	7a5b      	ldrb	r3, [r3, #9]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d01a      	beq.n	8009892 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	7a5b      	ldrb	r3, [r3, #9]
 8009860:	78fa      	ldrb	r2, [r7, #3]
 8009862:	429a      	cmp	r2, r3
 8009864:	d301      	bcc.n	800986a <HID_ReadItem+0x36>
    {
      return (0U);
 8009866:	2300      	movs	r3, #0
 8009868:	e076      	b.n	8009958 <HID_ReadItem+0x124>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800986a:	78fb      	ldrb	r3, [r7, #3]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6852      	ldr	r2, [r2, #4]
 8009870:	fb02 f303 	mul.w	r3, r2, r3
 8009874:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8009876:	7cfb      	ldrb	r3, [r7, #19]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	4413      	add	r3, r2
 800987c:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	08db      	lsrs	r3, r3, #3
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4413      	add	r3, r2
 8009886:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	b2db      	uxtb	r3, r3
 800988c:	f003 0307 	and.w	r3, r3, #7
 8009890:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 8009892:	2300      	movs	r3, #0
 8009894:	61bb      	str	r3, [r7, #24]
 8009896:	e00a      	b.n	80098ae <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	461a      	mov	r2, r3
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	fa02 f303 	lsl.w	r3, r2, r3
 80098a6:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	3301      	adds	r3, #1
 80098ac:	61bb      	str	r3, [r7, #24]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f003 0307 	and.w	r3, r3, #7
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d004      	beq.n	80098c4 <HID_ReadItem+0x90>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	08db      	lsrs	r3, r3, #3
 80098c0:	3301      	adds	r3, #1
 80098c2:	e002      	b.n	80098ca <HID_ReadItem+0x96>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	08db      	lsrs	r3, r3, #3
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d8e3      	bhi.n	8009898 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & ((1U << ri->size) - 1U);
 80098d0:	7cfb      	ldrb	r3, [r7, #19]
 80098d2:	69fa      	ldr	r2, [r7, #28]
 80098d4:	40da      	lsrs	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	2101      	movs	r1, #1
 80098dc:	fa01 f303 	lsl.w	r3, r1, r3
 80098e0:	3b01      	subs	r3, #1
 80098e2:	4013      	ands	r3, r2
 80098e4:	61fb      	str	r3, [r7, #28]

  if (val < ri->logical_min || val > ri->logical_max)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	69fa      	ldr	r2, [r7, #28]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d304      	bcc.n	80098fa <HID_ReadItem+0xc6>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	69fa      	ldr	r2, [r7, #28]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d901      	bls.n	80098fe <HID_ReadItem+0xca>
  {
    return (0U);
 80098fa:	2300      	movs	r3, #0
 80098fc:	e02c      	b.n	8009958 <HID_ReadItem+0x124>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1U << (ri->size - 1U))))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	7a9b      	ldrb	r3, [r3, #10]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d01d      	beq.n	8009942 <HID_ReadItem+0x10e>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	3b01      	subs	r3, #1
 800990c:	2201      	movs	r2, #1
 800990e:	409a      	lsls	r2, r3
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	4013      	ands	r3, r2
 8009914:	2b00      	cmp	r3, #0
 8009916:	d014      	beq.n	8009942 <HID_ReadItem+0x10e>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	2201      	movs	r2, #1
 800991e:	fa02 f303 	lsl.w	r3, r2, r3
 8009922:	425b      	negs	r3, r3
 8009924:	69fa      	ldr	r2, [r7, #28]
 8009926:	4313      	orrs	r3, r2
 8009928:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	69db      	ldr	r3, [r3, #28]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d101      	bne.n	8009936 <HID_ReadItem+0x102>
    {
      return ((uint32_t)vs);
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	e010      	b.n	8009958 <HID_ReadItem+0x124>
    }
    return ((uint32_t)(vs * ri->resolution));
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	fb02 f303 	mul.w	r3, r2, r3
 8009940:	e00a      	b.n	8009958 <HID_ReadItem+0x124>
  }
  else
  {
    if (ri->resolution == 1U)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	2b01      	cmp	r3, #1
 8009948:	d101      	bne.n	800994e <HID_ReadItem+0x11a>
    {
      return (val);
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	e004      	b.n	8009958 <HID_ReadItem+0x124>
    }
    return (val * ri->resolution);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	69db      	ldr	r3, [r3, #28]
 8009952:	69fa      	ldr	r2, [r7, #28]
 8009954:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8009958:	4618      	mov	r0, r3
 800995a:	3724      	adds	r7, #36	; 0x24
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <report_is_usable>:
  uint8_t bType: 2;
  uint8_t bTag: 4;
} __attribute__((packed)) item_t;


int report_is_usable(uint16_t bit_count, uint8_t report_complete, hid_report_t *conf) {
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	4603      	mov	r3, r0
 800996c:	603a      	str	r2, [r7, #0]
 800996e:	80fb      	strh	r3, [r7, #6]
 8009970:	460b      	mov	r3, r1
 8009972:	717b      	strb	r3, [r7, #5]
// hidp_debugf("  - total bit count: %d (%d bytes, %d bits)",
//	      bit_count, bit_count/8, bit_count%8);

  conf->report_size = bit_count/8;
 8009974:	88fb      	ldrh	r3, [r7, #6]
 8009976:	08db      	lsrs	r3, r3, #3
 8009978:	b29b      	uxth	r3, r3
 800997a:	b2da      	uxtb	r2, r3
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	709a      	strb	r2, [r3, #2]

  // check if something useful was detected
  if( ((conf->type == REPORT_TYPE_JOYSTICK) && ((report_complete & JOYSTICK_COMPLETE) == JOYSTICK_COMPLETE)) ||
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	f003 0303 	and.w	r3, r3, #3
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b03      	cmp	r3, #3
 800998c:	d104      	bne.n	8009998 <report_is_usable+0x34>
 800998e:	797b      	ldrb	r3, [r7, #5]
 8009990:	f003 0307 	and.w	r3, r3, #7
 8009994:	2b07      	cmp	r3, #7
 8009996:	d012      	beq.n	80099be <report_is_usable+0x5a>
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	f003 0303 	and.w	r3, r3, #3
 80099a0:	b2db      	uxtb	r3, r3
  if( ((conf->type == REPORT_TYPE_JOYSTICK) && ((report_complete & JOYSTICK_COMPLETE) == JOYSTICK_COMPLETE)) ||
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d104      	bne.n	80099b0 <report_is_usable+0x4c>
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 80099a6:	797b      	ldrb	r3, [r7, #5]
 80099a8:	f003 030f 	and.w	r3, r3, #15
 80099ac:	2b0f      	cmp	r3, #15
 80099ae:	d006      	beq.n	80099be <report_is_usable+0x5a>
      ((conf->type == REPORT_TYPE_KEYBOARD))) {
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	f003 0303 	and.w	r3, r3, #3
 80099b8:	b2db      	uxtb	r3, r3
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d101      	bne.n	80099c2 <report_is_usable+0x5e>
 //   hidp_debugf("  - report %d is usable", conf->report_id);
    return 1;
 80099be:	2301      	movs	r3, #1
 80099c0:	e000      	b.n	80099c4 <report_is_usable+0x60>
  }

//  hidp_debugf("  - unusable report %d", conf->report_id);
  return 0;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <parse_report_descriptor>:



int parse_report_descriptor(uint8_t *rep, uint16_t rep_size,hid_report_t *conf) {
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b08e      	sub	sp, #56	; 0x38
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	460b      	mov	r3, r1
 80099da:	607a      	str	r2, [r7, #4]
 80099dc:	817b      	strh	r3, [r7, #10]
  int8_t app_collection = 0;
 80099de:	2300      	movs	r3, #0
 80099e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int8_t phys_log_collection = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint8_t skip_collection = 0;
 80099ea:	2300      	movs	r3, #0
 80099ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  int8_t generic_desktop = -1;   // depth at which first gen_desk was found
 80099f0:	23ff      	movs	r3, #255	; 0xff
 80099f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  uint8_t collection_depth = 0;
 80099f6:	2300      	movs	r3, #0
 80099f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33


  //
  uint8_t report_size = 0, report_count = 0;
 80099fc:	2300      	movs	r3, #0
 80099fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009a02:	2300      	movs	r3, #0
 8009a04:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  uint16_t bit_count = 0, usage_count = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t logical_minimum=0, logical_maximum=0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009a14:	2300      	movs	r3, #0
 8009a16:	853b      	strh	r3, [r7, #40]	; 0x28

  // mask used to check of all required components have been found, so
  // that e.g. both axes and the button of a joystick are ready to be used
  uint8_t report_complete = 0;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  // joystick/mouse components
  int8_t axis[2] = { -1, -1};
 8009a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a22:	823b      	strh	r3, [r7, #16]
  uint8_t btns = 0;
 8009a24:	2300      	movs	r3, #0
 8009a26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  int8_t hat = -1;
 8009a2a:	23ff      	movs	r3, #255	; 0xff
 8009a2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


  while(rep_size) {
 8009a30:	e2d4      	b.n	8009fdc <parse_report_descriptor+0x60c>
    // extract short item
    uint8_t tag = ((item_t*)rep)->bTag;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	777b      	strb	r3, [r7, #29]
    uint8_t type = ((item_t*)rep)->bType;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	773b      	strb	r3, [r7, #28]
    uint8_t size = ((item_t*)rep)->bSize;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	76fb      	strb	r3, [r7, #27]

    rep++;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	60fb      	str	r3, [r7, #12]
    rep_size--;   // one byte consumed
 8009a5c:	897b      	ldrh	r3, [r7, #10]
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	817b      	strh	r3, [r7, #10]



    uint32_t value = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	623b      	str	r3, [r7, #32]
     if(size) {      // size 1/2/3
 8009a66:	7efb      	ldrb	r3, [r7, #27]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d007      	beq.n	8009a7c <parse_report_descriptor+0xac>
       value = *rep++;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	1c5a      	adds	r2, r3, #1
 8009a70:	60fa      	str	r2, [r7, #12]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	623b      	str	r3, [r7, #32]
       rep_size--;
 8009a76:	897b      	ldrh	r3, [r7, #10]
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	817b      	strh	r3, [r7, #10]
     }

     if(size > 1) {  // size 2/3
 8009a7c:	7efb      	ldrb	r3, [r7, #27]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d90b      	bls.n	8009a9a <parse_report_descriptor+0xca>
       value = (value & 0xff) + ((uint32_t)(*rep++)<<8);
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	1c59      	adds	r1, r3, #1
 8009a8a:	60f9      	str	r1, [r7, #12]
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	021b      	lsls	r3, r3, #8
 8009a90:	4413      	add	r3, r2
 8009a92:	623b      	str	r3, [r7, #32]
       rep_size--;
 8009a94:	897b      	ldrh	r3, [r7, #10]
 8009a96:	3b01      	subs	r3, #1
 8009a98:	817b      	strh	r3, [r7, #10]
     }

     if(size > 2) {  // size 3
 8009a9a:	7efb      	ldrb	r3, [r7, #27]
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d915      	bls.n	8009acc <parse_report_descriptor+0xfc>
       value &= 0xffff;
 8009aa0:	6a3b      	ldr	r3, [r7, #32]
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	623b      	str	r3, [r7, #32]
       value |= ((uint32_t)(*rep++)<<16);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	1c5a      	adds	r2, r3, #1
 8009aaa:	60fa      	str	r2, [r7, #12]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	041b      	lsls	r3, r3, #16
 8009ab0:	6a3a      	ldr	r2, [r7, #32]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	623b      	str	r3, [r7, #32]
       value |= ((uint32_t)(*rep++)<<24);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	60fa      	str	r2, [r7, #12]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	061b      	lsls	r3, r3, #24
 8009ac0:	6a3a      	ldr	r2, [r7, #32]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	623b      	str	r3, [r7, #32]
       rep_size-=2;
 8009ac6:	897b      	ldrh	r3, [r7, #10]
 8009ac8:	3b02      	subs	r3, #2
 8009aca:	817b      	strh	r3, [r7, #10]
     }


       // we are currently skipping an unknown/unsupported collection)
           if(skip_collection) {
 8009acc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d029      	beq.n	8009b28 <parse_report_descriptor+0x158>
             if(!type) {  // main item
 8009ad4:	7f3b      	ldrb	r3, [r7, #28]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	f040 8280 	bne.w	8009fdc <parse_report_descriptor+0x60c>
       				// any new collection increases the depth of collections to skip
       				if(tag == 10) {
 8009adc:	7f7b      	ldrb	r3, [r7, #29]
 8009ade:	2b0a      	cmp	r3, #10
 8009ae0:	d109      	bne.n	8009af6 <parse_report_descriptor+0x126>
       					skip_collection++;
 8009ae2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
       					collection_depth++;
 8009aec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009af0:	3301      	adds	r3, #1
 8009af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
       				}

       				// any end collection decreases it
       				if(tag == 12) {
 8009af6:	7f7b      	ldrb	r3, [r7, #29]
 8009af8:	2b0c      	cmp	r3, #12
 8009afa:	f040 826f 	bne.w	8009fdc <parse_report_descriptor+0x60c>
       					skip_collection--;
 8009afe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009b02:	3b01      	subs	r3, #1
 8009b04:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
       					collection_depth--;
 8009b08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b0c:	3b01      	subs	r3, #1
 8009b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

       					// leaving the depth the generic desktop was valid for
       					if(generic_desktop > collection_depth)
 8009b12:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 8009b16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	f340 825e 	ble.w	8009fdc <parse_report_descriptor+0x60c>
       						generic_desktop = -1;
 8009b20:	23ff      	movs	r3, #255	; 0xff
 8009b22:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8009b26:	e259      	b.n	8009fdc <parse_report_descriptor+0x60c>
             }

           } else {


                 switch(type) {
 8009b28:	7f3b      	ldrb	r3, [r7, #28]
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	f000 81cb 	beq.w	8009ec6 <parse_report_descriptor+0x4f6>
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	f300 8252 	bgt.w	8009fda <parse_report_descriptor+0x60a>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d003      	beq.n	8009b42 <parse_report_descriptor+0x172>
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	f000 8172 	beq.w	8009e24 <parse_report_descriptor+0x454>
 8009b40:	e24b      	b.n	8009fda <parse_report_descriptor+0x60a>
                 case 0:
           	// main item

           	switch(tag) {
 8009b42:	7f7b      	ldrb	r3, [r7, #29]
 8009b44:	3b08      	subs	r3, #8
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	f200 8168 	bhi.w	8009e1c <parse_report_descriptor+0x44c>
 8009b4c:	a201      	add	r2, pc, #4	; (adr r2, 8009b54 <parse_report_descriptor+0x184>)
 8009b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b52:	bf00      	nop
 8009b54:	08009b69 	.word	0x08009b69
 8009b58:	08009e21 	.word	0x08009e21
 8009b5c:	08009d4f 	.word	0x08009d4f
 8009b60:	08009e21 	.word	0x08009e21
 8009b64:	08009dab 	.word	0x08009dab
           	case 8:
           	  // handle found buttons
           	  if(btns) {
 8009b68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d050      	beq.n	8009c12 <parse_report_descriptor+0x242>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) ||
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	f003 0303 	and.w	r3, r3, #3
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	2b03      	cmp	r3, #3
 8009b7c:	d006      	beq.n	8009b8c <parse_report_descriptor+0x1bc>
           	       (conf->type == REPORT_TYPE_MOUSE)) {
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	f003 0303 	and.w	r3, r3, #3
 8009b86:	b2db      	uxtb	r3, r3
           	    if((conf->type == REPORT_TYPE_JOYSTICK) ||
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d142      	bne.n	8009c12 <parse_report_descriptor+0x242>
           	      // scan for up to four buttons
           	      uint8_t b;
           	      for(b=0;b<12;b++) {
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	77fb      	strb	r3, [r7, #31]
 8009b90:	e02c      	b.n	8009bec <parse_report_descriptor+0x21c>
           		if(report_count > b) {
 8009b92:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8009b96:	7ffb      	ldrb	r3, [r7, #31]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d91a      	bls.n	8009bd2 <parse_report_descriptor+0x202>
           		  uint16_t this_bit = bit_count+b;
 8009b9c:	7ffb      	ldrb	r3, [r7, #31]
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ba2:	4413      	add	r3, r2
 8009ba4:	833b      	strh	r3, [r7, #24]

           		  conf->joystick_mouse.button[b].byte_offset = this_bit/8;
 8009ba6:	8b3b      	ldrh	r3, [r7, #24]
 8009ba8:	08db      	lsrs	r3, r3, #3
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	7ffa      	ldrb	r2, [r7, #31]
 8009bae:	b2d9      	uxtb	r1, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	320c      	adds	r2, #12
 8009bb4:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
           		  conf->joystick_mouse.button[b].bitmask = 1 << (this_bit%8);
 8009bb8:	8b3b      	ldrh	r3, [r7, #24]
 8009bba:	f003 0307 	and.w	r3, r3, #7
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	409a      	lsls	r2, r3
 8009bc2:	7ffb      	ldrb	r3, [r7, #31]
 8009bc4:	b2d1      	uxtb	r1, r2
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	330c      	adds	r3, #12
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	4413      	add	r3, r2
 8009bce:	460a      	mov	r2, r1
 8009bd0:	705a      	strb	r2, [r3, #1]
           		}
           					conf->joystick_mouse.button_count = report_count * report_size;
 8009bd2:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8009bd6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009bda:	fb12 f303 	smulbb	r3, r2, r3
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
           	      for(b=0;b<12;b++) {
 8009be6:	7ffb      	ldrb	r3, [r7, #31]
 8009be8:	3301      	adds	r3, #1
 8009bea:	77fb      	strb	r3, [r7, #31]
 8009bec:	7ffb      	ldrb	r3, [r7, #31]
 8009bee:	2b0b      	cmp	r3, #11
 8009bf0:	d9cf      	bls.n	8009b92 <parse_report_descriptor+0x1c2>
           	      }

           	      // we found at least one button which is all we want to accept this as a valid
           	      // joystick
           	      report_complete |= JOY_MOUSE_REQ_BTN_0;
 8009bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bf6:	f043 0304 	orr.w	r3, r3, #4
 8009bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	      if(report_count > 1) report_complete |= JOY_MOUSE_REQ_BTN_1;
 8009bfe:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d905      	bls.n	8009c12 <parse_report_descriptor+0x242>
 8009c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c0a:	f043 0308 	orr.w	r3, r3, #8
 8009c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	    }
           	  }

           	  // handle found axes
           	  uint8_t c;
           	  for(c=0;c<2;c++) {
 8009c12:	2300      	movs	r3, #0
 8009c14:	77bb      	strb	r3, [r7, #30]
 8009c16:	e05e      	b.n	8009cd6 <parse_report_descriptor+0x306>
           	    if(axis[c] >= 0) {
 8009c18:	7fbb      	ldrb	r3, [r7, #30]
 8009c1a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009c1e:	4413      	add	r3, r2
 8009c20:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	db53      	blt.n	8009cd0 <parse_report_descriptor+0x300>
           	      uint16_t cnt = bit_count + report_size * axis[c];
 8009c28:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	7fbb      	ldrb	r3, [r7, #30]
 8009c30:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009c34:	440b      	add	r3, r1
 8009c36:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	fb12 f303 	smulbb	r3, r2, r3
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009c44:	4413      	add	r3, r2
 8009c46:	82bb      	strh	r3, [r7, #20]

           	      if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	f003 0303 	and.w	r3, r3, #3
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b03      	cmp	r3, #3
 8009c54:	d006      	beq.n	8009c64 <parse_report_descriptor+0x294>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	f003 0303 	and.w	r3, r3, #3
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d135      	bne.n	8009cd0 <parse_report_descriptor+0x300>
           		// save in joystick report
           		conf->joystick_mouse.axis[c].offset = cnt;
 8009c64:	7fba      	ldrb	r2, [r7, #30]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3201      	adds	r2, #1
 8009c6a:	8ab9      	ldrh	r1, [r7, #20]
 8009c6c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
           		conf->joystick_mouse.axis[c].size = report_size;
 8009c70:	7fbb      	ldrb	r3, [r7, #30]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	3301      	adds	r3, #1
 8009c76:	00db      	lsls	r3, r3, #3
 8009c78:	4413      	add	r3, r2
 8009c7a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8009c7e:	709a      	strb	r2, [r3, #2]
           		conf->joystick_mouse.axis[c].logical.min = logical_minimum;
 8009c80:	7fbb      	ldrb	r3, [r7, #30]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	3301      	adds	r3, #1
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	4413      	add	r3, r2
 8009c8a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8009c8c:	809a      	strh	r2, [r3, #4]
           		conf->joystick_mouse.axis[c].logical.max = logical_maximum;
 8009c8e:	7fbb      	ldrb	r3, [r7, #30]
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	3301      	adds	r3, #1
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	4413      	add	r3, r2
 8009c98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009c9a:	80da      	strh	r2, [r3, #6]
           		conf->joystick_mouse.axis[c].size = report_size;
 8009c9c:	7fbb      	ldrb	r3, [r7, #30]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	00db      	lsls	r3, r3, #3
 8009ca4:	4413      	add	r3, r2
 8009ca6:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8009caa:	709a      	strb	r2, [r3, #2]
           		if(c==0) report_complete |= JOY_MOUSE_REQ_AXIS_X;
 8009cac:	7fbb      	ldrb	r3, [r7, #30]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d105      	bne.n	8009cbe <parse_report_descriptor+0x2ee>
 8009cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cb6:	f043 0301 	orr.w	r3, r3, #1
 8009cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           		if(c==1) report_complete |= JOY_MOUSE_REQ_AXIS_Y;
 8009cbe:	7fbb      	ldrb	r3, [r7, #30]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d105      	bne.n	8009cd0 <parse_report_descriptor+0x300>
 8009cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc8:	f043 0302 	orr.w	r3, r3, #2
 8009ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	  for(c=0;c<2;c++) {
 8009cd0:	7fbb      	ldrb	r3, [r7, #30]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	77bb      	strb	r3, [r7, #30]
 8009cd6:	7fbb      	ldrb	r3, [r7, #30]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d99d      	bls.n	8009c18 <parse_report_descriptor+0x248>
           	      }
           	    }
           	  }

           	  // handle found hat
           	  if(hat >= 0) {
 8009cdc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	db1a      	blt.n	8009d1a <parse_report_descriptor+0x34a>
           	    uint16_t cnt = bit_count + report_size * hat;
 8009ce4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	fb12 f303 	smulbb	r3, r2, r3
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009cf8:	4413      	add	r3, r2
 8009cfa:	82fb      	strh	r3, [r7, #22]
           	    if(conf->type == REPORT_TYPE_JOYSTICK) {
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	f003 0303 	and.w	r3, r3, #3
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d107      	bne.n	8009d1a <parse_report_descriptor+0x34a>
           	      conf->joystick_mouse.hat.offset = cnt;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	8afa      	ldrh	r2, [r7, #22]
 8009d0e:	861a      	strh	r2, [r3, #48]	; 0x30
           	      conf->joystick_mouse.hat.size = report_size;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8009d16:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
           	    }
           	  }


           	  // reset for next inputs
           	  bit_count += report_count * report_size;
 8009d1a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	fb12 f303 	smulbb	r3, r2, r3
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d2e:	4413      	add	r3, r2
 8009d30:	85fb      	strh	r3, [r7, #46]	; 0x2e
           	  usage_count = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  btns = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
           	  axis[0] = axis[1] = -1;
 8009d3c:	23ff      	movs	r3, #255	; 0xff
 8009d3e:	747b      	strb	r3, [r7, #17]
 8009d40:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8009d44:	743b      	strb	r3, [r7, #16]
           	  hat = -1;
 8009d46:	23ff      	movs	r3, #255	; 0xff
 8009d48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
           	  break;
 8009d4c:	e069      	b.n	8009e22 <parse_report_descriptor+0x452>

           	case 11:
           	  break;

           	case 10:
           	  collection_depth++;
 8009d4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d52:	3301      	adds	r3, #1
 8009d54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
           	  usage_count = 0;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	85bb      	strh	r3, [r7, #44]	; 0x2c

           	  if(value == 1) {	   // app collection
 8009d5c:	6a3b      	ldr	r3, [r7, #32]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d107      	bne.n	8009d72 <parse_report_descriptor+0x3a2>
           	    app_collection++;
 8009d62:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	3301      	adds	r3, #1
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
           	  } else if(value == 2) {  // logical collection
           	    phys_log_collection++;
           	  } else {
           	    skip_collection++;
           	  }
           	  break;
 8009d70:	e057      	b.n	8009e22 <parse_report_descriptor+0x452>
           	  } else if(value == 0) {  // physical collection
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d107      	bne.n	8009d88 <parse_report_descriptor+0x3b8>
           	    phys_log_collection++;
 8009d78:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	3301      	adds	r3, #1
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	  break;
 8009d86:	e04c      	b.n	8009e22 <parse_report_descriptor+0x452>
           	  } else if(value == 2) {  // logical collection
 8009d88:	6a3b      	ldr	r3, [r7, #32]
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d107      	bne.n	8009d9e <parse_report_descriptor+0x3ce>
           	    phys_log_collection++;
 8009d8e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	3301      	adds	r3, #1
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	  break;
 8009d9c:	e041      	b.n	8009e22 <parse_report_descriptor+0x452>
           	    skip_collection++;
 8009d9e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009da2:	3301      	adds	r3, #1
 8009da4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
           	  break;
 8009da8:	e03b      	b.n	8009e22 <parse_report_descriptor+0x452>

           	case 12:
           	  collection_depth--;
 8009daa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009dae:	3b01      	subs	r3, #1
 8009db0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

           	  // leaving the depth the generic desktop was valid for
           	  if(generic_desktop > collection_depth)
 8009db4:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 8009db8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	dd02      	ble.n	8009dc6 <parse_report_descriptor+0x3f6>
           	    generic_desktop = -1;
 8009dc0:	23ff      	movs	r3, #255	; 0xff
 8009dc2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

           	  if(phys_log_collection) {
 8009dc6:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d007      	beq.n	8009dde <parse_report_descriptor+0x40e>

           	    phys_log_collection--;
 8009dce:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	    }

           	  } else {
           	    return 0;
           	  }
           	  break;
 8009ddc:	e021      	b.n	8009e22 <parse_report_descriptor+0x452>
           	  } else if(app_collection) {
 8009dde:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d018      	beq.n	8009e18 <parse_report_descriptor+0x448>
           	    app_collection--;
 8009de6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	3b01      	subs	r3, #1
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
           	     if(report_is_usable(bit_count, report_complete, conf))
 8009df4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8009df8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7ff fdb1 	bl	8009964 <report_is_usable>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d001      	beq.n	8009e0c <parse_report_descriptor+0x43c>
           	      return 1;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e0ec      	b.n	8009fe6 <parse_report_descriptor+0x616>
           	      bit_count = 0;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
           	      report_complete = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	  break;
 8009e16:	e004      	b.n	8009e22 <parse_report_descriptor+0x452>
           	    return 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	e0e4      	b.n	8009fe6 <parse_report_descriptor+0x616>

           	default:
           	  return 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	e0e2      	b.n	8009fe6 <parse_report_descriptor+0x616>
           	  break;
 8009e20:	bf00      	nop
           	  break;
           	}
           	break;
 8009e22:	e0db      	b.n	8009fdc <parse_report_descriptor+0x60c>

                 case 1:
           	// global item
           	switch(tag) {
 8009e24:	7f7b      	ldrb	r3, [r7, #29]
 8009e26:	2b09      	cmp	r3, #9
 8009e28:	d847      	bhi.n	8009eba <parse_report_descriptor+0x4ea>
 8009e2a:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <parse_report_descriptor+0x460>)
 8009e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e30:	08009e59 	.word	0x08009e59
 8009e34:	08009e95 	.word	0x08009e95
 8009e38:	08009e9b 	.word	0x08009e9b
 8009e3c:	08009ebf 	.word	0x08009ebf
 8009e40:	08009ebf 	.word	0x08009ebf
 8009e44:	08009ebf 	.word	0x08009ebf
 8009e48:	08009ebf 	.word	0x08009ebf
 8009e4c:	08009ea1 	.word	0x08009ea1
 8009e50:	08009ea9 	.word	0x08009ea9
 8009e54:	08009eb3 	.word	0x08009eb3
           	case 0:

           	  if(value == USAGE_PAGE_KEYBOARD) {
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	2b07      	cmp	r3, #7
 8009e5c:	d01a      	beq.n	8009e94 <parse_report_descriptor+0x4c4>
           	  } else if(value == USAGE_PAGE_GAMING) {
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	2b05      	cmp	r3, #5
 8009e62:	d017      	beq.n	8009e94 <parse_report_descriptor+0x4c4>
           	  } else if(value == USAGE_PAGE_LEDS) {
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	2b08      	cmp	r3, #8
 8009e68:	d014      	beq.n	8009e94 <parse_report_descriptor+0x4c4>
           	  } else if(value == USAGE_PAGE_CONSUMER) {
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	2b0c      	cmp	r3, #12
 8009e6e:	d011      	beq.n	8009e94 <parse_report_descriptor+0x4c4>
           	  } else if(value == USAGE_PAGE_BUTTON) {
 8009e70:	6a3b      	ldr	r3, [r7, #32]
 8009e72:	2b09      	cmp	r3, #9
 8009e74:	d103      	bne.n	8009e7e <parse_report_descriptor+0x4ae>
           	    btns = 1;
 8009e76:	2301      	movs	r3, #1
 8009e78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e7c:	e00a      	b.n	8009e94 <parse_report_descriptor+0x4c4>
           	  } else if(value == USAGE_PAGE_GENERIC_DESKTOP) {
 8009e7e:	6a3b      	ldr	r3, [r7, #32]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d11e      	bne.n	8009ec2 <parse_report_descriptor+0x4f2>
           	    if(generic_desktop < 0)
 8009e84:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	da03      	bge.n	8009e94 <parse_report_descriptor+0x4c4>
           	      generic_desktop = collection_depth;
 8009e8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e90:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
           	  } else

           	  break;

           	case 1:
           	  logical_minimum = value;
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	857b      	strh	r3, [r7, #42]	; 0x2a
           	  break;
 8009e98:	e014      	b.n	8009ec4 <parse_report_descriptor+0x4f4>

           	case 2:
           	  logical_maximum = value;
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	853b      	strh	r3, [r7, #40]	; 0x28
           	  break;
 8009e9e:	e011      	b.n	8009ec4 <parse_report_descriptor+0x4f4>

           	case 6:
           	  break;

           	case 7:
           	  report_size = value;
 8009ea0:	6a3b      	ldr	r3, [r7, #32]
 8009ea2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
           		break;
 8009ea6:	e00d      	b.n	8009ec4 <parse_report_descriptor+0x4f4>

           	case 8:
           	  conf->report_id = value;
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	705a      	strb	r2, [r3, #1]
           	  break;
 8009eb0:	e008      	b.n	8009ec4 <parse_report_descriptor+0x4f4>

           	case 9:
           		report_count = value;
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
           	  break;
 8009eb8:	e004      	b.n	8009ec4 <parse_report_descriptor+0x4f4>

           	default:
           	  return 0;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e093      	b.n	8009fe6 <parse_report_descriptor+0x616>
           	  break;
 8009ebe:	bf00      	nop
 8009ec0:	e08c      	b.n	8009fdc <parse_report_descriptor+0x60c>
           	  break;
 8009ec2:	bf00      	nop
           	  break;
           	}
           	break;
 8009ec4:	e08a      	b.n	8009fdc <parse_report_descriptor+0x60c>

                 case 2:
           	// local item
           	switch(tag) {
 8009ec6:	7f7b      	ldrb	r3, [r7, #29]
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d07e      	beq.n	8009fca <parse_report_descriptor+0x5fa>
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	f300 8082 	bgt.w	8009fd6 <parse_report_descriptor+0x606>
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d002      	beq.n	8009edc <parse_report_descriptor+0x50c>
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d06f      	beq.n	8009fba <parse_report_descriptor+0x5ea>
           	  usage_count += value;
           	  break;

           	default:

           	  break;
 8009eda:	e07c      	b.n	8009fd6 <parse_report_descriptor+0x606>
           	  if( !collection_depth && (value == USAGE_KEYBOARD)) {
 8009edc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d109      	bne.n	8009ef8 <parse_report_descriptor+0x528>
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	2b06      	cmp	r3, #6
 8009ee8:	d106      	bne.n	8009ef8 <parse_report_descriptor+0x528>
           	    conf->type = REPORT_TYPE_KEYBOARD;
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	7813      	ldrb	r3, [r2, #0]
 8009eee:	2102      	movs	r1, #2
 8009ef0:	f361 0301 	bfi	r3, r1, #0, #2
 8009ef4:	7013      	strb	r3, [r2, #0]
 8009ef6:	e05c      	b.n	8009fb2 <parse_report_descriptor+0x5e2>
           	  } else if(!collection_depth && (value == USAGE_MOUSE)) {
 8009ef8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d109      	bne.n	8009f14 <parse_report_descriptor+0x544>
 8009f00:	6a3b      	ldr	r3, [r7, #32]
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d106      	bne.n	8009f14 <parse_report_descriptor+0x544>
           	    conf->type = REPORT_TYPE_MOUSE;
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	7813      	ldrb	r3, [r2, #0]
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	f361 0301 	bfi	r3, r1, #0, #2
 8009f10:	7013      	strb	r3, [r2, #0]
 8009f12:	e04e      	b.n	8009fb2 <parse_report_descriptor+0x5e2>
           	  } else if(!collection_depth &&
 8009f14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10b      	bne.n	8009f34 <parse_report_descriptor+0x564>
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	2b05      	cmp	r3, #5
 8009f20:	d002      	beq.n	8009f28 <parse_report_descriptor+0x558>
           		    ((value == USAGE_GAMEPAD) || (value == USAGE_JOYSTICK))) {
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d105      	bne.n	8009f34 <parse_report_descriptor+0x564>
           	    conf->type = REPORT_TYPE_JOYSTICK;
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	7813      	ldrb	r3, [r2, #0]
 8009f2c:	f043 0303 	orr.w	r3, r3, #3
 8009f30:	7013      	strb	r3, [r2, #0]
 8009f32:	e03e      	b.n	8009fb2 <parse_report_descriptor+0x5e2>
           	  } else if(value == USAGE_POINTER && app_collection) {
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d103      	bne.n	8009f42 <parse_report_descriptor+0x572>
 8009f3a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d137      	bne.n	8009fb2 <parse_report_descriptor+0x5e2>
           	  } else if((value == USAGE_X || value == USAGE_Y) && app_collection) {
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	2b30      	cmp	r3, #48	; 0x30
 8009f46:	d002      	beq.n	8009f4e <parse_report_descriptor+0x57e>
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	2b31      	cmp	r3, #49	; 0x31
 8009f4c:	d11e      	bne.n	8009f8c <parse_report_descriptor+0x5bc>
 8009f4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d01a      	beq.n	8009f8c <parse_report_descriptor+0x5bc>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	f003 0303 	and.w	r3, r3, #3
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	2b03      	cmp	r3, #3
 8009f62:	d006      	beq.n	8009f72 <parse_report_descriptor+0x5a2>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	f003 0303 	and.w	r3, r3, #3
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d11e      	bne.n	8009fb0 <parse_report_descriptor+0x5e0>
           	      if(value == USAGE_X) {
 8009f72:	6a3b      	ldr	r3, [r7, #32]
 8009f74:	2b30      	cmp	r3, #48	; 0x30
 8009f76:	d102      	bne.n	8009f7e <parse_report_descriptor+0x5ae>
           		axis[0] = usage_count;
 8009f78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009f7a:	b25b      	sxtb	r3, r3
 8009f7c:	743b      	strb	r3, [r7, #16]
           	      if(value == USAGE_Y) {
 8009f7e:	6a3b      	ldr	r3, [r7, #32]
 8009f80:	2b31      	cmp	r3, #49	; 0x31
 8009f82:	d115      	bne.n	8009fb0 <parse_report_descriptor+0x5e0>
           		axis[1] = usage_count;
 8009f84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009f86:	b25b      	sxtb	r3, r3
 8009f88:	747b      	strb	r3, [r7, #17]
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8009f8a:	e011      	b.n	8009fb0 <parse_report_descriptor+0x5e0>
           	  } else if((value == USAGE_HAT) && app_collection) {
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	2b39      	cmp	r3, #57	; 0x39
 8009f90:	d10f      	bne.n	8009fb2 <parse_report_descriptor+0x5e2>
 8009f92:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00b      	beq.n	8009fb2 <parse_report_descriptor+0x5e2>
           	    if(conf->type == REPORT_TYPE_JOYSTICK) {
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	2b03      	cmp	r3, #3
 8009fa6:	d104      	bne.n	8009fb2 <parse_report_descriptor+0x5e2>
           	      hat = usage_count;
 8009fa8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009faa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009fae:	e000      	b.n	8009fb2 <parse_report_descriptor+0x5e2>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8009fb0:	bf00      	nop
           	  usage_count++;
 8009fb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8009fb8:	e00e      	b.n	8009fd8 <parse_report_descriptor+0x608>
           	  usage_count -= (value-1);
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8009fc8:	e006      	b.n	8009fd8 <parse_report_descriptor+0x608>
           	  usage_count += value;
 8009fca:	6a3b      	ldr	r3, [r7, #32]
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009fd0:	4413      	add	r3, r2
 8009fd2:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8009fd4:	e000      	b.n	8009fd8 <parse_report_descriptor+0x608>
           	  break;
 8009fd6:	bf00      	nop
           	}
           	break;
 8009fd8:	e000      	b.n	8009fdc <parse_report_descriptor+0x60c>

                 default:
           	// reserved

           	break;
 8009fda:	bf00      	nop
  while(rep_size) {
 8009fdc:	897b      	ldrh	r3, [r7, #10]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f47f ad27 	bne.w	8009a32 <parse_report_descriptor+0x62>
                 }
               }
             }

             // if we get here then no usable setup was found
             return 0;
 8009fe4:	2300      	movs	r3, #0
           }
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3738      	adds	r7, #56	; 0x38
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop

08009ff0 <USBH_HUB_InterfaceInit>:




static USBH_StatusTypeDef USBH_HUB_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009ff0:	b590      	push	{r4, r7, lr}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	73fb      	strb	r3, [r7, #15]
	HUB_HandleTypeDef *HUB_Handle;
    uint8_t interface;


    interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x00U, 0x00U);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a002:	7919      	ldrb	r1, [r3, #4]
 800a004:	2300      	movs	r3, #0
 800a006:	2200      	movs	r2, #0
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f002 fa21 	bl	800c450 <USBH_FindInterface>
 800a00e:	4603      	mov	r3, r0
 800a010:	73bb      	strb	r3, [r7, #14]

    if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a012:	7bbb      	ldrb	r3, [r7, #14]
 800a014:	2bff      	cmp	r3, #255	; 0xff
 800a016:	d002      	beq.n	800a01e <USBH_HUB_InterfaceInit+0x2e>
 800a018:	7bbb      	ldrb	r3, [r7, #14]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d901      	bls.n	800a022 <USBH_HUB_InterfaceInit+0x32>
    {
        USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
        return USBH_FAIL;
 800a01e:	2302      	movs	r3, #2
 800a020:	e05e      	b.n	800a0e0 <USBH_HUB_InterfaceInit+0xf0>
    }

    status = USBH_SelectInterface(phost, interface);
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f002 f9f6 	bl	800c418 <USBH_SelectInterface>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73fb      	strb	r3, [r7, #15]

    if (status != USBH_OK)
 800a030:	7bfb      	ldrb	r3, [r7, #15]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <USBH_HUB_InterfaceInit+0x4a>
    {
        return USBH_FAIL;
 800a036:	2302      	movs	r3, #2
 800a038:	e052      	b.n	800a0e0 <USBH_HUB_InterfaceInit+0xf0>
    }


    phost->pActiveClass->pData[0] = (HUB_HandleTypeDef *)USBH_malloc(sizeof(HUB_HandleTypeDef));
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 4380 	ldr.w	r4, [r3, #896]	; 0x380
 800a040:	f241 003c 	movw	r0, #4156	; 0x103c
 800a044:	f004 f8a6 	bl	800e194 <malloc>
 800a048:	4603      	mov	r3, r0
 800a04a:	6223      	str	r3, [r4, #32]
    HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a052:	6a1b      	ldr	r3, [r3, #32]
 800a054:	60bb      	str	r3, [r7, #8]
    
    if (HUB_Handle == NULL)
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <USBH_HUB_InterfaceInit+0x70>
    {
        USBH_DbgLog("Cannot allocate memory for HID Handle");
        return USBH_FAIL;
 800a05c:	2302      	movs	r3, #2
 800a05e:	e03f      	b.n	800a0e0 <USBH_HUB_InterfaceInit+0xf0>
    }

      /* Initialize hub handler */
    USBH_memset(HUB_Handle, 0, sizeof(HUB_HandleTypeDef));
 800a060:	f241 023c 	movw	r2, #4156	; 0x103c
 800a064:	2100      	movs	r1, #0
 800a066:	68b8      	ldr	r0, [r7, #8]
 800a068:	f004 f8a4 	bl	800e1b4 <memset>




  HUB_Handle->state     = HUB_INIT;
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	2200      	movs	r2, #0
 800a070:	701a      	strb	r2, [r3, #0]
  HUB_Handle->ctl_state = HUB_REQ_INIT;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2200      	movs	r2, #0
 800a076:	70da      	strb	r2, [r3, #3]
  HUB_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a078:	7bbb      	ldrb	r3, [r7, #14]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	211a      	movs	r1, #26
 800a07e:	fb01 f303 	mul.w	r3, r1, r3
 800a082:	4413      	add	r3, r2
 800a084:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a088:	781a      	ldrb	r2, [r3, #0]
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	729a      	strb	r2, [r3, #10]
  HUB_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a08e:	7bbb      	ldrb	r3, [r7, #14]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	211a      	movs	r1, #26
 800a094:	fb01 f303 	mul.w	r3, r1, r3
 800a098:	4413      	add	r3, r2
 800a09a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a09e:	881a      	ldrh	r2, [r3, #0]
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	811a      	strh	r2, [r3, #8]
  HUB_Handle->InEp      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a0a4:	7bbb      	ldrb	r3, [r7, #14]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	211a      	movs	r1, #26
 800a0aa:	fb01 f303 	mul.w	r3, r1, r3
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a0b4:	781a      	ldrb	r2, [r3, #0]
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	709a      	strb	r2, [r3, #2]
  HUB_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	211a      	movs	r1, #26
 800a0c0:	fb01 f303 	mul.w	r3, r1, r3
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f203 3352 	addw	r3, r3, #850	; 0x352
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	819a      	strh	r2, [r3, #12]
  HUB_Handle->portNumber= 1;
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	f241 0339 	movw	r3, #4153	; 0x1039
 800a0d8:	4413      	add	r3, r2
 800a0da:	2201      	movs	r2, #1
 800a0dc:	701a      	strb	r2, [r3, #0]

	return status;
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3714      	adds	r7, #20
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd90      	pop	{r4, r7, pc}

0800a0e8 <USBH_HUB_InterfaceDeInit>:

static USBH_StatusTypeDef USBH_HUB_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a0f6:	6a1b      	ldr	r3, [r3, #32]
 800a0f8:	60bb      	str	r3, [r7, #8]


  for (int i = 0; i<4; i++)
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	60fb      	str	r3, [r7, #12]
 800a0fe:	e04a      	b.n	800a196 <USBH_HUB_InterfaceDeInit+0xae>
  {
    if(HUB_Handle->Port[i].MFC!=0) 
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a108:	fb01 f303 	mul.w	r3, r1, r3
 800a10c:	4413      	add	r3, r2
 800a10e:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d017      	beq.n	800a148 <USBH_HUB_InterfaceDeInit+0x60>
    {
      free(HUB_Handle->Port[i].MFC);
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a120:	fb01 f303 	mul.w	r3, r1, r3
 800a124:	4413      	add	r3, r2
 800a126:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f004 f839 	bl	800e1a4 <free>
      HUB_Handle->Port[i].MFC = 0;
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a13a:	fb01 f303 	mul.w	r3, r1, r3
 800a13e:	4413      	add	r3, r2
 800a140:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800a144:	2200      	movs	r2, #0
 800a146:	601a      	str	r2, [r3, #0]
    }
    if(HUB_Handle->Port[i].Product!=0) 
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a150:	fb01 f303 	mul.w	r3, r1, r3
 800a154:	4413      	add	r3, r2
 800a156:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d017      	beq.n	800a190 <USBH_HUB_InterfaceDeInit+0xa8>
    {
      free(HUB_Handle->Port[i].Product);
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a168:	fb01 f303 	mul.w	r3, r1, r3
 800a16c:	4413      	add	r3, r2
 800a16e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4618      	mov	r0, r3
 800a176:	f004 f815 	bl	800e1a4 <free>
      HUB_Handle->Port[i].Product = 0;
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a182:	fb01 f303 	mul.w	r3, r1, r3
 800a186:	4413      	add	r3, r2
 800a188:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a18c:	2200      	movs	r2, #0
 800a18e:	601a      	str	r2, [r3, #0]
  for (int i = 0; i<4; i++)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	3301      	adds	r3, #1
 800a194:	60fb      	str	r3, [r7, #12]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b03      	cmp	r3, #3
 800a19a:	ddb1      	ble.n	800a100 <USBH_HUB_InterfaceDeInit+0x18>
    }
  }

  if (phost->pActiveClass->pData[0])
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00b      	beq.n	800a1c0 <USBH_HUB_InterfaceDeInit+0xd8>
  {
    USBH_free(phost->pActiveClass->pData[0]);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a1ae:	6a1b      	ldr	r3, [r3, #32]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f003 fff7 	bl	800e1a4 <free>
    phost->pActiveClass->pData[0] = 0U;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a1bc:	2200      	movs	r2, #0
 800a1be:	621a      	str	r2, [r3, #32]
  }


  USBH_memset(HUB_Handle, 0, sizeof(HUB_HandleTypeDef));
 800a1c0:	f241 023c 	movw	r2, #4156	; 0x103c
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	68b8      	ldr	r0, [r7, #8]
 800a1c8:	f003 fff4 	bl	800e1b4 <memset>


  return USBH_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <USBH_HUB_ClassRequest>:
static USBH_StatusTypeDef USBH_HUB_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
    USBH_StatusTypeDef status = USBH_BUSY;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	73fb      	strb	r3, [r7, #15]
    HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a1ea:	6a1b      	ldr	r3, [r3, #32]
 800a1ec:	60bb      	str	r3, [r7, #8]


   switch (HUB_Handle->ctl_state)
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	78db      	ldrb	r3, [r3, #3]
 800a1f2:	2b07      	cmp	r3, #7
 800a1f4:	f200 8088 	bhi.w	800a308 <USBH_HUB_ClassRequest+0x130>
 800a1f8:	a201      	add	r2, pc, #4	; (adr r2, 800a200 <USBH_HUB_ClassRequest+0x28>)
 800a1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fe:	bf00      	nop
 800a200:	0800a221 	.word	0x0800a221
 800a204:	0800a235 	.word	0x0800a235
 800a208:	0800a25d 	.word	0x0800a25d
 800a20c:	0800a275 	.word	0x0800a275
 800a210:	0800a28d 	.word	0x0800a28d
 800a214:	0800a2a5 	.word	0x0800a2a5
 800a218:	0800a2bd 	.word	0x0800a2bd
 800a21c:	0800a2cf 	.word	0x0800a2cf
   {
    case HUB_REQ_INIT:
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800a226:	2102      	movs	r1, #2
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	4798      	blx	r3
    HUB_Handle->ctl_state = HUB_REQ_GET_DESCRIPTOR; 
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	2201      	movs	r2, #1
 800a230:	70da      	strb	r2, [r3, #3]
    break;
 800a232:	e069      	b.n	800a308 <USBH_HUB_ClassRequest+0x130>
    case HUB_REQ_GET_DESCRIPTOR:

        if (USBH_HUB_GetDescriptor(phost) == USBH_OK)
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fffd 	bl	800b234 <USBH_HUB_GetDescriptor>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d15a      	bne.n	800a2f6 <USBH_HUB_ClassRequest+0x11e>
        {
            USBH_HUB_ParseHubDescriptor(&HUB_Handle->HUB_Desc,phost->device.Data);
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	f103 0216 	add.w	r2, r3, #22
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a24c:	4619      	mov	r1, r3
 800a24e:	4610      	mov	r0, r2
 800a250:	f001 f9dc 	bl	800b60c <USBH_HUB_ParseHubDescriptor>
            HUB_Handle->ctl_state = HUB_REQ_SET_POWER_PORT1 ;
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	2202      	movs	r2, #2
 800a258:	70da      	strb	r2, [r3, #3]
        }

      break;
 800a25a:	e04c      	b.n	800a2f6 <USBH_HUB_ClassRequest+0x11e>

	  case HUB_REQ_SET_POWER_PORT1:

      if(USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_POWER,1) == USBH_OK)
 800a25c:	2201      	movs	r2, #1
 800a25e:	2108      	movs	r1, #8
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f001 f8b6 	bl	800b3d2 <USBH_HUB_SetPortFeature>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d146      	bne.n	800a2fa <USBH_HUB_ClassRequest+0x122>
      {
        HUB_Handle->ctl_state = HUB_REQ_SET_POWER_PORT2 ;
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	2203      	movs	r2, #3
 800a270:	70da      	strb	r2, [r3, #3]
      }

      break;
 800a272:	e042      	b.n	800a2fa <USBH_HUB_ClassRequest+0x122>
  
	  case HUB_REQ_SET_POWER_PORT2:

      if(USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_POWER,2) == USBH_OK)
 800a274:	2202      	movs	r2, #2
 800a276:	2108      	movs	r1, #8
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f001 f8aa 	bl	800b3d2 <USBH_HUB_SetPortFeature>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d13c      	bne.n	800a2fe <USBH_HUB_ClassRequest+0x126>
      {
        HUB_Handle->ctl_state = HUB_REQ_SET_POWER_PORT3 ;
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	2204      	movs	r2, #4
 800a288:	70da      	strb	r2, [r3, #3]
      }

      break;
 800a28a:	e038      	b.n	800a2fe <USBH_HUB_ClassRequest+0x126>

  	case HUB_REQ_SET_POWER_PORT3:

      if(USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_POWER,3) == USBH_OK)
 800a28c:	2203      	movs	r2, #3
 800a28e:	2108      	movs	r1, #8
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f001 f89e 	bl	800b3d2 <USBH_HUB_SetPortFeature>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d132      	bne.n	800a302 <USBH_HUB_ClassRequest+0x12a>
      {
        HUB_Handle->ctl_state = HUB_REQ_SET_POWER_PORT4;
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2205      	movs	r2, #5
 800a2a0:	70da      	strb	r2, [r3, #3]
      }

    break;
 800a2a2:	e02e      	b.n	800a302 <USBH_HUB_ClassRequest+0x12a>
  
  	case HUB_REQ_SET_POWER_PORT4:
      if(USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_POWER,4) == USBH_OK)
 800a2a4:	2204      	movs	r2, #4
 800a2a6:	2108      	movs	r1, #8
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 f892 	bl	800b3d2 <USBH_HUB_SetPortFeature>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d128      	bne.n	800a306 <USBH_HUB_ClassRequest+0x12e>
      {
        HUB_Handle->ctl_state = HUB_WAIT_PWRGOOD ;
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	2206      	movs	r2, #6
 800a2b8:	70da      	strb	r2, [r3, #3]
      }
      break;
 800a2ba:	e024      	b.n	800a306 <USBH_HUB_ClassRequest+0x12e>

   	case HUB_WAIT_PWRGOOD:  
      HAL_Delay(HUB_Handle->HUB_Desc.bPwrOn2PwrGood);
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	7f1b      	ldrb	r3, [r3, #28]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7f7 fdc7 	bl	8001e54 <HAL_Delay>
      HUB_Handle->ctl_state = HUB_REQ_DONE;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	2207      	movs	r2, #7
 800a2ca:	70da      	strb	r2, [r3, #3]
      break;
 800a2cc:	e01c      	b.n	800a308 <USBH_HUB_ClassRequest+0x130>

    case HUB_REQ_DONE:
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	719a      	strb	r2, [r3, #6]
      HUB_Handle->current_Itf_number = 0;
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	f241 033b 	movw	r3, #4155	; 0x103b
 800a2de:	4413      	add	r3, r2
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	701a      	strb	r2, [r3, #0]
      HUB_Handle->current_port_number = 0;
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	f241 033a 	movw	r3, #4154	; 0x103a
 800a2ea:	4413      	add	r3, r2
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	701a      	strb	r2, [r3, #0]
      status = USBH_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a2f4:	e008      	b.n	800a308 <USBH_HUB_ClassRequest+0x130>
      break;
 800a2f6:	bf00      	nop
 800a2f8:	e006      	b.n	800a308 <USBH_HUB_ClassRequest+0x130>
      break;
 800a2fa:	bf00      	nop
 800a2fc:	e004      	b.n	800a308 <USBH_HUB_ClassRequest+0x130>
      break;
 800a2fe:	bf00      	nop
 800a300:	e002      	b.n	800a308 <USBH_HUB_ClassRequest+0x130>
    break;
 800a302:	bf00      	nop
 800a304:	e000      	b.n	800a308 <USBH_HUB_ClassRequest+0x130>
      break;
 800a306:	bf00      	nop

  }

	return status;
 800a308:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop

0800a314 <USBH_HUB_Process>:

static USBH_StatusTypeDef USBH_HUB_Process(USBH_HandleTypeDef *phost)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b088      	sub	sp, #32
 800a318:	af04      	add	r7, sp, #16
 800a31a:	6078      	str	r0, [r7, #4]
    USBH_StatusTypeDef status = USBH_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	73fb      	strb	r3, [r7, #15]
    HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a326:	6a1b      	ldr	r3, [r3, #32]
 800a328:	60bb      	str	r3, [r7, #8]
    

    switch (HUB_Handle->state)
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	2b04      	cmp	r3, #4
 800a330:	f200 8102 	bhi.w	800a538 <USBH_HUB_Process+0x224>
 800a334:	a201      	add	r2, pc, #4	; (adr r2, 800a33c <USBH_HUB_Process+0x28>)
 800a336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33a:	bf00      	nop
 800a33c:	0800a351 	.word	0x0800a351
 800a340:	0800a3af 	.word	0x0800a3af
 800a344:	0800a3c9 	.word	0x0800a3c9
 800a348:	0800a47b 	.word	0x0800a47b
 800a34c:	0800a52b 	.word	0x0800a52b
    {
    case HUB_INIT:
            USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80,
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	7919      	ldrb	r1, [r3, #4]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f893 231c 	ldrb.w	r2, [r3, #796]	; 0x31c
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a360:	2040      	movs	r0, #64	; 0x40
 800a362:	9002      	str	r0, [sp, #8]
 800a364:	2000      	movs	r0, #0
 800a366:	9001      	str	r0, [sp, #4]
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	4613      	mov	r3, r2
 800a36c:	2280      	movs	r2, #128	; 0x80
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f003 fa4c 	bl	800d80c <USBH_OpenPipe>
            phost->device.address, phost->device.speed,
            USBH_EP_CONTROL, (uint16_t)0x40);

            USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	7959      	ldrb	r1, [r3, #5]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 231c 	ldrb.w	r2, [r3, #796]	; 0x31c
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a384:	2040      	movs	r0, #64	; 0x40
 800a386:	9002      	str	r0, [sp, #8]
 800a388:	2000      	movs	r0, #0
 800a38a:	9001      	str	r0, [sp, #4]
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	4613      	mov	r3, r2
 800a390:	2200      	movs	r2, #0
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f003 fa3a 	bl	800d80c <USBH_OpenPipe>
            phost->device.address, phost->device.speed,
            USBH_EP_CONTROL, (uint16_t)0x40);

            phost->Control.pipe_size = 0x40;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2240      	movs	r2, #64	; 0x40
 800a39c:	719a      	strb	r2, [r3, #6]
            phost->Control.length = HUB_Handle->length;
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	891a      	ldrh	r2, [r3, #8]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	819a      	strh	r2, [r3, #12]

      HUB_Handle->state = HUB_UPDATE_PORTS_STATUS;
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	701a      	strb	r2, [r3, #0]
      break;
 800a3ac:	e0cc      	b.n	800a548 <USBH_HUB_Process+0x234>

    case HUB_UPDATE_PORTS_STATUS:
          status = USBH_HUB_UpdatePortsStatus(phost);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f91a 	bl	800a5e8 <USBH_HUB_UpdatePortsStatus>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	73fb      	strb	r3, [r7, #15]
          if (status == USBH_OK)
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f040 80bf 	bne.w	800a53e <USBH_HUB_Process+0x22a>
          {
            HUB_Handle->state = HUB_HANDLE_DISCONNECTED_PORTS;
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	701a      	strb	r2, [r3, #0]
          }


      break;
 800a3c6:	e0ba      	b.n	800a53e <USBH_HUB_Process+0x22a>
    
    case HUB_HANDLE_DISCONNECTED_PORTS:

      if (HUB_Handle->Port[HUB_Handle->portNumber-1].Disconnected)
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	f241 0339 	movw	r3, #4153	; 0x1039
 800a3ce:	4413      	add	r3, r2
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a3da:	fb01 f303 	mul.w	r3, r1, r3
 800a3de:	4413      	add	r3, r2
 800a3e0:	f203 132d 	addw	r3, r3, #301	; 0x12d
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d028      	beq.n	800a43c <USBH_HUB_Process+0x128>
      {
        // Handle Disconnection
        //DeInit HID, Free Pipes and clear Handles.
        status = USBH_HUB_DisconnectDevice(phost,&HUB_Handle->Port[HUB_Handle->portNumber-1]);
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	f241 0339 	movw	r3, #4153	; 0x1039
 800a3f0:	4413      	add	r3, r2
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800a3fa:	fb02 f303 	mul.w	r3, r2, r3
 800a3fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	4413      	add	r3, r2
 800a406:	4619      	mov	r1, r3
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 f915 	bl	800a638 <USBH_HUB_DisconnectDevice>
 800a40e:	4603      	mov	r3, r0
 800a410:	73fb      	strb	r3, [r7, #15]
        if (status == USBH_OK)
 800a412:	7bfb      	ldrb	r3, [r7, #15]
 800a414:	2b00      	cmp	r3, #0
 800a416:	f040 8094 	bne.w	800a542 <USBH_HUB_Process+0x22e>
        {
          HUB_Handle->Port[HUB_Handle->portNumber-1].Disconnected = 0;
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	f241 0339 	movw	r3, #4153	; 0x1039
 800a420:	4413      	add	r3, r2
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	3b01      	subs	r3, #1
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a42c:	fb01 f303 	mul.w	r3, r1, r3
 800a430:	4413      	add	r3, r2
 800a432:	f203 132d 	addw	r3, r3, #301	; 0x12d
 800a436:	2200      	movs	r2, #0
 800a438:	701a      	strb	r2, [r3, #0]
        {
            HUB_Handle->portNumber = 1;
            HUB_Handle->state = HUB_HANDLE_CONNECTED_PORTS;
        }
      }
      break;
 800a43a:	e082      	b.n	800a542 <USBH_HUB_Process+0x22e>
        if (HUB_Handle->portNumber<4)
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	f241 0339 	movw	r3, #4153	; 0x1039
 800a442:	4413      	add	r3, r2
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	2b03      	cmp	r3, #3
 800a448:	d80d      	bhi.n	800a466 <USBH_HUB_Process+0x152>
        HUB_Handle->portNumber++;
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	f241 0339 	movw	r3, #4153	; 0x1039
 800a450:	4413      	add	r3, r2
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	3301      	adds	r3, #1
 800a456:	b2d9      	uxtb	r1, r3
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	f241 0339 	movw	r3, #4153	; 0x1039
 800a45e:	4413      	add	r3, r2
 800a460:	460a      	mov	r2, r1
 800a462:	701a      	strb	r2, [r3, #0]
      break;
 800a464:	e06d      	b.n	800a542 <USBH_HUB_Process+0x22e>
            HUB_Handle->portNumber = 1;
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	f241 0339 	movw	r3, #4153	; 0x1039
 800a46c:	4413      	add	r3, r2
 800a46e:	2201      	movs	r2, #1
 800a470:	701a      	strb	r2, [r3, #0]
            HUB_Handle->state = HUB_HANDLE_CONNECTED_PORTS;
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	2203      	movs	r2, #3
 800a476:	701a      	strb	r2, [r3, #0]
      break;
 800a478:	e063      	b.n	800a542 <USBH_HUB_Process+0x22e>

    case HUB_HANDLE_CONNECTED_PORTS:

      if (HUB_Handle->Port[HUB_Handle->portNumber-1].Connected)
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	f241 0339 	movw	r3, #4153	; 0x1039
 800a480:	4413      	add	r3, r2
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	3b01      	subs	r3, #1
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a48c:	fb01 f303 	mul.w	r3, r1, r3
 800a490:	4413      	add	r3, r2
 800a492:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d027      	beq.n	800a4ec <USBH_HUB_Process+0x1d8>
      {
        // Handle Connection / Enumeration
        status = USBH_HUB_Device_Enum(phost,&HUB_Handle->Port[HUB_Handle->portNumber-1]);
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	f241 0339 	movw	r3, #4153	; 0x1039
 800a4a2:	4413      	add	r3, r2
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800a4ac:	fb02 f303 	mul.w	r3, r2, r3
 800a4b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f001 f926 	bl	800b70c <USBH_HUB_Device_Enum>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	73fb      	strb	r3, [r7, #15]
        if (status==USBH_OK)
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d13d      	bne.n	800a546 <USBH_HUB_Process+0x232>
        {
          HUB_Handle->Port[HUB_Handle->portNumber-1].Connected = 0;
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	f241 0339 	movw	r3, #4153	; 0x1039
 800a4d0:	4413      	add	r3, r2
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a4dc:	fb01 f303 	mul.w	r3, r1, r3
 800a4e0:	4413      	add	r3, r2
 800a4e2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	701a      	strb	r2, [r3, #0]
        {
            HUB_Handle->portNumber = 1;
            HUB_Handle->state = HUB_PROCESS_PORTS;
        }
      }
    break;
 800a4ea:	e02c      	b.n	800a546 <USBH_HUB_Process+0x232>
        if (HUB_Handle->portNumber<4)
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	f241 0339 	movw	r3, #4153	; 0x1039
 800a4f2:	4413      	add	r3, r2
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	2b03      	cmp	r3, #3
 800a4f8:	d80d      	bhi.n	800a516 <USBH_HUB_Process+0x202>
          HUB_Handle->portNumber++;
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	f241 0339 	movw	r3, #4153	; 0x1039
 800a500:	4413      	add	r3, r2
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	3301      	adds	r3, #1
 800a506:	b2d9      	uxtb	r1, r3
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	f241 0339 	movw	r3, #4153	; 0x1039
 800a50e:	4413      	add	r3, r2
 800a510:	460a      	mov	r2, r1
 800a512:	701a      	strb	r2, [r3, #0]
    break;
 800a514:	e017      	b.n	800a546 <USBH_HUB_Process+0x232>
            HUB_Handle->portNumber = 1;
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	f241 0339 	movw	r3, #4153	; 0x1039
 800a51c:	4413      	add	r3, r2
 800a51e:	2201      	movs	r2, #1
 800a520:	701a      	strb	r2, [r3, #0]
            HUB_Handle->state = HUB_PROCESS_PORTS;
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	2204      	movs	r2, #4
 800a526:	701a      	strb	r2, [r3, #0]
    break;
 800a528:	e00d      	b.n	800a546 <USBH_HUB_Process+0x232>


    case HUB_PROCESS_PORTS:
      //handle all ports and interfaces at once.
      USBH_HUB_Device_Process(phost);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f001 fdd4 	bl	800c0d8 <USBH_HUB_Device_Process>



      HUB_Handle->state = HUB_INIT;
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2200      	movs	r2, #0
 800a534:	701a      	strb	r2, [r3, #0]
      break;
 800a536:	e007      	b.n	800a548 <USBH_HUB_Process+0x234>

    default:
        status = USBH_FAIL;
 800a538:	2302      	movs	r3, #2
 800a53a:	73fb      	strb	r3, [r7, #15]
      break;
 800a53c:	e004      	b.n	800a548 <USBH_HUB_Process+0x234>
      break;
 800a53e:	bf00      	nop
 800a540:	e002      	b.n	800a548 <USBH_HUB_Process+0x234>
      break;
 800a542:	bf00      	nop
 800a544:	e000      	b.n	800a548 <USBH_HUB_Process+0x234>
    break;
 800a546:	bf00      	nop
    } 
    


 	return status;
 800a548:	7bfb      	ldrb	r3, [r7, #15]

   }
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop

0800a554 <USBH_HUB_SOFProcess>:

static USBH_StatusTypeDef USBH_HUB_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b088      	sub	sp, #32
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
    USBH_StatusTypeDef status = USBH_OK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	77fb      	strb	r3, [r7, #31]
    HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	61bb      	str	r3, [r7, #24]
    uint8_t currentPort = HUB_Handle->current_port_number;
 800a56a:	69ba      	ldr	r2, [r7, #24]
 800a56c:	f241 033a 	movw	r3, #4154	; 0x103a
 800a570:	4413      	add	r3, r2
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	75fb      	strb	r3, [r7, #23]
    uint8_t currentItf  = HUB_Handle->current_Itf_number;
 800a576:	69ba      	ldr	r2, [r7, #24]
 800a578:	f241 033b 	movw	r3, #4155	; 0x103b
 800a57c:	4413      	add	r3, r2
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	75bb      	strb	r3, [r7, #22]

    HUB_Port_HandleTypeDef *port = (HUB_Port_HandleTypeDef *) &HUB_Handle->Port[currentPort];
 800a582:	7dfb      	ldrb	r3, [r7, #23]
 800a584:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800a588:	fb02 f303 	mul.w	r3, r2, r3
 800a58c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a590:	69ba      	ldr	r2, [r7, #24]
 800a592:	4413      	add	r3, r2
 800a594:	613b      	str	r3, [r7, #16]
    if (port->EnumState != HUB_ENUM_READY) return status;
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	799b      	ldrb	r3, [r3, #6]
 800a59a:	2b16      	cmp	r3, #22
 800a59c:	d001      	beq.n	800a5a2 <USBH_HUB_SOFProcess+0x4e>
 800a59e:	7ffb      	ldrb	r3, [r7, #31]
 800a5a0:	e01e      	b.n	800a5e0 <USBH_HUB_SOFProcess+0x8c>

    HUB_Port_Interface_HandleTypeDef *Itf = (HUB_Port_Interface_HandleTypeDef *) &port->Interface[currentItf];
 800a5a2:	7dbb      	ldrb	r3, [r7, #22]
 800a5a4:	226c      	movs	r2, #108	; 0x6c
 800a5a6:	fb02 f303 	mul.w	r3, r2, r3
 800a5aa:	33e0      	adds	r3, #224	; 0xe0
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	60fb      	str	r3, [r7, #12]

    if (Itf->state == HUB_DEVICE_POLL)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	791b      	ldrb	r3, [r3, #4]
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d110      	bne.n	800a5de <USBH_HUB_SOFProcess+0x8a>
    {
        if(phost->Timer - Itf->timer > Itf->poll)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	8952      	ldrh	r2, [r2, #10]
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d906      	bls.n	800a5de <USBH_HUB_SOFProcess+0x8a>
        {
          Itf->state = HUB_DEVICE_GET_DATA;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	711a      	strb	r2, [r3, #4]


          USBH_Next_Interface_Port(phost,port);
 800a5d6:	6939      	ldr	r1, [r7, #16]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f867 	bl	800a6ac <USBH_Next_Interface_Port>


        }
    }

	  return status;
 800a5de:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3720      	adds	r7, #32
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <USBH_HUB_UpdatePortsStatus>:

static USBH_StatusTypeDef USBH_HUB_UpdatePortsStatus(USBH_HandleTypeDef *phost)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  static uint8_t PortNumber = 1;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	73fb      	strb	r3, [r7, #15]

    status = USBH_HUB_GetPortStatus(phost,PortNumber);
 800a5f4:	4b0f      	ldr	r3, [pc, #60]	; (800a634 <USBH_HUB_UpdatePortsStatus+0x4c>)
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fe43 	bl	800b286 <USBH_HUB_GetPortStatus>
 800a600:	4603      	mov	r3, r0
 800a602:	73fb      	strb	r3, [r7, #15]
    if ( status == USBH_OK)
 800a604:	7bfb      	ldrb	r3, [r7, #15]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10f      	bne.n	800a62a <USBH_HUB_UpdatePortsStatus+0x42>
    {
      if (PortNumber<4) 
 800a60a:	4b0a      	ldr	r3, [pc, #40]	; (800a634 <USBH_HUB_UpdatePortsStatus+0x4c>)
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d808      	bhi.n	800a624 <USBH_HUB_UpdatePortsStatus+0x3c>
      {
        PortNumber++;
 800a612:	4b08      	ldr	r3, [pc, #32]	; (800a634 <USBH_HUB_UpdatePortsStatus+0x4c>)
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	3301      	adds	r3, #1
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	4b06      	ldr	r3, [pc, #24]	; (800a634 <USBH_HUB_UpdatePortsStatus+0x4c>)
 800a61c:	701a      	strb	r2, [r3, #0]
        status = USBH_BUSY;
 800a61e:	2301      	movs	r3, #1
 800a620:	73fb      	strb	r3, [r7, #15]
 800a622:	e002      	b.n	800a62a <USBH_HUB_UpdatePortsStatus+0x42>
      }  
      else
      {
        PortNumber = 1;
 800a624:	4b03      	ldr	r3, [pc, #12]	; (800a634 <USBH_HUB_UpdatePortsStatus+0x4c>)
 800a626:	2201      	movs	r2, #1
 800a628:	701a      	strb	r2, [r3, #0]
      } 
      
    }
	return status;
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	20000088 	.word	0x20000088

0800a638 <USBH_HUB_DisconnectDevice>:



static USBH_StatusTypeDef USBH_HUB_DisconnectDevice(USBH_HandleTypeDef *phost, HUB_Port_HandleTypeDef *Port)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
    USBH_StatusTypeDef status = USBH_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	73fb      	strb	r3, [r7, #15]

      free(Port->MFC);
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f003 fdaa 	bl	800e1a4 <free>
      Port->MFC = 0;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	2200      	movs	r2, #0
 800a654:	60da      	str	r2, [r3, #12]
      free(Port->Product);
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	4618      	mov	r0, r3
 800a65c:	f003 fda2 	bl	800e1a4 <free>
      Port->Product = 0;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	2200      	movs	r2, #0
 800a664:	611a      	str	r2, [r3, #16]
      if (Port->Interface[0].Pipe_in != 0 ) USBH_FreePipe(phost, Port->Interface[0].Pipe_in);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d006      	beq.n	800a67e <USBH_HUB_DisconnectDevice+0x46>
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 800a676:	4619      	mov	r1, r3
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f003 f916 	bl	800d8aa <USBH_FreePipe>
      if (Port->Interface[1].Pipe_in != 0 ) USBH_FreePipe(phost, Port->Interface[0].Pipe_in);
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 800a684:	2b00      	cmp	r3, #0
 800a686:	d006      	beq.n	800a696 <USBH_HUB_DisconnectDevice+0x5e>
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f003 f90a 	bl	800d8aa <USBH_FreePipe>

      USBH_memset(Port, 0, sizeof(HUB_Port_HandleTypeDef));
 800a696:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800a69a:	2100      	movs	r1, #0
 800a69c:	6838      	ldr	r0, [r7, #0]
 800a69e:	f003 fd89 	bl	800e1b4 <memset>
      
  return status;
 800a6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <USBH_Next_Interface_Port>:

void USBH_Next_Interface_Port(USBH_HandleTypeDef *phost,HUB_Port_HandleTypeDef *port)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
    HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	60fb      	str	r3, [r7, #12]

          //CHECK IF NEXT INTERFACE NEED TO BE HANDLED
          if(port->CfgDesc.bNumInterfaces>1)
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d92f      	bls.n	800a72a <USBH_Next_Interface_Port+0x7e>
          {
             //NEXT INTERFACE
              if(HUB_Handle->current_Itf_number == 0)
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	f241 033b 	movw	r3, #4155	; 0x103b
 800a6d0:	4413      	add	r3, r2
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d106      	bne.n	800a6e6 <USBH_Next_Interface_Port+0x3a>
              {
                HUB_Handle->current_Itf_number = 1;
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	f241 033b 	movw	r3, #4155	; 0x103b
 800a6de:	4413      	add	r3, r2
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	701a      	strb	r2, [r3, #0]
                else
                {
                  HUB_Handle->current_port_number++;
                }
          }
}
 800a6e4:	e03c      	b.n	800a760 <USBH_Next_Interface_Port+0xb4>
                HUB_Handle->current_Itf_number = 0;
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	f241 033b 	movw	r3, #4155	; 0x103b
 800a6ec:	4413      	add	r3, r2
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	701a      	strb	r2, [r3, #0]
                if(HUB_Handle->current_port_number ==3)
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	f241 033a 	movw	r3, #4154	; 0x103a
 800a6f8:	4413      	add	r3, r2
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	2b03      	cmp	r3, #3
 800a6fe:	d106      	bne.n	800a70e <USBH_Next_Interface_Port+0x62>
                  HUB_Handle->current_port_number = 0;
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	f241 033a 	movw	r3, #4154	; 0x103a
 800a706:	4413      	add	r3, r2
 800a708:	2200      	movs	r2, #0
 800a70a:	701a      	strb	r2, [r3, #0]
}
 800a70c:	e028      	b.n	800a760 <USBH_Next_Interface_Port+0xb4>
                  HUB_Handle->current_port_number++;
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	f241 033a 	movw	r3, #4154	; 0x103a
 800a714:	4413      	add	r3, r2
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	3301      	adds	r3, #1
 800a71a:	b2d9      	uxtb	r1, r3
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	f241 033a 	movw	r3, #4154	; 0x103a
 800a722:	4413      	add	r3, r2
 800a724:	460a      	mov	r2, r1
 800a726:	701a      	strb	r2, [r3, #0]
}
 800a728:	e01a      	b.n	800a760 <USBH_Next_Interface_Port+0xb4>
                if(HUB_Handle->current_port_number ==3)
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	f241 033a 	movw	r3, #4154	; 0x103a
 800a730:	4413      	add	r3, r2
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	2b03      	cmp	r3, #3
 800a736:	d106      	bne.n	800a746 <USBH_Next_Interface_Port+0x9a>
                  HUB_Handle->current_port_number = 0;
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	f241 033a 	movw	r3, #4154	; 0x103a
 800a73e:	4413      	add	r3, r2
 800a740:	2200      	movs	r2, #0
 800a742:	701a      	strb	r2, [r3, #0]
}
 800a744:	e00c      	b.n	800a760 <USBH_Next_Interface_Port+0xb4>
                  HUB_Handle->current_port_number++;
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	f241 033a 	movw	r3, #4154	; 0x103a
 800a74c:	4413      	add	r3, r2
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	3301      	adds	r3, #1
 800a752:	b2d9      	uxtb	r1, r3
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	f241 033a 	movw	r3, #4154	; 0x103a
 800a75a:	4413      	add	r3, r2
 800a75c:	460a      	mov	r2, r1
 800a75e:	701a      	strb	r2, [r3, #0]
}
 800a760:	bf00      	nop
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <USBH_HUB_GamepadInit>:
HID_gamepad_Info_TypeDef    hub_gamepad_info;

static USBH_StatusTypeDef USBH_HUB_GamepadDecode(HUB_Port_Interface_HandleTypeDef *Itf);

USBH_StatusTypeDef USBH_HUB_GamepadInit(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  uint8_t reportSize = 0U;
 800a774:	2300      	movs	r3, #0
 800a776:	73fb      	strb	r3, [r7, #15]
  reportSize = Itf->HIDDesc->RptDesc.report_size;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a77c:	7b1b      	ldrb	r3, [r3, #12]
 800a77e:	73fb      	strb	r3, [r7, #15]



  Itf->pFIFObuf = (uint8_t*) malloc (HID_QUEUE_SIZE * reportSize); 
 800a780:	7bfa      	ldrb	r2, [r7, #15]
 800a782:	4613      	mov	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4413      	add	r3, r2
 800a788:	005b      	lsls	r3, r3, #1
 800a78a:	4618      	mov	r0, r3
 800a78c:	f003 fd02 	bl	800e194 <malloc>
 800a790:	4603      	mov	r3, r0
 800a792:	461a      	mov	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	665a      	str	r2, [r3, #100]	; 0x64
  hub_gamepad_report_data = Itf->pData;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3318      	adds	r3, #24
 800a79c:	4a0c      	ldr	r2, [pc, #48]	; (800a7d0 <USBH_HUB_GamepadInit+0x64>)
 800a79e:	6013      	str	r3, [r2, #0]
  USBH_HID_FifoInit(&Itf->fifo, Itf->pFIFObuf, HID_QUEUE_SIZE * reportSize);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	0092      	lsls	r2, r2, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	005b      	lsls	r3, r3, #1
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	f7fe f967 	bl	8008a8c <USBH_HID_FifoInit>

	Itf->DeviceType = HUB_GAMEPAD;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2203      	movs	r2, #3
 800a7c2:	705a      	strb	r2, [r3, #1]

  return USBH_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20000118 	.word	0x20000118

0800a7d4 <USBH_HUB_GetGamepadInfo>:


HID_gamepad_Info_TypeDef *USBH_HUB_GetGamepadInfo(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
	//refresh value of joymap and return value
	if(USBH_HUB_GamepadDecode(Itf)== USBH_OK)
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f80d 	bl	800a7fc <USBH_HUB_GamepadDecode>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d101      	bne.n	800a7ec <USBH_HUB_GetGamepadInfo+0x18>
	{
		return &hub_gamepad_info;
 800a7e8:	4b03      	ldr	r3, [pc, #12]	; (800a7f8 <USBH_HUB_GetGamepadInfo+0x24>)
 800a7ea:	e000      	b.n	800a7ee <USBH_HUB_GetGamepadInfo+0x1a>
	}
	else
	{
		return NULL;
 800a7ec:	2300      	movs	r3, #0
	}
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20000550 	.word	0x20000550

0800a7fc <USBH_HUB_GamepadDecode>:



static USBH_StatusTypeDef USBH_HUB_GamepadDecode(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7fe:	b097      	sub	sp, #92	; 0x5c
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]

	  if(Itf->length == 0U)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	88db      	ldrh	r3, [r3, #6]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d101      	bne.n	800a810 <USBH_HUB_GamepadDecode+0x14>
	  {
	    return USBH_FAIL;
 800a80c:	2302      	movs	r3, #2
 800a80e:	e27f      	b.n	800ad10 <USBH_HUB_GamepadDecode+0x514>
	  }

	  if(USBH_HID_FifoRead(&Itf->fifo, hub_gamepad_report_data, Itf->length) ==  Itf->length)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800a816:	4bd8      	ldr	r3, [pc, #864]	; (800ab78 <USBH_HUB_GamepadDecode+0x37c>)
 800a818:	6819      	ldr	r1, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	88db      	ldrh	r3, [r3, #6]
 800a81e:	461a      	mov	r2, r3
 800a820:	f7fe f950 	bl	8008ac4 <USBH_HID_FifoRead>
 800a824:	4603      	mov	r3, r0
 800a826:	461a      	mov	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	88db      	ldrh	r3, [r3, #6]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	f040 826e 	bne.w	800ad0e <USBH_HUB_GamepadDecode+0x512>
	    {


		uint8_t jmap = 0;
 800a832:	2300      	movs	r3, #0
 800a834:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		uint8_t btn = 0;
 800a838:	2300      	movs	r3, #0
 800a83a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		uint8_t btn_extra = 0;
 800a83e:	2300      	movs	r3, #0
 800a840:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		int16_t a[2];
		uint8_t i;

		hid_report_t conf = Itf->HIDDesc->RptDesc;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a848:	f103 040a 	add.w	r4, r3, #10
 800a84c:	f107 0608 	add.w	r6, r7, #8
 800a850:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800a854:	4635      	mov	r5, r6
 800a856:	4623      	mov	r3, r4
 800a858:	6818      	ldr	r0, [r3, #0]
 800a85a:	6859      	ldr	r1, [r3, #4]
 800a85c:	689a      	ldr	r2, [r3, #8]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a862:	3410      	adds	r4, #16
 800a864:	3610      	adds	r6, #16
 800a866:	4564      	cmp	r4, ip
 800a868:	d1f4      	bne.n	800a854 <USBH_HUB_GamepadDecode+0x58>
 800a86a:	4633      	mov	r3, r6
 800a86c:	4622      	mov	r2, r4
 800a86e:	6810      	ldr	r0, [r2, #0]
 800a870:	6018      	str	r0, [r3, #0]
 800a872:	8892      	ldrh	r2, [r2, #4]
 800a874:	809a      	strh	r2, [r3, #4]

		// skip report id if present
		uint8_t *p = hub_gamepad_report_data+(conf.report_id?1:0);
 800a876:	4bc0      	ldr	r3, [pc, #768]	; (800ab78 <USBH_HUB_GamepadDecode+0x37c>)
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	7a7b      	ldrb	r3, [r7, #9]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d001      	beq.n	800a884 <USBH_HUB_GamepadDecode+0x88>
 800a880:	2301      	movs	r3, #1
 800a882:	e000      	b.n	800a886 <USBH_HUB_GamepadDecode+0x8a>
 800a884:	2300      	movs	r3, #0
 800a886:	4413      	add	r3, r2
 800a888:	653b      	str	r3, [r7, #80]	; 0x50


		//process axis
		// two axes ...
				for(i=0;i<2;i++) {
 800a88a:	2300      	movs	r3, #0
 800a88c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a890:	e03d      	b.n	800a90e <USBH_HUB_GamepadDecode+0x112>
					// if logical minimum is > logical maximum then logical minimum
					// is signed. This means that the value itself is also signed
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 800a892:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a896:	3301      	adds	r3, #1
 800a898:	00db      	lsls	r3, r3, #3
 800a89a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a89e:	4413      	add	r3, r2
 800a8a0:	f833 2c4c 	ldrh.w	r2, [r3, #-76]
					conf.joystick_mouse.axis[i].logical.max;
 800a8a4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	00db      	lsls	r3, r3, #3
 800a8ac:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a8b0:	440b      	add	r3, r1
 800a8b2:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	bf8c      	ite	hi
 800a8ba:	2301      	movhi	r3, #1
 800a8bc:	2300      	movls	r3, #0
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	647b      	str	r3, [r7, #68]	; 0x44
					a[i] = collect_bits(p, conf.joystick_mouse.axis[i].offset,
 800a8c2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	00db      	lsls	r3, r3, #3
 800a8ca:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a8ce:	4413      	add	r3, r2
 800a8d0:	f833 1c50 	ldrh.w	r1, [r3, #-80]
 800a8d4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a8d8:	3301      	adds	r3, #1
 800a8da:	00db      	lsls	r3, r3, #3
 800a8dc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a8e0:	4413      	add	r3, r2
 800a8e2:	f813 2c4e 	ldrb.w	r2, [r3, #-78]
 800a8e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8e8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a8ea:	f7fe fd87 	bl	80093fc <collect_bits>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a8f6:	b212      	sxth	r2, r2
 800a8f8:	005b      	lsls	r3, r3, #1
 800a8fa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a8fe:	440b      	add	r3, r1
 800a900:	f823 2c18 	strh.w	r2, [r3, #-24]
				for(i=0;i<2;i++) {
 800a904:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a908:	3301      	adds	r3, #1
 800a90a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a90e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a912:	2b01      	cmp	r3, #1
 800a914:	d9bd      	bls.n	800a892 <USBH_HUB_GamepadDecode+0x96>
								conf.joystick_mouse.axis[i].size, is_signed);
				}

		//process 4 first buttons
		for(i=0;i<4;i++)
 800a916:	2300      	movs	r3, #0
 800a918:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a91c:	e02a      	b.n	800a974 <USBH_HUB_GamepadDecode+0x178>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a91e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a922:	330c      	adds	r3, #12
 800a924:	005b      	lsls	r3, r3, #1
 800a926:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a92a:	4413      	add	r3, r2
 800a92c:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800a930:	461a      	mov	r2, r3
 800a932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a934:	4413      	add	r3, r2
 800a936:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800a938:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a93c:	330c      	adds	r3, #12
 800a93e:	005b      	lsls	r3, r3, #1
 800a940:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a944:	440b      	add	r3, r1
 800a946:	f813 3c4f 	ldrb.w	r3, [r3, #-79]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a94a:	4013      	ands	r3, r2
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00b      	beq.n	800a96a <USBH_HUB_GamepadDecode+0x16e>
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800a952:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a956:	2201      	movs	r2, #1
 800a958:	fa02 f303 	lsl.w	r3, r2, r3
 800a95c:	b25a      	sxtb	r2, r3
 800a95e:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800a962:	4313      	orrs	r3, r2
 800a964:	b25b      	sxtb	r3, r3
 800a966:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		for(i=0;i<4;i++)
 800a96a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a96e:	3301      	adds	r3, #1
 800a970:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a974:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a978:	2b03      	cmp	r3, #3
 800a97a:	d9d0      	bls.n	800a91e <USBH_HUB_GamepadDecode+0x122>

		// ... and the eight extra buttons
		for(i=4;i<12;i++)
 800a97c:	2304      	movs	r3, #4
 800a97e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a982:	e02b      	b.n	800a9dc <USBH_HUB_GamepadDecode+0x1e0>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a984:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a988:	330c      	adds	r3, #12
 800a98a:	005b      	lsls	r3, r3, #1
 800a98c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a990:	4413      	add	r3, r2
 800a992:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800a996:	461a      	mov	r2, r3
 800a998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a99a:	4413      	add	r3, r2
 800a99c:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800a99e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a9a2:	330c      	adds	r3, #12
 800a9a4:	005b      	lsls	r3, r3, #1
 800a9a6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a9aa:	440b      	add	r3, r1
 800a9ac:	f813 3c4f 	ldrb.w	r3, [r3, #-79]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00c      	beq.n	800a9d2 <USBH_HUB_GamepadDecode+0x1d6>
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800a9b8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a9bc:	3b04      	subs	r3, #4
 800a9be:	2201      	movs	r2, #1
 800a9c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9c4:	b25a      	sxtb	r2, r3
 800a9c6:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	b25b      	sxtb	r3, r3
 800a9ce:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		for(i=4;i<12;i++)
 800a9d2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a9dc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a9e0:	2b0b      	cmp	r3, #11
 800a9e2:	d9cf      	bls.n	800a984 <USBH_HUB_GamepadDecode+0x188>



	for(i=0;i<2;i++) {
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a9ea:	e14f      	b.n	800ac8c <USBH_HUB_GamepadDecode+0x490>

		int hrange = (conf.joystick_mouse.axis[i].logical.max - abs(conf.joystick_mouse.axis[i].logical.min)) / 2;
 800a9ec:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a9f8:	4413      	add	r3, r2
 800a9fa:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800aa04:	3301      	adds	r3, #1
 800aa06:	00db      	lsls	r3, r3, #3
 800aa08:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800aa0c:	440b      	add	r3, r1
 800aa0e:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	da00      	bge.n	800aa1a <USBH_HUB_GamepadDecode+0x21e>
 800aa18:	3301      	adds	r3, #1
 800aa1a:	105b      	asrs	r3, r3, #1
 800aa1c:	64fb      	str	r3, [r7, #76]	; 0x4c
		int dead = hrange/63;
 800aa1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa20:	4a56      	ldr	r2, [pc, #344]	; (800ab7c <USBH_HUB_GamepadDecode+0x380>)
 800aa22:	fb82 1203 	smull	r1, r2, r2, r3
 800aa26:	441a      	add	r2, r3
 800aa28:	1152      	asrs	r2, r2, #5
 800aa2a:	17db      	asrs	r3, r3, #31
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	64bb      	str	r3, [r7, #72]	; 0x48

		if (a[i] < conf.joystick_mouse.axis[i].logical.min) a[i] = conf.joystick_mouse.axis[i].logical.min;
 800aa30:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800aa34:	005b      	lsls	r3, r3, #1
 800aa36:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800aa40:	461a      	mov	r2, r3
 800aa42:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800aa46:	3301      	adds	r3, #1
 800aa48:	00db      	lsls	r3, r3, #3
 800aa4a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800aa4e:	440b      	add	r3, r1
 800aa50:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	da12      	bge.n	800aa7e <USBH_HUB_GamepadDecode+0x282>
 800aa58:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	00db      	lsls	r3, r3, #3
 800aa60:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800aa64:	4413      	add	r3, r2
 800aa66:	f833 2c4c 	ldrh.w	r2, [r3, #-76]
 800aa6a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800aa6e:	b212      	sxth	r2, r2
 800aa70:	005b      	lsls	r3, r3, #1
 800aa72:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800aa76:	440b      	add	r3, r1
 800aa78:	f823 2c18 	strh.w	r2, [r3, #-24]
 800aa7c:	e025      	b.n	800aaca <USBH_HUB_GamepadDecode+0x2ce>
		else if (a[i] > conf.joystick_mouse.axis[i].logical.max) a[i] = conf.joystick_mouse.axis[i].logical.max;
 800aa7e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800aa82:	005b      	lsls	r3, r3, #1
 800aa84:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800aa88:	4413      	add	r3, r2
 800aa8a:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800aa94:	3301      	adds	r3, #1
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800aa9c:	440b      	add	r3, r1
 800aa9e:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	dd11      	ble.n	800aaca <USBH_HUB_GamepadDecode+0x2ce>
 800aaa6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800aaaa:	3301      	adds	r3, #1
 800aaac:	00db      	lsls	r3, r3, #3
 800aaae:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800aab2:	4413      	add	r3, r2
 800aab4:	f833 2c4a 	ldrh.w	r2, [r3, #-74]
 800aab8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800aabc:	b212      	sxth	r2, r2
 800aabe:	005b      	lsls	r3, r3, #1
 800aac0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800aac4:	440b      	add	r3, r1
 800aac6:	f823 2c18 	strh.w	r2, [r3, #-24]

		a[i] = a[i] - (abs(conf.joystick_mouse.axis[i].logical.min) + conf.joystick_mouse.axis[i].logical.max) / 2;
 800aaca:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800aace:	005b      	lsls	r3, r3, #1
 800aad0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800aad4:	4413      	add	r3, r2
 800aad6:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800aada:	b29a      	uxth	r2, r3
 800aadc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800aae0:	3301      	adds	r3, #1
 800aae2:	00db      	lsls	r3, r3, #3
 800aae4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800aae8:	440b      	add	r3, r1
 800aaea:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	00db      	lsls	r3, r3, #3
 800aaf8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800aafc:	4403      	add	r3, r0
 800aafe:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 800ab02:	440b      	add	r3, r1
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	da00      	bge.n	800ab0a <USBH_HUB_GamepadDecode+0x30e>
 800ab08:	3301      	adds	r3, #1
 800ab0a:	105b      	asrs	r3, r3, #1
 800ab0c:	425b      	negs	r3, r3
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	4413      	add	r3, r2
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ab18:	b212      	sxth	r2, r2
 800ab1a:	005b      	lsls	r3, r3, #1
 800ab1c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ab20:	440b      	add	r3, r1
 800ab22:	f823 2c18 	strh.w	r2, [r3, #-24]

		hrange -= dead;
 800ab26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (a[i] < -dead) a[i] += dead;
 800ab2e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ab38:	4413      	add	r3, r2
 800ab3a:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab42:	425b      	negs	r3, r3
 800ab44:	429a      	cmp	r2, r3
 800ab46:	da1b      	bge.n	800ab80 <USBH_HUB_GamepadDecode+0x384>
 800ab48:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ab52:	4413      	add	r3, r2
 800ab54:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	4413      	add	r3, r2
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ab66:	b212      	sxth	r2, r2
 800ab68:	005b      	lsls	r3, r3, #1
 800ab6a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ab6e:	440b      	add	r3, r1
 800ab70:	f823 2c18 	strh.w	r2, [r3, #-24]
 800ab74:	e030      	b.n	800abd8 <USBH_HUB_GamepadDecode+0x3dc>
 800ab76:	bf00      	nop
 800ab78:	20000118 	.word	0x20000118
 800ab7c:	82082083 	.word	0x82082083
		else if (a[i] > dead) a[i] -= dead;
 800ab80:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800ab90:	461a      	mov	r2, r3
 800ab92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab94:	4293      	cmp	r3, r2
 800ab96:	da16      	bge.n	800abc6 <USBH_HUB_GamepadDecode+0x3ca>
 800ab98:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800aba2:	4413      	add	r3, r2
 800aba4:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abac:	b29b      	uxth	r3, r3
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800abb6:	b212      	sxth	r2, r2
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800abbe:	440b      	add	r3, r1
 800abc0:	f823 2c18 	strh.w	r2, [r3, #-24]
 800abc4:	e008      	b.n	800abd8 <USBH_HUB_GamepadDecode+0x3dc>
		else a[i] = 0;
 800abc6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800abca:	005b      	lsls	r3, r3, #1
 800abcc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800abd0:	4413      	add	r3, r2
 800abd2:	2200      	movs	r2, #0
 800abd4:	f823 2c18 	strh.w	r2, [r3, #-24]

		a[i] = (a[i] * 127) / hrange;
 800abd8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800abdc:	005b      	lsls	r3, r3, #1
 800abde:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800abe2:	4413      	add	r3, r2
 800abe4:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800abe8:	461a      	mov	r2, r3
 800abea:	4613      	mov	r3, r2
 800abec:	01db      	lsls	r3, r3, #7
 800abee:	1a9a      	subs	r2, r3, r2
 800abf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abf2:	fb92 f2f3 	sdiv	r2, r2, r3
 800abf6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800abfa:	b212      	sxth	r2, r2
 800abfc:	005b      	lsls	r3, r3, #1
 800abfe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ac02:	440b      	add	r3, r1
 800ac04:	f823 2c18 	strh.w	r2, [r3, #-24]

		if (a[i] < -127) a[i] = -127;
 800ac08:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ac12:	4413      	add	r3, r2
 800ac14:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800ac18:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 800ac1c:	da0a      	bge.n	800ac34 <USBH_HUB_GamepadDecode+0x438>
 800ac1e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ac22:	005b      	lsls	r3, r3, #1
 800ac24:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ac28:	4413      	add	r3, r2
 800ac2a:	f64f 7281 	movw	r2, #65409	; 0xff81
 800ac2e:	f823 2c18 	strh.w	r2, [r3, #-24]
 800ac32:	e012      	b.n	800ac5a <USBH_HUB_GamepadDecode+0x45e>
		else if (a[i] > 127) a[i] = 127;
 800ac34:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ac3e:	4413      	add	r3, r2
 800ac40:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800ac44:	2b7f      	cmp	r3, #127	; 0x7f
 800ac46:	dd08      	ble.n	800ac5a <USBH_HUB_GamepadDecode+0x45e>
 800ac48:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ac4c:	005b      	lsls	r3, r3, #1
 800ac4e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ac52:	4413      	add	r3, r2
 800ac54:	227f      	movs	r2, #127	; 0x7f
 800ac56:	f823 2c18 	strh.w	r2, [r3, #-24]

		a[i]=a[i]+127; // mist wants a value in the range [0..255]
 800ac5a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ac5e:	005b      	lsls	r3, r3, #1
 800ac60:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ac64:	4413      	add	r3, r2
 800ac66:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	337f      	adds	r3, #127	; 0x7f
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ac74:	b212      	sxth	r2, r2
 800ac76:	005b      	lsls	r3, r3, #1
 800ac78:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ac7c:	440b      	add	r3, r1
 800ac7e:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(i=0;i<2;i++) {
 800ac82:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ac86:	3301      	adds	r3, #1
 800ac88:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800ac8c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	f67f aeab 	bls.w	800a9ec <USBH_HUB_GamepadDecode+0x1f0>
	}

				if(a[0] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_LEFT;
 800ac96:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800ac9a:	2b3f      	cmp	r3, #63	; 0x3f
 800ac9c:	dc05      	bgt.n	800acaa <USBH_HUB_GamepadDecode+0x4ae>
 800ac9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aca2:	f043 0302 	orr.w	r3, r3, #2
 800aca6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(a[0] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_RIGHT;
 800acaa:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800acae:	2bc0      	cmp	r3, #192	; 0xc0
 800acb0:	dd05      	ble.n	800acbe <USBH_HUB_GamepadDecode+0x4c2>
 800acb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acb6:	f043 0301 	orr.w	r3, r3, #1
 800acba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(a[1] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_UP;
 800acbe:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800acc2:	2b3f      	cmp	r3, #63	; 0x3f
 800acc4:	dc05      	bgt.n	800acd2 <USBH_HUB_GamepadDecode+0x4d6>
 800acc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acca:	f043 0308 	orr.w	r3, r3, #8
 800acce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(a[1] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_DOWN;
 800acd2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800acd6:	2bc0      	cmp	r3, #192	; 0xc0
 800acd8:	dd05      	ble.n	800ace6 <USBH_HUB_GamepadDecode+0x4ea>
 800acda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acde:	f043 0304 	orr.w	r3, r3, #4
 800ace2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				jmap |= btn << JOY_BTN_SHIFT;      // add buttons
 800ace6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800acea:	011b      	lsls	r3, r3, #4
 800acec:	b25a      	sxtb	r2, r3
 800acee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800acf2:	4313      	orrs	r3, r2
 800acf4:	b25b      	sxtb	r3, r3
 800acf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

				hub_gamepad_info.gamepad_data = jmap;
 800acfa:	4a07      	ldr	r2, [pc, #28]	; (800ad18 <USBH_HUB_GamepadDecode+0x51c>)
 800acfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad00:	7013      	strb	r3, [r2, #0]
				hub_gamepad_info.gamepad_extraBtn = btn_extra;
 800ad02:	4a05      	ldr	r2, [pc, #20]	; (800ad18 <USBH_HUB_GamepadDecode+0x51c>)
 800ad04:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800ad08:	7053      	strb	r3, [r2, #1]

		  return USBH_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	e000      	b.n	800ad10 <USBH_HUB_GamepadDecode+0x514>
	    }



	  return USBH_FAIL;
 800ad0e:	2302      	movs	r3, #2

}
 800ad10:	4618      	mov	r0, r3
 800ad12:	375c      	adds	r7, #92	; 0x5c
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad18:	20000550 	.word	0x20000550

0800ad1c <USBH_HUB_KeybdInit>:
  101,   /*max value device can report*/
  1      /*resolution*/
};

USBH_StatusTypeDef USBH_HUB_KeybdInit(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]

  uint32_t x;


    hub_keybd_info.lctrl = hub_keybd_info.lshift = 0U;
 800ad24:	4b2a      	ldr	r3, [pc, #168]	; (800add0 <USBH_HUB_KeybdInit+0xb4>)
 800ad26:	2200      	movs	r2, #0
 800ad28:	709a      	strb	r2, [r3, #2]
 800ad2a:	4b29      	ldr	r3, [pc, #164]	; (800add0 <USBH_HUB_KeybdInit+0xb4>)
 800ad2c:	789a      	ldrb	r2, [r3, #2]
 800ad2e:	4b28      	ldr	r3, [pc, #160]	; (800add0 <USBH_HUB_KeybdInit+0xb4>)
 800ad30:	705a      	strb	r2, [r3, #1]
    hub_keybd_info.lalt = hub_keybd_info.lgui = 0U;
 800ad32:	4b27      	ldr	r3, [pc, #156]	; (800add0 <USBH_HUB_KeybdInit+0xb4>)
 800ad34:	2200      	movs	r2, #0
 800ad36:	711a      	strb	r2, [r3, #4]
 800ad38:	4b25      	ldr	r3, [pc, #148]	; (800add0 <USBH_HUB_KeybdInit+0xb4>)
 800ad3a:	791a      	ldrb	r2, [r3, #4]
 800ad3c:	4b24      	ldr	r3, [pc, #144]	; (800add0 <USBH_HUB_KeybdInit+0xb4>)
 800ad3e:	70da      	strb	r2, [r3, #3]
    hub_keybd_info.rctrl = hub_keybd_info.rshift = 0U;
 800ad40:	4b23      	ldr	r3, [pc, #140]	; (800add0 <USBH_HUB_KeybdInit+0xb4>)
 800ad42:	2200      	movs	r2, #0
 800ad44:	719a      	strb	r2, [r3, #6]
 800ad46:	4b22      	ldr	r3, [pc, #136]	; (800add0 <USBH_HUB_KeybdInit+0xb4>)
 800ad48:	799a      	ldrb	r2, [r3, #6]
 800ad4a:	4b21      	ldr	r3, [pc, #132]	; (800add0 <USBH_HUB_KeybdInit+0xb4>)
 800ad4c:	715a      	strb	r2, [r3, #5]
    hub_keybd_info.ralt = hub_keybd_info.rgui = 0U;
 800ad4e:	4b20      	ldr	r3, [pc, #128]	; (800add0 <USBH_HUB_KeybdInit+0xb4>)
 800ad50:	2200      	movs	r2, #0
 800ad52:	721a      	strb	r2, [r3, #8]
 800ad54:	4b1e      	ldr	r3, [pc, #120]	; (800add0 <USBH_HUB_KeybdInit+0xb4>)
 800ad56:	7a1a      	ldrb	r2, [r3, #8]
 800ad58:	4b1d      	ldr	r3, [pc, #116]	; (800add0 <USBH_HUB_KeybdInit+0xb4>)
 800ad5a:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(hub_keybd_report_data) / sizeof(uint32_t)); x++)
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	60fb      	str	r3, [r7, #12]
 800ad60:	e00c      	b.n	800ad7c <USBH_HUB_KeybdInit+0x60>
  {
    hub_keybd_report_data[x] = 0U;
 800ad62:	4a1c      	ldr	r2, [pc, #112]	; (800add4 <USBH_HUB_KeybdInit+0xb8>)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2100      	movs	r1, #0
 800ad68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    hub_keybd_rx_report_buf[x] = 0U;
 800ad6c:	4a1a      	ldr	r2, [pc, #104]	; (800add8 <USBH_HUB_KeybdInit+0xbc>)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2100      	movs	r1, #0
 800ad72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(hub_keybd_report_data) / sizeof(uint32_t)); x++)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	60fb      	str	r3, [r7, #12]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d9ef      	bls.n	800ad62 <USBH_HUB_KeybdInit+0x46>
  }

  if (Itf->length > (sizeof(hub_keybd_report_data)))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	88db      	ldrh	r3, [r3, #6]
 800ad86:	2b08      	cmp	r3, #8
 800ad88:	d902      	bls.n	800ad90 <USBH_HUB_KeybdInit+0x74>
  {
    Itf->length = (sizeof(hub_keybd_report_data));
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2208      	movs	r2, #8
 800ad8e:	80da      	strh	r2, [r3, #6]
  }
  //HUB_Handle->pData = (uint8_t *)(void *)hub_keybd_rx_report_buf;

    Itf->pFIFObuf = malloc(HID_QUEUE_SIZE * Itf->length);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	88db      	ldrh	r3, [r3, #6]
 800ad94:	461a      	mov	r2, r3
 800ad96:	4613      	mov	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	005b      	lsls	r3, r3, #1
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f003 f9f8 	bl	800e194 <malloc>
 800ada4:	4603      	mov	r3, r0
 800ada6:	461a      	mov	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	665a      	str	r2, [r3, #100]	; 0x64
    USBH_HID_FifoInit(&Itf->fifo, Itf->pFIFObuf, HID_QUEUE_SIZE * sizeof(hub_keybd_report_data));
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adb6:	2250      	movs	r2, #80	; 0x50
 800adb8:	4619      	mov	r1, r3
 800adba:	f7fd fe67 	bl	8008a8c <USBH_HID_FifoInit>
    Itf->DeviceType = HUB_KEYBOARD;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	705a      	strb	r2, [r3, #1]

  return USBH_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	20000554 	.word	0x20000554
 800add4:	2000056c 	.word	0x2000056c
 800add8:	20000564 	.word	0x20000564

0800addc <USBH_HUB_GetKeybdInfo>:


HID_KEYBD_Info_TypeDef *USBH_HUB_GetKeybdInfo(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  if (USBH_HUB_KeybdDecode(Itf) == USBH_OK)
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 f80d 	bl	800ae04 <USBH_HUB_KeybdDecode>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <USBH_HUB_GetKeybdInfo+0x18>
  {
    return &hub_keybd_info;
 800adf0:	4b03      	ldr	r3, [pc, #12]	; (800ae00 <USBH_HUB_GetKeybdInfo+0x24>)
 800adf2:	e000      	b.n	800adf6 <USBH_HUB_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800adf4:	2300      	movs	r3, #0
  }
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3708      	adds	r7, #8
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	20000554 	.word	0x20000554

0800ae04 <USBH_HUB_KeybdDecode>:



USBH_StatusTypeDef USBH_HUB_KeybdDecode(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  uint8_t x;


  if (Itf->length == 0U)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	88db      	ldrh	r3, [r3, #6]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d101      	bne.n	800ae18 <USBH_HUB_KeybdDecode+0x14>
  {
    return USBH_FAIL;
 800ae14:	2302      	movs	r3, #2
 800ae16:	e072      	b.n	800aefe <USBH_HUB_KeybdDecode+0xfa>
  }
  /*Fill report */

  if (USBH_HID_FifoRead(&Itf->fifo, &hub_keybd_report_data, Itf->length) ==  Itf->length)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	88db      	ldrh	r3, [r3, #6]
 800ae22:	461a      	mov	r2, r3
 800ae24:	4938      	ldr	r1, [pc, #224]	; (800af08 <USBH_HUB_KeybdDecode+0x104>)
 800ae26:	f7fd fe4d 	bl	8008ac4 <USBH_HID_FifoRead>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	88db      	ldrh	r3, [r3, #6]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d162      	bne.n	800aefc <USBH_HUB_KeybdDecode+0xf8>
  {
	  if (hub_keybd_report_data[0] == 0x1010000 && hub_keybd_report_data[1]==0x1010101)
 800ae36:	4b34      	ldr	r3, [pc, #208]	; (800af08 <USBH_HUB_KeybdDecode+0x104>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a34      	ldr	r2, [pc, #208]	; (800af0c <USBH_HUB_KeybdDecode+0x108>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d106      	bne.n	800ae4e <USBH_HUB_KeybdDecode+0x4a>
 800ae40:	4b31      	ldr	r3, [pc, #196]	; (800af08 <USBH_HUB_KeybdDecode+0x104>)
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 800ae48:	d101      	bne.n	800ae4e <USBH_HUB_KeybdDecode+0x4a>
  
	  {
		  return USBH_FAIL;
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	e057      	b.n	800aefe <USBH_HUB_KeybdDecode+0xfa>
	  }
	//  if keybd_re  5055
    hub_keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800ae4e:	2100      	movs	r1, #0
 800ae50:	482f      	ldr	r0, [pc, #188]	; (800af10 <USBH_HUB_KeybdDecode+0x10c>)
 800ae52:	f7fe fcef 	bl	8009834 <HID_ReadItem>
 800ae56:	4603      	mov	r3, r0
 800ae58:	b2da      	uxtb	r2, r3
 800ae5a:	4b2e      	ldr	r3, [pc, #184]	; (800af14 <USBH_HUB_KeybdDecode+0x110>)
 800ae5c:	705a      	strb	r2, [r3, #1]
    hub_keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800ae5e:	2100      	movs	r1, #0
 800ae60:	482d      	ldr	r0, [pc, #180]	; (800af18 <USBH_HUB_KeybdDecode+0x114>)
 800ae62:	f7fe fce7 	bl	8009834 <HID_ReadItem>
 800ae66:	4603      	mov	r3, r0
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	4b2a      	ldr	r3, [pc, #168]	; (800af14 <USBH_HUB_KeybdDecode+0x110>)
 800ae6c:	709a      	strb	r2, [r3, #2]
    hub_keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800ae6e:	2100      	movs	r1, #0
 800ae70:	482a      	ldr	r0, [pc, #168]	; (800af1c <USBH_HUB_KeybdDecode+0x118>)
 800ae72:	f7fe fcdf 	bl	8009834 <HID_ReadItem>
 800ae76:	4603      	mov	r3, r0
 800ae78:	b2da      	uxtb	r2, r3
 800ae7a:	4b26      	ldr	r3, [pc, #152]	; (800af14 <USBH_HUB_KeybdDecode+0x110>)
 800ae7c:	70da      	strb	r2, [r3, #3]
    hub_keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800ae7e:	2100      	movs	r1, #0
 800ae80:	4827      	ldr	r0, [pc, #156]	; (800af20 <USBH_HUB_KeybdDecode+0x11c>)
 800ae82:	f7fe fcd7 	bl	8009834 <HID_ReadItem>
 800ae86:	4603      	mov	r3, r0
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	4b22      	ldr	r3, [pc, #136]	; (800af14 <USBH_HUB_KeybdDecode+0x110>)
 800ae8c:	711a      	strb	r2, [r3, #4]
    hub_keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800ae8e:	2100      	movs	r1, #0
 800ae90:	4824      	ldr	r0, [pc, #144]	; (800af24 <USBH_HUB_KeybdDecode+0x120>)
 800ae92:	f7fe fccf 	bl	8009834 <HID_ReadItem>
 800ae96:	4603      	mov	r3, r0
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	4b1e      	ldr	r3, [pc, #120]	; (800af14 <USBH_HUB_KeybdDecode+0x110>)
 800ae9c:	715a      	strb	r2, [r3, #5]
    hub_keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800ae9e:	2100      	movs	r1, #0
 800aea0:	4821      	ldr	r0, [pc, #132]	; (800af28 <USBH_HUB_KeybdDecode+0x124>)
 800aea2:	f7fe fcc7 	bl	8009834 <HID_ReadItem>
 800aea6:	4603      	mov	r3, r0
 800aea8:	b2da      	uxtb	r2, r3
 800aeaa:	4b1a      	ldr	r3, [pc, #104]	; (800af14 <USBH_HUB_KeybdDecode+0x110>)
 800aeac:	719a      	strb	r2, [r3, #6]
    hub_keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800aeae:	2100      	movs	r1, #0
 800aeb0:	481e      	ldr	r0, [pc, #120]	; (800af2c <USBH_HUB_KeybdDecode+0x128>)
 800aeb2:	f7fe fcbf 	bl	8009834 <HID_ReadItem>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	b2da      	uxtb	r2, r3
 800aeba:	4b16      	ldr	r3, [pc, #88]	; (800af14 <USBH_HUB_KeybdDecode+0x110>)
 800aebc:	71da      	strb	r2, [r3, #7]
    hub_keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800aebe:	2100      	movs	r1, #0
 800aec0:	481b      	ldr	r0, [pc, #108]	; (800af30 <USBH_HUB_KeybdDecode+0x12c>)
 800aec2:	f7fe fcb7 	bl	8009834 <HID_ReadItem>
 800aec6:	4603      	mov	r3, r0
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	4b12      	ldr	r3, [pc, #72]	; (800af14 <USBH_HUB_KeybdDecode+0x110>)
 800aecc:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(hub_keybd_info.keys); x++)
 800aece:	2300      	movs	r3, #0
 800aed0:	73fb      	strb	r3, [r7, #15]
 800aed2:	e00e      	b.n	800aef2 <USBH_HUB_KeybdDecode+0xee>
    {
      hub_keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
 800aed6:	4619      	mov	r1, r3
 800aed8:	4816      	ldr	r0, [pc, #88]	; (800af34 <USBH_HUB_KeybdDecode+0x130>)
 800aeda:	f7fe fcab 	bl	8009834 <HID_ReadItem>
 800aede:	4602      	mov	r2, r0
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
 800aee2:	b2d1      	uxtb	r1, r2
 800aee4:	4a0b      	ldr	r2, [pc, #44]	; (800af14 <USBH_HUB_KeybdDecode+0x110>)
 800aee6:	4413      	add	r3, r2
 800aee8:	460a      	mov	r2, r1
 800aeea:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(hub_keybd_info.keys); x++)
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	3301      	adds	r3, #1
 800aef0:	73fb      	strb	r3, [r7, #15]
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
 800aef4:	2b05      	cmp	r3, #5
 800aef6:	d9ed      	bls.n	800aed4 <USBH_HUB_KeybdDecode+0xd0>
    }

    return USBH_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	e000      	b.n	800aefe <USBH_HUB_KeybdDecode+0xfa>
  }
  return   USBH_FAIL;
 800aefc:	2302      	movs	r3, #2
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	2000056c 	.word	0x2000056c
 800af0c:	01010000 	.word	0x01010000
 800af10:	0800e5c8 	.word	0x0800e5c8
 800af14:	20000554 	.word	0x20000554
 800af18:	0800e5e8 	.word	0x0800e5e8
 800af1c:	0800e608 	.word	0x0800e608
 800af20:	0800e628 	.word	0x0800e628
 800af24:	0800e648 	.word	0x0800e648
 800af28:	0800e668 	.word	0x0800e668
 800af2c:	0800e688 	.word	0x0800e688
 800af30:	0800e6a8 	.word	0x0800e6a8
 800af34:	0800e6c8 	.word	0x0800e6c8

0800af38 <USBH_HUB_MouseInit>:
uint8_t                 hub_mouse_report_data[8];
uint32_t                hub_mouse_rx_report_buf[2];


USBH_StatusTypeDef USBH_HUB_MouseInit(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hub_mouse_info.x = 0U;
 800af40:	4b23      	ldr	r3, [pc, #140]	; (800afd0 <USBH_HUB_MouseInit+0x98>)
 800af42:	2200      	movs	r2, #0
 800af44:	801a      	strh	r2, [r3, #0]
  hub_mouse_info.y = 0U;
 800af46:	4b22      	ldr	r3, [pc, #136]	; (800afd0 <USBH_HUB_MouseInit+0x98>)
 800af48:	2200      	movs	r2, #0
 800af4a:	805a      	strh	r2, [r3, #2]
  hub_mouse_info.buttons[0] = 0U;
 800af4c:	4b20      	ldr	r3, [pc, #128]	; (800afd0 <USBH_HUB_MouseInit+0x98>)
 800af4e:	2200      	movs	r2, #0
 800af50:	711a      	strb	r2, [r3, #4]
  hub_mouse_info.buttons[1] = 0U;
 800af52:	4b1f      	ldr	r3, [pc, #124]	; (800afd0 <USBH_HUB_MouseInit+0x98>)
 800af54:	2200      	movs	r2, #0
 800af56:	715a      	strb	r2, [r3, #5]
  hub_mouse_info.buttons[2] = 0U;
 800af58:	4b1d      	ldr	r3, [pc, #116]	; (800afd0 <USBH_HUB_MouseInit+0x98>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	719a      	strb	r2, [r3, #6]

  for (i = 0U; i < (sizeof(hub_mouse_report_data) / sizeof(uint32_t)); i++)
 800af5e:	2300      	movs	r3, #0
 800af60:	60fb      	str	r3, [r7, #12]
 800af62:	e00c      	b.n	800af7e <USBH_HUB_MouseInit+0x46>
  {
    hub_mouse_report_data[i] = 0U;
 800af64:	4a1b      	ldr	r2, [pc, #108]	; (800afd4 <USBH_HUB_MouseInit+0x9c>)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	4413      	add	r3, r2
 800af6a:	2200      	movs	r2, #0
 800af6c:	701a      	strb	r2, [r3, #0]
    hub_mouse_rx_report_buf[i] = 0U;
 800af6e:	4a1a      	ldr	r2, [pc, #104]	; (800afd8 <USBH_HUB_MouseInit+0xa0>)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2100      	movs	r1, #0
 800af74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(hub_mouse_report_data) / sizeof(uint32_t)); i++)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	3301      	adds	r3, #1
 800af7c:	60fb      	str	r3, [r7, #12]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d9ef      	bls.n	800af64 <USBH_HUB_MouseInit+0x2c>
  }

 
  Itf->pFIFObuf = malloc(HID_QUEUE_SIZE * Itf->length);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	88db      	ldrh	r3, [r3, #6]
 800af88:	461a      	mov	r2, r3
 800af8a:	4613      	mov	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	005b      	lsls	r3, r3, #1
 800af92:	4618      	mov	r0, r3
 800af94:	f003 f8fe 	bl	800e194 <malloc>
 800af98:	4603      	mov	r3, r0
 800af9a:	461a      	mov	r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	665a      	str	r2, [r3, #100]	; 0x64
  USBH_HID_FifoInit(&Itf->fifo, Itf->pFIFObuf, HID_QUEUE_SIZE * Itf->length);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	88db      	ldrh	r3, [r3, #6]
 800afae:	461a      	mov	r2, r3
 800afb0:	0092      	lsls	r2, r2, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	461a      	mov	r2, r3
 800afba:	f7fd fd67 	bl	8008a8c <USBH_HID_FifoInit>
  Itf->DeviceType = HUB_MOUSE;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2202      	movs	r2, #2
 800afc2:	705a      	strb	r2, [r3, #1]

  return USBH_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	2000057c 	.word	0x2000057c
 800afd4:	20000574 	.word	0x20000574
 800afd8:	20000584 	.word	0x20000584

0800afdc <USBH_HUB_GetMouseInfo>:


HID_MOUSE_Info_TypeDef *USBH_HUB_GetMouseInfo(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  if (USBH_HUB_MouseDecode(Itf) == USBH_OK)
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f80d 	bl	800b004 <USBH_HUB_MouseDecode>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d101      	bne.n	800aff4 <USBH_HUB_GetMouseInfo+0x18>
  {
    return &hub_mouse_info;
 800aff0:	4b03      	ldr	r3, [pc, #12]	; (800b000 <USBH_HUB_GetMouseInfo+0x24>)
 800aff2:	e000      	b.n	800aff6 <USBH_HUB_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 800aff4:	2300      	movs	r3, #0
  }
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	2000057c 	.word	0x2000057c

0800b004 <USBH_HUB_MouseDecode>:


USBH_StatusTypeDef USBH_HUB_MouseDecode(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]

  if (Itf->length == 0U)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	88db      	ldrh	r3, [r3, #6]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <USBH_HUB_MouseDecode+0x14>
  {
    return USBH_FAIL;
 800b014:	2302      	movs	r3, #2
 800b016:	e103      	b.n	800b220 <USBH_HUB_MouseDecode+0x21c>
  }

  //Clear mouse_report_data

  memset(&hub_mouse_report_data,0,sizeof(hub_mouse_report_data));
 800b018:	2208      	movs	r2, #8
 800b01a:	2100      	movs	r1, #0
 800b01c:	4882      	ldr	r0, [pc, #520]	; (800b228 <USBH_HUB_MouseDecode+0x224>)
 800b01e:	f003 f8c9 	bl	800e1b4 <memset>


  /*Fill report */
  if (USBH_HID_FifoRead(&Itf->fifo, &hub_mouse_report_data, Itf->length) !=0)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	88db      	ldrh	r3, [r3, #6]
 800b02c:	461a      	mov	r2, r3
 800b02e:	497e      	ldr	r1, [pc, #504]	; (800b228 <USBH_HUB_MouseDecode+0x224>)
 800b030:	f7fd fd48 	bl	8008ac4 <USBH_HID_FifoRead>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	f000 80f1 	beq.w	800b21e <USBH_HUB_MouseDecode+0x21a>
  {

	  uint8_t btn = 0;
 800b03c:	2300      	movs	r3, #0
 800b03e:	75fb      	strb	r3, [r7, #23]
	  uint8_t btn_extra = 0;
 800b040:	2300      	movs	r3, #0
 800b042:	75bb      	strb	r3, [r7, #22]
	  uint8_t i;



	  // skip report id if present
	  uint8_t *p = hub_mouse_report_data + (Itf->HIDDesc->RptDesc.report_id?1:0);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b048:	7adb      	ldrb	r3, [r3, #11]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d001      	beq.n	800b052 <USBH_HUB_MouseDecode+0x4e>
 800b04e:	4b77      	ldr	r3, [pc, #476]	; (800b22c <USBH_HUB_MouseDecode+0x228>)
 800b050:	e000      	b.n	800b054 <USBH_HUB_MouseDecode+0x50>
 800b052:	4b75      	ldr	r3, [pc, #468]	; (800b228 <USBH_HUB_MouseDecode+0x224>)
 800b054:	613b      	str	r3, [r7, #16]


	  //process axis
	  // two axes ...
	  		for(i=0;i<2;i++) {
 800b056:	2300      	movs	r3, #0
 800b058:	757b      	strb	r3, [r7, #21]
 800b05a:	e032      	b.n	800b0c2 <USBH_HUB_MouseDecode+0xbe>
	  			// if logical minimum is > logical maximum then logical minimum
	  			// is signed. This means that the value itself is also signed
	  			int is_signed = Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].logical.min >
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b060:	7d7b      	ldrb	r3, [r7, #21]
 800b062:	3302      	adds	r3, #2
 800b064:	00db      	lsls	r3, r3, #3
 800b066:	4413      	add	r3, r2
 800b068:	88da      	ldrh	r2, [r3, #6]
	  				Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].logical.max;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800b06e:	7d7b      	ldrb	r3, [r7, #21]
 800b070:	3302      	adds	r3, #2
 800b072:	00db      	lsls	r3, r3, #3
 800b074:	440b      	add	r3, r1
 800b076:	891b      	ldrh	r3, [r3, #8]
	  			int is_signed = Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].logical.min >
 800b078:	429a      	cmp	r2, r3
 800b07a:	bf8c      	ite	hi
 800b07c:	2301      	movhi	r3, #1
 800b07e:	2300      	movls	r3, #0
 800b080:	b2db      	uxtb	r3, r3
 800b082:	60fb      	str	r3, [r7, #12]
	  			a[i] = collect_bits(p, Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].offset,
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b088:	7d7b      	ldrb	r3, [r7, #21]
 800b08a:	3302      	adds	r3, #2
 800b08c:	00db      	lsls	r3, r3, #3
 800b08e:	4413      	add	r3, r2
 800b090:	8859      	ldrh	r1, [r3, #2]
	  					Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].size, is_signed);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	  			a[i] = collect_bits(p, Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].offset,
 800b096:	7d7b      	ldrb	r3, [r7, #21]
 800b098:	3302      	adds	r3, #2
 800b09a:	00db      	lsls	r3, r3, #3
 800b09c:	4413      	add	r3, r2
 800b09e:	791a      	ldrb	r2, [r3, #4]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6938      	ldr	r0, [r7, #16]
 800b0a4:	f7fe f9aa 	bl	80093fc <collect_bits>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	7d7b      	ldrb	r3, [r7, #21]
 800b0ae:	b212      	sxth	r2, r2
 800b0b0:	005b      	lsls	r3, r3, #1
 800b0b2:	f107 0118 	add.w	r1, r7, #24
 800b0b6:	440b      	add	r3, r1
 800b0b8:	f823 2c10 	strh.w	r2, [r3, #-16]
	  		for(i=0;i<2;i++) {
 800b0bc:	7d7b      	ldrb	r3, [r7, #21]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	757b      	strb	r3, [r7, #21]
 800b0c2:	7d7b      	ldrb	r3, [r7, #21]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d9c9      	bls.n	800b05c <USBH_HUB_MouseDecode+0x58>
	  		}

	  //process 4 first buttons
	  for(i=0;i<4;i++)
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	757b      	strb	r3, [r7, #21]
 800b0cc:	e022      	b.n	800b114 <USBH_HUB_MouseDecode+0x110>
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b0d2:	7d7b      	ldrb	r3, [r7, #21]
 800b0d4:	3310      	adds	r3, #16
 800b0d6:	005b      	lsls	r3, r3, #1
 800b0d8:	4413      	add	r3, r2
 800b0da:	789b      	ldrb	r3, [r3, #2]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	781a      	ldrb	r2, [r3, #0]
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800b0e8:	7d7b      	ldrb	r3, [r7, #21]
 800b0ea:	3310      	adds	r3, #16
 800b0ec:	005b      	lsls	r3, r3, #1
 800b0ee:	440b      	add	r3, r1
 800b0f0:	78db      	ldrb	r3, [r3, #3]
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d009      	beq.n	800b10e <USBH_HUB_MouseDecode+0x10a>
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800b0fa:	7d7b      	ldrb	r3, [r7, #21]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b102:	b25a      	sxtb	r2, r3
 800b104:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b108:	4313      	orrs	r3, r2
 800b10a:	b25b      	sxtb	r3, r3
 800b10c:	75fb      	strb	r3, [r7, #23]
	  for(i=0;i<4;i++)
 800b10e:	7d7b      	ldrb	r3, [r7, #21]
 800b110:	3301      	adds	r3, #1
 800b112:	757b      	strb	r3, [r7, #21]
 800b114:	7d7b      	ldrb	r3, [r7, #21]
 800b116:	2b03      	cmp	r3, #3
 800b118:	d9d9      	bls.n	800b0ce <USBH_HUB_MouseDecode+0xca>

	  // ... and the eight extra buttons
	  for(i=4;i<12;i++)
 800b11a:	2304      	movs	r3, #4
 800b11c:	757b      	strb	r3, [r7, #21]
 800b11e:	e023      	b.n	800b168 <USBH_HUB_MouseDecode+0x164>
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b124:	7d7b      	ldrb	r3, [r7, #21]
 800b126:	3310      	adds	r3, #16
 800b128:	005b      	lsls	r3, r3, #1
 800b12a:	4413      	add	r3, r2
 800b12c:	789b      	ldrb	r3, [r3, #2]
 800b12e:	461a      	mov	r2, r3
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	4413      	add	r3, r2
 800b134:	781a      	ldrb	r2, [r3, #0]
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800b13a:	7d7b      	ldrb	r3, [r7, #21]
 800b13c:	3310      	adds	r3, #16
 800b13e:	005b      	lsls	r3, r3, #1
 800b140:	440b      	add	r3, r1
 800b142:	78db      	ldrb	r3, [r3, #3]
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800b144:	4013      	ands	r3, r2
 800b146:	b2db      	uxtb	r3, r3
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d00a      	beq.n	800b162 <USBH_HUB_MouseDecode+0x15e>
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800b14c:	7d7b      	ldrb	r3, [r7, #21]
 800b14e:	3b04      	subs	r3, #4
 800b150:	2201      	movs	r2, #1
 800b152:	fa02 f303 	lsl.w	r3, r2, r3
 800b156:	b25a      	sxtb	r2, r3
 800b158:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800b15c:	4313      	orrs	r3, r2
 800b15e:	b25b      	sxtb	r3, r3
 800b160:	75bb      	strb	r3, [r7, #22]
	  for(i=4;i<12;i++)
 800b162:	7d7b      	ldrb	r3, [r7, #21]
 800b164:	3301      	adds	r3, #1
 800b166:	757b      	strb	r3, [r7, #21]
 800b168:	7d7b      	ldrb	r3, [r7, #21]
 800b16a:	2b0b      	cmp	r3, #11
 800b16c:	d9d8      	bls.n	800b120 <USBH_HUB_MouseDecode+0x11c>

	  //process mouse
	  if(Itf->HIDDesc->RptDesc.type == REPORT_TYPE_MOUSE) {
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b172:	7a9b      	ldrb	r3, [r3, #10]
 800b174:	f003 0303 	and.w	r3, r3, #3
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d14d      	bne.n	800b21a <USBH_HUB_MouseDecode+0x216>
	  		// iprintf("mouse %d %d %x\n", (int16_t)a[0], (int16_t)a[1], btn);
	  		// limit mouse movement to +/- 128
	  		for(i=0;i<2;i++) {
 800b17e:	2300      	movs	r3, #0
 800b180:	757b      	strb	r3, [r7, #21]
 800b182:	e026      	b.n	800b1d2 <USBH_HUB_MouseDecode+0x1ce>
	  		if((int16_t)a[i] >  127) a[i] =  127;
 800b184:	7d7b      	ldrb	r3, [r7, #21]
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	f107 0218 	add.w	r2, r7, #24
 800b18c:	4413      	add	r3, r2
 800b18e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800b192:	2b7f      	cmp	r3, #127	; 0x7f
 800b194:	dd07      	ble.n	800b1a6 <USBH_HUB_MouseDecode+0x1a2>
 800b196:	7d7b      	ldrb	r3, [r7, #21]
 800b198:	005b      	lsls	r3, r3, #1
 800b19a:	f107 0218 	add.w	r2, r7, #24
 800b19e:	4413      	add	r3, r2
 800b1a0:	227f      	movs	r2, #127	; 0x7f
 800b1a2:	f823 2c10 	strh.w	r2, [r3, #-16]
	  		if((int16_t)a[i] < -128) a[i] = -128;
 800b1a6:	7d7b      	ldrb	r3, [r7, #21]
 800b1a8:	005b      	lsls	r3, r3, #1
 800b1aa:	f107 0218 	add.w	r2, r7, #24
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800b1b4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800b1b8:	da08      	bge.n	800b1cc <USBH_HUB_MouseDecode+0x1c8>
 800b1ba:	7d7b      	ldrb	r3, [r7, #21]
 800b1bc:	005b      	lsls	r3, r3, #1
 800b1be:	f107 0218 	add.w	r2, r7, #24
 800b1c2:	4413      	add	r3, r2
 800b1c4:	f64f 7280 	movw	r2, #65408	; 0xff80
 800b1c8:	f823 2c10 	strh.w	r2, [r3, #-16]
	  		for(i=0;i<2;i++) {
 800b1cc:	7d7b      	ldrb	r3, [r7, #21]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	757b      	strb	r3, [r7, #21]
 800b1d2:	7d7b      	ldrb	r3, [r7, #21]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d9d5      	bls.n	800b184 <USBH_HUB_MouseDecode+0x180>
	  		}
	  		//btn
	  	  hub_mouse_info.x = a[0];
 800b1d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b1dc:	4b14      	ldr	r3, [pc, #80]	; (800b230 <USBH_HUB_MouseDecode+0x22c>)
 800b1de:	801a      	strh	r2, [r3, #0]
	  	  hub_mouse_info.y = a[1];
 800b1e0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b1e4:	4b12      	ldr	r3, [pc, #72]	; (800b230 <USBH_HUB_MouseDecode+0x22c>)
 800b1e6:	805a      	strh	r2, [r3, #2]
	  	  hub_mouse_info.buttons[0] = btn&0x1;
 800b1e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1ec:	f003 0301 	and.w	r3, r3, #1
 800b1f0:	b25a      	sxtb	r2, r3
 800b1f2:	4b0f      	ldr	r3, [pc, #60]	; (800b230 <USBH_HUB_MouseDecode+0x22c>)
 800b1f4:	711a      	strb	r2, [r3, #4]
	  	  hub_mouse_info.buttons[1] = (btn>>1)&0x1;
 800b1f6:	7dfb      	ldrb	r3, [r7, #23]
 800b1f8:	085b      	lsrs	r3, r3, #1
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	b25b      	sxtb	r3, r3
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	b25a      	sxtb	r2, r3
 800b204:	4b0a      	ldr	r3, [pc, #40]	; (800b230 <USBH_HUB_MouseDecode+0x22c>)
 800b206:	715a      	strb	r2, [r3, #5]
	  	  hub_mouse_info.buttons[2] = (btn>>2)&0x1;
 800b208:	7dfb      	ldrb	r3, [r7, #23]
 800b20a:	089b      	lsrs	r3, r3, #2
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	b25b      	sxtb	r3, r3
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	b25a      	sxtb	r2, r3
 800b216:	4b06      	ldr	r3, [pc, #24]	; (800b230 <USBH_HUB_MouseDecode+0x22c>)
 800b218:	719a      	strb	r2, [r3, #6]
	  	}
    return USBH_OK;
 800b21a:	2300      	movs	r3, #0
 800b21c:	e000      	b.n	800b220 <USBH_HUB_MouseDecode+0x21c>
  }
  return   USBH_FAIL;
 800b21e:	2302      	movs	r3, #2
 800b220:	4618      	mov	r0, r3
 800b222:	3718      	adds	r7, #24
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	20000574 	.word	0x20000574
 800b22c:	20000575 	.word	0x20000575
 800b230:	2000057c 	.word	0x2000057c

0800b234 <USBH_HUB_GetDescriptor>:
#include "usbh_hubctrl.h"



USBH_StatusTypeDef USBH_HUB_GetDescriptor(USBH_HandleTypeDef *phost)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  uint16_t lenght = sizeof(HUB_DescTypeDef);
 800b23c:	230a      	movs	r3, #10
 800b23e:	81fb      	strh	r3, [r7, #14]

  if (phost->RequestState == CMD_SEND)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	789b      	ldrb	r3, [r3, #2]
 800b244:	2b01      	cmp	r3, #1
 800b246:	d111      	bne.n	800b26c <USBH_HUB_GetDescriptor+0x38>
  {
    phost->Control.setup.b.bmRequestType = 0b10100000;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	22a0      	movs	r2, #160	; 0xa0
 800b24c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;		
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2206      	movs	r2, #6
 800b252:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.bw.msb = 0;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	749a      	strb	r2, [r3, #18]
	  phost->Control.setup.b.wValue.bw.lsb = 0x29;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2229      	movs	r2, #41	; 0x29
 800b25e:	74da      	strb	r2, [r3, #19]
    phost->Control.setup.b.wIndex.w = 0;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = lenght;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	89fa      	ldrh	r2, [r7, #14]
 800b26a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, phost->device.Data, lenght) ;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b272:	89fa      	ldrh	r2, [r7, #14]
 800b274:	4619      	mov	r1, r3
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f002 f89b 	bl	800d3b2 <USBH_CtlReq>
 800b27c:	4603      	mov	r3, r0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <USBH_HUB_GetPortStatus>:
  USBH_HUB_ParseHUBStatus(HUB_Handle,phost->device.Data);
}


USBH_StatusTypeDef USBH_HUB_GetPortStatus(USBH_HandleTypeDef *phost, uint8_t PortNum)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b086      	sub	sp, #24
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	460b      	mov	r3, r1
 800b290:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	617b      	str	r3, [r7, #20]

  
	phost->Control.setup.b.bmRequestType = 0b10100011;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	22a3      	movs	r2, #163	; 0xa3
 800b2a0:	741a      	strb	r2, [r3, #16]
	phost->Control.setup.b.bRequest  	 = USB_REQUEST_GET_STATUS;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.bw.msb = HUB_FEAT_SEL_PORT_CONN;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	749a      	strb	r2, [r3, #18]
	phost->Control.setup.b.wValue.bw.lsb = 0;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	74da      	strb	r2, [r3, #19]
	phost->Control.setup.b.wIndex.bw.msb = PortNum;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	78fa      	ldrb	r2, [r7, #3]
 800b2b8:	751a      	strb	r2, [r3, #20]
  phost->Control.setup.b.wIndex.bw.lsb = 0;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	755a      	strb	r2, [r3, #21]
	phost->Control.setup.b.wLength.w     =  4;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2204      	movs	r2, #4
 800b2c4:	82da      	strh	r2, [r3, #22]
  
	
  if ((status = USBH_CtlReq(phost, HUB_Handle->buff, 4)) == USBH_OK)
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	3328      	adds	r3, #40	; 0x28
 800b2ca:	2204      	movs	r2, #4
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f002 f86f 	bl	800d3b2 <USBH_CtlReq>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	74fb      	strb	r3, [r7, #19]
 800b2d8:	7cfb      	ldrb	r3, [r7, #19]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d174      	bne.n	800b3c8 <USBH_HUB_GetPortStatus+0x142>
  {
     USB_HUB_PORT_STATUS old_status = HUB_Handle->Port[PortNum-1].PortStatus;
 800b2de:	78fb      	ldrb	r3, [r7, #3]
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	697a      	ldr	r2, [r7, #20]
 800b2e4:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800b2e8:	fb01 f303 	mul.w	r3, r1, r3
 800b2ec:	4413      	add	r3, r2
 800b2ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	60fb      	str	r3, [r7, #12]
    USBH_HUB_ParsePortStatus(HUB_Handle,HUB_Handle->buff,&HUB_Handle->Port[PortNum-1]);
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800b2fc:	78fb      	ldrb	r3, [r7, #3]
 800b2fe:	3b01      	subs	r3, #1
 800b300:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800b304:	fb02 f303 	mul.w	r3, r2, r3
 800b308:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b30c:	697a      	ldr	r2, [r7, #20]
 800b30e:	4413      	add	r3, r2
 800b310:	461a      	mov	r2, r3
 800b312:	6978      	ldr	r0, [r7, #20]
 800b314:	f000 f9af 	bl	800b676 <USBH_HUB_ParsePortStatus>

    if (HUB_Handle->Port[PortNum-1].PortStatus.wPortStatus.val != old_status.wPortStatus.val)
 800b318:	78fb      	ldrb	r3, [r7, #3]
 800b31a:	3b01      	subs	r3, #1
 800b31c:	697a      	ldr	r2, [r7, #20]
 800b31e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800b322:	fb01 f303 	mul.w	r3, r1, r3
 800b326:	4413      	add	r3, r2
 800b328:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b32c:	881a      	ldrh	r2, [r3, #0]
 800b32e:	89bb      	ldrh	r3, [r7, #12]
 800b330:	429a      	cmp	r2, r3
 800b332:	d049      	beq.n	800b3c8 <USBH_HUB_GetPortStatus+0x142>
    {
      HUB_Handle->PortStatusChangeFlag = 1;
 800b334:	697a      	ldr	r2, [r7, #20]
 800b336:	f241 0338 	movw	r3, #4152	; 0x1038
 800b33a:	4413      	add	r3, r2
 800b33c:	2201      	movs	r2, #1
 800b33e:	701a      	strb	r2, [r3, #0]

      if ((old_status.wPortStatus.PORT_CONNECTION == 1) && (HUB_Handle->Port[PortNum-1].PortStatus.wPortStatus.PORT_CONNECTION == 0))
 800b340:	7b3b      	ldrb	r3, [r7, #12]
 800b342:	f003 0301 	and.w	r3, r3, #1
 800b346:	b2db      	uxtb	r3, r3
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d01b      	beq.n	800b384 <USBH_HUB_GetPortStatus+0xfe>
 800b34c:	78fb      	ldrb	r3, [r7, #3]
 800b34e:	3b01      	subs	r3, #1
 800b350:	697a      	ldr	r2, [r7, #20]
 800b352:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800b356:	fb01 f303 	mul.w	r3, r1, r3
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b366:	b2db      	uxtb	r3, r3
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d10b      	bne.n	800b384 <USBH_HUB_GetPortStatus+0xfe>
      {
        HUB_Handle->Port[PortNum-1].Disconnected = 1;
 800b36c:	78fb      	ldrb	r3, [r7, #3]
 800b36e:	3b01      	subs	r3, #1
 800b370:	697a      	ldr	r2, [r7, #20]
 800b372:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800b376:	fb01 f303 	mul.w	r3, r1, r3
 800b37a:	4413      	add	r3, r2
 800b37c:	f203 132d 	addw	r3, r3, #301	; 0x12d
 800b380:	2201      	movs	r2, #1
 800b382:	701a      	strb	r2, [r3, #0]
      }

      if ((old_status.wPortStatus.PORT_CONNECTION == 0) && (HUB_Handle->Port[PortNum-1].PortStatus.wPortStatus.PORT_CONNECTION == 1))
 800b384:	7b3b      	ldrb	r3, [r7, #12]
 800b386:	f003 0301 	and.w	r3, r3, #1
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d11b      	bne.n	800b3c8 <USBH_HUB_GetPortStatus+0x142>
 800b390:	78fb      	ldrb	r3, [r7, #3]
 800b392:	3b01      	subs	r3, #1
 800b394:	697a      	ldr	r2, [r7, #20]
 800b396:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800b39a:	fb01 f303 	mul.w	r3, r1, r3
 800b39e:	4413      	add	r3, r2
 800b3a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d10b      	bne.n	800b3c8 <USBH_HUB_GetPortStatus+0x142>
      {
        HUB_Handle->Port[PortNum-1].Connected = 1;
 800b3b0:	78fb      	ldrb	r3, [r7, #3]
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	697a      	ldr	r2, [r7, #20]
 800b3b6:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800b3ba:	fb01 f303 	mul.w	r3, r1, r3
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	701a      	strb	r2, [r3, #0]


    }
  }

  return status;
 800b3c8:	7cfb      	ldrb	r3, [r7, #19]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3718      	adds	r7, #24
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <USBH_HUB_SetPortFeature>:



USBH_StatusTypeDef USBH_HUB_SetPortFeature(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t PortNum)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b082      	sub	sp, #8
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
 800b3da:	460b      	mov	r3, r1
 800b3dc:	70fb      	strb	r3, [r7, #3]
 800b3de:	4613      	mov	r3, r2
 800b3e0:	70bb      	strb	r3, [r7, #2]

  if (phost->RequestState == CMD_SEND)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	789b      	ldrb	r3, [r3, #2]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d114      	bne.n	800b414 <USBH_HUB_SetPortFeature+0x42>
  {
    phost->Control.setup.b.bmRequestType = 0b00100011; 
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2223      	movs	r2, #35	; 0x23
 800b3ee:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQUEST_SET_FEATURE;		
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2203      	movs	r2, #3
 800b3f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.bw.msb = feature;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	78fa      	ldrb	r2, [r7, #3]
 800b3fa:	749a      	strb	r2, [r3, #18]
	  phost->Control.setup.b.wValue.bw.lsb = 0x0;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	74da      	strb	r2, [r3, #19]
    phost->Control.setup.b.wIndex.bw.msb = PortNum;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	78ba      	ldrb	r2, [r7, #2]
 800b406:	751a      	strb	r2, [r3, #20]
    phost->Control.setup.b.wIndex.bw.lsb = 0x0;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	755a      	strb	r2, [r3, #21]
    phost->Control.setup.b.wLength.w = 0;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	82da      	strh	r2, [r3, #22]
  }    

   return USBH_CtlReq(phost, 0, 0);
 800b414:	2200      	movs	r2, #0
 800b416:	2100      	movs	r1, #0
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f001 ffca 	bl	800d3b2 <USBH_CtlReq>
 800b41e:	4603      	mov	r3, r0
}
 800b420:	4618      	mov	r0, r3
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <USBH_HUB_Get_DevDesc>:
   return USBH_CtlReq(phost, 0, 0);
}


USBH_StatusTypeDef USBH_HUB_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length,HUB_Port_HandleTypeDef *Port)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b088      	sub	sp, #32
 800b42c:	af02      	add	r7, sp, #8
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	460b      	mov	r3, r1
 800b432:	607a      	str	r2, [r7, #4]
 800b434:	72fb      	strb	r3, [r7, #11]
      USBH_StatusTypeDef status;

   status = USBH_GetDescriptor(phost,USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,USB_DESC_DEVICE, 0U,Port->buff, (uint16_t)length);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b43c:	7afa      	ldrb	r2, [r7, #11]
 800b43e:	b292      	uxth	r2, r2
 800b440:	9201      	str	r2, [sp, #4]
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	2300      	movs	r3, #0
 800b446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b44a:	2100      	movs	r1, #0
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f001 fd2b 	bl	800cea8 <USBH_GetDescriptor>
 800b452:	4603      	mov	r3, r0
 800b454:	75fb      	strb	r3, [r7, #23]
  if (status == USBH_OK)                                  
 800b456:	7dfb      	ldrb	r3, [r7, #23]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d10a      	bne.n	800b472 <USBH_HUB_Get_DevDesc+0x4a>
 { 
    /* Commands successfully sent and Response Received */
    USBH_HUB_ParseDevDesc(&Port->DevDesc, Port->buff, (uint16_t)length);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f103 0014 	add.w	r0, r3, #20
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b468:	7afa      	ldrb	r2, [r7, #11]
 800b46a:	b292      	uxth	r2, r2
 800b46c:	4619      	mov	r1, r3
 800b46e:	f000 f85d 	bl	800b52c <USBH_HUB_ParseDevDesc>
 }


 return status;
 800b472:	7dfb      	ldrb	r3, [r7, #23]

}
 800b474:	4618      	mov	r0, r3
 800b476:	3718      	adds	r7, #24
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <USBH_HUB_Get_CfgDesc>:


USBH_StatusTypeDef USBH_HUB_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length, HUB_Port_HandleTypeDef *Port)

{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b088      	sub	sp, #32
 800b480:	af02      	add	r7, sp, #8
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	460b      	mov	r3, r1
 800b486:	607a      	str	r2, [r7, #4]
 800b488:	817b      	strh	r3, [r7, #10]
  USBH_StatusTypeDef status;
        HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	617b      	str	r3, [r7, #20]


  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
                                   USB_DESC_CONFIGURATION,0U,HUB_Handle->buff, length)) == USBH_OK)
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	3328      	adds	r3, #40	; 0x28
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b498:	897a      	ldrh	r2, [r7, #10]
 800b49a:	9201      	str	r2, [sp, #4]
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	68f8      	ldr	r0, [r7, #12]
 800b4a8:	f001 fcfe 	bl	800cea8 <USBH_GetDescriptor>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	74fb      	strb	r3, [r7, #19]
 800b4b0:	7cfb      	ldrb	r3, [r7, #19]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d108      	bne.n	800b4c8 <USBH_HUB_Get_CfgDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&Port->CfgDesc, HUB_Handle->buff, length);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	3328      	adds	r3, #40	; 0x28
 800b4c0:	897a      	ldrh	r2, [r7, #10]
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	f001 fe29 	bl	800d11a <USBH_ParseCfgDesc>
  }

  return status;
 800b4c8:	7cfb      	ldrb	r3, [r7, #19]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3718      	adds	r7, #24
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <USBH_HUB_Get_StringDesc>:


USBH_StatusTypeDef USBH_HUB_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length, HUB_Port_HandleTypeDef *Port)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b088      	sub	sp, #32
 800b4d6:	af02      	add	r7, sp, #8
 800b4d8:	60f8      	str	r0, [r7, #12]
 800b4da:	607a      	str	r2, [r7, #4]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	460b      	mov	r3, r1
 800b4e0:	72fb      	strb	r3, [r7, #11]
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b4e6:	7afb      	ldrb	r3, [r7, #11]
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b4ee:	b299      	uxth	r1, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,0U,
                                   Port->buff, length)) == USBH_OK)
 800b4f0:	6a3b      	ldr	r3, [r7, #32]
 800b4f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
  if ((status = USBH_GetDescriptor(phost,
 800b4f6:	893a      	ldrh	r2, [r7, #8]
 800b4f8:	9201      	str	r2, [sp, #4]
 800b4fa:	9300      	str	r3, [sp, #0]
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	460a      	mov	r2, r1
 800b500:	2100      	movs	r1, #0
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f001 fcd0 	bl	800cea8 <USBH_GetDescriptor>
 800b508:	4603      	mov	r3, r0
 800b50a:	75fb      	strb	r3, [r7, #23]
 800b50c:	7dfb      	ldrb	r3, [r7, #23]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d107      	bne.n	800b522 <USBH_HUB_Get_StringDesc+0x50>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(Port->buff, buff, length);
 800b512:	6a3b      	ldr	r3, [r7, #32]
 800b514:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b518:	893a      	ldrh	r2, [r7, #8]
 800b51a:	6879      	ldr	r1, [r7, #4]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f001 fefa 	bl	800d316 <USBH_ParseStringDesc>
  }

  return status;
 800b522:	7dfb      	ldrb	r3, [r7, #23]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3718      	adds	r7, #24
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBH_HUB_ParseDevDesc>:



void  USBH_HUB_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	4613      	mov	r3, r2
 800b538:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	781a      	ldrb	r2, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	785a      	ldrb	r2, [r3, #1]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	3302      	adds	r3, #2
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	b29a      	uxth	r2, r3
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	3303      	adds	r3, #3
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	b29b      	uxth	r3, r3
 800b55a:	021b      	lsls	r3, r3, #8
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	4313      	orrs	r3, r2
 800b560:	b29a      	uxth	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	791a      	ldrb	r2, [r3, #4]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	795a      	ldrb	r2, [r3, #5]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	799a      	ldrb	r2, [r3, #6]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	79da      	ldrb	r2, [r3, #7]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b586:	88fb      	ldrh	r3, [r7, #6]
 800b588:	2b08      	cmp	r3, #8
 800b58a:	d939      	bls.n	800b600 <USBH_HUB_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	3308      	adds	r3, #8
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	b29a      	uxth	r2, r3
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	3309      	adds	r3, #9
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	021b      	lsls	r3, r3, #8
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	330a      	adds	r3, #10
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	330b      	adds	r3, #11
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	021b      	lsls	r3, r3, #8
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	330c      	adds	r3, #12
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	b29a      	uxth	r2, r3
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	330d      	adds	r3, #13
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	021b      	lsls	r3, r3, #8
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	b29a      	uxth	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	7b9a      	ldrb	r2, [r3, #14]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	7bda      	ldrb	r2, [r3, #15]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	7c1a      	ldrb	r2, [r3, #16]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	7c5a      	ldrb	r2, [r3, #17]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	745a      	strb	r2, [r3, #17]
  }
}
 800b600:	bf00      	nop
 800b602:	3714      	adds	r7, #20
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <USBH_HUB_ParseHubDescriptor>:



void  USBH_HUB_ParseHubDescriptor(HUB_DescTypeDef  *hub_descriptor,
                              uint8_t *buf)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  hub_descriptor->bDescLength         = *(uint8_t *)(buf + 0);
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	781a      	ldrb	r2, [r3, #0]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	701a      	strb	r2, [r3, #0]
  hub_descriptor->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	785a      	ldrb	r2, [r3, #1]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	705a      	strb	r2, [r3, #1]
  hub_descriptor->bNbrPorts           = *(uint8_t *)(buf + 2);
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	789a      	ldrb	r2, [r3, #2]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	709a      	strb	r2, [r3, #2]
  hub_descriptor->wHubCharacteristics = LE16(buf + 3);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	3303      	adds	r3, #3
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	b29a      	uxth	r2, r3
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	3304      	adds	r3, #4
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	021b      	lsls	r3, r3, #8
 800b640:	b29b      	uxth	r3, r3
 800b642:	4313      	orrs	r3, r2
 800b644:	b29a      	uxth	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	809a      	strh	r2, [r3, #4]
  hub_descriptor->bPwrOn2PwrGood      = *(uint8_t *)(buf + 5);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	795a      	ldrb	r2, [r3, #5]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	719a      	strb	r2, [r3, #6]
  hub_descriptor->bHubContrCurrent    = *(uint8_t *)(buf + 6);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	799a      	ldrb	r2, [r3, #6]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	71da      	strb	r2, [r3, #7]
  hub_descriptor->DeviceRemovable     = *(uint8_t *)(buf + 7);
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	79da      	ldrb	r2, [r3, #7]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	721a      	strb	r2, [r3, #8]
  hub_descriptor->PortPwrCtrlMask     = *(uint8_t *)(buf + 8);
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	7a1a      	ldrb	r2, [r3, #8]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	725a      	strb	r2, [r3, #9]

}
 800b66a:	bf00      	nop
 800b66c:	370c      	adds	r7, #12
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <USBH_HUB_ParsePortStatus>:
  HUB_Handle->HubStatus[2]         = *(uint8_t *)(buf + 2);
  HUB_Handle->HubStatus[3]         = *(uint8_t *)(buf + 3);
}

 void  USBH_HUB_ParsePortStatus(HUB_HandleTypeDef *HUB_Handle,uint8_t *buf,HUB_Port_HandleTypeDef *Port)
{
 800b676:	b480      	push	{r7}
 800b678:	b085      	sub	sp, #20
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	60f8      	str	r0, [r7, #12]
 800b67e:	60b9      	str	r1, [r7, #8]
 800b680:	607a      	str	r2, [r7, #4]
  Port->PortStatus= *(USB_HUB_PORT_STATUS *)(buf);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	6810      	ldr	r0, [r2, #0]
 800b688:	6018      	str	r0, [r3, #0]
}
 800b68a:	bf00      	nop
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <USBH_HUB_GetHIDDescriptor>:


USBH_StatusTypeDef USBH_HUB_GetHIDDescriptor(USBH_HandleTypeDef *phost,
		uint16_t length, uint8_t iface_idx, uint8_t *buf) {
 800b696:	b580      	push	{r7, lr}
 800b698:	b088      	sub	sp, #32
 800b69a:	af02      	add	r7, sp, #8
 800b69c:	60f8      	str	r0, [r7, #12]
 800b69e:	607b      	str	r3, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	817b      	strh	r3, [r7, #10]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	727b      	strb	r3, [r7, #9]
	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID, iface_idx, phost->device.Data, length);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
	status = USBH_GetDescriptor(phost,
 800b6ae:	7a79      	ldrb	r1, [r7, #9]
 800b6b0:	897a      	ldrh	r2, [r7, #10]
 800b6b2:	9201      	str	r2, [sp, #4]
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 800b6bc:	2101      	movs	r1, #1
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f001 fbf2 	bl	800cea8 <USBH_GetDescriptor>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	75fb      	strb	r3, [r7, #23]

	return status;
 800b6c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3718      	adds	r7, #24
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <USBH_HUB_GetHIDReportDescriptor>:


USBH_StatusTypeDef USBH_HUB_GetHIDReportDescriptor(USBH_HandleTypeDef *phost, uint16_t length, uint8_t iface_idx,uint8_t *buf)
  {
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b088      	sub	sp, #32
 800b6d6:	af02      	add	r7, sp, #8
 800b6d8:	60f8      	str	r0, [r7, #12]
 800b6da:	607b      	str	r3, [r7, #4]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	817b      	strh	r3, [r7, #10]
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	727b      	strb	r3, [r7, #9]

	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
 800b6e4:	7a7a      	ldrb	r2, [r7, #9]
 800b6e6:	897b      	ldrh	r3, [r7, #10]
 800b6e8:	9301      	str	r3, [sp, #4]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f001 fbd6 	bl	800cea8 <USBH_GetDescriptor>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	75fb      	strb	r3, [r7, #23]
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID_REPORT, iface_idx, buf, length);

	return status;
 800b700:	7dfb      	ldrb	r3, [r7, #23]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3718      	adds	r7, #24
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
	...

0800b70c <USBH_HUB_Device_Enum>:
#include "usbh_hub_keybd.h"
#include "usbh_hub_mouse.h"
#include "usbh_hub_gamepad.h"

USBH_StatusTypeDef USBH_HUB_Device_Enum(USBH_HandleTypeDef *phost, HUB_Port_HandleTypeDef *port)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b08a      	sub	sp, #40	; 0x28
 800b710:	af04      	add	r7, sp, #16
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
    USBH_StatusTypeDef status = USBH_BUSY;
 800b716:	2301      	movs	r3, #1
 800b718:	75fb      	strb	r3, [r7, #23]
    HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b720:	6a1b      	ldr	r3, [r3, #32]
 800b722:	613b      	str	r3, [r7, #16]

    uint8_t max_ep = 0U;
 800b724:	2300      	movs	r3, #0
 800b726:	73fb      	strb	r3, [r7, #15]
    uint8_t num = 0U;
 800b728:	2300      	movs	r3, #0
 800b72a:	75bb      	strb	r3, [r7, #22]

    switch (port->EnumState)
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	799b      	ldrb	r3, [r3, #6]
 800b730:	2b16      	cmp	r3, #22
 800b732:	f200 84cc 	bhi.w	800c0ce <USBH_HUB_Device_Enum+0x9c2>
 800b736:	a201      	add	r2, pc, #4	; (adr r2, 800b73c <USBH_HUB_Device_Enum+0x30>)
 800b738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b73c:	0800b799 	.word	0x0800b799
 800b740:	0800b85d 	.word	0x0800b85d
 800b744:	0800b88f 	.word	0x0800b88f
 800b748:	0800b8ff 	.word	0x0800b8ff
 800b74c:	0800b9db 	.word	0x0800b9db
 800b750:	0800b96f 	.word	0x0800b96f
 800b754:	0800ba01 	.word	0x0800ba01
 800b758:	0800ba23 	.word	0x0800ba23
 800b75c:	0800ba49 	.word	0x0800ba49
 800b760:	0800ba77 	.word	0x0800ba77
 800b764:	0800bb0d 	.word	0x0800bb0d
 800b768:	0800bb4f 	.word	0x0800bb4f
 800b76c:	0800bbad 	.word	0x0800bbad
 800b770:	0800bbe9 	.word	0x0800bbe9
 800b774:	0800baa5 	.word	0x0800baa5
 800b778:	0800bad3 	.word	0x0800bad3
 800b77c:	0800bc2b 	.word	0x0800bc2b
 800b780:	0800bc53 	.word	0x0800bc53
 800b784:	0800bce3 	.word	0x0800bce3
 800b788:	0800bd0b 	.word	0x0800bd0b
 800b78c:	0800bd6f 	.word	0x0800bd6f
 800b790:	0800bf03 	.word	0x0800bf03
 800b794:	0800c07f 	.word	0x0800c07f
   {
    case HUB_ENUM_INIT:
            USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80,
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	7919      	ldrb	r1, [r3, #4]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
            phost->device.address, phost->device.speed,
            USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	7992      	ldrb	r2, [r2, #6]
            USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80,
 800b7ac:	b292      	uxth	r2, r2
 800b7ae:	9202      	str	r2, [sp, #8]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	9201      	str	r2, [sp, #4]
 800b7b4:	9300      	str	r3, [sp, #0]
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2280      	movs	r2, #128	; 0x80
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f002 f826 	bl	800d80c <USBH_OpenPipe>

            USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	7959      	ldrb	r1, [r3, #5]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
            phost->device.address, phost->device.speed,
            USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	7992      	ldrb	r2, [r2, #6]
            USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b7d4:	b292      	uxth	r2, r2
 800b7d6:	9202      	str	r2, [sp, #8]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	9201      	str	r2, [sp, #4]
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f002 f812 	bl	800d80c <USBH_OpenPipe>

            port->EnumTime = phost->Timer;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
            port->DevDescNum = 0;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	71da      	strb	r2, [r3, #7]

            port->MFC = (uint8_t *)malloc(0xFF);
 800b7fa:	20ff      	movs	r0, #255	; 0xff
 800b7fc:	f002 fcca 	bl	800e194 <malloc>
 800b800:	4603      	mov	r3, r0
 800b802:	461a      	mov	r2, r3
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	60da      	str	r2, [r3, #12]
            port->Product = (uint8_t *)malloc(0xFF);
 800b808:	20ff      	movs	r0, #255	; 0xff
 800b80a:	f002 fcc3 	bl	800e194 <malloc>
 800b80e:	4603      	mov	r3, r0
 800b810:	461a      	mov	r2, r3
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	611a      	str	r2, [r3, #16]

            //No HS support
            if (port->PortStatus.wPortStatus.PORT_LOW_SPEED)
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	785b      	ldrb	r3, [r3, #1]
 800b81a:	f003 0302 	and.w	r3, r3, #2
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	2b00      	cmp	r3, #0
 800b822:	d003      	beq.n	800b82c <USBH_HUB_Device_Enum+0x120>
            {
                port->speed = USBH_SPEED_LOW;
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	2202      	movs	r2, #2
 800b828:	725a      	strb	r2, [r3, #9]
 800b82a:	e002      	b.n	800b832 <USBH_HUB_Device_Enum+0x126>
            }
            else
            {
                port->speed = USBH_SPEED_FULL;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	2201      	movs	r2, #1
 800b830:	725a      	strb	r2, [r3, #9]
            }
              port->address = HUB_Handle->portNumber+10;
 800b832:	693a      	ldr	r2, [r7, #16]
 800b834:	f241 0339 	movw	r3, #4153	; 0x1039
 800b838:	4413      	add	r3, r2
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	330a      	adds	r3, #10
 800b83e:	b2da      	uxtb	r2, r3
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	721a      	strb	r2, [r3, #8]
              phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	719a      	strb	r2, [r3, #6]
              status = USBH_BUSY;
 800b84e:	2301      	movs	r3, #1
 800b850:	75fb      	strb	r3, [r7, #23]
              port->EnumState = HUB_ENUM_RESET_PORT;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	2201      	movs	r2, #1
 800b856:	719a      	strb	r2, [r3, #6]
    break;
 800b858:	f000 bc39 	b.w	800c0ce <USBH_HUB_Device_Enum+0x9c2>

        case HUB_ENUM_RESET_PORT:
        status = USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_RESET,HUB_Handle->portNumber);
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	f241 0339 	movw	r3, #4153	; 0x1039
 800b862:	4413      	add	r3, r2
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	461a      	mov	r2, r3
 800b868:	2104      	movs	r1, #4
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f7ff fdb1 	bl	800b3d2 <USBH_HUB_SetPortFeature>
 800b870:	4603      	mov	r3, r0
 800b872:	75fb      	strb	r3, [r7, #23]
        if (status == USBH_OK)
 800b874:	7dfb      	ldrb	r3, [r7, #23]
 800b876:	2b00      	cmp	r3, #0
 800b878:	f040 8404 	bne.w	800c084 <USBH_HUB_Device_Enum+0x978>
        {
              HAL_Delay(100);
 800b87c:	2064      	movs	r0, #100	; 0x64
 800b87e:	f7f6 fae9 	bl	8001e54 <HAL_Delay>
              status = USBH_BUSY;
 800b882:	2301      	movs	r3, #1
 800b884:	75fb      	strb	r3, [r7, #23]
              port->EnumState = HUB_ENUM_RESET_PORT2;              
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2202      	movs	r2, #2
 800b88a:	719a      	strb	r2, [r3, #6]
        }

    break;
 800b88c:	e3fa      	b.n	800c084 <USBH_HUB_Device_Enum+0x978>

        case HUB_ENUM_RESET_PORT2:
        status = USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_RESET,HUB_Handle->portNumber);
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	f241 0339 	movw	r3, #4153	; 0x1039
 800b894:	4413      	add	r3, r2
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	461a      	mov	r2, r3
 800b89a:	2104      	movs	r1, #4
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7ff fd98 	bl	800b3d2 <USBH_HUB_SetPortFeature>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	75fb      	strb	r3, [r7, #23]
        if (status == USBH_OK)
 800b8a6:	7dfb      	ldrb	r3, [r7, #23]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f040 83ed 	bne.w	800c088 <USBH_HUB_Device_Enum+0x97c>
        {
            HAL_Delay(200);
 800b8ae:	20c8      	movs	r0, #200	; 0xc8
 800b8b0:	f7f6 fad0 	bl	8001e54 <HAL_Delay>

            USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, 0U, port->speed, USBH_EP_CONTROL, (uint16_t)0x40U);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	7919      	ldrb	r1, [r3, #4]
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	7a5b      	ldrb	r3, [r3, #9]
 800b8bc:	2240      	movs	r2, #64	; 0x40
 800b8be:	9202      	str	r2, [sp, #8]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	9201      	str	r2, [sp, #4]
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	2280      	movs	r2, #128	; 0x80
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f001 ff9e 	bl	800d80c <USBH_OpenPipe>
            USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, 0U, port->speed, USBH_EP_CONTROL, (uint16_t)0x40U);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	7959      	ldrb	r1, [r3, #5]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	7a5b      	ldrb	r3, [r3, #9]
 800b8d8:	2240      	movs	r2, #64	; 0x40
 800b8da:	9202      	str	r2, [sp, #8]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	9201      	str	r2, [sp, #4]
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f001 ff90 	bl	800d80c <USBH_OpenPipe>
            phost->Control.pipe_size = 0x40U;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2240      	movs	r2, #64	; 0x40
 800b8f0:	719a      	strb	r2, [r3, #6]
        
            status = USBH_BUSY;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_DEV_DESC;             
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	2203      	movs	r2, #3
 800b8fa:	719a      	strb	r2, [r3, #6]
        }
    break;
 800b8fc:	e3c4      	b.n	800c088 <USBH_HUB_Device_Enum+0x97c>
    
    case HUB_ENUM_GET_DEV_DESC:
    status = USBH_HUB_Get_DevDesc(phost, 8U,port);
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	2108      	movs	r1, #8
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f7ff fd90 	bl	800b428 <USBH_HUB_Get_DevDesc>
 800b908:	4603      	mov	r3, r0
 800b90a:	75fb      	strb	r3, [r7, #23]
        if (status == USBH_OK)
 800b90c:	7dfb      	ldrb	r3, [r7, #23]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	f040 83bc 	bne.w	800c08c <USBH_HUB_Device_Enum+0x980>
        {
        port->DevDescNum = 0;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	2200      	movs	r2, #0
 800b918:	71da      	strb	r2, [r3, #7]
        phost->Control.pipe_size = port->DevDesc.bMaxPacketSize;
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	7eda      	ldrb	r2, [r3, #27]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	719a      	strb	r2, [r3, #6]

                    USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	7919      	ldrb	r1, [r3, #4]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	7a5b      	ldrb	r3, [r3, #9]
                    0U, port->speed,
                    USBH_EP_CONTROL, (uint16_t)port->DevDesc.bMaxPacketSize);
 800b92a:	683a      	ldr	r2, [r7, #0]
 800b92c:	7ed2      	ldrb	r2, [r2, #27]
                    USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b92e:	b292      	uxth	r2, r2
 800b930:	9202      	str	r2, [sp, #8]
 800b932:	2200      	movs	r2, #0
 800b934:	9201      	str	r2, [sp, #4]
 800b936:	9300      	str	r3, [sp, #0]
 800b938:	2300      	movs	r3, #0
 800b93a:	2280      	movs	r2, #128	; 0x80
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f001 ff65 	bl	800d80c <USBH_OpenPipe>

                    USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	7959      	ldrb	r1, [r3, #5]
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	7a5b      	ldrb	r3, [r3, #9]
                    0U, port->speed,
                    USBH_EP_CONTROL, (uint16_t)port->DevDesc.bMaxPacketSize);
 800b94a:	683a      	ldr	r2, [r7, #0]
 800b94c:	7ed2      	ldrb	r2, [r2, #27]
                    USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b94e:	b292      	uxth	r2, r2
 800b950:	9202      	str	r2, [sp, #8]
 800b952:	2200      	movs	r2, #0
 800b954:	9201      	str	r2, [sp, #4]
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	2300      	movs	r3, #0
 800b95a:	2200      	movs	r2, #0
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f001 ff55 	bl	800d80c <USBH_OpenPipe>

            status = USBH_BUSY;
 800b962:	2301      	movs	r3, #1
 800b964:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_SET_ADDR;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	2205      	movs	r2, #5
 800b96a:	719a      	strb	r2, [r3, #6]
        } 
    break;
 800b96c:	e38e      	b.n	800c08c <USBH_HUB_Device_Enum+0x980>

    case HUB_ENUM_SET_ADDR:
           status = USBH_SetAddress(phost,port->address);
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	7a1b      	ldrb	r3, [r3, #8]
 800b972:	4619      	mov	r1, r3
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f001 fad1 	bl	800cf1c <USBH_SetAddress>
 800b97a:	4603      	mov	r3, r0
 800b97c:	75fb      	strb	r3, [r7, #23]
           if (status == USBH_OK)
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
 800b980:	2b00      	cmp	r3, #0
 800b982:	f040 8385 	bne.w	800c090 <USBH_HUB_Device_Enum+0x984>
           {
                    USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	7919      	ldrb	r1, [r3, #4]
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	7a18      	ldrb	r0, [r3, #8]
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	7a5b      	ldrb	r3, [r3, #9]
                    port->address, port->speed,
                    USBH_EP_CONTROL, (uint16_t)port->DevDesc.bMaxPacketSize);
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	7ed2      	ldrb	r2, [r2, #27]
                    USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b996:	b292      	uxth	r2, r2
 800b998:	9202      	str	r2, [sp, #8]
 800b99a:	2200      	movs	r2, #0
 800b99c:	9201      	str	r2, [sp, #4]
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2280      	movs	r2, #128	; 0x80
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f001 ff31 	bl	800d80c <USBH_OpenPipe>

                    USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	7959      	ldrb	r1, [r3, #5]
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	7a18      	ldrb	r0, [r3, #8]
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	7a5b      	ldrb	r3, [r3, #9]
                    port->address, port->speed,
                    USBH_EP_CONTROL, (uint16_t)port->DevDesc.bMaxPacketSize);
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	7ed2      	ldrb	r2, [r2, #27]
                    USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b9ba:	b292      	uxth	r2, r2
 800b9bc:	9202      	str	r2, [sp, #8]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	9201      	str	r2, [sp, #4]
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f001 ff1f 	bl	800d80c <USBH_OpenPipe>

            status = USBH_BUSY;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_FULL_DEV_DESC; //HUB_ENUM_GET_CFG_DESC;
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	2204      	movs	r2, #4
 800b9d6:	719a      	strb	r2, [r3, #6]
           }
    break;
 800b9d8:	e35a      	b.n	800c090 <USBH_HUB_Device_Enum+0x984>

        case HUB_ENUM_GET_FULL_DEV_DESC:
       status = USBH_HUB_Get_DevDesc(phost, port->DevDesc.bLength,port);
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	7d1b      	ldrb	r3, [r3, #20]
 800b9de:	683a      	ldr	r2, [r7, #0]
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7ff fd20 	bl	800b428 <USBH_HUB_Get_DevDesc>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	75fb      	strb	r3, [r7, #23]
        if (status == USBH_OK)
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f040 8350 	bne.w	800c094 <USBH_HUB_Device_Enum+0x988>
        {
            status = USBH_BUSY;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_CFG_DESC;
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	2206      	movs	r2, #6
 800b9fc:	719a      	strb	r2, [r3, #6]
        }
        break;
 800b9fe:	e349      	b.n	800c094 <USBH_HUB_Device_Enum+0x988>

    case HUB_ENUM_GET_CFG_DESC:
          status = USBH_HUB_Get_CfgDesc(phost,USB_CONFIGURATION_DESC_SIZE,port);
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	2109      	movs	r1, #9
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f7ff fd39 	bl	800b47c <USBH_HUB_Get_CfgDesc>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	75fb      	strb	r3, [r7, #23]
          if (status == USBH_OK)
 800ba0e:	7dfb      	ldrb	r3, [r7, #23]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f040 8341 	bne.w	800c098 <USBH_HUB_Device_Enum+0x98c>
          {
            status = USBH_BUSY;
 800ba16:	2301      	movs	r3, #1
 800ba18:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_FULL_CFG_DESC;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	2207      	movs	r2, #7
 800ba1e:	719a      	strb	r2, [r3, #6]
          }
    break;
 800ba20:	e33a      	b.n	800c098 <USBH_HUB_Device_Enum+0x98c>

    case HUB_ENUM_GET_FULL_CFG_DESC:
          status = USBH_HUB_Get_CfgDesc(phost,port->CfgDesc.wTotalLength,port);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba26:	683a      	ldr	r2, [r7, #0]
 800ba28:	4619      	mov	r1, r3
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f7ff fd26 	bl	800b47c <USBH_HUB_Get_CfgDesc>
 800ba30:	4603      	mov	r3, r0
 800ba32:	75fb      	strb	r3, [r7, #23]

          if (status == USBH_OK)
 800ba34:	7dfb      	ldrb	r3, [r7, #23]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	f040 8330 	bne.w	800c09c <USBH_HUB_Device_Enum+0x990>
          {
            status = USBH_BUSY;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_MFC_STRING_DESC;
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	2208      	movs	r2, #8
 800ba44:	719a      	strb	r2, [r3, #6]
          }

    break;
 800ba46:	e329      	b.n	800c09c <USBH_HUB_Device_Enum+0x990>

    case HUB_ENUM_GET_MFC_STRING_DESC:
          status = USBH_HUB_Get_StringDesc(phost, port->DevDesc.iManufacturer,port->MFC, 0xFFU,port);
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	68da      	ldr	r2, [r3, #12]
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	23ff      	movs	r3, #255	; 0xff
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f7ff fd3a 	bl	800b4d2 <USBH_HUB_Get_StringDesc>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	75fb      	strb	r3, [r7, #23]

          if (status == USBH_OK)
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f040 831b 	bne.w	800c0a0 <USBH_HUB_Device_Enum+0x994>
          {
            status = USBH_BUSY;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_PRODUCT_STRING_DESC;
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	2209      	movs	r2, #9
 800ba72:	719a      	strb	r2, [r3, #6]
          }
    break;
 800ba74:	e314      	b.n	800c0a0 <USBH_HUB_Device_Enum+0x994>

    case HUB_ENUM_GET_PRODUCT_STRING_DESC:
         status = USBH_HUB_Get_StringDesc(phost, port->DevDesc.iProduct,port->Product, 0xFFU,port);
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	691a      	ldr	r2, [r3, #16]
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	9300      	str	r3, [sp, #0]
 800ba84:	23ff      	movs	r3, #255	; 0xff
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f7ff fd23 	bl	800b4d2 <USBH_HUB_Get_StringDesc>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	75fb      	strb	r3, [r7, #23]
          if (status == USBH_OK)
 800ba90:	7dfb      	ldrb	r3, [r7, #23]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	f040 8306 	bne.w	800c0a4 <USBH_HUB_Device_Enum+0x998>
          {
            status = USBH_BUSY;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_SET_CONFIGURATION;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	220e      	movs	r2, #14
 800baa0:	719a      	strb	r2, [r3, #6]
          }
    break;
 800baa2:	e2ff      	b.n	800c0a4 <USBH_HUB_Device_Enum+0x998>

    //ENABLE DEVICE
        case HUB_ENUM_SET_CONFIGURATION:
            status = USBH_SetCfg(phost, (uint16_t)port->CfgDesc.bConfigurationValue);
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800baaa:	b29b      	uxth	r3, r3
 800baac:	4619      	mov	r1, r3
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f001 fa58 	bl	800cf64 <USBH_SetCfg>
 800bab4:	4603      	mov	r3, r0
 800bab6:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK)
 800bab8:	7dfb      	ldrb	r3, [r7, #23]
 800baba:	2b00      	cmp	r3, #0
 800babc:	f040 82f4 	bne.w	800c0a8 <USBH_HUB_Device_Enum+0x99c>
            {
                HAL_Delay(5);
 800bac0:	2005      	movs	r0, #5
 800bac2:	f7f6 f9c7 	bl	8001e54 <HAL_Delay>
                port->EnumState = HUB_ENUM_SET_WAKEUP_FEATURE;
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	220f      	movs	r2, #15
 800baca:	719a      	strb	r2, [r3, #6]
                status = USBH_BUSY;
 800bacc:	2301      	movs	r3, #1
 800bace:	75fb      	strb	r3, [r7, #23]
            }
    break;
 800bad0:	e2ea      	b.n	800c0a8 <USBH_HUB_Device_Enum+0x99c>

      case HUB_ENUM_SET_WAKEUP_FEATURE:
      if ((port->CfgDesc.bmAttributes) & (1U << 5))
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bad8:	f003 0320 	and.w	r3, r3, #32
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00f      	beq.n	800bb00 <USBH_HUB_Device_Enum+0x3f4>
      {
            status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800bae0:	2101      	movs	r1, #1
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f001 fa61 	bl	800cfaa <USBH_SetFeature>
 800bae8:	4603      	mov	r3, r0
 800baea:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK)
 800baec:	7dfb      	ldrb	r3, [r7, #23]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f040 82dc 	bne.w	800c0ac <USBH_HUB_Device_Enum+0x9a0>
            {

                port->EnumState = HUB_ENUM_GET_HID_DESC;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	220a      	movs	r2, #10
 800baf8:	719a      	strb	r2, [r3, #6]
                status = USBH_BUSY;
 800bafa:	2301      	movs	r3, #1
 800bafc:	75fb      	strb	r3, [r7, #23]
      else
      {
        port->EnumState = HUB_ENUM_GET_HID_DESC;
        status = USBH_BUSY;
      }
    break;
 800bafe:	e2d5      	b.n	800c0ac <USBH_HUB_Device_Enum+0x9a0>
        port->EnumState = HUB_ENUM_GET_HID_DESC;
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	220a      	movs	r2, #10
 800bb04:	719a      	strb	r2, [r3, #6]
        status = USBH_BUSY;
 800bb06:	2301      	movs	r3, #1
 800bb08:	75fb      	strb	r3, [r7, #23]
    break;
 800bb0a:	e2cf      	b.n	800c0ac <USBH_HUB_Device_Enum+0x9a0>

    case HUB_ENUM_GET_HID_DESC:
        status = USBH_HUB_GetHIDDescriptor(phost, USB_HID_DESC_SIZE, 0U,port->buff);
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800bb12:	2200      	movs	r2, #0
 800bb14:	2109      	movs	r1, #9
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f7ff fdbd 	bl	800b696 <USBH_HUB_GetHIDDescriptor>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	75fb      	strb	r3, [r7, #23]
                if (status == USBH_OK)
 800bb20:	7dfb      	ldrb	r3, [r7, #23]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	f040 82c4 	bne.w	800c0b0 <USBH_HUB_Device_Enum+0x9a4>
                {
			        USBH_HID_ParseHIDDesc(&port->HIDDesc[0], port->buff);
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800bb34:	4619      	mov	r1, r3
 800bb36:	4610      	mov	r0, r2
 800bb38:	f7fc ff6d 	bl	8008a16 <USBH_HID_ParseHIDDesc>
                    status = USBH_BUSY;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	75fb      	strb	r3, [r7, #23]
                    port->EnumState = HUB_ENUM_GET_HID_REPORT_DESC;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	220b      	movs	r2, #11
 800bb44:	719a      	strb	r2, [r3, #6]
                    HAL_Delay(5);
 800bb46:	2005      	movs	r0, #5
 800bb48:	f7f6 f984 	bl	8001e54 <HAL_Delay>
                }
    break;
 800bb4c:	e2b0      	b.n	800c0b0 <USBH_HUB_Device_Enum+0x9a4>

    case HUB_ENUM_GET_HID_REPORT_DESC:
        	status = USBH_HUB_GetHIDReportDescriptor(phost, port->HIDDesc[0].wItemLength, 0U,port->buff);
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	f8b3 106c 	ldrh.w	r1, [r3, #108]	; 0x6c
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7ff fdb8 	bl	800b6d2 <USBH_HUB_GetHIDReportDescriptor>
 800bb62:	4603      	mov	r3, r0
 800bb64:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK)
 800bb66:	7dfb      	ldrb	r3, [r7, #23]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f040 82a3 	bne.w	800c0b4 <USBH_HUB_Device_Enum+0x9a8>
            {
                HAL_Delay(5);
 800bb6e:	2005      	movs	r0, #5
 800bb70:	f7f6 f970 	bl	8001e54 <HAL_Delay>
			    parse_report_descriptor(port->buff, port->HIDDesc[0].wItemLength, &port->HIDDesc[0].RptDesc);
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	f503 70de 	add.w	r0, r3, #444	; 0x1bc
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	f8b3 106c 	ldrh.w	r1, [r3, #108]	; 0x6c
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	336e      	adds	r3, #110	; 0x6e
 800bb84:	461a      	mov	r2, r3
 800bb86:	f7fd ff23 	bl	80099d0 <parse_report_descriptor>
                if (port->CfgDesc.bNumInterfaces>1)
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d905      	bls.n	800bba0 <USBH_HUB_Device_Enum+0x494>
                {
                    //read second interface HID Descriptor if exist
                    status = USBH_BUSY;
 800bb94:	2301      	movs	r3, #1
 800bb96:	75fb      	strb	r3, [r7, #23]
                    port->EnumState = HUB_ENUM_GET_HID_DESC_INTER2;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	220c      	movs	r2, #12
 800bb9c:	719a      	strb	r2, [r3, #6]
                {
			        port->EnumState = HUB_ENUM_SET_PROTOCOL;
                    status = USBH_BUSY;
                }
		    }
    break;
 800bb9e:	e289      	b.n	800c0b4 <USBH_HUB_Device_Enum+0x9a8>
			        port->EnumState = HUB_ENUM_SET_PROTOCOL;
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	2210      	movs	r2, #16
 800bba4:	719a      	strb	r2, [r3, #6]
                    status = USBH_BUSY;
 800bba6:	2301      	movs	r3, #1
 800bba8:	75fb      	strb	r3, [r7, #23]
    break;
 800bbaa:	e283      	b.n	800c0b4 <USBH_HUB_Device_Enum+0x9a8>

    case HUB_ENUM_GET_HID_DESC_INTER2:

        status = USBH_HUB_GetHIDDescriptor(phost, USB_HID_DESC_SIZE, 1U,port->buff);
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	2109      	movs	r1, #9
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f7ff fd6d 	bl	800b696 <USBH_HUB_GetHIDDescriptor>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	75fb      	strb	r3, [r7, #23]
                if (status == USBH_OK)
 800bbc0:	7dfb      	ldrb	r3, [r7, #23]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f040 8278 	bne.w	800c0b8 <USBH_HUB_Device_Enum+0x9ac>
                {
			        USBH_HID_ParseHIDDesc(&port->HIDDesc[1], port->buff);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	4610      	mov	r0, r2
 800bbd8:	f7fc ff1d 	bl	8008a16 <USBH_HID_ParseHIDDesc>
                    status = USBH_BUSY;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	75fb      	strb	r3, [r7, #23]
                    port->EnumState = HUB_ENUM_GET_HID_REPORT_DESC_INTER2;
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	220d      	movs	r2, #13
 800bbe4:	719a      	strb	r2, [r3, #6]
                }
    break;
 800bbe6:	e267      	b.n	800c0b8 <USBH_HUB_Device_Enum+0x9ac>

    case HUB_ENUM_GET_HID_REPORT_DESC_INTER2:
        	status = USBH_HUB_GetHIDReportDescriptor(phost, port->HIDDesc[1].wItemLength, 1U,port->buff);
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	f8b3 10ac 	ldrh.w	r1, [r3, #172]	; 0xac
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f7ff fd6b 	bl	800b6d2 <USBH_HUB_GetHIDReportDescriptor>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK)
 800bc00:	7dfb      	ldrb	r3, [r7, #23]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f040 825a 	bne.w	800c0bc <USBH_HUB_Device_Enum+0x9b0>
            {
			    parse_report_descriptor(port->buff, port->HIDDesc[1].wItemLength, &port->HIDDesc[1].RptDesc);
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	f503 70de 	add.w	r0, r3, #444	; 0x1bc
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	f8b3 10ac 	ldrh.w	r1, [r3, #172]	; 0xac
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	33ae      	adds	r3, #174	; 0xae
 800bc18:	461a      	mov	r2, r3
 800bc1a:	f7fd fed9 	bl	80099d0 <parse_report_descriptor>
			    port->EnumState = HUB_ENUM_SET_PROTOCOL;
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	2210      	movs	r2, #16
 800bc22:	719a      	strb	r2, [r3, #6]
                status = USBH_BUSY;
 800bc24:	2301      	movs	r3, #1
 800bc26:	75fb      	strb	r3, [r7, #23]
		    }
    break;
 800bc28:	e248      	b.n	800c0bc <USBH_HUB_Device_Enum+0x9b0>

    case HUB_ENUM_SET_PROTOCOL:
            status = USBH_HID_SetProtocol(phost, 1U, 0U);
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	2101      	movs	r1, #1
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f7fc fecf 	bl	80089d2 <USBH_HID_SetProtocol>
 800bc34:	4603      	mov	r3, r0
 800bc36:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK || status == USBH_NOT_SUPPORTED)
 800bc38:	7dfb      	ldrb	r3, [r7, #23]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d003      	beq.n	800bc46 <USBH_HUB_Device_Enum+0x53a>
 800bc3e:	7dfb      	ldrb	r3, [r7, #23]
 800bc40:	2b03      	cmp	r3, #3
 800bc42:	f040 823d 	bne.w	800c0c0 <USBH_HUB_Device_Enum+0x9b4>
            {
                port->EnumState = HUB_ENUM_SET_IDLE;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2211      	movs	r2, #17
 800bc4a:	719a      	strb	r2, [r3, #6]
                status = USBH_BUSY;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	75fb      	strb	r3, [r7, #23]
            }
    break;
 800bc50:	e236      	b.n	800c0c0 <USBH_HUB_Device_Enum+0x9b4>

    case HUB_ENUM_SET_IDLE:
            if(port->CfgDesc.Itf_Desc[0].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[0].bInterfaceSubClass == 0x01 && (port->CfgDesc.Itf_Desc[0].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE || port->HIDDesc[0].RptDesc.type == REPORT_TYPE_KEYBOARD) )
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bc58:	2b03      	cmp	r3, #3
 800bc5a:	d11a      	bne.n	800bc92 <USBH_HUB_Device_Enum+0x586>
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d115      	bne.n	800bc92 <USBH_HUB_Device_Enum+0x586>
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d007      	beq.n	800bc80 <USBH_HUB_Device_Enum+0x574>
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800bc76:	f003 0303 	and.w	r3, r3, #3
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d108      	bne.n	800bc92 <USBH_HUB_Device_Enum+0x586>
            {
			    status = USBH_HID_SetIdle(phost, 0U, 0U, 0U);
 800bc80:	2300      	movs	r3, #0
 800bc82:	2200      	movs	r2, #0
 800bc84:	2100      	movs	r1, #0
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7fc fe49 	bl	800891e <USBH_HID_SetIdle>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	75fb      	strb	r3, [r7, #23]
 800bc90:	e00f      	b.n	800bcb2 <USBH_HUB_Device_Enum+0x5a6>
            }
            else
            {
                if (port->CfgDesc.bNumInterfaces>1)
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d905      	bls.n	800bca8 <USBH_HUB_Device_Enum+0x59c>
                {
                    //read second interface HID Descriptor if exist
                    status = USBH_BUSY;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	75fb      	strb	r3, [r7, #23]
                    port->EnumState = HUB_ENUM_SET_PROTOCOL_INTER2;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	2212      	movs	r2, #18
 800bca4:	719a      	strb	r2, [r3, #6]
 800bca6:	e004      	b.n	800bcb2 <USBH_HUB_Device_Enum+0x5a6>
                }
                else
                {
			        port->EnumState = HUB_ENUM_INTERFACE_INIT;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	2214      	movs	r2, #20
 800bcac:	719a      	strb	r2, [r3, #6]
                    status = USBH_BUSY;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (status == USBH_OK || status == USBH_NOT_SUPPORTED)
 800bcb2:	7dfb      	ldrb	r3, [r7, #23]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d003      	beq.n	800bcc0 <USBH_HUB_Device_Enum+0x5b4>
 800bcb8:	7dfb      	ldrb	r3, [r7, #23]
 800bcba:	2b03      	cmp	r3, #3
 800bcbc:	f040 8202 	bne.w	800c0c4 <USBH_HUB_Device_Enum+0x9b8>
            {
                if (port->CfgDesc.bNumInterfaces>1)
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d905      	bls.n	800bcd6 <USBH_HUB_Device_Enum+0x5ca>
                {
                    //read second interface HID Descriptor if exist
                    status = USBH_BUSY;
 800bcca:	2301      	movs	r3, #1
 800bccc:	75fb      	strb	r3, [r7, #23]
                    port->EnumState = HUB_ENUM_SET_PROTOCOL_INTER2;
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	2212      	movs	r2, #18
 800bcd2:	719a      	strb	r2, [r3, #6]
                {
			        port->EnumState = HUB_ENUM_INTERFACE_INIT;
                    status = USBH_BUSY;
                }
            }
    break;
 800bcd4:	e1f6      	b.n	800c0c4 <USBH_HUB_Device_Enum+0x9b8>
			        port->EnumState = HUB_ENUM_INTERFACE_INIT;
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	2214      	movs	r2, #20
 800bcda:	719a      	strb	r2, [r3, #6]
                    status = USBH_BUSY;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	75fb      	strb	r3, [r7, #23]
    break;
 800bce0:	e1f0      	b.n	800c0c4 <USBH_HUB_Device_Enum+0x9b8>

    case HUB_ENUM_SET_PROTOCOL_INTER2:
            status = USBH_HID_SetProtocol(phost, 1U, 1U);
 800bce2:	2201      	movs	r2, #1
 800bce4:	2101      	movs	r1, #1
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7fc fe73 	bl	80089d2 <USBH_HID_SetProtocol>
 800bcec:	4603      	mov	r3, r0
 800bcee:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK || status == USBH_NOT_SUPPORTED)
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d003      	beq.n	800bcfe <USBH_HUB_Device_Enum+0x5f2>
 800bcf6:	7dfb      	ldrb	r3, [r7, #23]
 800bcf8:	2b03      	cmp	r3, #3
 800bcfa:	f040 81e5 	bne.w	800c0c8 <USBH_HUB_Device_Enum+0x9bc>
            {
                port->EnumState = HUB_ENUM_SET_IDLE_INTER2;
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2213      	movs	r2, #19
 800bd02:	719a      	strb	r2, [r3, #6]
                status = USBH_BUSY;
 800bd04:	2301      	movs	r3, #1
 800bd06:	75fb      	strb	r3, [r7, #23]
            }
    break;
 800bd08:	e1de      	b.n	800c0c8 <USBH_HUB_Device_Enum+0x9bc>

    case HUB_ENUM_SET_IDLE_INTER2:
            if(port->CfgDesc.Itf_Desc[1].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[1].bInterfaceSubClass == 0x01 && (port->CfgDesc.Itf_Desc[1].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE || port->HIDDesc[1].RptDesc.type == REPORT_TYPE_KEYBOARD))
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800bd10:	2b03      	cmp	r3, #3
 800bd12:	d11a      	bne.n	800bd4a <USBH_HUB_Device_Enum+0x63e>
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d115      	bne.n	800bd4a <USBH_HUB_Device_Enum+0x63e>
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d007      	beq.n	800bd38 <USBH_HUB_Device_Enum+0x62c>
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800bd2e:	f003 0303 	and.w	r3, r3, #3
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d108      	bne.n	800bd4a <USBH_HUB_Device_Enum+0x63e>
            {
			    status = USBH_HID_SetIdle(phost, 0U, 0U, 1U);
 800bd38:	2301      	movs	r3, #1
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7fc fded 	bl	800891e <USBH_HID_SetIdle>
 800bd44:	4603      	mov	r3, r0
 800bd46:	75fb      	strb	r3, [r7, #23]
 800bd48:	e004      	b.n	800bd54 <USBH_HUB_Device_Enum+0x648>
            }
            else
            {
               // status = USBH_HID_SetIdle(phost, 0U, 0U, 1U);
               		port->EnumState = HUB_ENUM_INTERFACE_INIT;
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	2214      	movs	r2, #20
 800bd4e:	719a      	strb	r2, [r3, #6]
                    status = USBH_BUSY;
 800bd50:	2301      	movs	r3, #1
 800bd52:	75fb      	strb	r3, [r7, #23]
            }

            if (status == USBH_OK||status == USBH_NOT_SUPPORTED)
 800bd54:	7dfb      	ldrb	r3, [r7, #23]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d003      	beq.n	800bd62 <USBH_HUB_Device_Enum+0x656>
 800bd5a:	7dfb      	ldrb	r3, [r7, #23]
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	f040 81b5 	bne.w	800c0cc <USBH_HUB_Device_Enum+0x9c0>
            {
                    port->EnumState = HUB_ENUM_INTERFACE_INIT;
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2214      	movs	r2, #20
 800bd66:	719a      	strb	r2, [r3, #6]
                    status = USBH_BUSY;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	75fb      	strb	r3, [r7, #23]
            }
    break;
 800bd6c:	e1ae      	b.n	800c0cc <USBH_HUB_Device_Enum+0x9c0>

    case HUB_ENUM_INTERFACE_INIT:
        port->Interface[0].Id = 0;
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        port->Interface[0].length = port->HIDDesc[0].RptDesc.report_size;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
        port->Interface[0].poll   = port->CfgDesc.Itf_Desc[0].Ep_Desc[0].bInterval;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd8a:	b29a      	uxth	r2, r3
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
        port->Interface[0].ep_addr = port->CfgDesc.Itf_Desc[0].Ep_Desc[0].bEndpointAddress;
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

        max_ep = port->CfgDesc.Itf_Desc[0].bNumEndpoints;
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bda4:	73fb      	strb	r3, [r7, #15]
        num = 0;
 800bda6:	2300      	movs	r3, #0
 800bda8:	75bb      	strb	r3, [r7, #22]
        
        for (; num < max_ep; num++) {
 800bdaa:	e014      	b.n	800bdd6 <USBH_HUB_Device_Enum+0x6ca>
            
            if (port->CfgDesc.Itf_Desc[0].Ep_Desc[num].bEndpointAddress & 0x80U) 
 800bdac:	7dbb      	ldrb	r3, [r7, #22]
 800bdae:	683a      	ldr	r2, [r7, #0]
 800bdb0:	3306      	adds	r3, #6
 800bdb2:	00db      	lsls	r3, r3, #3
 800bdb4:	4413      	add	r3, r2
 800bdb6:	7b1b      	ldrb	r3, [r3, #12]
 800bdb8:	b25b      	sxtb	r3, r3
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	da08      	bge.n	800bdd0 <USBH_HUB_Device_Enum+0x6c4>
            {
				port->Interface[0].InEp = port->CfgDesc.Itf_Desc[0].Ep_Desc[num].bEndpointAddress;
 800bdbe:	7dbb      	ldrb	r3, [r7, #22]
 800bdc0:	683a      	ldr	r2, [r7, #0]
 800bdc2:	3306      	adds	r3, #6
 800bdc4:	00db      	lsls	r3, r3, #3
 800bdc6:	4413      	add	r3, r2
 800bdc8:	7b1a      	ldrb	r2, [r3, #12]
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
        for (; num < max_ep; num++) {
 800bdd0:	7dbb      	ldrb	r3, [r7, #22]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	75bb      	strb	r3, [r7, #22]
 800bdd6:	7dba      	ldrb	r2, [r7, #22]
 800bdd8:	7bfb      	ldrb	r3, [r7, #15]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d3e6      	bcc.n	800bdac <USBH_HUB_Device_Enum+0x6a0>
            } 
        }

        port->Interface[0].Pipe_in  = USBH_AllocPipe(phost,port->Interface[0].InEp);
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 800bde4:	4619      	mov	r1, r3
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f001 fd3f 	bl	800d86a <USBH_AllocPipe>
 800bdec:	4603      	mov	r3, r0
 800bdee:	461a      	mov	r2, r3
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6

        if ((port->CfgDesc.Itf_Desc[0].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[0].bInterfaceSubClass == 0x01 && port->CfgDesc.Itf_Desc[0].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE ) || (port->HIDDesc[0].RptDesc.type == REPORT_TYPE_KEYBOARD))
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bdfc:	2b03      	cmp	r3, #3
 800bdfe:	d109      	bne.n	800be14 <USBH_HUB_Device_Enum+0x708>
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800be06:	2b01      	cmp	r3, #1
 800be08:	d104      	bne.n	800be14 <USBH_HUB_Device_Enum+0x708>
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800be10:	2b01      	cmp	r3, #1
 800be12:	d007      	beq.n	800be24 <USBH_HUB_Device_Enum+0x718>
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800be1a:	f003 0303 	and.w	r3, r3, #3
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	2b02      	cmp	r3, #2
 800be22:	d104      	bne.n	800be2e <USBH_HUB_Device_Enum+0x722>
        {       
            USBH_HUB_KeybdInit(&port->Interface[0]);
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	33e4      	adds	r3, #228	; 0xe4
 800be28:	4618      	mov	r0, r3
 800be2a:	f7fe ff77 	bl	800ad1c <USBH_HUB_KeybdInit>
        }

        if ((port->CfgDesc.Itf_Desc[1].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[0].bInterfaceSubClass == 0x01 && port->CfgDesc.Itf_Desc[0].bInterfaceProtocol == HID_MOUSE_BOOT_CODE )|| (port->HIDDesc[0].RptDesc.type == REPORT_TYPE_MOUSE))
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800be34:	2b03      	cmp	r3, #3
 800be36:	d109      	bne.n	800be4c <USBH_HUB_Device_Enum+0x740>
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d104      	bne.n	800be4c <USBH_HUB_Device_Enum+0x740>
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d007      	beq.n	800be5c <USBH_HUB_Device_Enum+0x750>
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800be52:	f003 0303 	and.w	r3, r3, #3
 800be56:	b2db      	uxtb	r3, r3
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d11c      	bne.n	800be96 <USBH_HUB_Device_Enum+0x78a>
        {       
            port->Interface[0].length = port->HIDDesc[0].RptDesc.report_size + (port->HIDDesc[0].RptDesc.report_id?1:0);
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800be62:	b29a      	uxth	r2, r3
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	bf14      	ite	ne
 800be6e:	2301      	movne	r3, #1
 800be70:	2300      	moveq	r3, #0
 800be72:	b2db      	uxtb	r3, r3
 800be74:	b29b      	uxth	r3, r3
 800be76:	4413      	add	r3, r2
 800be78:	b29a      	uxth	r2, r3
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
            port->Interface[0].HIDDesc = &port->HIDDesc[0];
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
            USBH_HUB_MouseInit(&port->Interface[0]);
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	33e4      	adds	r3, #228	; 0xe4
 800be90:	4618      	mov	r0, r3
 800be92:	f7ff f851 	bl	800af38 <USBH_HUB_MouseInit>
        }

        if (port->HIDDesc[0].RptDesc.type == REPORT_TYPE_JOYSTICK)
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800be9c:	f003 0303 	and.w	r3, r3, #3
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	2b03      	cmp	r3, #3
 800bea4:	d11c      	bne.n	800bee0 <USBH_HUB_Device_Enum+0x7d4>
        {       
            port->Interface[0].length = port->HIDDesc[0].RptDesc.report_size + (port->HIDDesc[0].RptDesc.report_id?1:0);
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800beac:	b29a      	uxth	r2, r3
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	bf14      	ite	ne
 800beb8:	2301      	movne	r3, #1
 800beba:	2300      	moveq	r3, #0
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	4413      	add	r3, r2
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
            port->Interface[0].HIDDesc = &port->HIDDesc[0];
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
            USBH_HUB_GamepadInit(&port->Interface[0]);
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	33e4      	adds	r3, #228	; 0xe4
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fe fc46 	bl	800a76c <USBH_HUB_GamepadInit>
        }

        if (port->CfgDesc.bNumInterfaces>1)
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d905      	bls.n	800bef6 <USBH_HUB_Device_Enum+0x7ea>
        {
            //read second interface HID Descriptor if exist
            status = USBH_BUSY;
 800beea:	2301      	movs	r3, #1
 800beec:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_INTERFACE_2_INIT;
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	2215      	movs	r2, #21
 800bef2:	719a      	strb	r2, [r3, #6]
        } else
        {
		    port->EnumState = HUB_ENUM_READY;
            status = USBH_BUSY;
        }
    break;
 800bef4:	e0eb      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
		    port->EnumState = HUB_ENUM_READY;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2216      	movs	r2, #22
 800befa:	719a      	strb	r2, [r3, #6]
            status = USBH_BUSY;
 800befc:	2301      	movs	r3, #1
 800befe:	75fb      	strb	r3, [r7, #23]
    break;
 800bf00:	e0e5      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>

    case HUB_ENUM_INTERFACE_2_INIT:
        port->Interface[1].Id = 1;
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	2201      	movs	r2, #1
 800bf06:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        port->Interface[1].length = port->HIDDesc[1].RptDesc.report_size;
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
        port->Interface[1].poll   = port->CfgDesc.Itf_Desc[1].Ep_Desc[0].bInterval;
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800bf1e:	b29a      	uxth	r2, r3
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
        port->Interface[1].ep_addr = port->CfgDesc.Itf_Desc[1].Ep_Desc[0].bEndpointAddress;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158

        max_ep = port->CfgDesc.Itf_Desc[1].bNumEndpoints;
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bf38:	73fb      	strb	r3, [r7, #15]
        num = 0;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	75bb      	strb	r3, [r7, #22]

        for (; num < max_ep; num++) {
 800bf3e:	e016      	b.n	800bf6e <USBH_HUB_Device_Enum+0x862>
            
        if (port->CfgDesc.Itf_Desc[1].Ep_Desc[num].bEndpointAddress & 0x80U) 
 800bf40:	7dbb      	ldrb	r3, [r7, #22]
 800bf42:	683a      	ldr	r2, [r7, #0]
 800bf44:	3301      	adds	r3, #1
 800bf46:	00db      	lsls	r3, r3, #3
 800bf48:	4413      	add	r3, r2
 800bf4a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bf4e:	b25b      	sxtb	r3, r3
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	da09      	bge.n	800bf68 <USBH_HUB_Device_Enum+0x85c>
        {
	    	port->Interface[1].InEp = port->CfgDesc.Itf_Desc[1].Ep_Desc[num].bEndpointAddress;
 800bf54:	7dbb      	ldrb	r3, [r7, #22]
 800bf56:	683a      	ldr	r2, [r7, #0]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	00db      	lsls	r3, r3, #3
 800bf5c:	4413      	add	r3, r2
 800bf5e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
        for (; num < max_ep; num++) {
 800bf68:	7dbb      	ldrb	r3, [r7, #22]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	75bb      	strb	r3, [r7, #22]
 800bf6e:	7dba      	ldrb	r2, [r7, #22]
 800bf70:	7bfb      	ldrb	r3, [r7, #15]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d3e4      	bcc.n	800bf40 <USBH_HUB_Device_Enum+0x834>
        } 
        }
            port->Interface[1].Pipe_in =  USBH_AllocPipe(phost,port->Interface[1].InEp);
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f001 fc73 	bl	800d86a <USBH_AllocPipe>
 800bf84:	4603      	mov	r3, r0
 800bf86:	461a      	mov	r2, r3
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152

        if ((port->CfgDesc.Itf_Desc[1].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[1].bInterfaceSubClass == 0x01 && port->CfgDesc.Itf_Desc[1].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE) || (port->HIDDesc[1].RptDesc.type == REPORT_TYPE_KEYBOARD))
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800bf94:	2b03      	cmp	r3, #3
 800bf96:	d109      	bne.n	800bfac <USBH_HUB_Device_Enum+0x8a0>
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d104      	bne.n	800bfac <USBH_HUB_Device_Enum+0x8a0>
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d007      	beq.n	800bfbc <USBH_HUB_Device_Enum+0x8b0>
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800bfb2:	f003 0303 	and.w	r3, r3, #3
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	2b02      	cmp	r3, #2
 800bfba:	d105      	bne.n	800bfc8 <USBH_HUB_Device_Enum+0x8bc>
        {       
            USBH_HUB_KeybdInit(&port->Interface[1]);
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fe feaa 	bl	800ad1c <USBH_HUB_KeybdInit>
        }

        if ((port->CfgDesc.Itf_Desc[1].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[1].bInterfaceSubClass == 0x01 && port->CfgDesc.Itf_Desc[1].bInterfaceProtocol == HID_MOUSE_BOOT_CODE ) || (port->HIDDesc[1].RptDesc.type == REPORT_TYPE_MOUSE))
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800bfce:	2b03      	cmp	r3, #3
 800bfd0:	d109      	bne.n	800bfe6 <USBH_HUB_Device_Enum+0x8da>
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d104      	bne.n	800bfe6 <USBH_HUB_Device_Enum+0x8da>
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d007      	beq.n	800bff6 <USBH_HUB_Device_Enum+0x8ea>
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800bfec:	f003 0303 	and.w	r3, r3, #3
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d11d      	bne.n	800c032 <USBH_HUB_Device_Enum+0x926>
        {       
            port->Interface[1].length = port->HIDDesc[1].RptDesc.report_size + (port->HIDDesc[1].RptDesc.report_id?1:0);
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800c004:	2b00      	cmp	r3, #0
 800c006:	bf14      	ite	ne
 800c008:	2301      	movne	r3, #1
 800c00a:	2300      	moveq	r3, #0
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	b29b      	uxth	r3, r3
 800c010:	4413      	add	r3, r2
 800c012:	b29a      	uxth	r2, r3
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
            port->Interface[1].HIDDesc = &port->HIDDesc[1];
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
            USBH_HUB_MouseInit(&port->Interface[1]);
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fe ff83 	bl	800af38 <USBH_HUB_MouseInit>
        }

        if (port->HIDDesc[1].RptDesc.type == REPORT_TYPE_JOYSTICK)
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800c038:	f003 0303 	and.w	r3, r3, #3
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d117      	bne.n	800c072 <USBH_HUB_Device_Enum+0x966>
        {       
            port->Interface[1].length = port->HIDDesc[1].RptDesc.report_size + (port->HIDDesc[1].RptDesc.report_id?1:0);
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c048:	b29a      	uxth	r2, r3
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800c050:	2b00      	cmp	r3, #0
 800c052:	bf14      	ite	ne
 800c054:	2301      	movne	r3, #1
 800c056:	2300      	moveq	r3, #0
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	4413      	add	r3, r2
 800c05e:	b29a      	uxth	r2, r3
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
            USBH_HUB_GamepadInit(&port->Interface[1]);
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7fe fb7d 	bl	800a76c <USBH_HUB_GamepadInit>
        }
    		port->EnumState = HUB_ENUM_READY;
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2216      	movs	r2, #22
 800c076:	719a      	strb	r2, [r3, #6]
            status = USBH_BUSY;
 800c078:	2301      	movs	r3, #1
 800c07a:	75fb      	strb	r3, [r7, #23]
    break;
 800c07c:	e027      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>

    case HUB_ENUM_READY:
        status = USBH_OK;
 800c07e:	2300      	movs	r3, #0
 800c080:	75fb      	strb	r3, [r7, #23]
    break;
 800c082:	e024      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c084:	bf00      	nop
 800c086:	e022      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c088:	bf00      	nop
 800c08a:	e020      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c08c:	bf00      	nop
 800c08e:	e01e      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c090:	bf00      	nop
 800c092:	e01c      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
        break;
 800c094:	bf00      	nop
 800c096:	e01a      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c098:	bf00      	nop
 800c09a:	e018      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c09c:	bf00      	nop
 800c09e:	e016      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c0a0:	bf00      	nop
 800c0a2:	e014      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c0a4:	bf00      	nop
 800c0a6:	e012      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c0a8:	bf00      	nop
 800c0aa:	e010      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c0ac:	bf00      	nop
 800c0ae:	e00e      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c0b0:	bf00      	nop
 800c0b2:	e00c      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c0b4:	bf00      	nop
 800c0b6:	e00a      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c0b8:	bf00      	nop
 800c0ba:	e008      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c0bc:	bf00      	nop
 800c0be:	e006      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c0c0:	bf00      	nop
 800c0c2:	e004      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c0c4:	bf00      	nop
 800c0c6:	e002      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c0c8:	bf00      	nop
 800c0ca:	e000      	b.n	800c0ce <USBH_HUB_Device_Enum+0x9c2>
    break;
 800c0cc:	bf00      	nop

   }
    return status;
 800c0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3718      	adds	r7, #24
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <USBH_HUB_Device_Process>:


USBH_StatusTypeDef USBH_HUB_Device_Process(USBH_HandleTypeDef *phost)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b088      	sub	sp, #32
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
uint8_t XferSize;
USBH_StatusTypeDef status = USBH_BUSY;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	77fb      	strb	r3, [r7, #31]
HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c0ea:	6a1b      	ldr	r3, [r3, #32]
 800c0ec:	61bb      	str	r3, [r7, #24]
HUB_Port_Interface_HandleTypeDef *Itf; 


USBH_URBStateTypeDef URBStatus;

uint8_t interfaceNumber =  HUB_Handle->current_Itf_number ;
 800c0ee:	69ba      	ldr	r2, [r7, #24]
 800c0f0:	f241 033b 	movw	r3, #4155	; 0x103b
 800c0f4:	4413      	add	r3, r2
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	75fb      	strb	r3, [r7, #23]
uint8_t portNumber = HUB_Handle->current_port_number ;
 800c0fa:	69ba      	ldr	r2, [r7, #24]
 800c0fc:	f241 033a 	movw	r3, #4154	; 0x103a
 800c100:	4413      	add	r3, r2
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	75bb      	strb	r3, [r7, #22]

    port = (HUB_Port_HandleTypeDef *) &HUB_Handle->Port[portNumber];
 800c106:	7dbb      	ldrb	r3, [r7, #22]
 800c108:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800c10c:	fb02 f303 	mul.w	r3, r2, r3
 800c110:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800c114:	69ba      	ldr	r2, [r7, #24]
 800c116:	4413      	add	r3, r2
 800c118:	613b      	str	r3, [r7, #16]
    if (port->EnumState != HUB_ENUM_READY) 
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	799b      	ldrb	r3, [r3, #6]
 800c11e:	2b16      	cmp	r3, #22
 800c120:	d01c      	beq.n	800c15c <USBH_HUB_Device_Process+0x84>
    {
        if(HUB_Handle->current_port_number == 3)
 800c122:	69ba      	ldr	r2, [r7, #24]
 800c124:	f241 033a 	movw	r3, #4154	; 0x103a
 800c128:	4413      	add	r3, r2
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	2b03      	cmp	r3, #3
 800c12e:	d106      	bne.n	800c13e <USBH_HUB_Device_Process+0x66>
        {
            HUB_Handle->current_port_number = 0;
 800c130:	69ba      	ldr	r2, [r7, #24]
 800c132:	f241 033a 	movw	r3, #4154	; 0x103a
 800c136:	4413      	add	r3, r2
 800c138:	2200      	movs	r2, #0
 800c13a:	701a      	strb	r2, [r3, #0]
 800c13c:	e00c      	b.n	800c158 <USBH_HUB_Device_Process+0x80>
        } 
        else
        {
            HUB_Handle->current_port_number++;
 800c13e:	69ba      	ldr	r2, [r7, #24]
 800c140:	f241 033a 	movw	r3, #4154	; 0x103a
 800c144:	4413      	add	r3, r2
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	3301      	adds	r3, #1
 800c14a:	b2d9      	uxtb	r1, r3
 800c14c:	69ba      	ldr	r2, [r7, #24]
 800c14e:	f241 033a 	movw	r3, #4154	; 0x103a
 800c152:	4413      	add	r3, r2
 800c154:	460a      	mov	r2, r1
 800c156:	701a      	strb	r2, [r3, #0]
        }
     return status;
 800c158:	7ffb      	ldrb	r3, [r7, #31]
 800c15a:	e07d      	b.n	800c258 <USBH_HUB_Device_Process+0x180>
    }

    Itf = (HUB_Port_Interface_HandleTypeDef *) &port->Interface[interfaceNumber];
 800c15c:	7dfb      	ldrb	r3, [r7, #23]
 800c15e:	226c      	movs	r2, #108	; 0x6c
 800c160:	fb02 f303 	mul.w	r3, r2, r3
 800c164:	33e0      	adds	r3, #224	; 0xe0
 800c166:	693a      	ldr	r2, [r7, #16]
 800c168:	4413      	add	r3, r2
 800c16a:	3304      	adds	r3, #4
 800c16c:	60fb      	str	r3, [r7, #12]

    switch(Itf->state)
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	791b      	ldrb	r3, [r3, #4]
 800c172:	2b02      	cmp	r3, #2
 800c174:	d027      	beq.n	800c1c6 <USBH_HUB_Device_Process+0xee>
 800c176:	2b02      	cmp	r3, #2
 800c178:	dc6d      	bgt.n	800c256 <USBH_HUB_Device_Process+0x17e>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d002      	beq.n	800c184 <USBH_HUB_Device_Process+0xac>
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d00a      	beq.n	800c198 <USBH_HUB_Device_Process+0xc0>
 800c182:	e068      	b.n	800c256 <USBH_HUB_Device_Process+0x17e>
    {
        case HUB_DEVICE_INIT:
        USBH_HUB_SETUP_PIPES(phost,HUB_Handle,port,Itf);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	693a      	ldr	r2, [r7, #16]
 800c188:	69b9      	ldr	r1, [r7, #24]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f868 	bl	800c260 <USBH_HUB_SETUP_PIPES>
        Itf->state = HUB_DEVICE_GET_DATA;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2201      	movs	r2, #1
 800c194:	711a      	strb	r2, [r3, #4]
        break;
 800c196:	e05e      	b.n	800c256 <USBH_HUB_Device_Process+0x17e>
        case HUB_DEVICE_GET_DATA:
                
                USBH_InterruptReceiveData(phost, Itf->pData, (uint8_t) Itf->length, Itf->Pipe_in);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f103 0118 	add.w	r1, r3, #24
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	88db      	ldrh	r3, [r3, #6]
 800c1a2:	b2da      	uxtb	r2, r3
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	789b      	ldrb	r3, [r3, #2]
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f001 fb10 	bl	800d7ce <USBH_InterruptReceiveData>
                Itf->timer = phost->Timer;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	60da      	str	r2, [r3, #12]
	            Itf->DataReady = 0U;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	741a      	strb	r2, [r3, #16]
                Itf->state = HUB_DEVICE_POLL;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2202      	movs	r2, #2
 800c1c2:	711a      	strb	r2, [r3, #4]
        break;
 800c1c4:	e047      	b.n	800c256 <USBH_HUB_Device_Process+0x17e>

        case HUB_DEVICE_POLL:
                    URBStatus = USBH_LL_GetURBState(phost, Itf->Pipe_in);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	789b      	ldrb	r3, [r3, #2]
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f001 ff2f 	bl	800e030 <USBH_LL_GetURBState>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	72fb      	strb	r3, [r7, #11]
                    if (URBStatus== USBH_URB_DONE)
 800c1d6:	7afb      	ldrb	r3, [r7, #11]
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d124      	bne.n	800c226 <USBH_HUB_Device_Process+0x14e>
                    {
			            XferSize = USBH_LL_GetLastXferSize(phost, Itf->Pipe_in);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	789b      	ldrb	r3, [r3, #2]
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f001 fe92 	bl	800df0c <USBH_LL_GetLastXferSize>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	72bb      	strb	r3, [r7, #10]

                        if (Itf->DataReady == 0U && XferSize != 0U) 
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	7c1b      	ldrb	r3, [r3, #16]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d118      	bne.n	800c226 <USBH_HUB_Device_Process+0x14e>
 800c1f4:	7abb      	ldrb	r3, [r7, #10]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d015      	beq.n	800c226 <USBH_HUB_Device_Process+0x14e>
                        { 
                            USBH_HID_FifoWrite(&Itf->fifo, Itf->pData, Itf->length);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f103 0118 	add.w	r1, r3, #24
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	88db      	ldrh	r3, [r3, #6]
 800c20a:	461a      	mov	r2, r3
 800c20c:	f7fc fca3 	bl	8008b56 <USBH_HID_FifoWrite>
				            Itf->DataReady = 1U;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2201      	movs	r2, #1
 800c214:	741a      	strb	r2, [r3, #16]
                            
                            Itf->state = HUB_DEVICE_GET_DATA;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2201      	movs	r2, #1
 800c21a:	711a      	strb	r2, [r3, #4]

                            USBH_Next_Interface_Port(phost,port);
 800c21c:	6939      	ldr	r1, [r7, #16]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7fe fa44 	bl	800a6ac <USBH_Next_Interface_Port>

                            break;
 800c224:	e017      	b.n	800c256 <USBH_HUB_Device_Process+0x17e>
                        }
			        }
                    if (URBStatus == USBH_URB_STALL)
 800c226:	7afb      	ldrb	r3, [r7, #11]
 800c228:	2b05      	cmp	r3, #5
 800c22a:	d10d      	bne.n	800c248 <USBH_HUB_Device_Process+0x170>
                    {
                           while (USBH_ClrFeature(phost, Itf->ep_addr) == USBH_OK);
 800c22c:	bf00      	nop
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	7a1b      	ldrb	r3, [r3, #8]
 800c232:	4619      	mov	r1, r3
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 fedc 	bl	800cff2 <USBH_ClrFeature>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d0f6      	beq.n	800c22e <USBH_HUB_Device_Process+0x156>
                           Itf->state = HUB_DEVICE_GET_DATA;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2201      	movs	r2, #1
 800c244:	711a      	strb	r2, [r3, #4]
                           break;
 800c246:	e006      	b.n	800c256 <USBH_HUB_Device_Process+0x17e>
                    }

                    if (URBStatus == USBH_URB_ERROR)
 800c248:	7afb      	ldrb	r3, [r7, #11]
 800c24a:	2b04      	cmp	r3, #4
 800c24c:	d103      	bne.n	800c256 <USBH_HUB_Device_Process+0x17e>
                    {
                        Itf->state = HUB_DEVICE_GET_DATA;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2201      	movs	r2, #1
 800c252:	711a      	strb	r2, [r3, #4]
                        break;
 800c254:	bf00      	nop
                    }
    }

return status;
 800c256:	7ffb      	ldrb	r3, [r7, #31]
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3720      	adds	r7, #32
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <USBH_HUB_SETUP_PIPES>:

void USBH_HUB_SETUP_PIPES(USBH_HandleTypeDef *phost,HUB_HandleTypeDef *HUB_Handle,HUB_Port_HandleTypeDef *port,HUB_Port_Interface_HandleTypeDef *Itf)
{
 800c260:	b590      	push	{r4, r7, lr}
 800c262:	b089      	sub	sp, #36	; 0x24
 800c264:	af04      	add	r7, sp, #16
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	607a      	str	r2, [r7, #4]
 800c26c:	603b      	str	r3, [r7, #0]
	USBH_OpenPipe(phost, Itf->Pipe_in, Itf->InEp, port->address, port->speed, USB_EP_TYPE_INTR, Itf->length);
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	7899      	ldrb	r1, [r3, #2]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	78d8      	ldrb	r0, [r3, #3]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	7a1c      	ldrb	r4, [r3, #8]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	7a5b      	ldrb	r3, [r3, #9]
 800c27e:	683a      	ldr	r2, [r7, #0]
 800c280:	88d2      	ldrh	r2, [r2, #6]
 800c282:	9202      	str	r2, [sp, #8]
 800c284:	2203      	movs	r2, #3
 800c286:	9201      	str	r2, [sp, #4]
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	4623      	mov	r3, r4
 800c28c:	4602      	mov	r2, r0
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f001 fabc 	bl	800d80c <USBH_OpenPipe>
	USBH_LL_SetToggle(phost, Itf->Pipe_in, 0U);
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	789b      	ldrb	r3, [r3, #2]
 800c298:	2200      	movs	r2, #0
 800c29a:	4619      	mov	r1, r3
 800c29c:	68f8      	ldr	r0, [r7, #12]
 800c29e:	f001 fee8 	bl	800e072 <USBH_LL_SetToggle>
 800c2a2:	bf00      	nop
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd90      	pop	{r4, r7, pc}

0800c2aa <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b084      	sub	sp, #16
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	60f8      	str	r0, [r7, #12]
 800c2b2:	60b9      	str	r1, [r7, #8]
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d101      	bne.n	800c2c2 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c2be:	2302      	movs	r3, #2
 800c2c0:	e029      	b.n	800c316 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	79fa      	ldrb	r2, [r7, #7]
 800c2c6:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
  phost->ClassNumber = 0U;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f000 f81f 	bl	800c31e <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d003      	beq.n	800c30e <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	f001 fd0c 	bl	800dd2c <USBH_LL_Init>

  return USBH_OK;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c31e:	b480      	push	{r7}
 800c320:	b085      	sub	sp, #20
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c326:	2300      	movs	r3, #0
 800c328:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c32a:	2300      	movs	r3, #0
 800c32c:	60fb      	str	r3, [r7, #12]
 800c32e:	e008      	b.n	800c342 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	68fa      	ldr	r2, [r7, #12]
 800c334:	32e2      	adds	r2, #226	; 0xe2
 800c336:	2100      	movs	r1, #0
 800c338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	3301      	adds	r3, #1
 800c340:	60fb      	str	r3, [r7, #12]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2b0e      	cmp	r3, #14
 800c346:	d9f3      	bls.n	800c330 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c348:	2300      	movs	r3, #0
 800c34a:	60fb      	str	r3, [r7, #12]
 800c34c:	e009      	b.n	800c362 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	4413      	add	r3, r2
 800c354:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c358:	2200      	movs	r2, #0
 800c35a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	3301      	adds	r3, #1
 800c360:	60fb      	str	r3, [r7, #12]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c368:	d3f1      	bcc.n	800c34e <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2201      	movs	r2, #1
 800c37a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  phost->Control.state = CTRL_SETUP;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2240      	movs	r2, #64	; 0x40
 800c38e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d016      	beq.n	800c406 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d80e      	bhi.n	800c400 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800c3e8:	1c59      	adds	r1, r3, #1
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	f8c2 1384 	str.w	r1, [r2, #900]	; 0x384
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	33de      	adds	r3, #222	; 0xde
 800c3f4:	6839      	ldr	r1, [r7, #0]
 800c3f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	73fb      	strb	r3, [r7, #15]
 800c3fe:	e004      	b.n	800c40a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c400:	2302      	movs	r3, #2
 800c402:	73fb      	strb	r3, [r7, #15]
 800c404:	e001      	b.n	800c40a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c406:	2302      	movs	r3, #2
 800c408:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3714      	adds	r7, #20
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c418:	b480      	push	{r7}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	460b      	mov	r3, r1
 800c422:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c424:	2300      	movs	r3, #0
 800c426:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c42e:	78fa      	ldrb	r2, [r7, #3]
 800c430:	429a      	cmp	r2, r3
 800c432:	d204      	bcs.n	800c43e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	78fa      	ldrb	r2, [r7, #3]
 800c438:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c43c:	e001      	b.n	800c442 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c43e:	2302      	movs	r3, #2
 800c440:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c442:	7bfb      	ldrb	r3, [r7, #15]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3714      	adds	r7, #20
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c450:	b480      	push	{r7}
 800c452:	b087      	sub	sp, #28
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	4608      	mov	r0, r1
 800c45a:	4611      	mov	r1, r2
 800c45c:	461a      	mov	r2, r3
 800c45e:	4603      	mov	r3, r0
 800c460:	70fb      	strb	r3, [r7, #3]
 800c462:	460b      	mov	r3, r1
 800c464:	70bb      	strb	r3, [r7, #2]
 800c466:	4613      	mov	r3, r2
 800c468:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c46a:	2300      	movs	r3, #0
 800c46c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c46e:	2300      	movs	r3, #0
 800c470:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c478:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c47a:	e025      	b.n	800c4c8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c47c:	7dfb      	ldrb	r3, [r7, #23]
 800c47e:	221a      	movs	r2, #26
 800c480:	fb02 f303 	mul.w	r3, r2, r3
 800c484:	3308      	adds	r3, #8
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	4413      	add	r3, r2
 800c48a:	3302      	adds	r3, #2
 800c48c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	795b      	ldrb	r3, [r3, #5]
 800c492:	78fa      	ldrb	r2, [r7, #3]
 800c494:	429a      	cmp	r2, r3
 800c496:	d002      	beq.n	800c49e <USBH_FindInterface+0x4e>
 800c498:	78fb      	ldrb	r3, [r7, #3]
 800c49a:	2bff      	cmp	r3, #255	; 0xff
 800c49c:	d111      	bne.n	800c4c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c4a2:	78ba      	ldrb	r2, [r7, #2]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d002      	beq.n	800c4ae <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c4a8:	78bb      	ldrb	r3, [r7, #2]
 800c4aa:	2bff      	cmp	r3, #255	; 0xff
 800c4ac:	d109      	bne.n	800c4c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c4b2:	787a      	ldrb	r2, [r7, #1]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d002      	beq.n	800c4be <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c4b8:	787b      	ldrb	r3, [r7, #1]
 800c4ba:	2bff      	cmp	r3, #255	; 0xff
 800c4bc:	d101      	bne.n	800c4c2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
 800c4c0:	e006      	b.n	800c4d0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c4c2:	7dfb      	ldrb	r3, [r7, #23]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d9d6      	bls.n	800c47c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c4ce:	23ff      	movs	r3, #255	; 0xff
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	371c      	adds	r7, #28
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f001 fc99 	bl	800de1c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c4ea:	2101      	movs	r1, #1
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f001 fdb2 	bl	800e056 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c4f2:	2300      	movs	r3, #0
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3708      	adds	r7, #8
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b088      	sub	sp, #32
 800c500:	af04      	add	r7, sp, #16
 800c502:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c504:	2302      	movs	r3, #2
 800c506:	737b      	strb	r3, [r7, #13]
  uint8_t idx = 0U;
 800c508:	2300      	movs	r3, #0
 800c50a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c512:	b2db      	uxtb	r3, r3
 800c514:	2b01      	cmp	r3, #1
 800c516:	d102      	bne.n	800c51e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2203      	movs	r2, #3
 800c51c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	b2db      	uxtb	r3, r3
 800c524:	2b0b      	cmp	r3, #11
 800c526:	f200 81b8 	bhi.w	800c89a <USBH_Process+0x39e>
 800c52a:	a201      	add	r2, pc, #4	; (adr r2, 800c530 <USBH_Process+0x34>)
 800c52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c530:	0800c561 	.word	0x0800c561
 800c534:	0800c593 	.word	0x0800c593
 800c538:	0800c5fb 	.word	0x0800c5fb
 800c53c:	0800c835 	.word	0x0800c835
 800c540:	0800c89b 	.word	0x0800c89b
 800c544:	0800c69f 	.word	0x0800c69f
 800c548:	0800c7db 	.word	0x0800c7db
 800c54c:	0800c6d5 	.word	0x0800c6d5
 800c550:	0800c6f5 	.word	0x0800c6f5
 800c554:	0800c715 	.word	0x0800c715
 800c558:	0800c743 	.word	0x0800c743
 800c55c:	0800c81d 	.word	0x0800c81d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c566:	b2db      	uxtb	r3, r3
 800c568:	2b00      	cmp	r3, #0
 800c56a:	f000 8198 	beq.w	800c89e <USBH_Process+0x3a2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2201      	movs	r2, #1
 800c572:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c574:	20c8      	movs	r0, #200	; 0xc8
 800c576:	f001 fdac 	bl	800e0d2 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f001 fcab 	bl	800ded6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c590:	e185      	b.n	800c89e <USBH_Process+0x3a2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d107      	bne.n	800c5ac <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2202      	movs	r2, #2
 800c5a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c5aa:	e187      	b.n	800c8bc <USBH_Process+0x3c0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800c5b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5b6:	d914      	bls.n	800c5e2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c5be:	3301      	adds	r3, #1
 800c5c0:	b2da      	uxtb	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c5ce:	2b03      	cmp	r3, #3
 800c5d0:	d903      	bls.n	800c5da <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	220d      	movs	r2, #13
 800c5d6:	701a      	strb	r2, [r3, #0]
      break;
 800c5d8:	e170      	b.n	800c8bc <USBH_Process+0x3c0>
            phost->gState = HOST_IDLE;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	701a      	strb	r2, [r3, #0]
      break;
 800c5e0:	e16c      	b.n	800c8bc <USBH_Process+0x3c0>
          phost->Timeout += 10U;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800c5e8:	f103 020a 	add.w	r2, r3, #10
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
          USBH_Delay(10U);
 800c5f2:	200a      	movs	r0, #10
 800c5f4:	f001 fd6d 	bl	800e0d2 <USBH_Delay>
      break;
 800c5f8:	e160      	b.n	800c8bc <USBH_Process+0x3c0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c600:	2b00      	cmp	r3, #0
 800c602:	d005      	beq.n	800c610 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c60a:	2104      	movs	r1, #4
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c610:	2064      	movs	r0, #100	; 0x64
 800c612:	f001 fd5e 	bl	800e0d2 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f001 fc36 	bl	800de88 <USBH_LL_GetSpeed>
 800c61c:	4603      	mov	r3, r0
 800c61e:	461a      	mov	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2205      	movs	r2, #5
 800c62a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c62c:	2100      	movs	r1, #0
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f001 f91b 	bl	800d86a <USBH_AllocPipe>
 800c634:	4603      	mov	r3, r0
 800c636:	461a      	mov	r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c63c:	2180      	movs	r1, #128	; 0x80
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f001 f913 	bl	800d86a <USBH_AllocPipe>
 800c644:	4603      	mov	r3, r0
 800c646:	461a      	mov	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	7919      	ldrb	r1, [r3, #4]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c660:	b292      	uxth	r2, r2
 800c662:	9202      	str	r2, [sp, #8]
 800c664:	2200      	movs	r2, #0
 800c666:	9201      	str	r2, [sp, #4]
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	4603      	mov	r3, r0
 800c66c:	2280      	movs	r2, #128	; 0x80
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f001 f8cc 	bl	800d80c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	7959      	ldrb	r1, [r3, #5]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c688:	b292      	uxth	r2, r2
 800c68a:	9202      	str	r2, [sp, #8]
 800c68c:	2200      	movs	r2, #0
 800c68e:	9201      	str	r2, [sp, #4]
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	4603      	mov	r3, r0
 800c694:	2200      	movs	r2, #0
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f001 f8b8 	bl	800d80c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c69c:	e10e      	b.n	800c8bc <USBH_Process+0x3c0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 f912 	bl	800c8c8 <USBH_HandleEnum>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	737b      	strb	r3, [r7, #13]
      if (status == USBH_OK)
 800c6a8:	7b7b      	ldrb	r3, [r7, #13]
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f040 80f8 	bne.w	800c8a2 <USBH_Process+0x3a6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d103      	bne.n	800c6cc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2208      	movs	r2, #8
 800c6c8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c6ca:	e0ea      	b.n	800c8a2 <USBH_Process+0x3a6>
          phost->gState = HOST_INPUT;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2207      	movs	r2, #7
 800c6d0:	701a      	strb	r2, [r3, #0]
      break;
 800c6d2:	e0e6      	b.n	800c8a2 <USBH_Process+0x3a6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f000 80e3 	beq.w	800c8a6 <USBH_Process+0x3aa>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c6e6:	2101      	movs	r1, #1
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2208      	movs	r2, #8
 800c6f0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c6f2:	e0d8      	b.n	800c8a6 <USBH_Process+0x3aa>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 fc30 	bl	800cf64 <USBH_SetCfg>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	f040 80cf 	bne.w	800c8aa <USBH_Process+0x3ae>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2209      	movs	r2, #9
 800c710:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c712:	e0ca      	b.n	800c8aa <USBH_Process+0x3ae>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c71a:	f003 0320 	and.w	r3, r3, #32
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d00b      	beq.n	800c73a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c722:	2101      	movs	r1, #1
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 fc40 	bl	800cfaa <USBH_SetFeature>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f040 80be 	bne.w	800c8ae <USBH_Process+0x3b2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	220a      	movs	r2, #10
 800c736:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c738:	e0b9      	b.n	800c8ae <USBH_Process+0x3b2>
        phost->gState = HOST_CHECK_CLASS;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	220a      	movs	r2, #10
 800c73e:	701a      	strb	r2, [r3, #0]
      break;
 800c740:	e0b5      	b.n	800c8ae <USBH_Process+0x3b2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f000 80b2 	beq.w	800c8b2 <USBH_Process+0x3b6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c756:	2300      	movs	r3, #0
 800c758:	73fb      	strb	r3, [r7, #15]
 800c75a:	e016      	b.n	800c78a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c75c:	7bfa      	ldrb	r2, [r7, #15]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	32de      	adds	r2, #222	; 0xde
 800c762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c766:	791a      	ldrb	r2, [r3, #4]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c76e:	429a      	cmp	r2, r3
 800c770:	d108      	bne.n	800c784 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c772:	7bfa      	ldrb	r2, [r7, #15]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	32de      	adds	r2, #222	; 0xde
 800c778:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
            break;
 800c782:	e005      	b.n	800c790 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	3301      	adds	r3, #1
 800c788:	73fb      	strb	r3, [r7, #15]
 800c78a:	7bfb      	ldrb	r3, [r7, #15]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d9e5      	bls.n	800c75c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c796:	2b00      	cmp	r3, #0
 800c798:	d01b      	beq.n	800c7d2 <USBH_Process+0x2d6>
        {
         USBH_StatusTypeDef init_status = phost->pActiveClass->Init(phost);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	4798      	blx	r3
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	73bb      	strb	r3, [r7, #14]
          if (init_status == USBH_OK)
 800c7aa:	7bbb      	ldrb	r3, [r7, #14]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d109      	bne.n	800c7c4 <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2206      	movs	r2, #6
 800c7b4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c7bc:	2103      	movs	r1, #3
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c7c2:	e076      	b.n	800c8b2 <USBH_Process+0x3b6>
          else if (init_status!= USBH_BUSY)
 800c7c4:	7bbb      	ldrb	r3, [r7, #14]
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d073      	beq.n	800c8b2 <USBH_Process+0x3b6>
            phost->gState = HOST_ABORT_STATE;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	220d      	movs	r2, #13
 800c7ce:	701a      	strb	r2, [r3, #0]
      break;
 800c7d0:	e06f      	b.n	800c8b2 <USBH_Process+0x3b6>
          phost->gState = HOST_ABORT_STATE;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	220d      	movs	r2, #13
 800c7d6:	701a      	strb	r2, [r3, #0]
      break;
 800c7d8:	e06b      	b.n	800c8b2 <USBH_Process+0x3b6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d017      	beq.n	800c814 <USBH_Process+0x318>
      {
        status = phost->pActiveClass->Requests(phost);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c7ea:	691b      	ldr	r3, [r3, #16]
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	4798      	blx	r3
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	737b      	strb	r3, [r7, #13]

        if (status == USBH_OK)
 800c7f4:	7b7b      	ldrb	r3, [r7, #13]
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d103      	bne.n	800c804 <USBH_Process+0x308>
        {
          phost->gState = HOST_CLASS;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	220b      	movs	r2, #11
 800c800:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c802:	e058      	b.n	800c8b6 <USBH_Process+0x3ba>
        else if (status == USBH_FAIL)
 800c804:	7b7b      	ldrb	r3, [r7, #13]
 800c806:	b2db      	uxtb	r3, r3
 800c808:	2b02      	cmp	r3, #2
 800c80a:	d154      	bne.n	800c8b6 <USBH_Process+0x3ba>
          phost->gState = HOST_ABORT_STATE;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	220d      	movs	r2, #13
 800c810:	701a      	strb	r2, [r3, #0]
      break;
 800c812:	e050      	b.n	800c8b6 <USBH_Process+0x3ba>
        phost->gState = HOST_ABORT_STATE;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	220d      	movs	r2, #13
 800c818:	701a      	strb	r2, [r3, #0]
      break;
 800c81a:	e04c      	b.n	800c8b6 <USBH_Process+0x3ba>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c822:	2b00      	cmp	r3, #0
 800c824:	d049      	beq.n	800c8ba <USBH_Process+0x3be>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c82c:	695b      	ldr	r3, [r3, #20]
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	4798      	blx	r3
      }
      break;
 800c832:	e042      	b.n	800c8ba <USBH_Process+0x3be>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2200      	movs	r2, #0
 800c838:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7ff fd6e 	bl	800c31e <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d009      	beq.n	800c860 <USBH_Process+0x364>
      {
        phost->pActiveClass->DeInit(phost);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
      }

      if (phost->pUser != NULL)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c866:	2b00      	cmp	r3, #0
 800c868:	d005      	beq.n	800c876 <USBH_Process+0x37a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c870:	2105      	movs	r1, #5
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d107      	bne.n	800c892 <USBH_Process+0x396>
      {
        phost->device.is_ReEnumerated = 0U;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7ff fe26 	bl	800c4dc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c890:	e014      	b.n	800c8bc <USBH_Process+0x3c0>
        USBH_LL_Start(phost);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f001 fac2 	bl	800de1c <USBH_LL_Start>
      break;
 800c898:	e010      	b.n	800c8bc <USBH_Process+0x3c0>

    case HOST_ABORT_STATE:
    default :
      break;
 800c89a:	bf00      	nop
 800c89c:	e00e      	b.n	800c8bc <USBH_Process+0x3c0>
      break;
 800c89e:	bf00      	nop
 800c8a0:	e00c      	b.n	800c8bc <USBH_Process+0x3c0>
      break;
 800c8a2:	bf00      	nop
 800c8a4:	e00a      	b.n	800c8bc <USBH_Process+0x3c0>
    break;
 800c8a6:	bf00      	nop
 800c8a8:	e008      	b.n	800c8bc <USBH_Process+0x3c0>
      break;
 800c8aa:	bf00      	nop
 800c8ac:	e006      	b.n	800c8bc <USBH_Process+0x3c0>
      break;
 800c8ae:	bf00      	nop
 800c8b0:	e004      	b.n	800c8bc <USBH_Process+0x3c0>
      break;
 800c8b2:	bf00      	nop
 800c8b4:	e002      	b.n	800c8bc <USBH_Process+0x3c0>
      break;
 800c8b6:	bf00      	nop
 800c8b8:	e000      	b.n	800c8bc <USBH_Process+0x3c0>
      break;
 800c8ba:	bf00      	nop
  }
  return USBH_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop

0800c8c8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b088      	sub	sp, #32
 800c8cc:	af04      	add	r7, sp, #16
 800c8ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	785b      	ldrb	r3, [r3, #1]
 800c8dc:	2b07      	cmp	r3, #7
 800c8de:	f200 81c1 	bhi.w	800cc64 <USBH_HandleEnum+0x39c>
 800c8e2:	a201      	add	r2, pc, #4	; (adr r2, 800c8e8 <USBH_HandleEnum+0x20>)
 800c8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e8:	0800c909 	.word	0x0800c909
 800c8ec:	0800c9c7 	.word	0x0800c9c7
 800c8f0:	0800ca31 	.word	0x0800ca31
 800c8f4:	0800cabf 	.word	0x0800cabf
 800c8f8:	0800cb29 	.word	0x0800cb29
 800c8fc:	0800cb99 	.word	0x0800cb99
 800c900:	0800cbdf 	.word	0x0800cbdf
 800c904:	0800cc25 	.word	0x0800cc25
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c908:	2108      	movs	r1, #8
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 fa50 	bl	800cdb0 <USBH_Get_DevDesc>
 800c910:	4603      	mov	r3, r0
 800c912:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c914:	7bbb      	ldrb	r3, [r7, #14]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d130      	bne.n	800c97c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	7919      	ldrb	r1, [r3, #4]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c93e:	b292      	uxth	r2, r2
 800c940:	9202      	str	r2, [sp, #8]
 800c942:	2200      	movs	r2, #0
 800c944:	9201      	str	r2, [sp, #4]
 800c946:	9300      	str	r3, [sp, #0]
 800c948:	4603      	mov	r3, r0
 800c94a:	2280      	movs	r2, #128	; 0x80
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 ff5d 	bl	800d80c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	7959      	ldrb	r1, [r3, #5]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c966:	b292      	uxth	r2, r2
 800c968:	9202      	str	r2, [sp, #8]
 800c96a:	2200      	movs	r2, #0
 800c96c:	9201      	str	r2, [sp, #4]
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	4603      	mov	r3, r0
 800c972:	2200      	movs	r2, #0
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 ff49 	bl	800d80c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c97a:	e175      	b.n	800cc68 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c97c:	7bbb      	ldrb	r3, [r7, #14]
 800c97e:	2b03      	cmp	r3, #3
 800c980:	f040 8172 	bne.w	800cc68 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c98a:	3301      	adds	r3, #1
 800c98c:	b2da      	uxtb	r2, r3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c99a:	2b03      	cmp	r3, #3
 800c99c:	d903      	bls.n	800c9a6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	220d      	movs	r2, #13
 800c9a2:	701a      	strb	r2, [r3, #0]
      break;
 800c9a4:	e160      	b.n	800cc68 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	795b      	ldrb	r3, [r3, #5]
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 ff7c 	bl	800d8aa <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	791b      	ldrb	r3, [r3, #4]
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 ff76 	bl	800d8aa <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	701a      	strb	r2, [r3, #0]
      break;
 800c9c4:	e150      	b.n	800cc68 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c9c6:	2112      	movs	r1, #18
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 f9f1 	bl	800cdb0 <USBH_Get_DevDesc>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c9d2:	7bbb      	ldrb	r3, [r7, #14]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d103      	bne.n	800c9e0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2202      	movs	r2, #2
 800c9dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c9de:	e145      	b.n	800cc6c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c9e0:	7bbb      	ldrb	r3, [r7, #14]
 800c9e2:	2b03      	cmp	r3, #3
 800c9e4:	f040 8142 	bne.w	800cc6c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	b2da      	uxtb	r2, r3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c9fe:	2b03      	cmp	r3, #3
 800ca00:	d903      	bls.n	800ca0a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	220d      	movs	r2, #13
 800ca06:	701a      	strb	r2, [r3, #0]
      break;
 800ca08:	e130      	b.n	800cc6c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	795b      	ldrb	r3, [r3, #5]
 800ca0e:	4619      	mov	r1, r3
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 ff4a 	bl	800d8aa <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	791b      	ldrb	r3, [r3, #4]
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 ff44 	bl	800d8aa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2200      	movs	r2, #0
 800ca26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	701a      	strb	r2, [r3, #0]
      break;
 800ca2e:	e11d      	b.n	800cc6c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ca30:	2101      	movs	r1, #1
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 fa72 	bl	800cf1c <USBH_SetAddress>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ca3c:	7bbb      	ldrb	r3, [r7, #14]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d132      	bne.n	800caa8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ca42:	2002      	movs	r0, #2
 800ca44:	f001 fb45 	bl	800e0d2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2203      	movs	r2, #3
 800ca54:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	7919      	ldrb	r1, [r3, #4]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ca6a:	b292      	uxth	r2, r2
 800ca6c:	9202      	str	r2, [sp, #8]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	9201      	str	r2, [sp, #4]
 800ca72:	9300      	str	r3, [sp, #0]
 800ca74:	4603      	mov	r3, r0
 800ca76:	2280      	movs	r2, #128	; 0x80
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 fec7 	bl	800d80c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	7959      	ldrb	r1, [r3, #5]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ca92:	b292      	uxth	r2, r2
 800ca94:	9202      	str	r2, [sp, #8]
 800ca96:	2200      	movs	r2, #0
 800ca98:	9201      	str	r2, [sp, #4]
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2200      	movs	r2, #0
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 feb3 	bl	800d80c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800caa6:	e0e3      	b.n	800cc70 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800caa8:	7bbb      	ldrb	r3, [r7, #14]
 800caaa:	2b03      	cmp	r3, #3
 800caac:	f040 80e0 	bne.w	800cc70 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	220d      	movs	r2, #13
 800cab4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	705a      	strb	r2, [r3, #1]
      break;
 800cabc:	e0d8      	b.n	800cc70 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cabe:	2109      	movs	r1, #9
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 f99e 	bl	800ce02 <USBH_Get_CfgDesc>
 800cac6:	4603      	mov	r3, r0
 800cac8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800caca:	7bbb      	ldrb	r3, [r7, #14]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d103      	bne.n	800cad8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2204      	movs	r2, #4
 800cad4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cad6:	e0cd      	b.n	800cc74 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cad8:	7bbb      	ldrb	r3, [r7, #14]
 800cada:	2b03      	cmp	r3, #3
 800cadc:	f040 80ca 	bne.w	800cc74 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cae6:	3301      	adds	r3, #1
 800cae8:	b2da      	uxtb	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800caf6:	2b03      	cmp	r3, #3
 800caf8:	d903      	bls.n	800cb02 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	220d      	movs	r2, #13
 800cafe:	701a      	strb	r2, [r3, #0]
      break;
 800cb00:	e0b8      	b.n	800cc74 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	795b      	ldrb	r3, [r3, #5]
 800cb06:	4619      	mov	r1, r3
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fece 	bl	800d8aa <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	791b      	ldrb	r3, [r3, #4]
 800cb12:	4619      	mov	r1, r3
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 fec8 	bl	800d8aa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2200      	movs	r2, #0
 800cb24:	701a      	strb	r2, [r3, #0]
      break;
 800cb26:	e0a5      	b.n	800cc74 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800cb2e:	4619      	mov	r1, r3
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 f966 	bl	800ce02 <USBH_Get_CfgDesc>
 800cb36:	4603      	mov	r3, r0
 800cb38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cb3a:	7bbb      	ldrb	r3, [r7, #14]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d103      	bne.n	800cb48 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2205      	movs	r2, #5
 800cb44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cb46:	e097      	b.n	800cc78 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb48:	7bbb      	ldrb	r3, [r7, #14]
 800cb4a:	2b03      	cmp	r3, #3
 800cb4c:	f040 8094 	bne.w	800cc78 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cb56:	3301      	adds	r3, #1
 800cb58:	b2da      	uxtb	r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cb66:	2b03      	cmp	r3, #3
 800cb68:	d903      	bls.n	800cb72 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	220d      	movs	r2, #13
 800cb6e:	701a      	strb	r2, [r3, #0]
      break;
 800cb70:	e082      	b.n	800cc78 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	795b      	ldrb	r3, [r3, #5]
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 fe96 	bl	800d8aa <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	791b      	ldrb	r3, [r3, #4]
 800cb82:	4619      	mov	r1, r3
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 fe90 	bl	800d8aa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	701a      	strb	r2, [r3, #0]
      break;
 800cb96:	e06f      	b.n	800cc78 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d019      	beq.n	800cbd6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cbae:	23ff      	movs	r3, #255	; 0xff
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 f94c 	bl	800ce4e <USBH_Get_StringDesc>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cbba:	7bbb      	ldrb	r3, [r7, #14]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d103      	bne.n	800cbc8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2206      	movs	r2, #6
 800cbc4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cbc6:	e059      	b.n	800cc7c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cbc8:	7bbb      	ldrb	r3, [r7, #14]
 800cbca:	2b03      	cmp	r3, #3
 800cbcc:	d156      	bne.n	800cc7c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2206      	movs	r2, #6
 800cbd2:	705a      	strb	r2, [r3, #1]
      break;
 800cbd4:	e052      	b.n	800cc7c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2206      	movs	r2, #6
 800cbda:	705a      	strb	r2, [r3, #1]
      break;
 800cbdc:	e04e      	b.n	800cc7c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d019      	beq.n	800cc1c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cbf4:	23ff      	movs	r3, #255	; 0xff
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 f929 	bl	800ce4e <USBH_Get_StringDesc>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cc00:	7bbb      	ldrb	r3, [r7, #14]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d103      	bne.n	800cc0e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2207      	movs	r2, #7
 800cc0a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cc0c:	e038      	b.n	800cc80 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cc0e:	7bbb      	ldrb	r3, [r7, #14]
 800cc10:	2b03      	cmp	r3, #3
 800cc12:	d135      	bne.n	800cc80 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2207      	movs	r2, #7
 800cc18:	705a      	strb	r2, [r3, #1]
      break;
 800cc1a:	e031      	b.n	800cc80 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2207      	movs	r2, #7
 800cc20:	705a      	strb	r2, [r3, #1]
      break;
 800cc22:	e02d      	b.n	800cc80 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d017      	beq.n	800cc5e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cc3a:	23ff      	movs	r3, #255	; 0xff
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f906 	bl	800ce4e <USBH_Get_StringDesc>
 800cc42:	4603      	mov	r3, r0
 800cc44:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cc46:	7bbb      	ldrb	r3, [r7, #14]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d102      	bne.n	800cc52 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cc50:	e018      	b.n	800cc84 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cc52:	7bbb      	ldrb	r3, [r7, #14]
 800cc54:	2b03      	cmp	r3, #3
 800cc56:	d115      	bne.n	800cc84 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	73fb      	strb	r3, [r7, #15]
      break;
 800cc5c:	e012      	b.n	800cc84 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	73fb      	strb	r3, [r7, #15]
      break;
 800cc62:	e00f      	b.n	800cc84 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800cc64:	bf00      	nop
 800cc66:	e00e      	b.n	800cc86 <USBH_HandleEnum+0x3be>
      break;
 800cc68:	bf00      	nop
 800cc6a:	e00c      	b.n	800cc86 <USBH_HandleEnum+0x3be>
      break;
 800cc6c:	bf00      	nop
 800cc6e:	e00a      	b.n	800cc86 <USBH_HandleEnum+0x3be>
      break;
 800cc70:	bf00      	nop
 800cc72:	e008      	b.n	800cc86 <USBH_HandleEnum+0x3be>
      break;
 800cc74:	bf00      	nop
 800cc76:	e006      	b.n	800cc86 <USBH_HandleEnum+0x3be>
      break;
 800cc78:	bf00      	nop
 800cc7a:	e004      	b.n	800cc86 <USBH_HandleEnum+0x3be>
      break;
 800cc7c:	bf00      	nop
 800cc7e:	e002      	b.n	800cc86 <USBH_HandleEnum+0x3be>
      break;
 800cc80:	bf00      	nop
 800cc82:	e000      	b.n	800cc86 <USBH_HandleEnum+0x3be>
      break;
 800cc84:	bf00      	nop
  }
  return Status;
 800cc86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b083      	sub	sp, #12
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	683a      	ldr	r2, [r7, #0]
 800cc9e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
}
 800cca2:	bf00      	nop
 800cca4:	370c      	adds	r7, #12
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr

0800ccae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ccae:	b580      	push	{r7, lr}
 800ccb0:	b082      	sub	sp, #8
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ccbc:	1c5a      	adds	r2, r3, #1
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
  USBH_HandleSof(phost);
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 f804 	bl	800ccd2 <USBH_HandleSof>
}
 800ccca:	bf00      	nop
 800cccc:	3708      	adds	r7, #8
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b082      	sub	sp, #8
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	2b0b      	cmp	r3, #11
 800cce2:	d10a      	bne.n	800ccfa <USBH_HandleSof+0x28>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d005      	beq.n	800ccfa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ccf4:	699b      	ldr	r3, [r3, #24]
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	4798      	blx	r3
  }
}
 800ccfa:	bf00      	nop
 800ccfc:	3708      	adds	r7, #8
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cd02:	b480      	push	{r7}
 800cd04:	b083      	sub	sp, #12
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800cd12:	bf00      	nop
}
 800cd14:	370c      	adds	r7, #12
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr

0800cd1e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cd1e:	b480      	push	{r7}
 800cd20:	b083      	sub	sp, #12
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800cd2e:	bf00      	nop
}
 800cd30:	370c      	adds	r7, #12
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr

0800cd3a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800cd3a:	b480      	push	{r7}
 800cd3c:	b083      	sub	sp, #12
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2201      	movs	r2, #1
 800cd46:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2200      	movs	r2, #0
 800cd56:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800cd5a:	2300      	movs	r3, #0
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f001 f862 	bl	800de52 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	791b      	ldrb	r3, [r3, #4]
 800cd92:	4619      	mov	r1, r3
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 fd88 	bl	800d8aa <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	795b      	ldrb	r3, [r3, #5]
 800cd9e:	4619      	mov	r1, r3
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fd82 	bl	800d8aa <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800cda6:	2300      	movs	r3, #0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b086      	sub	sp, #24
 800cdb4:	af02      	add	r7, sp, #8
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, 0U,phost->device.Data,
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800cdc2:	78fa      	ldrb	r2, [r7, #3]
 800cdc4:	b292      	uxth	r2, r2
 800cdc6:	9201      	str	r2, [sp, #4]
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	2300      	movs	r3, #0
 800cdcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cdd0:	2100      	movs	r1, #0
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 f868 	bl	800cea8 <USBH_GetDescriptor>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	73fb      	strb	r3, [r7, #15]
 800cddc:	7bfb      	ldrb	r3, [r7, #15]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d10a      	bne.n	800cdf8 <USBH_Get_DevDesc+0x48>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f203 3026 	addw	r0, r3, #806	; 0x326
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cdee:	78fa      	ldrb	r2, [r7, #3]
 800cdf0:	b292      	uxth	r2, r2
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	f000 f921 	bl	800d03a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800cdf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b086      	sub	sp, #24
 800ce06:	af02      	add	r7, sp, #8
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	331c      	adds	r3, #28
 800ce12:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ce14:	887b      	ldrh	r3, [r7, #2]
 800ce16:	9301      	str	r3, [sp, #4]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	9300      	str	r3, [sp, #0]
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce22:	2100      	movs	r1, #0
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 f83f 	bl	800cea8 <USBH_GetDescriptor>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	72fb      	strb	r3, [r7, #11]
 800ce2e:	7afb      	ldrb	r3, [r7, #11]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d107      	bne.n	800ce44 <USBH_Get_CfgDesc+0x42>
                                   USB_DESC_CONFIGURATION,0U,pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ce3a:	887a      	ldrh	r2, [r7, #2]
 800ce3c:	68f9      	ldr	r1, [r7, #12]
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f000 f96b 	bl	800d11a <USBH_ParseCfgDesc>
  }

  return status;
 800ce44:	7afb      	ldrb	r3, [r7, #11]
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b088      	sub	sp, #32
 800ce52:	af02      	add	r7, sp, #8
 800ce54:	60f8      	str	r0, [r7, #12]
 800ce56:	607a      	str	r2, [r7, #4]
 800ce58:	461a      	mov	r2, r3
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	72fb      	strb	r3, [r7, #11]
 800ce5e:	4613      	mov	r3, r2
 800ce60:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ce62:	7afb      	ldrb	r3, [r7, #11]
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ce6a:	b299      	uxth	r1, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,0U,
                                   phost->device.Data, length)) == USBH_OK)
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ce72:	893a      	ldrh	r2, [r7, #8]
 800ce74:	9201      	str	r2, [sp, #4]
 800ce76:	9300      	str	r3, [sp, #0]
 800ce78:	2300      	movs	r3, #0
 800ce7a:	460a      	mov	r2, r1
 800ce7c:	2100      	movs	r1, #0
 800ce7e:	68f8      	ldr	r0, [r7, #12]
 800ce80:	f000 f812 	bl	800cea8 <USBH_GetDescriptor>
 800ce84:	4603      	mov	r3, r0
 800ce86:	75fb      	strb	r3, [r7, #23]
 800ce88:	7dfb      	ldrb	r3, [r7, #23]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d107      	bne.n	800ce9e <USBH_Get_StringDesc+0x50>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ce94:	893a      	ldrh	r2, [r7, #8]
 800ce96:	6879      	ldr	r1, [r7, #4]
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f000 fa3c 	bl	800d316 <USBH_ParseStringDesc>
  }

  return status;
 800ce9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3718      	adds	r7, #24
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <USBH_GetDescriptor>:
                                      uint8_t  req_type,
                                      uint16_t value_idx,
									  uint8_t iface_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	4608      	mov	r0, r1
 800ceb2:	4611      	mov	r1, r2
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	70fb      	strb	r3, [r7, #3]
 800ceba:	460b      	mov	r3, r1
 800cebc:	803b      	strh	r3, [r7, #0]
 800cebe:	4613      	mov	r3, r2
 800cec0:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	789b      	ldrb	r3, [r3, #2]
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d11d      	bne.n	800cf06 <USBH_GetDescriptor+0x5e>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ceca:	78fb      	ldrb	r3, [r7, #3]
 800cecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2206      	movs	r2, #6
 800ceda:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	883a      	ldrh	r2, [r7, #0]
 800cee0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cee2:	883b      	ldrh	r3, [r7, #0]
 800cee4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ceec:	d104      	bne.n	800cef8 <USBH_GetDescriptor+0x50>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f240 4209 	movw	r2, #1033	; 0x409
 800cef4:	829a      	strh	r2, [r3, #20]
 800cef6:	e003      	b.n	800cf00 <USBH_GetDescriptor+0x58>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = iface_idx;
 800cef8:	78bb      	ldrb	r3, [r7, #2]
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	8aba      	ldrh	r2, [r7, #20]
 800cf04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cf06:	8abb      	ldrh	r3, [r7, #20]
 800cf08:	461a      	mov	r2, r3
 800cf0a:	6939      	ldr	r1, [r7, #16]
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f000 fa50 	bl	800d3b2 <USBH_CtlReq>
 800cf12:	4603      	mov	r3, r0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3708      	adds	r7, #8
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	460b      	mov	r3, r1
 800cf26:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	789b      	ldrb	r3, [r3, #2]
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d10f      	bne.n	800cf50 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2205      	movs	r2, #5
 800cf3a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cf3c:	78fb      	ldrb	r3, [r7, #3]
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cf50:	2200      	movs	r2, #0
 800cf52:	2100      	movs	r1, #0
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 fa2c 	bl	800d3b2 <USBH_CtlReq>
 800cf5a:	4603      	mov	r3, r0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3708      	adds	r7, #8
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	789b      	ldrb	r3, [r3, #2]
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d10e      	bne.n	800cf96 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2209      	movs	r2, #9
 800cf82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	887a      	ldrh	r2, [r7, #2]
 800cf88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cf96:	2200      	movs	r2, #0
 800cf98:	2100      	movs	r1, #0
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 fa09 	bl	800d3b2 <USBH_CtlReq>
 800cfa0:	4603      	mov	r3, r0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b082      	sub	sp, #8
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	789b      	ldrb	r3, [r3, #2]
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d10f      	bne.n	800cfde <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2203      	movs	r2, #3
 800cfc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800cfca:	78fb      	ldrb	r3, [r7, #3]
 800cfcc:	b29a      	uxth	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cfde:	2200      	movs	r2, #0
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f9e5 	bl	800d3b2 <USBH_CtlReq>
 800cfe8:	4603      	mov	r3, r0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b082      	sub	sp, #8
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	460b      	mov	r3, r1
 800cffc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	789b      	ldrb	r3, [r3, #2]
 800d002:	2b01      	cmp	r3, #1
 800d004:	d10f      	bne.n	800d026 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2202      	movs	r2, #2
 800d00a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2201      	movs	r2, #1
 800d010:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d018:	78fb      	ldrb	r3, [r7, #3]
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d026:	2200      	movs	r2, #0
 800d028:	2100      	movs	r1, #0
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 f9c1 	bl	800d3b2 <USBH_CtlReq>
 800d030:	4603      	mov	r3, r0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d03a:	b480      	push	{r7}
 800d03c:	b085      	sub	sp, #20
 800d03e:	af00      	add	r7, sp, #0
 800d040:	60f8      	str	r0, [r7, #12]
 800d042:	60b9      	str	r1, [r7, #8]
 800d044:	4613      	mov	r3, r2
 800d046:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	781a      	ldrb	r2, [r3, #0]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	785a      	ldrb	r2, [r3, #1]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	3302      	adds	r3, #2
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	b29a      	uxth	r2, r3
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	3303      	adds	r3, #3
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	b29b      	uxth	r3, r3
 800d068:	021b      	lsls	r3, r3, #8
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	4313      	orrs	r3, r2
 800d06e:	b29a      	uxth	r2, r3
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	791a      	ldrb	r2, [r3, #4]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	795a      	ldrb	r2, [r3, #5]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	799a      	ldrb	r2, [r3, #6]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	79da      	ldrb	r2, [r3, #7]
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d094:	88fb      	ldrh	r3, [r7, #6]
 800d096:	2b08      	cmp	r3, #8
 800d098:	d939      	bls.n	800d10e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	3308      	adds	r3, #8
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	b29a      	uxth	r2, r3
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	3309      	adds	r3, #9
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	021b      	lsls	r3, r3, #8
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	b29a      	uxth	r2, r3
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	330a      	adds	r3, #10
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	b29a      	uxth	r2, r3
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	330b      	adds	r3, #11
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	021b      	lsls	r3, r3, #8
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	330c      	adds	r3, #12
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	330d      	adds	r3, #13
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	021b      	lsls	r3, r3, #8
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	b29a      	uxth	r2, r3
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	7b9a      	ldrb	r2, [r3, #14]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	7bda      	ldrb	r2, [r3, #15]
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	7c1a      	ldrb	r2, [r3, #16]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	7c5a      	ldrb	r2, [r3, #17]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	745a      	strb	r2, [r3, #17]
  }
}
 800d10e:	bf00      	nop
 800d110:	3714      	adds	r7, #20
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr

0800d11a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b08a      	sub	sp, #40	; 0x28
 800d11e:	af00      	add	r7, sp, #0
 800d120:	60f8      	str	r0, [r7, #12]
 800d122:	60b9      	str	r1, [r7, #8]
 800d124:	4613      	mov	r3, r2
 800d126:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d12c:	2300      	movs	r3, #0
 800d12e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d132:	2300      	movs	r3, #0
 800d134:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	781a      	ldrb	r2, [r3, #0]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	785a      	ldrb	r2, [r3, #1]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	3302      	adds	r3, #2
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	b29a      	uxth	r2, r3
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	3303      	adds	r3, #3
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	021b      	lsls	r3, r3, #8
 800d15e:	b29b      	uxth	r3, r3
 800d160:	4313      	orrs	r3, r2
 800d162:	b29a      	uxth	r2, r3
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	791a      	ldrb	r2, [r3, #4]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	795a      	ldrb	r2, [r3, #5]
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	799a      	ldrb	r2, [r3, #6]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	79da      	ldrb	r2, [r3, #7]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	7a1a      	ldrb	r2, [r3, #8]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d190:	88fb      	ldrh	r3, [r7, #6]
 800d192:	2b09      	cmp	r3, #9
 800d194:	d95f      	bls.n	800d256 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d196:	2309      	movs	r3, #9
 800d198:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d19a:	2300      	movs	r3, #0
 800d19c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d19e:	e051      	b.n	800d244 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d1a0:	f107 0316 	add.w	r3, r7, #22
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1a8:	f000 f8e8 	bl	800d37c <USBH_GetNextDesc>
 800d1ac:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	785b      	ldrb	r3, [r3, #1]
 800d1b2:	2b04      	cmp	r3, #4
 800d1b4:	d146      	bne.n	800d244 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d1b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d1ba:	221a      	movs	r2, #26
 800d1bc:	fb02 f303 	mul.w	r3, r2, r3
 800d1c0:	3308      	adds	r3, #8
 800d1c2:	68fa      	ldr	r2, [r7, #12]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	3302      	adds	r3, #2
 800d1c8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d1ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1cc:	69f8      	ldr	r0, [r7, #28]
 800d1ce:	f000 f846 	bl	800d25e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d1dc:	e022      	b.n	800d224 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d1de:	f107 0316 	add.w	r3, r7, #22
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1e6:	f000 f8c9 	bl	800d37c <USBH_GetNextDesc>
 800d1ea:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ee:	785b      	ldrb	r3, [r3, #1]
 800d1f0:	2b05      	cmp	r3, #5
 800d1f2:	d117      	bne.n	800d224 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d1f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d1f8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d1fc:	3201      	adds	r2, #1
 800d1fe:	00d2      	lsls	r2, r2, #3
 800d200:	211a      	movs	r1, #26
 800d202:	fb01 f303 	mul.w	r3, r1, r3
 800d206:	4413      	add	r3, r2
 800d208:	3308      	adds	r3, #8
 800d20a:	68fa      	ldr	r2, [r7, #12]
 800d20c:	4413      	add	r3, r2
 800d20e:	3304      	adds	r3, #4
 800d210:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d214:	69b8      	ldr	r0, [r7, #24]
 800d216:	f000 f851 	bl	800d2bc <USBH_ParseEPDesc>
            ep_ix++;
 800d21a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d21e:	3301      	adds	r3, #1
 800d220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	791b      	ldrb	r3, [r3, #4]
 800d228:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d204      	bcs.n	800d23a <USBH_ParseCfgDesc+0x120>
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	885a      	ldrh	r2, [r3, #2]
 800d234:	8afb      	ldrh	r3, [r7, #22]
 800d236:	429a      	cmp	r2, r3
 800d238:	d8d1      	bhi.n	800d1de <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d23a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d23e:	3301      	adds	r3, #1
 800d240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d244:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d804      	bhi.n	800d256 <USBH_ParseCfgDesc+0x13c>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	885a      	ldrh	r2, [r3, #2]
 800d250:	8afb      	ldrh	r3, [r7, #22]
 800d252:	429a      	cmp	r2, r3
 800d254:	d8a4      	bhi.n	800d1a0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d256:	bf00      	nop
 800d258:	3728      	adds	r7, #40	; 0x28
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d25e:	b480      	push	{r7}
 800d260:	b083      	sub	sp, #12
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
 800d266:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	781a      	ldrb	r2, [r3, #0]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	785a      	ldrb	r2, [r3, #1]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	789a      	ldrb	r2, [r3, #2]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	78da      	ldrb	r2, [r3, #3]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	791a      	ldrb	r2, [r3, #4]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	795a      	ldrb	r2, [r3, #5]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	799a      	ldrb	r2, [r3, #6]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	79da      	ldrb	r2, [r3, #7]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	7a1a      	ldrb	r2, [r3, #8]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	721a      	strb	r2, [r3, #8]
}
 800d2b0:	bf00      	nop
 800d2b2:	370c      	adds	r7, #12
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr

0800d2bc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b083      	sub	sp, #12
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	781a      	ldrb	r2, [r3, #0]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	785a      	ldrb	r2, [r3, #1]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	789a      	ldrb	r2, [r3, #2]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	78da      	ldrb	r2, [r3, #3]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	3304      	adds	r3, #4
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	3305      	adds	r3, #5
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	021b      	lsls	r3, r3, #8
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	799a      	ldrb	r2, [r3, #6]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	719a      	strb	r2, [r3, #6]
}
 800d30a:	bf00      	nop
 800d30c:	370c      	adds	r7, #12
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr

0800d316 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d316:	b480      	push	{r7}
 800d318:	b087      	sub	sp, #28
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	60f8      	str	r0, [r7, #12]
 800d31e:	60b9      	str	r1, [r7, #8]
 800d320:	4613      	mov	r3, r2
 800d322:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	3301      	adds	r3, #1
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	2b03      	cmp	r3, #3
 800d32c:	d120      	bne.n	800d370 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	1e9a      	subs	r2, r3, #2
 800d334:	88fb      	ldrh	r3, [r7, #6]
 800d336:	4293      	cmp	r3, r2
 800d338:	bf28      	it	cs
 800d33a:	4613      	movcs	r3, r2
 800d33c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	3302      	adds	r3, #2
 800d342:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d344:	2300      	movs	r3, #0
 800d346:	82fb      	strh	r3, [r7, #22]
 800d348:	e00b      	b.n	800d362 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d34a:	8afb      	ldrh	r3, [r7, #22]
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	4413      	add	r3, r2
 800d350:	781a      	ldrb	r2, [r3, #0]
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	3301      	adds	r3, #1
 800d35a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d35c:	8afb      	ldrh	r3, [r7, #22]
 800d35e:	3302      	adds	r3, #2
 800d360:	82fb      	strh	r3, [r7, #22]
 800d362:	8afa      	ldrh	r2, [r7, #22]
 800d364:	8abb      	ldrh	r3, [r7, #20]
 800d366:	429a      	cmp	r2, r3
 800d368:	d3ef      	bcc.n	800d34a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	2200      	movs	r2, #0
 800d36e:	701a      	strb	r2, [r3, #0]
  }
}
 800d370:	bf00      	nop
 800d372:	371c      	adds	r7, #28
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	881a      	ldrh	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	b29b      	uxth	r3, r3
 800d390:	4413      	add	r3, r2
 800d392:	b29a      	uxth	r2, r3
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3714      	adds	r7, #20
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr

0800d3b2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b086      	sub	sp, #24
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	60f8      	str	r0, [r7, #12]
 800d3ba:	60b9      	str	r1, [r7, #8]
 800d3bc:	4613      	mov	r3, r2
 800d3be:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	789b      	ldrb	r3, [r3, #2]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d002      	beq.n	800d3d2 <USBH_CtlReq+0x20>
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d00f      	beq.n	800d3f0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d3d0:	e027      	b.n	800d422 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	68ba      	ldr	r2, [r7, #8]
 800d3d6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	88fa      	ldrh	r2, [r7, #6]
 800d3dc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2202      	movs	r2, #2
 800d3e8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	75fb      	strb	r3, [r7, #23]
      break;
 800d3ee:	e018      	b.n	800d422 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d3f0:	68f8      	ldr	r0, [r7, #12]
 800d3f2:	f000 f81b 	bl	800d42c <USBH_HandleControl>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d3fa:	7dfb      	ldrb	r3, [r7, #23]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d002      	beq.n	800d406 <USBH_CtlReq+0x54>
 800d400:	7dfb      	ldrb	r3, [r7, #23]
 800d402:	2b03      	cmp	r3, #3
 800d404:	d106      	bne.n	800d414 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2201      	movs	r2, #1
 800d40a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2200      	movs	r2, #0
 800d410:	761a      	strb	r2, [r3, #24]
      break;
 800d412:	e005      	b.n	800d420 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d414:	7dfb      	ldrb	r3, [r7, #23]
 800d416:	2b02      	cmp	r3, #2
 800d418:	d102      	bne.n	800d420 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2201      	movs	r2, #1
 800d41e:	709a      	strb	r2, [r3, #2]
      break;
 800d420:	bf00      	nop
  }
  return status;
 800d422:	7dfb      	ldrb	r3, [r7, #23]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3718      	adds	r7, #24
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af02      	add	r7, sp, #8
 800d432:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d434:	2301      	movs	r3, #1
 800d436:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d438:	2300      	movs	r3, #0
 800d43a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	7e1b      	ldrb	r3, [r3, #24]
 800d440:	3b01      	subs	r3, #1
 800d442:	2b0a      	cmp	r3, #10
 800d444:	f200 8156 	bhi.w	800d6f4 <USBH_HandleControl+0x2c8>
 800d448:	a201      	add	r2, pc, #4	; (adr r2, 800d450 <USBH_HandleControl+0x24>)
 800d44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d44e:	bf00      	nop
 800d450:	0800d47d 	.word	0x0800d47d
 800d454:	0800d497 	.word	0x0800d497
 800d458:	0800d501 	.word	0x0800d501
 800d45c:	0800d527 	.word	0x0800d527
 800d460:	0800d55f 	.word	0x0800d55f
 800d464:	0800d589 	.word	0x0800d589
 800d468:	0800d5db 	.word	0x0800d5db
 800d46c:	0800d5fd 	.word	0x0800d5fd
 800d470:	0800d639 	.word	0x0800d639
 800d474:	0800d65f 	.word	0x0800d65f
 800d478:	0800d69d 	.word	0x0800d69d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f103 0110 	add.w	r1, r3, #16
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	795b      	ldrb	r3, [r3, #5]
 800d486:	461a      	mov	r2, r3
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 f943 	bl	800d714 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2202      	movs	r2, #2
 800d492:	761a      	strb	r2, [r3, #24]
      break;
 800d494:	e139      	b.n	800d70a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	795b      	ldrb	r3, [r3, #5]
 800d49a:	4619      	mov	r1, r3
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 fdc7 	bl	800e030 <USBH_LL_GetURBState>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d4a6:	7bbb      	ldrb	r3, [r7, #14]
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d11e      	bne.n	800d4ea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	7c1b      	ldrb	r3, [r3, #16]
 800d4b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d4b4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	8adb      	ldrh	r3, [r3, #22]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d00a      	beq.n	800d4d4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d4be:	7b7b      	ldrb	r3, [r7, #13]
 800d4c0:	2b80      	cmp	r3, #128	; 0x80
 800d4c2:	d103      	bne.n	800d4cc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2203      	movs	r2, #3
 800d4c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d4ca:	e115      	b.n	800d6f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2205      	movs	r2, #5
 800d4d0:	761a      	strb	r2, [r3, #24]
      break;
 800d4d2:	e111      	b.n	800d6f8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d4d4:	7b7b      	ldrb	r3, [r7, #13]
 800d4d6:	2b80      	cmp	r3, #128	; 0x80
 800d4d8:	d103      	bne.n	800d4e2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2209      	movs	r2, #9
 800d4de:	761a      	strb	r2, [r3, #24]
      break;
 800d4e0:	e10a      	b.n	800d6f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2207      	movs	r2, #7
 800d4e6:	761a      	strb	r2, [r3, #24]
      break;
 800d4e8:	e106      	b.n	800d6f8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d4ea:	7bbb      	ldrb	r3, [r7, #14]
 800d4ec:	2b04      	cmp	r3, #4
 800d4ee:	d003      	beq.n	800d4f8 <USBH_HandleControl+0xcc>
 800d4f0:	7bbb      	ldrb	r3, [r7, #14]
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	f040 8100 	bne.w	800d6f8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	220b      	movs	r2, #11
 800d4fc:	761a      	strb	r2, [r3, #24]
      break;
 800d4fe:	e0fb      	b.n	800d6f8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d506:	b29a      	uxth	r2, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6899      	ldr	r1, [r3, #8]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	899a      	ldrh	r2, [r3, #12]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	791b      	ldrb	r3, [r3, #4]
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 f93a 	bl	800d792 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2204      	movs	r2, #4
 800d522:	761a      	strb	r2, [r3, #24]
      break;
 800d524:	e0f1      	b.n	800d70a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	791b      	ldrb	r3, [r3, #4]
 800d52a:	4619      	mov	r1, r3
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 fd7f 	bl	800e030 <USBH_LL_GetURBState>
 800d532:	4603      	mov	r3, r0
 800d534:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d536:	7bbb      	ldrb	r3, [r7, #14]
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d102      	bne.n	800d542 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2209      	movs	r2, #9
 800d540:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d542:	7bbb      	ldrb	r3, [r7, #14]
 800d544:	2b05      	cmp	r3, #5
 800d546:	d102      	bne.n	800d54e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d548:	2303      	movs	r3, #3
 800d54a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d54c:	e0d6      	b.n	800d6fc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d54e:	7bbb      	ldrb	r3, [r7, #14]
 800d550:	2b04      	cmp	r3, #4
 800d552:	f040 80d3 	bne.w	800d6fc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	220b      	movs	r2, #11
 800d55a:	761a      	strb	r2, [r3, #24]
      break;
 800d55c:	e0ce      	b.n	800d6fc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6899      	ldr	r1, [r3, #8]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	899a      	ldrh	r2, [r3, #12]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	795b      	ldrb	r3, [r3, #5]
 800d56a:	2001      	movs	r0, #1
 800d56c:	9000      	str	r0, [sp, #0]
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 f8ea 	bl	800d748 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2206      	movs	r2, #6
 800d584:	761a      	strb	r2, [r3, #24]
      break;
 800d586:	e0c0      	b.n	800d70a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	795b      	ldrb	r3, [r3, #5]
 800d58c:	4619      	mov	r1, r3
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 fd4e 	bl	800e030 <USBH_LL_GetURBState>
 800d594:	4603      	mov	r3, r0
 800d596:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d598:	7bbb      	ldrb	r3, [r7, #14]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d103      	bne.n	800d5a6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2207      	movs	r2, #7
 800d5a2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d5a4:	e0ac      	b.n	800d700 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d5a6:	7bbb      	ldrb	r3, [r7, #14]
 800d5a8:	2b05      	cmp	r3, #5
 800d5aa:	d105      	bne.n	800d5b8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	220c      	movs	r2, #12
 800d5b0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d5b2:	2303      	movs	r3, #3
 800d5b4:	73fb      	strb	r3, [r7, #15]
      break;
 800d5b6:	e0a3      	b.n	800d700 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d5b8:	7bbb      	ldrb	r3, [r7, #14]
 800d5ba:	2b02      	cmp	r3, #2
 800d5bc:	d103      	bne.n	800d5c6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2205      	movs	r2, #5
 800d5c2:	761a      	strb	r2, [r3, #24]
      break;
 800d5c4:	e09c      	b.n	800d700 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d5c6:	7bbb      	ldrb	r3, [r7, #14]
 800d5c8:	2b04      	cmp	r3, #4
 800d5ca:	f040 8099 	bne.w	800d700 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	220b      	movs	r2, #11
 800d5d2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d5d4:	2302      	movs	r3, #2
 800d5d6:	73fb      	strb	r3, [r7, #15]
      break;
 800d5d8:	e092      	b.n	800d700 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	791b      	ldrb	r3, [r3, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 f8d5 	bl	800d792 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2208      	movs	r2, #8
 800d5f8:	761a      	strb	r2, [r3, #24]

      break;
 800d5fa:	e086      	b.n	800d70a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	791b      	ldrb	r3, [r3, #4]
 800d600:	4619      	mov	r1, r3
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fd14 	bl	800e030 <USBH_LL_GetURBState>
 800d608:	4603      	mov	r3, r0
 800d60a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d60c:	7bbb      	ldrb	r3, [r7, #14]
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d105      	bne.n	800d61e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	220d      	movs	r2, #13
 800d616:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d618:	2300      	movs	r3, #0
 800d61a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d61c:	e072      	b.n	800d704 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d61e:	7bbb      	ldrb	r3, [r7, #14]
 800d620:	2b04      	cmp	r3, #4
 800d622:	d103      	bne.n	800d62c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	220b      	movs	r2, #11
 800d628:	761a      	strb	r2, [r3, #24]
      break;
 800d62a:	e06b      	b.n	800d704 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d62c:	7bbb      	ldrb	r3, [r7, #14]
 800d62e:	2b05      	cmp	r3, #5
 800d630:	d168      	bne.n	800d704 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d632:	2303      	movs	r3, #3
 800d634:	73fb      	strb	r3, [r7, #15]
      break;
 800d636:	e065      	b.n	800d704 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	795b      	ldrb	r3, [r3, #5]
 800d63c:	2201      	movs	r2, #1
 800d63e:	9200      	str	r2, [sp, #0]
 800d640:	2200      	movs	r2, #0
 800d642:	2100      	movs	r1, #0
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 f87f 	bl	800d748 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d650:	b29a      	uxth	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	220a      	movs	r2, #10
 800d65a:	761a      	strb	r2, [r3, #24]
      break;
 800d65c:	e055      	b.n	800d70a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	795b      	ldrb	r3, [r3, #5]
 800d662:	4619      	mov	r1, r3
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 fce3 	bl	800e030 <USBH_LL_GetURBState>
 800d66a:	4603      	mov	r3, r0
 800d66c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d66e:	7bbb      	ldrb	r3, [r7, #14]
 800d670:	2b01      	cmp	r3, #1
 800d672:	d105      	bne.n	800d680 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d674:	2300      	movs	r3, #0
 800d676:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	220d      	movs	r2, #13
 800d67c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d67e:	e043      	b.n	800d708 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d680:	7bbb      	ldrb	r3, [r7, #14]
 800d682:	2b02      	cmp	r3, #2
 800d684:	d103      	bne.n	800d68e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2209      	movs	r2, #9
 800d68a:	761a      	strb	r2, [r3, #24]
      break;
 800d68c:	e03c      	b.n	800d708 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d68e:	7bbb      	ldrb	r3, [r7, #14]
 800d690:	2b04      	cmp	r3, #4
 800d692:	d139      	bne.n	800d708 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	220b      	movs	r2, #11
 800d698:	761a      	strb	r2, [r3, #24]
      break;
 800d69a:	e035      	b.n	800d708 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	7e5b      	ldrb	r3, [r3, #25]
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	765a      	strb	r2, [r3, #25]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	7e5b      	ldrb	r3, [r3, #25]
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d806      	bhi.n	800d6be <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d6bc:	e025      	b.n	800d70a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d6c4:	2106      	movs	r1, #6
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	795b      	ldrb	r3, [r3, #5]
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 f8e7 	bl	800d8aa <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	791b      	ldrb	r3, [r3, #4]
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 f8e1 	bl	800d8aa <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d6ee:	2302      	movs	r3, #2
 800d6f0:	73fb      	strb	r3, [r7, #15]
      break;
 800d6f2:	e00a      	b.n	800d70a <USBH_HandleControl+0x2de>

    default:
      break;
 800d6f4:	bf00      	nop
 800d6f6:	e008      	b.n	800d70a <USBH_HandleControl+0x2de>
      break;
 800d6f8:	bf00      	nop
 800d6fa:	e006      	b.n	800d70a <USBH_HandleControl+0x2de>
      break;
 800d6fc:	bf00      	nop
 800d6fe:	e004      	b.n	800d70a <USBH_HandleControl+0x2de>
      break;
 800d700:	bf00      	nop
 800d702:	e002      	b.n	800d70a <USBH_HandleControl+0x2de>
      break;
 800d704:	bf00      	nop
 800d706:	e000      	b.n	800d70a <USBH_HandleControl+0x2de>
      break;
 800d708:	bf00      	nop
  }

  return status;
 800d70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b088      	sub	sp, #32
 800d718:	af04      	add	r7, sp, #16
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	4613      	mov	r3, r2
 800d720:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d722:	79f9      	ldrb	r1, [r7, #7]
 800d724:	2300      	movs	r3, #0
 800d726:	9303      	str	r3, [sp, #12]
 800d728:	2308      	movs	r3, #8
 800d72a:	9302      	str	r3, [sp, #8]
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	9301      	str	r3, [sp, #4]
 800d730:	2300      	movs	r3, #0
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	2300      	movs	r3, #0
 800d736:	2200      	movs	r2, #0
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f000 fc48 	bl	800dfce <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d73e:	2300      	movs	r3, #0
}
 800d740:	4618      	mov	r0, r3
 800d742:	3710      	adds	r7, #16
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b088      	sub	sp, #32
 800d74c:	af04      	add	r7, sp, #16
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	4611      	mov	r1, r2
 800d754:	461a      	mov	r2, r3
 800d756:	460b      	mov	r3, r1
 800d758:	80fb      	strh	r3, [r7, #6]
 800d75a:	4613      	mov	r3, r2
 800d75c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d764:	2b00      	cmp	r3, #0
 800d766:	d001      	beq.n	800d76c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d768:	2300      	movs	r3, #0
 800d76a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d76c:	7979      	ldrb	r1, [r7, #5]
 800d76e:	7e3b      	ldrb	r3, [r7, #24]
 800d770:	9303      	str	r3, [sp, #12]
 800d772:	88fb      	ldrh	r3, [r7, #6]
 800d774:	9302      	str	r3, [sp, #8]
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	9301      	str	r3, [sp, #4]
 800d77a:	2301      	movs	r3, #1
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	2300      	movs	r3, #0
 800d780:	2200      	movs	r2, #0
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f000 fc23 	bl	800dfce <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d788:	2300      	movs	r3, #0
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d792:	b580      	push	{r7, lr}
 800d794:	b088      	sub	sp, #32
 800d796:	af04      	add	r7, sp, #16
 800d798:	60f8      	str	r0, [r7, #12]
 800d79a:	60b9      	str	r1, [r7, #8]
 800d79c:	4611      	mov	r1, r2
 800d79e:	461a      	mov	r2, r3
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	80fb      	strh	r3, [r7, #6]
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d7a8:	7979      	ldrb	r1, [r7, #5]
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	9303      	str	r3, [sp, #12]
 800d7ae:	88fb      	ldrh	r3, [r7, #6]
 800d7b0:	9302      	str	r3, [sp, #8]
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	9301      	str	r3, [sp, #4]
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	2201      	movs	r2, #1
 800d7be:	68f8      	ldr	r0, [r7, #12]
 800d7c0:	f000 fc05 	bl	800dfce <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d7c4:	2300      	movs	r3, #0

}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b088      	sub	sp, #32
 800d7d2:	af04      	add	r7, sp, #16
 800d7d4:	60f8      	str	r0, [r7, #12]
 800d7d6:	60b9      	str	r1, [r7, #8]
 800d7d8:	4611      	mov	r1, r2
 800d7da:	461a      	mov	r2, r3
 800d7dc:	460b      	mov	r3, r1
 800d7de:	71fb      	strb	r3, [r7, #7]
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d7e4:	79fb      	ldrb	r3, [r7, #7]
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	79b9      	ldrb	r1, [r7, #6]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	9203      	str	r2, [sp, #12]
 800d7ee:	9302      	str	r3, [sp, #8]
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	9301      	str	r3, [sp, #4]
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	9300      	str	r3, [sp, #0]
 800d7f8:	2303      	movs	r3, #3
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	68f8      	ldr	r0, [r7, #12]
 800d7fe:	f000 fbe6 	bl	800dfce <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800d802:	2300      	movs	r3, #0
}
 800d804:	4618      	mov	r0, r3
 800d806:	3710      	adds	r7, #16
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b086      	sub	sp, #24
 800d810:	af04      	add	r7, sp, #16
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	4608      	mov	r0, r1
 800d816:	4611      	mov	r1, r2
 800d818:	461a      	mov	r2, r3
 800d81a:	4603      	mov	r3, r0
 800d81c:	70fb      	strb	r3, [r7, #3]
 800d81e:	460b      	mov	r3, r1
 800d820:	70bb      	strb	r3, [r7, #2]
 800d822:	4613      	mov	r3, r2
 800d824:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d826:	7878      	ldrb	r0, [r7, #1]
 800d828:	78ba      	ldrb	r2, [r7, #2]
 800d82a:	78f9      	ldrb	r1, [r7, #3]
 800d82c:	8b3b      	ldrh	r3, [r7, #24]
 800d82e:	9302      	str	r3, [sp, #8]
 800d830:	7d3b      	ldrb	r3, [r7, #20]
 800d832:	9301      	str	r3, [sp, #4]
 800d834:	7c3b      	ldrb	r3, [r7, #16]
 800d836:	9300      	str	r3, [sp, #0]
 800d838:	4603      	mov	r3, r0
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fb79 	bl	800df32 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d840:	2300      	movs	r3, #0
}
 800d842:	4618      	mov	r0, r3
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d84a:	b580      	push	{r7, lr}
 800d84c:	b082      	sub	sp, #8
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
 800d852:	460b      	mov	r3, r1
 800d854:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d856:	78fb      	ldrb	r3, [r7, #3]
 800d858:	4619      	mov	r1, r3
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 fb98 	bl	800df90 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d860:	2300      	movs	r3, #0
}
 800d862:	4618      	mov	r0, r3
 800d864:	3708      	adds	r7, #8
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}

0800d86a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b084      	sub	sp, #16
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
 800d872:	460b      	mov	r3, r1
 800d874:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 f833 	bl	800d8e2 <USBH_GetFreePipe>
 800d87c:	4603      	mov	r3, r0
 800d87e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d880:	89fb      	ldrh	r3, [r7, #14]
 800d882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d886:	4293      	cmp	r3, r2
 800d888:	d009      	beq.n	800d89e <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d88a:	78fb      	ldrb	r3, [r7, #3]
 800d88c:	89fa      	ldrh	r2, [r7, #14]
 800d88e:	f002 020f 	and.w	r2, r2, #15
 800d892:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	32e2      	adds	r2, #226	; 0xe2
 800d89a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800d89e:	89fb      	ldrh	r3, [r7, #14]
 800d8a0:	b2db      	uxtb	r3, r3
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d8aa:	b480      	push	{r7}
 800d8ac:	b083      	sub	sp, #12
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d8b6:	78fb      	ldrb	r3, [r7, #3]
 800d8b8:	2b0a      	cmp	r3, #10
 800d8ba:	d80b      	bhi.n	800d8d4 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d8bc:	78fa      	ldrb	r2, [r7, #3]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	32e2      	adds	r2, #226	; 0xe2
 800d8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8c6:	78fa      	ldrb	r2, [r7, #3]
 800d8c8:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	32e2      	adds	r2, #226	; 0xe2
 800d8d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	370c      	adds	r7, #12
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr

0800d8e2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d8e2:	b480      	push	{r7}
 800d8e4:	b085      	sub	sp, #20
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	73fb      	strb	r3, [r7, #15]
 800d8f2:	e00e      	b.n	800d912 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d8f4:	7bfa      	ldrb	r2, [r7, #15]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	32e2      	adds	r2, #226	; 0xe2
 800d8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d902:	2b00      	cmp	r3, #0
 800d904:	d102      	bne.n	800d90c <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800d906:	7bfb      	ldrb	r3, [r7, #15]
 800d908:	b29b      	uxth	r3, r3
 800d90a:	e007      	b.n	800d91c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800d90c:	7bfb      	ldrb	r3, [r7, #15]
 800d90e:	3301      	adds	r3, #1
 800d910:	73fb      	strb	r3, [r7, #15]
 800d912:	7bfb      	ldrb	r3, [r7, #15]
 800d914:	2b0a      	cmp	r3, #10
 800d916:	d9ed      	bls.n	800d8f4 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d918:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess1, HOST_HS) != USBH_OK)
 800d92c:	2200      	movs	r2, #0
 800d92e:	492a      	ldr	r1, [pc, #168]	; (800d9d8 <MX_USB_HOST_Init+0xb0>)
 800d930:	482a      	ldr	r0, [pc, #168]	; (800d9dc <MX_USB_HOST_Init+0xb4>)
 800d932:	f7fe fcba 	bl	800c2aa <USBH_Init>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d001      	beq.n	800d940 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d93c:	f7f3 fb16 	bl	8000f6c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_HID_CLASSHS) != USBH_OK)
 800d940:	4927      	ldr	r1, [pc, #156]	; (800d9e0 <MX_USB_HOST_Init+0xb8>)
 800d942:	4826      	ldr	r0, [pc, #152]	; (800d9dc <MX_USB_HOST_Init+0xb4>)
 800d944:	f7fe fd3e 	bl	800c3c4 <USBH_RegisterClass>
 800d948:	4603      	mov	r3, r0
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d001      	beq.n	800d952 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d94e:	f7f3 fb0d 	bl	8000f6c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800d952:	4822      	ldr	r0, [pc, #136]	; (800d9dc <MX_USB_HOST_Init+0xb4>)
 800d954:	f7fe fdc2 	bl	800c4dc <USBH_Start>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d001      	beq.n	800d962 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d95e:	f7f3 fb05 	bl	8000f6c <Error_Handler>
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess2, HOST_FS) != USBH_OK)
 800d962:	2201      	movs	r2, #1
 800d964:	491f      	ldr	r1, [pc, #124]	; (800d9e4 <MX_USB_HOST_Init+0xbc>)
 800d966:	4820      	ldr	r0, [pc, #128]	; (800d9e8 <MX_USB_HOST_Init+0xc0>)
 800d968:	f7fe fc9f 	bl	800c2aa <USBH_Init>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d001      	beq.n	800d976 <MX_USB_HOST_Init+0x4e>
  {
    Error_Handler();
 800d972:	f7f3 fafb 	bl	8000f6c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800d976:	491d      	ldr	r1, [pc, #116]	; (800d9ec <MX_USB_HOST_Init+0xc4>)
 800d978:	481b      	ldr	r0, [pc, #108]	; (800d9e8 <MX_USB_HOST_Init+0xc0>)
 800d97a:	f7fe fd23 	bl	800c3c4 <USBH_RegisterClass>
 800d97e:	4603      	mov	r3, r0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d001      	beq.n	800d988 <MX_USB_HOST_Init+0x60>
  {
    Error_Handler();
 800d984:	f7f3 faf2 	bl	8000f6c <Error_Handler>
  }

  if (USBH_RegisterClass(&hUsbHostFS, USBH_HUB_CLASS) != USBH_OK)
 800d988:	4919      	ldr	r1, [pc, #100]	; (800d9f0 <MX_USB_HOST_Init+0xc8>)
 800d98a:	4817      	ldr	r0, [pc, #92]	; (800d9e8 <MX_USB_HOST_Init+0xc0>)
 800d98c:	f7fe fd1a 	bl	800c3c4 <USBH_RegisterClass>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d001      	beq.n	800d99a <MX_USB_HOST_Init+0x72>
{
  Error_Handler();
 800d996:	f7f3 fae9 	bl	8000f6c <Error_Handler>
}

  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d99a:	4813      	ldr	r0, [pc, #76]	; (800d9e8 <MX_USB_HOST_Init+0xc0>)
 800d99c:	f7fe fd9e 	bl	800c4dc <USBH_Start>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d001      	beq.n	800d9aa <MX_USB_HOST_Init+0x82>
  {
    Error_Handler();
 800d9a6:	f7f3 fae1 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  hUsbHostHS.pActiveClass->pData[0] = NULL;
 800d9aa:	4b0c      	ldr	r3, [pc, #48]	; (800d9dc <MX_USB_HOST_Init+0xb4>)
 800d9ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	621a      	str	r2, [r3, #32]
  hUsbHostHS.pActiveClass->pData[1] = NULL;
 800d9b4:	4b09      	ldr	r3, [pc, #36]	; (800d9dc <MX_USB_HOST_Init+0xb4>)
 800d9b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	625a      	str	r2, [r3, #36]	; 0x24
  hUsbHostFS.pActiveClass->pData[0] = NULL;
 800d9be:	4b0a      	ldr	r3, [pc, #40]	; (800d9e8 <MX_USB_HOST_Init+0xc0>)
 800d9c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	621a      	str	r2, [r3, #32]
  hUsbHostFS.pActiveClass->pData[1] = NULL;
 800d9c8:	4b07      	ldr	r3, [pc, #28]	; (800d9e8 <MX_USB_HOST_Init+0xc0>)
 800d9ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	625a      	str	r2, [r3, #36]	; 0x24


  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d9d2:	bf00      	nop
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	0800da11 	.word	0x0800da11
 800d9dc:	20000968 	.word	0x20000968
 800d9e0:	20000038 	.word	0x20000038
 800d9e4:	0800da6d 	.word	0x0800da6d
 800d9e8:	2000058c 	.word	0x2000058c
 800d9ec:	20000010 	.word	0x20000010
 800d9f0:	20000060 	.word	0x20000060

0800d9f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800d9f8:	4803      	ldr	r0, [pc, #12]	; (800da08 <MX_USB_HOST_Process+0x14>)
 800d9fa:	f7fe fd7f 	bl	800c4fc <USBH_Process>
  USBH_Process(&hUsbHostFS);
 800d9fe:	4803      	ldr	r0, [pc, #12]	; (800da0c <MX_USB_HOST_Process+0x18>)
 800da00:	f7fe fd7c 	bl	800c4fc <USBH_Process>
}
 800da04:	bf00      	nop
 800da06:	bd80      	pop	{r7, pc}
 800da08:	20000968 	.word	0x20000968
 800da0c:	2000058c 	.word	0x2000058c

0800da10 <USBH_UserProcess1>:
/*
 * user callback definition
 */
static void USBH_UserProcess1  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800da10:	b480      	push	{r7}
 800da12:	b083      	sub	sp, #12
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	460b      	mov	r3, r1
 800da1a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_2 */
  switch(id)
 800da1c:	78fb      	ldrb	r3, [r7, #3]
 800da1e:	3b01      	subs	r3, #1
 800da20:	2b04      	cmp	r3, #4
 800da22:	d819      	bhi.n	800da58 <USBH_UserProcess1+0x48>
 800da24:	a201      	add	r2, pc, #4	; (adr r2, 800da2c <USBH_UserProcess1+0x1c>)
 800da26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2a:	bf00      	nop
 800da2c:	0800da59 	.word	0x0800da59
 800da30:	0800da49 	.word	0x0800da49
 800da34:	0800da59 	.word	0x0800da59
 800da38:	0800da51 	.word	0x0800da51
 800da3c:	0800da41 	.word	0x0800da41
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800da40:	4b09      	ldr	r3, [pc, #36]	; (800da68 <USBH_UserProcess1+0x58>)
 800da42:	2203      	movs	r2, #3
 800da44:	701a      	strb	r2, [r3, #0]

  break;
 800da46:	e008      	b.n	800da5a <USBH_UserProcess1+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800da48:	4b07      	ldr	r3, [pc, #28]	; (800da68 <USBH_UserProcess1+0x58>)
 800da4a:	2202      	movs	r2, #2
 800da4c:	701a      	strb	r2, [r3, #0]
  break;
 800da4e:	e004      	b.n	800da5a <USBH_UserProcess1+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800da50:	4b05      	ldr	r3, [pc, #20]	; (800da68 <USBH_UserProcess1+0x58>)
 800da52:	2201      	movs	r2, #1
 800da54:	701a      	strb	r2, [r3, #0]
  break;
 800da56:	e000      	b.n	800da5a <USBH_UserProcess1+0x4a>

  default:
  break;
 800da58:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_2 */
}
 800da5a:	bf00      	nop
 800da5c:	370c      	adds	r7, #12
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop
 800da68:	2000011c 	.word	0x2000011c

0800da6c <USBH_UserProcess2>:

static void USBH_UserProcess2  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b083      	sub	sp, #12
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	460b      	mov	r3, r1
 800da76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_21 */
  switch(id)
 800da78:	78fb      	ldrb	r3, [r7, #3]
 800da7a:	3b01      	subs	r3, #1
 800da7c:	2b04      	cmp	r3, #4
 800da7e:	d819      	bhi.n	800dab4 <USBH_UserProcess2+0x48>
 800da80:	a201      	add	r2, pc, #4	; (adr r2, 800da88 <USBH_UserProcess2+0x1c>)
 800da82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da86:	bf00      	nop
 800da88:	0800dab5 	.word	0x0800dab5
 800da8c:	0800daa5 	.word	0x0800daa5
 800da90:	0800dab5 	.word	0x0800dab5
 800da94:	0800daad 	.word	0x0800daad
 800da98:	0800da9d 	.word	0x0800da9d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_stateFS = APPLICATION_DISCONNECT;
 800da9c:	4b09      	ldr	r3, [pc, #36]	; (800dac4 <USBH_UserProcess2+0x58>)
 800da9e:	2203      	movs	r2, #3
 800daa0:	701a      	strb	r2, [r3, #0]
  break;
 800daa2:	e008      	b.n	800dab6 <USBH_UserProcess2+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_stateFS = APPLICATION_READY;
 800daa4:	4b07      	ldr	r3, [pc, #28]	; (800dac4 <USBH_UserProcess2+0x58>)
 800daa6:	2202      	movs	r2, #2
 800daa8:	701a      	strb	r2, [r3, #0]
  break;
 800daaa:	e004      	b.n	800dab6 <USBH_UserProcess2+0x4a>

  case HOST_USER_CONNECTION:
  Appli_stateFS = APPLICATION_START;
 800daac:	4b05      	ldr	r3, [pc, #20]	; (800dac4 <USBH_UserProcess2+0x58>)
 800daae:	2201      	movs	r2, #1
 800dab0:	701a      	strb	r2, [r3, #0]
  break;
 800dab2:	e000      	b.n	800dab6 <USBH_UserProcess2+0x4a>

  default:
  break;
 800dab4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_21 */
}
 800dab6:	bf00      	nop
 800dab8:	370c      	adds	r7, #12
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr
 800dac2:	bf00      	nop
 800dac4:	2000011d 	.word	0x2000011d

0800dac8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b0ae      	sub	sp, #184	; 0xb8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dad0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dad4:	2200      	movs	r2, #0
 800dad6:	601a      	str	r2, [r3, #0]
 800dad8:	605a      	str	r2, [r3, #4]
 800dada:	609a      	str	r2, [r3, #8]
 800dadc:	60da      	str	r2, [r3, #12]
 800dade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dae4:	2280      	movs	r2, #128	; 0x80
 800dae6:	2100      	movs	r1, #0
 800dae8:	4618      	mov	r0, r3
 800daea:	f000 fb63 	bl	800e1b4 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800daf6:	d152      	bne.n	800db9e <HAL_HCD_MspInit+0xd6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800daf8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dafc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800dafe:	2300      	movs	r3, #0
 800db00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800db04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db08:	4618      	mov	r0, r3
 800db0a:	f7f7 f9a3 	bl	8004e54 <HAL_RCCEx_PeriphCLKConfig>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 800db14:	f7f3 fa2a 	bl	8000f6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db18:	4b56      	ldr	r3, [pc, #344]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800db1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db1c:	4a55      	ldr	r2, [pc, #340]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800db1e:	f043 0301 	orr.w	r3, r3, #1
 800db22:	6313      	str	r3, [r2, #48]	; 0x30
 800db24:	4b53      	ldr	r3, [pc, #332]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800db26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db28:	f003 0301 	and.w	r3, r3, #1
 800db2c:	623b      	str	r3, [r7, #32]
 800db2e:	6a3b      	ldr	r3, [r7, #32]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800db30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800db34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db38:	2302      	movs	r3, #2
 800db3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db3e:	2300      	movs	r3, #0
 800db40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db44:	2303      	movs	r3, #3
 800db46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800db4a:	230a      	movs	r3, #10
 800db4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800db54:	4619      	mov	r1, r3
 800db56:	4848      	ldr	r0, [pc, #288]	; (800dc78 <HAL_HCD_MspInit+0x1b0>)
 800db58:	f7f4 fd62 	bl	8002620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800db5c:	4b45      	ldr	r3, [pc, #276]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800db5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db60:	4a44      	ldr	r2, [pc, #272]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800db62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db66:	6353      	str	r3, [r2, #52]	; 0x34
 800db68:	4b42      	ldr	r3, [pc, #264]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800db6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db70:	61fb      	str	r3, [r7, #28]
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	4b3f      	ldr	r3, [pc, #252]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800db76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db78:	4a3e      	ldr	r2, [pc, #248]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800db7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800db7e:	6453      	str	r3, [r2, #68]	; 0x44
 800db80:	4b3c      	ldr	r3, [pc, #240]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800db82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db88:	61bb      	str	r3, [r7, #24]
 800db8a:	69bb      	ldr	r3, [r7, #24]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 1);
 800db8c:	2201      	movs	r2, #1
 800db8e:	2101      	movs	r1, #1
 800db90:	2043      	movs	r0, #67	; 0x43
 800db92:	f7f4 fa3b 	bl	800200c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800db96:	2043      	movs	r0, #67	; 0x43
 800db98:	f7f4 fa54 	bl	8002044 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800db9c:	e066      	b.n	800dc6c <HAL_HCD_MspInit+0x1a4>
  else if(hcdHandle->Instance==USB_OTG_HS)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4a36      	ldr	r2, [pc, #216]	; (800dc7c <HAL_HCD_MspInit+0x1b4>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d161      	bne.n	800dc6c <HAL_HCD_MspInit+0x1a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800dba8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dbac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dbb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7f7 f94b 	bl	8004e54 <HAL_RCCEx_PeriphCLKConfig>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d001      	beq.n	800dbc8 <HAL_HCD_MspInit+0x100>
      Error_Handler();
 800dbc4:	f7f3 f9d2 	bl	8000f6c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dbc8:	4b2a      	ldr	r3, [pc, #168]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800dbca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbcc:	4a29      	ldr	r2, [pc, #164]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800dbce:	f043 0302 	orr.w	r3, r3, #2
 800dbd2:	6313      	str	r3, [r2, #48]	; 0x30
 800dbd4:	4b27      	ldr	r3, [pc, #156]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800dbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbd8:	f003 0302 	and.w	r3, r3, #2
 800dbdc:	617b      	str	r3, [r7, #20]
 800dbde:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800dbe0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800dbe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbe8:	2302      	movs	r3, #2
 800dbea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dbf4:	2303      	movs	r3, #3
 800dbf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800dbfa:	230c      	movs	r3, #12
 800dbfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dc00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dc04:	4619      	mov	r1, r3
 800dc06:	481e      	ldr	r0, [pc, #120]	; (800dc80 <HAL_HCD_MspInit+0x1b8>)
 800dc08:	f7f4 fd0a 	bl	8002620 <HAL_GPIO_Init>
    __HAL_RCC_OTGPHYC_CLK_ENABLE();
 800dc0c:	4b19      	ldr	r3, [pc, #100]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800dc0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc10:	4a18      	ldr	r2, [pc, #96]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800dc12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dc16:	6453      	str	r3, [r2, #68]	; 0x44
 800dc18:	4b16      	ldr	r3, [pc, #88]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800dc1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc20:	613b      	str	r3, [r7, #16]
 800dc22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800dc24:	4b13      	ldr	r3, [pc, #76]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800dc26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc28:	4a12      	ldr	r2, [pc, #72]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800dc2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc2e:	6313      	str	r3, [r2, #48]	; 0x30
 800dc30:	4b10      	ldr	r3, [pc, #64]	; (800dc74 <HAL_HCD_MspInit+0x1ac>)
 800dc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc38:	60fb      	str	r3, [r7, #12]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 1, 0);
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	2101      	movs	r1, #1
 800dc40:	204a      	movs	r0, #74	; 0x4a
 800dc42:	f7f4 f9e3 	bl	800200c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800dc46:	204a      	movs	r0, #74	; 0x4a
 800dc48:	f7f4 f9fc 	bl	8002044 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 1, 0);
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	2101      	movs	r1, #1
 800dc50:	204b      	movs	r0, #75	; 0x4b
 800dc52:	f7f4 f9db 	bl	800200c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800dc56:	204b      	movs	r0, #75	; 0x4b
 800dc58:	f7f4 f9f4 	bl	8002044 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 0);
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	2101      	movs	r1, #1
 800dc60:	204d      	movs	r0, #77	; 0x4d
 800dc62:	f7f4 f9d3 	bl	800200c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800dc66:	204d      	movs	r0, #77	; 0x4d
 800dc68:	f7f4 f9ec 	bl	8002044 <HAL_NVIC_EnableIRQ>
}
 800dc6c:	bf00      	nop
 800dc6e:	37b8      	adds	r7, #184	; 0xb8
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	40023800 	.word	0x40023800
 800dc78:	40020000 	.word	0x40020000
 800dc7c:	40040000 	.word	0x40040000
 800dc80:	40020400 	.word	0x40020400

0800dc84 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7ff f80b 	bl	800ccae <USBH_LL_IncTimer>
}
 800dc98:	bf00      	nop
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7ff f843 	bl	800cd3a <USBH_LL_Connect>
}
 800dcb4:	bf00      	nop
 800dcb6:	3708      	adds	r7, #8
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7ff f84c 	bl	800cd68 <USBH_LL_Disconnect>
}
 800dcd0:	bf00      	nop
 800dcd2:	3708      	adds	r7, #8
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	460b      	mov	r3, r1
 800dce2:	70fb      	strb	r3, [r7, #3]
 800dce4:	4613      	mov	r3, r2
 800dce6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dce8:	bf00      	nop
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr

0800dcf4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7fe fffd 	bl	800cd02 <USBH_LL_PortEnabled>
}
 800dd08:	bf00      	nop
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fe fffd 	bl	800cd1e <USBH_LL_PortDisabled>
}
 800dd24:	bf00      	nop
 800dd26:	3708      	adds	r7, #8
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}

0800dd2c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b082      	sub	sp, #8
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d12d      	bne.n	800dd9a <USBH_LL_Init+0x6e>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800dd3e:	4a34      	ldr	r2, [pc, #208]	; (800de10 <USBH_LL_Init+0xe4>)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	4a31      	ldr	r2, [pc, #196]	; (800de10 <USBH_LL_Init+0xe4>)
 800dd4a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dd4e:	4b30      	ldr	r3, [pc, #192]	; (800de10 <USBH_LL_Init+0xe4>)
 800dd50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dd54:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800dd56:	4b2e      	ldr	r3, [pc, #184]	; (800de10 <USBH_LL_Init+0xe4>)
 800dd58:	220c      	movs	r2, #12
 800dd5a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = USB_OTG_SPEED_FULL;
 800dd5c:	4b2c      	ldr	r3, [pc, #176]	; (800de10 <USBH_LL_Init+0xe4>)
 800dd5e:	2203      	movs	r2, #3
 800dd60:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dd62:	4b2b      	ldr	r3, [pc, #172]	; (800de10 <USBH_LL_Init+0xe4>)
 800dd64:	2200      	movs	r2, #0
 800dd66:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800dd68:	4b29      	ldr	r3, [pc, #164]	; (800de10 <USBH_LL_Init+0xe4>)
 800dd6a:	2202      	movs	r2, #2
 800dd6c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dd6e:	4b28      	ldr	r3, [pc, #160]	; (800de10 <USBH_LL_Init+0xe4>)
 800dd70:	2200      	movs	r2, #0
 800dd72:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dd74:	4b26      	ldr	r3, [pc, #152]	; (800de10 <USBH_LL_Init+0xe4>)
 800dd76:	2200      	movs	r2, #0
 800dd78:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800dd7a:	4825      	ldr	r0, [pc, #148]	; (800de10 <USBH_LL_Init+0xe4>)
 800dd7c:	f7f4 fdec 	bl	8002958 <HAL_HCD_Init>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d001      	beq.n	800dd8a <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 800dd86:	f7f3 f8f1 	bl	8000f6c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800dd8a:	4821      	ldr	r0, [pc, #132]	; (800de10 <USBH_LL_Init+0xe4>)
 800dd8c:	f7f5 f9cf 	bl	800312e <HAL_HCD_GetCurrentFrame>
 800dd90:	4603      	mov	r3, r0
 800dd92:	4619      	mov	r1, r3
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7fe ff7b 	bl	800cc90 <USBH_LL_SetTimer>
  }
  if (phost->id == HOST_HS) {
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d12f      	bne.n	800de04 <USBH_LL_Init+0xd8>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800dda4:	4a1b      	ldr	r2, [pc, #108]	; (800de14 <USBH_LL_Init+0xe8>)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4a19      	ldr	r2, [pc, #100]	; (800de14 <USBH_LL_Init+0xe8>)
 800ddb0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ddb4:	4b17      	ldr	r3, [pc, #92]	; (800de14 <USBH_LL_Init+0xe8>)
 800ddb6:	4a18      	ldr	r2, [pc, #96]	; (800de18 <USBH_LL_Init+0xec>)
 800ddb8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 800ddba:	4b16      	ldr	r3, [pc, #88]	; (800de14 <USBH_LL_Init+0xe8>)
 800ddbc:	2210      	movs	r2, #16
 800ddbe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ddc0:	4b14      	ldr	r3, [pc, #80]	; (800de14 <USBH_LL_Init+0xe8>)
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ddc6:	4b13      	ldr	r3, [pc, #76]	; (800de14 <USBH_LL_Init+0xe8>)
 800ddc8:	2202      	movs	r2, #2
 800ddca:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ddcc:	4b11      	ldr	r3, [pc, #68]	; (800de14 <USBH_LL_Init+0xe8>)
 800ddce:	2200      	movs	r2, #0
 800ddd0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ddd2:	4b10      	ldr	r3, [pc, #64]	; (800de14 <USBH_LL_Init+0xe8>)
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ddd8:	4b0e      	ldr	r3, [pc, #56]	; (800de14 <USBH_LL_Init+0xe8>)
 800ddda:	2200      	movs	r2, #0
 800dddc:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 800ddde:	4b0d      	ldr	r3, [pc, #52]	; (800de14 <USBH_LL_Init+0xe8>)
 800dde0:	2201      	movs	r2, #1
 800dde2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800dde4:	480b      	ldr	r0, [pc, #44]	; (800de14 <USBH_LL_Init+0xe8>)
 800dde6:	f7f4 fdb7 	bl	8002958 <HAL_HCD_Init>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d001      	beq.n	800ddf4 <USBH_LL_Init+0xc8>
  {
    Error_Handler( );
 800ddf0:	f7f3 f8bc 	bl	8000f6c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800ddf4:	4807      	ldr	r0, [pc, #28]	; (800de14 <USBH_LL_Init+0xe8>)
 800ddf6:	f7f5 f99a 	bl	800312e <HAL_HCD_GetCurrentFrame>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7fe ff46 	bl	800cc90 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800de04:	2300      	movs	r3, #0
}
 800de06:	4618      	mov	r0, r3
 800de08:	3708      	adds	r7, #8
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	20001048 	.word	0x20001048
 800de14:	20000d44 	.word	0x20000d44
 800de18:	40040000 	.word	0x40040000

0800de1c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de24:	2300      	movs	r3, #0
 800de26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de28:	2300      	movs	r3, #0
 800de2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de32:	4618      	mov	r0, r3
 800de34:	f7f5 f905 	bl	8003042 <HAL_HCD_Start>
 800de38:	4603      	mov	r3, r0
 800de3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de3c:	7bfb      	ldrb	r3, [r7, #15]
 800de3e:	4618      	mov	r0, r3
 800de40:	f000 f952 	bl	800e0e8 <USBH_Get_USB_Status>
 800de44:	4603      	mov	r3, r0
 800de46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de48:	7bbb      	ldrb	r3, [r7, #14]
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3710      	adds	r7, #16
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}

0800de52 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800de52:	b580      	push	{r7, lr}
 800de54:	b084      	sub	sp, #16
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de5a:	2300      	movs	r3, #0
 800de5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de5e:	2300      	movs	r3, #0
 800de60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de68:	4618      	mov	r0, r3
 800de6a:	f7f5 f90d 	bl	8003088 <HAL_HCD_Stop>
 800de6e:	4603      	mov	r3, r0
 800de70:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de72:	7bfb      	ldrb	r3, [r7, #15]
 800de74:	4618      	mov	r0, r3
 800de76:	f000 f937 	bl	800e0e8 <USBH_Get_USB_Status>
 800de7a:	4603      	mov	r3, r0
 800de7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800de80:	4618      	mov	r0, r3
 800de82:	3710      	adds	r7, #16
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800de90:	2301      	movs	r3, #1
 800de92:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7f5 f955 	bl	800314a <HAL_HCD_GetCurrentSpeed>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b02      	cmp	r3, #2
 800dea4:	d00c      	beq.n	800dec0 <USBH_LL_GetSpeed+0x38>
 800dea6:	2b02      	cmp	r3, #2
 800dea8:	d80d      	bhi.n	800dec6 <USBH_LL_GetSpeed+0x3e>
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d002      	beq.n	800deb4 <USBH_LL_GetSpeed+0x2c>
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d003      	beq.n	800deba <USBH_LL_GetSpeed+0x32>
 800deb2:	e008      	b.n	800dec6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800deb4:	2300      	movs	r3, #0
 800deb6:	73fb      	strb	r3, [r7, #15]
    break;
 800deb8:	e008      	b.n	800decc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800deba:	2301      	movs	r3, #1
 800debc:	73fb      	strb	r3, [r7, #15]
    break;
 800debe:	e005      	b.n	800decc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dec0:	2302      	movs	r3, #2
 800dec2:	73fb      	strb	r3, [r7, #15]
    break;
 800dec4:	e002      	b.n	800decc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800dec6:	2301      	movs	r3, #1
 800dec8:	73fb      	strb	r3, [r7, #15]
    break;
 800deca:	bf00      	nop
  }
  return  speed;
 800decc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3710      	adds	r7, #16
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ded6:	b580      	push	{r7, lr}
 800ded8:	b084      	sub	sp, #16
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dede:	2300      	movs	r3, #0
 800dee0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dee2:	2300      	movs	r3, #0
 800dee4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800deec:	4618      	mov	r0, r3
 800deee:	f7f5 f8e8 	bl	80030c2 <HAL_HCD_ResetPort>
 800def2:	4603      	mov	r3, r0
 800def4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800def6:	7bfb      	ldrb	r3, [r7, #15]
 800def8:	4618      	mov	r0, r3
 800defa:	f000 f8f5 	bl	800e0e8 <USBH_Get_USB_Status>
 800defe:	4603      	mov	r3, r0
 800df00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df02:	7bbb      	ldrb	r3, [r7, #14]
}
 800df04:	4618      	mov	r0, r3
 800df06:	3710      	adds	r7, #16
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b082      	sub	sp, #8
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	460b      	mov	r3, r1
 800df16:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df1e:	78fa      	ldrb	r2, [r7, #3]
 800df20:	4611      	mov	r1, r2
 800df22:	4618      	mov	r0, r3
 800df24:	f7f5 f8ef 	bl	8003106 <HAL_HCD_HC_GetXferCount>
 800df28:	4603      	mov	r3, r0
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3708      	adds	r7, #8
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}

0800df32 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800df32:	b590      	push	{r4, r7, lr}
 800df34:	b089      	sub	sp, #36	; 0x24
 800df36:	af04      	add	r7, sp, #16
 800df38:	6078      	str	r0, [r7, #4]
 800df3a:	4608      	mov	r0, r1
 800df3c:	4611      	mov	r1, r2
 800df3e:	461a      	mov	r2, r3
 800df40:	4603      	mov	r3, r0
 800df42:	70fb      	strb	r3, [r7, #3]
 800df44:	460b      	mov	r3, r1
 800df46:	70bb      	strb	r3, [r7, #2]
 800df48:	4613      	mov	r3, r2
 800df4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df4c:	2300      	movs	r3, #0
 800df4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df50:	2300      	movs	r3, #0
 800df52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800df5a:	787c      	ldrb	r4, [r7, #1]
 800df5c:	78ba      	ldrb	r2, [r7, #2]
 800df5e:	78f9      	ldrb	r1, [r7, #3]
 800df60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df62:	9302      	str	r3, [sp, #8]
 800df64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800df68:	9301      	str	r3, [sp, #4]
 800df6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	4623      	mov	r3, r4
 800df72:	f7f4 fd53 	bl	8002a1c <HAL_HCD_HC_Init>
 800df76:	4603      	mov	r3, r0
 800df78:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800df7a:	7bfb      	ldrb	r3, [r7, #15]
 800df7c:	4618      	mov	r0, r3
 800df7e:	f000 f8b3 	bl	800e0e8 <USBH_Get_USB_Status>
 800df82:	4603      	mov	r3, r0
 800df84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df86:	7bbb      	ldrb	r3, [r7, #14]
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3714      	adds	r7, #20
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd90      	pop	{r4, r7, pc}

0800df90 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b084      	sub	sp, #16
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	460b      	mov	r3, r1
 800df9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df9c:	2300      	movs	r3, #0
 800df9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dfaa:	78fa      	ldrb	r2, [r7, #3]
 800dfac:	4611      	mov	r1, r2
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7f4 fdc3 	bl	8002b3a <HAL_HCD_HC_Halt>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dfb8:	7bfb      	ldrb	r3, [r7, #15]
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f000 f894 	bl	800e0e8 <USBH_Get_USB_Status>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3710      	adds	r7, #16
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}

0800dfce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dfce:	b590      	push	{r4, r7, lr}
 800dfd0:	b089      	sub	sp, #36	; 0x24
 800dfd2:	af04      	add	r7, sp, #16
 800dfd4:	6078      	str	r0, [r7, #4]
 800dfd6:	4608      	mov	r0, r1
 800dfd8:	4611      	mov	r1, r2
 800dfda:	461a      	mov	r2, r3
 800dfdc:	4603      	mov	r3, r0
 800dfde:	70fb      	strb	r3, [r7, #3]
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	70bb      	strb	r3, [r7, #2]
 800dfe4:	4613      	mov	r3, r2
 800dfe6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dfec:	2300      	movs	r3, #0
 800dfee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800dff6:	787c      	ldrb	r4, [r7, #1]
 800dff8:	78ba      	ldrb	r2, [r7, #2]
 800dffa:	78f9      	ldrb	r1, [r7, #3]
 800dffc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e000:	9303      	str	r3, [sp, #12]
 800e002:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e004:	9302      	str	r3, [sp, #8]
 800e006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e008:	9301      	str	r3, [sp, #4]
 800e00a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	4623      	mov	r3, r4
 800e012:	f7f4 fdb5 	bl	8002b80 <HAL_HCD_HC_SubmitRequest>
 800e016:	4603      	mov	r3, r0
 800e018:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e01a:	7bfb      	ldrb	r3, [r7, #15]
 800e01c:	4618      	mov	r0, r3
 800e01e:	f000 f863 	bl	800e0e8 <USBH_Get_USB_Status>
 800e022:	4603      	mov	r3, r0
 800e024:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e026:	7bbb      	ldrb	r3, [r7, #14]
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3714      	adds	r7, #20
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd90      	pop	{r4, r7, pc}

0800e030 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	460b      	mov	r3, r1
 800e03a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e042:	78fa      	ldrb	r2, [r7, #3]
 800e044:	4611      	mov	r1, r2
 800e046:	4618      	mov	r0, r3
 800e048:	f7f5 f849 	bl	80030de <HAL_HCD_HC_GetURBState>
 800e04c:	4603      	mov	r3, r0
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3708      	adds	r7, #8
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}

0800e056 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e056:	b580      	push	{r7, lr}
 800e058:	b082      	sub	sp, #8
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	6078      	str	r0, [r7, #4]
 800e05e:	460b      	mov	r3, r1
 800e060:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 800e062:	20c8      	movs	r0, #200	; 0xc8
 800e064:	f7f3 fef6 	bl	8001e54 <HAL_Delay>
  return USBH_OK;
 800e068:	2300      	movs	r3, #0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e072:	b480      	push	{r7}
 800e074:	b085      	sub	sp, #20
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
 800e07a:	460b      	mov	r3, r1
 800e07c:	70fb      	strb	r3, [r7, #3]
 800e07e:	4613      	mov	r3, r2
 800e080:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e088:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e08a:	78fb      	ldrb	r3, [r7, #3]
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	212c      	movs	r1, #44	; 0x2c
 800e090:	fb01 f303 	mul.w	r3, r1, r3
 800e094:	4413      	add	r3, r2
 800e096:	333b      	adds	r3, #59	; 0x3b
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d009      	beq.n	800e0b2 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e09e:	78fb      	ldrb	r3, [r7, #3]
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	212c      	movs	r1, #44	; 0x2c
 800e0a4:	fb01 f303 	mul.w	r3, r1, r3
 800e0a8:	4413      	add	r3, r2
 800e0aa:	3354      	adds	r3, #84	; 0x54
 800e0ac:	78ba      	ldrb	r2, [r7, #2]
 800e0ae:	701a      	strb	r2, [r3, #0]
 800e0b0:	e008      	b.n	800e0c4 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e0b2:	78fb      	ldrb	r3, [r7, #3]
 800e0b4:	68fa      	ldr	r2, [r7, #12]
 800e0b6:	212c      	movs	r1, #44	; 0x2c
 800e0b8:	fb01 f303 	mul.w	r3, r1, r3
 800e0bc:	4413      	add	r3, r2
 800e0be:	3355      	adds	r3, #85	; 0x55
 800e0c0:	78ba      	ldrb	r2, [r7, #2]
 800e0c2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3714      	adds	r7, #20
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr

0800e0d2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b082      	sub	sp, #8
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f7f3 feba 	bl	8001e54 <HAL_Delay>
}
 800e0e0:	bf00      	nop
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e0f6:	79fb      	ldrb	r3, [r7, #7]
 800e0f8:	2b03      	cmp	r3, #3
 800e0fa:	d817      	bhi.n	800e12c <USBH_Get_USB_Status+0x44>
 800e0fc:	a201      	add	r2, pc, #4	; (adr r2, 800e104 <USBH_Get_USB_Status+0x1c>)
 800e0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e102:	bf00      	nop
 800e104:	0800e115 	.word	0x0800e115
 800e108:	0800e11b 	.word	0x0800e11b
 800e10c:	0800e121 	.word	0x0800e121
 800e110:	0800e127 	.word	0x0800e127
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e114:	2300      	movs	r3, #0
 800e116:	73fb      	strb	r3, [r7, #15]
    break;
 800e118:	e00b      	b.n	800e132 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e11a:	2302      	movs	r3, #2
 800e11c:	73fb      	strb	r3, [r7, #15]
    break;
 800e11e:	e008      	b.n	800e132 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e120:	2301      	movs	r3, #1
 800e122:	73fb      	strb	r3, [r7, #15]
    break;
 800e124:	e005      	b.n	800e132 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e126:	2302      	movs	r3, #2
 800e128:	73fb      	strb	r3, [r7, #15]
    break;
 800e12a:	e002      	b.n	800e132 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e12c:	2302      	movs	r3, #2
 800e12e:	73fb      	strb	r3, [r7, #15]
    break;
 800e130:	bf00      	nop
  }
  return usb_status;
 800e132:	7bfb      	ldrb	r3, [r7, #15]
}
 800e134:	4618      	mov	r0, r3
 800e136:	3714      	adds	r7, #20
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <__errno>:
 800e140:	4b01      	ldr	r3, [pc, #4]	; (800e148 <__errno+0x8>)
 800e142:	6818      	ldr	r0, [r3, #0]
 800e144:	4770      	bx	lr
 800e146:	bf00      	nop
 800e148:	2000008c 	.word	0x2000008c

0800e14c <__libc_init_array>:
 800e14c:	b570      	push	{r4, r5, r6, lr}
 800e14e:	4d0d      	ldr	r5, [pc, #52]	; (800e184 <__libc_init_array+0x38>)
 800e150:	4c0d      	ldr	r4, [pc, #52]	; (800e188 <__libc_init_array+0x3c>)
 800e152:	1b64      	subs	r4, r4, r5
 800e154:	10a4      	asrs	r4, r4, #2
 800e156:	2600      	movs	r6, #0
 800e158:	42a6      	cmp	r6, r4
 800e15a:	d109      	bne.n	800e170 <__libc_init_array+0x24>
 800e15c:	4d0b      	ldr	r5, [pc, #44]	; (800e18c <__libc_init_array+0x40>)
 800e15e:	4c0c      	ldr	r4, [pc, #48]	; (800e190 <__libc_init_array+0x44>)
 800e160:	f000 f8f8 	bl	800e354 <_init>
 800e164:	1b64      	subs	r4, r4, r5
 800e166:	10a4      	asrs	r4, r4, #2
 800e168:	2600      	movs	r6, #0
 800e16a:	42a6      	cmp	r6, r4
 800e16c:	d105      	bne.n	800e17a <__libc_init_array+0x2e>
 800e16e:	bd70      	pop	{r4, r5, r6, pc}
 800e170:	f855 3b04 	ldr.w	r3, [r5], #4
 800e174:	4798      	blx	r3
 800e176:	3601      	adds	r6, #1
 800e178:	e7ee      	b.n	800e158 <__libc_init_array+0xc>
 800e17a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e17e:	4798      	blx	r3
 800e180:	3601      	adds	r6, #1
 800e182:	e7f2      	b.n	800e16a <__libc_init_array+0x1e>
 800e184:	0800e6f0 	.word	0x0800e6f0
 800e188:	0800e6f0 	.word	0x0800e6f0
 800e18c:	0800e6f0 	.word	0x0800e6f0
 800e190:	0800e6f4 	.word	0x0800e6f4

0800e194 <malloc>:
 800e194:	4b02      	ldr	r3, [pc, #8]	; (800e1a0 <malloc+0xc>)
 800e196:	4601      	mov	r1, r0
 800e198:	6818      	ldr	r0, [r3, #0]
 800e19a:	f000 b863 	b.w	800e264 <_malloc_r>
 800e19e:	bf00      	nop
 800e1a0:	2000008c 	.word	0x2000008c

0800e1a4 <free>:
 800e1a4:	4b02      	ldr	r3, [pc, #8]	; (800e1b0 <free+0xc>)
 800e1a6:	4601      	mov	r1, r0
 800e1a8:	6818      	ldr	r0, [r3, #0]
 800e1aa:	f000 b80b 	b.w	800e1c4 <_free_r>
 800e1ae:	bf00      	nop
 800e1b0:	2000008c 	.word	0x2000008c

0800e1b4 <memset>:
 800e1b4:	4402      	add	r2, r0
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d100      	bne.n	800e1be <memset+0xa>
 800e1bc:	4770      	bx	lr
 800e1be:	f803 1b01 	strb.w	r1, [r3], #1
 800e1c2:	e7f9      	b.n	800e1b8 <memset+0x4>

0800e1c4 <_free_r>:
 800e1c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1c6:	2900      	cmp	r1, #0
 800e1c8:	d048      	beq.n	800e25c <_free_r+0x98>
 800e1ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1ce:	9001      	str	r0, [sp, #4]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	f1a1 0404 	sub.w	r4, r1, #4
 800e1d6:	bfb8      	it	lt
 800e1d8:	18e4      	addlt	r4, r4, r3
 800e1da:	f000 f8ad 	bl	800e338 <__malloc_lock>
 800e1de:	4a20      	ldr	r2, [pc, #128]	; (800e260 <_free_r+0x9c>)
 800e1e0:	9801      	ldr	r0, [sp, #4]
 800e1e2:	6813      	ldr	r3, [r2, #0]
 800e1e4:	4615      	mov	r5, r2
 800e1e6:	b933      	cbnz	r3, 800e1f6 <_free_r+0x32>
 800e1e8:	6063      	str	r3, [r4, #4]
 800e1ea:	6014      	str	r4, [r2, #0]
 800e1ec:	b003      	add	sp, #12
 800e1ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1f2:	f000 b8a7 	b.w	800e344 <__malloc_unlock>
 800e1f6:	42a3      	cmp	r3, r4
 800e1f8:	d90b      	bls.n	800e212 <_free_r+0x4e>
 800e1fa:	6821      	ldr	r1, [r4, #0]
 800e1fc:	1862      	adds	r2, r4, r1
 800e1fe:	4293      	cmp	r3, r2
 800e200:	bf04      	itt	eq
 800e202:	681a      	ldreq	r2, [r3, #0]
 800e204:	685b      	ldreq	r3, [r3, #4]
 800e206:	6063      	str	r3, [r4, #4]
 800e208:	bf04      	itt	eq
 800e20a:	1852      	addeq	r2, r2, r1
 800e20c:	6022      	streq	r2, [r4, #0]
 800e20e:	602c      	str	r4, [r5, #0]
 800e210:	e7ec      	b.n	800e1ec <_free_r+0x28>
 800e212:	461a      	mov	r2, r3
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	b10b      	cbz	r3, 800e21c <_free_r+0x58>
 800e218:	42a3      	cmp	r3, r4
 800e21a:	d9fa      	bls.n	800e212 <_free_r+0x4e>
 800e21c:	6811      	ldr	r1, [r2, #0]
 800e21e:	1855      	adds	r5, r2, r1
 800e220:	42a5      	cmp	r5, r4
 800e222:	d10b      	bne.n	800e23c <_free_r+0x78>
 800e224:	6824      	ldr	r4, [r4, #0]
 800e226:	4421      	add	r1, r4
 800e228:	1854      	adds	r4, r2, r1
 800e22a:	42a3      	cmp	r3, r4
 800e22c:	6011      	str	r1, [r2, #0]
 800e22e:	d1dd      	bne.n	800e1ec <_free_r+0x28>
 800e230:	681c      	ldr	r4, [r3, #0]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	6053      	str	r3, [r2, #4]
 800e236:	4421      	add	r1, r4
 800e238:	6011      	str	r1, [r2, #0]
 800e23a:	e7d7      	b.n	800e1ec <_free_r+0x28>
 800e23c:	d902      	bls.n	800e244 <_free_r+0x80>
 800e23e:	230c      	movs	r3, #12
 800e240:	6003      	str	r3, [r0, #0]
 800e242:	e7d3      	b.n	800e1ec <_free_r+0x28>
 800e244:	6825      	ldr	r5, [r4, #0]
 800e246:	1961      	adds	r1, r4, r5
 800e248:	428b      	cmp	r3, r1
 800e24a:	bf04      	itt	eq
 800e24c:	6819      	ldreq	r1, [r3, #0]
 800e24e:	685b      	ldreq	r3, [r3, #4]
 800e250:	6063      	str	r3, [r4, #4]
 800e252:	bf04      	itt	eq
 800e254:	1949      	addeq	r1, r1, r5
 800e256:	6021      	streq	r1, [r4, #0]
 800e258:	6054      	str	r4, [r2, #4]
 800e25a:	e7c7      	b.n	800e1ec <_free_r+0x28>
 800e25c:	b003      	add	sp, #12
 800e25e:	bd30      	pop	{r4, r5, pc}
 800e260:	20000120 	.word	0x20000120

0800e264 <_malloc_r>:
 800e264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e266:	1ccd      	adds	r5, r1, #3
 800e268:	f025 0503 	bic.w	r5, r5, #3
 800e26c:	3508      	adds	r5, #8
 800e26e:	2d0c      	cmp	r5, #12
 800e270:	bf38      	it	cc
 800e272:	250c      	movcc	r5, #12
 800e274:	2d00      	cmp	r5, #0
 800e276:	4606      	mov	r6, r0
 800e278:	db01      	blt.n	800e27e <_malloc_r+0x1a>
 800e27a:	42a9      	cmp	r1, r5
 800e27c:	d903      	bls.n	800e286 <_malloc_r+0x22>
 800e27e:	230c      	movs	r3, #12
 800e280:	6033      	str	r3, [r6, #0]
 800e282:	2000      	movs	r0, #0
 800e284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e286:	f000 f857 	bl	800e338 <__malloc_lock>
 800e28a:	4921      	ldr	r1, [pc, #132]	; (800e310 <_malloc_r+0xac>)
 800e28c:	680a      	ldr	r2, [r1, #0]
 800e28e:	4614      	mov	r4, r2
 800e290:	b99c      	cbnz	r4, 800e2ba <_malloc_r+0x56>
 800e292:	4f20      	ldr	r7, [pc, #128]	; (800e314 <_malloc_r+0xb0>)
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	b923      	cbnz	r3, 800e2a2 <_malloc_r+0x3e>
 800e298:	4621      	mov	r1, r4
 800e29a:	4630      	mov	r0, r6
 800e29c:	f000 f83c 	bl	800e318 <_sbrk_r>
 800e2a0:	6038      	str	r0, [r7, #0]
 800e2a2:	4629      	mov	r1, r5
 800e2a4:	4630      	mov	r0, r6
 800e2a6:	f000 f837 	bl	800e318 <_sbrk_r>
 800e2aa:	1c43      	adds	r3, r0, #1
 800e2ac:	d123      	bne.n	800e2f6 <_malloc_r+0x92>
 800e2ae:	230c      	movs	r3, #12
 800e2b0:	6033      	str	r3, [r6, #0]
 800e2b2:	4630      	mov	r0, r6
 800e2b4:	f000 f846 	bl	800e344 <__malloc_unlock>
 800e2b8:	e7e3      	b.n	800e282 <_malloc_r+0x1e>
 800e2ba:	6823      	ldr	r3, [r4, #0]
 800e2bc:	1b5b      	subs	r3, r3, r5
 800e2be:	d417      	bmi.n	800e2f0 <_malloc_r+0x8c>
 800e2c0:	2b0b      	cmp	r3, #11
 800e2c2:	d903      	bls.n	800e2cc <_malloc_r+0x68>
 800e2c4:	6023      	str	r3, [r4, #0]
 800e2c6:	441c      	add	r4, r3
 800e2c8:	6025      	str	r5, [r4, #0]
 800e2ca:	e004      	b.n	800e2d6 <_malloc_r+0x72>
 800e2cc:	6863      	ldr	r3, [r4, #4]
 800e2ce:	42a2      	cmp	r2, r4
 800e2d0:	bf0c      	ite	eq
 800e2d2:	600b      	streq	r3, [r1, #0]
 800e2d4:	6053      	strne	r3, [r2, #4]
 800e2d6:	4630      	mov	r0, r6
 800e2d8:	f000 f834 	bl	800e344 <__malloc_unlock>
 800e2dc:	f104 000b 	add.w	r0, r4, #11
 800e2e0:	1d23      	adds	r3, r4, #4
 800e2e2:	f020 0007 	bic.w	r0, r0, #7
 800e2e6:	1ac2      	subs	r2, r0, r3
 800e2e8:	d0cc      	beq.n	800e284 <_malloc_r+0x20>
 800e2ea:	1a1b      	subs	r3, r3, r0
 800e2ec:	50a3      	str	r3, [r4, r2]
 800e2ee:	e7c9      	b.n	800e284 <_malloc_r+0x20>
 800e2f0:	4622      	mov	r2, r4
 800e2f2:	6864      	ldr	r4, [r4, #4]
 800e2f4:	e7cc      	b.n	800e290 <_malloc_r+0x2c>
 800e2f6:	1cc4      	adds	r4, r0, #3
 800e2f8:	f024 0403 	bic.w	r4, r4, #3
 800e2fc:	42a0      	cmp	r0, r4
 800e2fe:	d0e3      	beq.n	800e2c8 <_malloc_r+0x64>
 800e300:	1a21      	subs	r1, r4, r0
 800e302:	4630      	mov	r0, r6
 800e304:	f000 f808 	bl	800e318 <_sbrk_r>
 800e308:	3001      	adds	r0, #1
 800e30a:	d1dd      	bne.n	800e2c8 <_malloc_r+0x64>
 800e30c:	e7cf      	b.n	800e2ae <_malloc_r+0x4a>
 800e30e:	bf00      	nop
 800e310:	20000120 	.word	0x20000120
 800e314:	20000124 	.word	0x20000124

0800e318 <_sbrk_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	4d06      	ldr	r5, [pc, #24]	; (800e334 <_sbrk_r+0x1c>)
 800e31c:	2300      	movs	r3, #0
 800e31e:	4604      	mov	r4, r0
 800e320:	4608      	mov	r0, r1
 800e322:	602b      	str	r3, [r5, #0]
 800e324:	f7f3 f94a 	bl	80015bc <_sbrk>
 800e328:	1c43      	adds	r3, r0, #1
 800e32a:	d102      	bne.n	800e332 <_sbrk_r+0x1a>
 800e32c:	682b      	ldr	r3, [r5, #0]
 800e32e:	b103      	cbz	r3, 800e332 <_sbrk_r+0x1a>
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	bd38      	pop	{r3, r4, r5, pc}
 800e334:	2000134c 	.word	0x2000134c

0800e338 <__malloc_lock>:
 800e338:	4801      	ldr	r0, [pc, #4]	; (800e340 <__malloc_lock+0x8>)
 800e33a:	f000 b809 	b.w	800e350 <__retarget_lock_acquire_recursive>
 800e33e:	bf00      	nop
 800e340:	20001354 	.word	0x20001354

0800e344 <__malloc_unlock>:
 800e344:	4801      	ldr	r0, [pc, #4]	; (800e34c <__malloc_unlock+0x8>)
 800e346:	f000 b804 	b.w	800e352 <__retarget_lock_release_recursive>
 800e34a:	bf00      	nop
 800e34c:	20001354 	.word	0x20001354

0800e350 <__retarget_lock_acquire_recursive>:
 800e350:	4770      	bx	lr

0800e352 <__retarget_lock_release_recursive>:
 800e352:	4770      	bx	lr

0800e354 <_init>:
 800e354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e356:	bf00      	nop
 800e358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e35a:	bc08      	pop	{r3}
 800e35c:	469e      	mov	lr, r3
 800e35e:	4770      	bx	lr

0800e360 <_fini>:
 800e360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e362:	bf00      	nop
 800e364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e366:	bc08      	pop	{r3}
 800e368:	469e      	mov	lr, r3
 800e36a:	4770      	bx	lr
