
TFMSXRev2F730.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000def4  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  0800e0d4  0800e0d4  0001e0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e448  0800e448  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e448  0800e448  0001e448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e450  0800e450  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e450  0800e450  0001e450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e454  0800e454  0001e454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800e458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001154  200000ec  0800e544  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20001240  0800e544  00021240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f584  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007425  00000000  00000000  0004f6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c68  00000000  00000000  00056ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001998  00000000  00000000  00058730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eaf8  00000000  00000000  0005a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d2ba  00000000  00000000  00088bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f676e  00000000  00000000  000b5e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ac5e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007410  00000000  00000000  001ac638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000ec 	.word	0x200000ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e0bc 	.word	0x0800e0bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f0 	.word	0x200000f0
 800021c:	0800e0bc 	.word	0x0800e0bc

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800052a:	463b      	mov	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_DAC_Init+0x4c>)
 8000534:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <MX_DAC_Init+0x50>)
 8000536:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <MX_DAC_Init+0x4c>)
 800053a:	f001 fc4b 	bl	8001dd4 <HAL_DAC_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000544:	f000 fcfa 	bl	8000f3c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000548:	2300      	movs	r3, #0
 800054a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	4619      	mov	r1, r3
 8000556:	4806      	ldr	r0, [pc, #24]	; (8000570 <MX_DAC_Init+0x4c>)
 8000558:	f001 fcc2 	bl	8001ee0 <HAL_DAC_ConfigChannel>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000562:	f000 fceb 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000108 	.word	0x20000108
 8000574:	40007400 	.word	0x40007400

08000578 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a19      	ldr	r2, [pc, #100]	; (80005fc <HAL_DAC_MspInit+0x84>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d12b      	bne.n	80005f2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <HAL_DAC_MspInit+0x88>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059e:	4a18      	ldr	r2, [pc, #96]	; (8000600 <HAL_DAC_MspInit+0x88>)
 80005a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80005a4:	6413      	str	r3, [r2, #64]	; 0x40
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_DAC_MspInit+0x88>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <HAL_DAC_MspInit+0x88>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <HAL_DAC_MspInit+0x88>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <HAL_DAC_MspInit+0x88>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005ca:	2310      	movs	r3, #16
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ce:	2303      	movs	r3, #3
 80005d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <HAL_DAC_MspInit+0x8c>)
 80005de:	f001 fed9 	bl	8002394 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2102      	movs	r1, #2
 80005e6:	2036      	movs	r0, #54	; 0x36
 80005e8:	f001 fbca 	bl	8001d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005ec:	2036      	movs	r0, #54	; 0x36
 80005ee:	f001 fbe3 	bl	8001db8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	; 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40007400 	.word	0x40007400
 8000600:	40023800 	.word	0x40023800
 8000604:	40020000 	.word	0x40020000

08000608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <__NVIC_GetPriorityGrouping+0x18>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	0a1b      	lsrs	r3, r3, #8
 8000612:	f003 0307 	and.w	r3, r3, #7
}
 8000616:	4618      	mov	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	db0a      	blt.n	800064e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	b2da      	uxtb	r2, r3
 800063c:	490c      	ldr	r1, [pc, #48]	; (8000670 <__NVIC_SetPriority+0x4c>)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	0112      	lsls	r2, r2, #4
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	440b      	add	r3, r1
 8000648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800064c:	e00a      	b.n	8000664 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4908      	ldr	r1, [pc, #32]	; (8000674 <__NVIC_SetPriority+0x50>)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f003 030f 	and.w	r3, r3, #15
 800065a:	3b04      	subs	r3, #4
 800065c:	0112      	lsls	r2, r2, #4
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	440b      	add	r3, r1
 8000662:	761a      	strb	r2, [r3, #24]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000e100 	.word	0xe000e100
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000678:	b480      	push	{r7}
 800067a:	b089      	sub	sp, #36	; 0x24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	f1c3 0307 	rsb	r3, r3, #7
 8000692:	2b04      	cmp	r3, #4
 8000694:	bf28      	it	cs
 8000696:	2304      	movcs	r3, #4
 8000698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	3304      	adds	r3, #4
 800069e:	2b06      	cmp	r3, #6
 80006a0:	d902      	bls.n	80006a8 <NVIC_EncodePriority+0x30>
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3b03      	subs	r3, #3
 80006a6:	e000      	b.n	80006aa <NVIC_EncodePriority+0x32>
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	43da      	mvns	r2, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	401a      	ands	r2, r3
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	43d9      	mvns	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	4313      	orrs	r3, r2
         );
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3724      	adds	r7, #36	; 0x24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
	...

080006e0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <LL_SYSCFG_SetEXTISource+0x58>)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	3302      	adds	r3, #2
 80006f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	0c1b      	lsrs	r3, r3, #16
 80006fa:	43db      	mvns	r3, r3
 80006fc:	ea02 0103 	and.w	r1, r2, r3
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	0c1b      	lsrs	r3, r3, #16
 8000704:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	fa93 f3a3 	rbit	r3, r3
 800070c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	fab3 f383 	clz	r3, r3
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	fa03 f202 	lsl.w	r2, r3, r2
 800071e:	4806      	ldr	r0, [pc, #24]	; (8000738 <LL_SYSCFG_SetEXTISource+0x58>)
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	430a      	orrs	r2, r1
 8000726:	3302      	adds	r3, #2
 8000728:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	40013800 	.word	0x40013800

0800073c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	fa93 f3a3 	rbit	r3, r3
 8000756:	613b      	str	r3, [r7, #16]
  return result;
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	fab3 f383 	clz	r3, r3
 800075e:	b2db      	uxtb	r3, r3
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	2103      	movs	r1, #3
 8000764:	fa01 f303 	lsl.w	r3, r1, r3
 8000768:	43db      	mvns	r3, r3
 800076a:	401a      	ands	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	fa93 f3a3 	rbit	r3, r3
 8000776:	61bb      	str	r3, [r7, #24]
  return result;
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	fab3 f383 	clz	r3, r3
 800077e:	b2db      	uxtb	r3, r3
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	fa01 f303 	lsl.w	r3, r1, r3
 8000788:	431a      	orrs	r2, r3
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	601a      	str	r2, [r3, #0]
}
 800078e:	bf00      	nop
 8000790:	3724      	adds	r7, #36	; 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800079a:	b480      	push	{r7}
 800079c:	b089      	sub	sp, #36	; 0x24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	60f8      	str	r0, [r7, #12]
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	68da      	ldr	r2, [r3, #12]
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	fa93 f3a3 	rbit	r3, r3
 80007b4:	613b      	str	r3, [r7, #16]
  return result;
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	fab3 f383 	clz	r3, r3
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	2103      	movs	r1, #3
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	401a      	ands	r2, r3
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	fa93 f3a3 	rbit	r3, r3
 80007d4:	61bb      	str	r3, [r7, #24]
  return result;
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	fab3 f383 	clz	r3, r3
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	6879      	ldr	r1, [r7, #4]
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	431a      	orrs	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	60da      	str	r2, [r3, #12]
}
 80007ec:	bf00      	nop
 80007ee:	3724      	adds	r7, #36	; 0x24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	683a      	ldr	r2, [r7, #0]
 8000806:	619a      	str	r2, [r3, #24]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	041a      	lsls	r2, r3, #16
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	619a      	str	r2, [r3, #24]
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800083e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000840:	4907      	ldr	r1, [pc, #28]	; (8000860 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4313      	orrs	r3, r2
 8000846:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800084a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4013      	ands	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000852:	68fb      	ldr	r3, [r7, #12]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	40023800 	.word	0x40023800

08000864 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800086a:	f107 0318 	add.w	r3, r7, #24
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
 8000882:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000884:	2004      	movs	r0, #4
 8000886:	f7ff ffd5 	bl	8000834 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800088a:	2080      	movs	r0, #128	; 0x80
 800088c:	f7ff ffd2 	bl	8000834 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff ffcf 	bl	8000834 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000896:	2002      	movs	r0, #2
 8000898:	f7ff ffcc 	bl	8000834 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800089c:	2008      	movs	r0, #8
 800089e:	f7ff ffc9 	bl	8000834 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80008a2:	2101      	movs	r1, #1
 80008a4:	48bb      	ldr	r0, [pc, #748]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008a6:	f7ff ffb5 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 80008aa:	2102      	movs	r1, #2
 80008ac:	48b9      	ldr	r0, [pc, #740]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008ae:	f7ff ffb1 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_2);
 80008b2:	2104      	movs	r1, #4
 80008b4:	48b7      	ldr	r0, [pc, #732]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008b6:	f7ff ffad 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 80008ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008be:	48b5      	ldr	r0, [pc, #724]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008c0:	f7ff ff9a 	bl	80007f8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80008c4:	2108      	movs	r1, #8
 80008c6:	48b3      	ldr	r0, [pc, #716]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008c8:	f7ff ffa4 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 80008cc:	2110      	movs	r1, #16
 80008ce:	48b1      	ldr	r0, [pc, #708]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008d0:	f7ff ffa0 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80008d4:	2120      	movs	r1, #32
 80008d6:	48af      	ldr	r0, [pc, #700]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008d8:	f7ff ff9c 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	48ad      	ldr	r0, [pc, #692]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008e0:	f7ff ff98 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_7);
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	48ab      	ldr	r0, [pc, #684]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008e8:	f7ff ff94 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80008ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	48a6      	ldr	r0, [pc, #664]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000900:	f006 f9a2 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000904:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000908:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000912:	463b      	mov	r3, r7
 8000914:	4619      	mov	r1, r3
 8000916:	48a0      	ldr	r0, [pc, #640]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000918:	f006 f996 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800091c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000920:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	463b      	mov	r3, r7
 800092c:	4619      	mov	r1, r3
 800092e:	489a      	ldr	r0, [pc, #616]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000930:	f006 f98a 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000934:	2302      	movs	r3, #2
 8000936:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000940:	463b      	mov	r3, r7
 8000942:	4619      	mov	r1, r3
 8000944:	4894      	ldr	r0, [pc, #592]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000946:	f006 f97f 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800094a:	2304      	movs	r3, #4
 800094c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	463b      	mov	r3, r7
 8000958:	4619      	mov	r1, r3
 800095a:	488f      	ldr	r0, [pc, #572]	; (8000b98 <MX_GPIO_Init+0x334>)
 800095c:	f006 f974 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000960:	2301      	movs	r3, #1
 8000962:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	488a      	ldr	r0, [pc, #552]	; (8000b9c <MX_GPIO_Init+0x338>)
 8000972:	f006 f969 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000976:	2302      	movs	r3, #2
 8000978:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	463b      	mov	r3, r7
 8000984:	4619      	mov	r1, r3
 8000986:	4885      	ldr	r0, [pc, #532]	; (8000b9c <MX_GPIO_Init+0x338>)
 8000988:	f006 f95e 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800098c:	2304      	movs	r3, #4
 800098e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	487f      	ldr	r0, [pc, #508]	; (8000b9c <MX_GPIO_Init+0x338>)
 800099e:	f006 f953 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80009a2:	2308      	movs	r3, #8
 80009a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	487a      	ldr	r0, [pc, #488]	; (8000b9c <MX_GPIO_Init+0x338>)
 80009b4:	f006 f948 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80009b8:	2320      	movs	r3, #32
 80009ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4874      	ldr	r0, [pc, #464]	; (8000b9c <MX_GPIO_Init+0x338>)
 80009ca:	f006 f93d 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80009ce:	2340      	movs	r3, #64	; 0x40
 80009d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	463b      	mov	r3, r7
 80009dc:	4619      	mov	r1, r3
 80009de:	486f      	ldr	r0, [pc, #444]	; (8000b9c <MX_GPIO_Init+0x338>)
 80009e0:	f006 f932 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	463b      	mov	r3, r7
 80009f2:	4619      	mov	r1, r3
 80009f4:	4869      	ldr	r0, [pc, #420]	; (8000b9c <MX_GPIO_Init+0x338>)
 80009f6:	f006 f927 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80009fa:	2301      	movs	r3, #1
 80009fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009fe:	2301      	movs	r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4619      	mov	r1, r3
 8000a12:	4860      	ldr	r0, [pc, #384]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000a14:	f006 f918 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4858      	ldr	r0, [pc, #352]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000a32:	f006 f909 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000a36:	2304      	movs	r3, #4
 8000a38:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4851      	ldr	r0, [pc, #324]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000a50:	f006 f8fa 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a58:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	484b      	ldr	r0, [pc, #300]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000a68:	f006 f8ee 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000a6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4845      	ldr	r0, [pc, #276]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000a80:	f006 f8e2 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a88:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	483d      	ldr	r0, [pc, #244]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000aa0:	f006 f8d2 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000aa4:	2340      	movs	r3, #64	; 0x40
 8000aa6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4838      	ldr	r0, [pc, #224]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000ab6:	f006 f8c7 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4833      	ldr	r0, [pc, #204]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000acc:	f006 f8bc 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	482d      	ldr	r0, [pc, #180]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000ae4:	f006 f8b0 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	463b      	mov	r3, r7
 8000af8:	4619      	mov	r1, r3
 8000afa:	4827      	ldr	r0, [pc, #156]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000afc:	f006 f8a4 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4619      	mov	r1, r3
 8000b12:	4821      	ldr	r0, [pc, #132]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000b14:	f006 f898 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000b18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b1c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b26:	463b      	mov	r3, r7
 8000b28:	4619      	mov	r1, r3
 8000b2a:	481b      	ldr	r0, [pc, #108]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000b2c:	f006 f88c 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b30:	2308      	movs	r3, #8
 8000b32:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b34:	2301      	movs	r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	4812      	ldr	r0, [pc, #72]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000b4a:	f006 f87d 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b52:	2301      	movs	r3, #1
 8000b54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	463b      	mov	r3, r7
 8000b64:	4619      	mov	r1, r3
 8000b66:	480b      	ldr	r0, [pc, #44]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000b68:	f006 f86e 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000b6c:	2320      	movs	r3, #32
 8000b6e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b70:	2301      	movs	r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	463b      	mov	r3, r7
 8000b82:	4619      	mov	r1, r3
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000b86:	f006 f85f 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	e005      	b.n	8000ba0 <MX_GPIO_Init+0x33c>
 8000b94:	40020400 	.word	0x40020400
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	463b      	mov	r3, r7
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4842      	ldr	r0, [pc, #264]	; (8000cbc <MX_GPIO_Init+0x458>)
 8000bb2:	f006 f849 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4619      	mov	r1, r3
 8000bce:	483b      	ldr	r0, [pc, #236]	; (8000cbc <MX_GPIO_Init+0x458>)
 8000bd0:	f006 f83a 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	463b      	mov	r3, r7
 8000be4:	4619      	mov	r1, r3
 8000be6:	4835      	ldr	r0, [pc, #212]	; (8000cbc <MX_GPIO_Init+0x458>)
 8000be8:	f006 f82e 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	482f      	ldr	r0, [pc, #188]	; (8000cbc <MX_GPIO_Init+0x458>)
 8000c00:	f006 f822 	bl	8006c48 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE0);
 8000c04:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f7ff fd69 	bl	80006e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE3);
 8000c0e:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000c12:	2002      	movs	r0, #2
 8000c14:	f7ff fd64 	bl	80006e0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000c24:	2301      	movs	r3, #1
 8000c26:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f005 fe85 	bl	800693c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000c32:	2308      	movs	r3, #8
 8000c34:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c36:	2301      	movs	r3, #1
 8000c38:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c42:	f107 0318 	add.w	r3, r7, #24
 8000c46:	4618      	mov	r0, r3
 8000c48:	f005 fe78 	bl	800693c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_0, LL_GPIO_PULL_NO);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2101      	movs	r1, #1
 8000c50:	481b      	ldr	r0, [pc, #108]	; (8000cc0 <MX_GPIO_Init+0x45c>)
 8000c52:	f7ff fda2 	bl	800079a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_3, LL_GPIO_PULL_NO);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2108      	movs	r1, #8
 8000c5a:	4819      	ldr	r0, [pc, #100]	; (8000cc0 <MX_GPIO_Init+0x45c>)
 8000c5c:	f7ff fd9d 	bl	800079a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_0, LL_GPIO_MODE_INPUT);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2101      	movs	r1, #1
 8000c64:	4816      	ldr	r0, [pc, #88]	; (8000cc0 <MX_GPIO_Init+0x45c>)
 8000c66:	f7ff fd69 	bl	800073c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	4814      	ldr	r0, [pc, #80]	; (8000cc0 <MX_GPIO_Init+0x45c>)
 8000c70:	f7ff fd64 	bl	800073c <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c74:	f7ff fcc8 	bl	8000608 <__NVIC_GetPriorityGrouping>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fcfa 	bl	8000678 <NVIC_EncodePriority>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4619      	mov	r1, r3
 8000c88:	2006      	movs	r0, #6
 8000c8a:	f7ff fccb 	bl	8000624 <__NVIC_SetPriority>
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c8e:	f7ff fcbb 	bl	8000608 <__NVIC_GetPriorityGrouping>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fced 	bl	8000678 <NVIC_EncodePriority>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	2009      	movs	r0, #9
 8000ca4:	f7ff fcbe 	bl	8000624 <__NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ca8:	2006      	movs	r0, #6
 8000caa:	f001 f885 	bl	8001db8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cae:	2009      	movs	r0, #9
 8000cb0:	f001 f882 	bl	8001db8 <HAL_NVIC_EnableIRQ>

}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40020400 	.word	0x40020400
 8000cc0:	40020800 	.word	0x40020800

08000cc4 <LL_GPIO_SetOutputPin>:
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	619a      	str	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <LL_GPIO_ResetOutputPin>:
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	041a      	lsls	r2, r3, #16
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	619a      	str	r2, [r3, #24]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <ProcessJoystick>:
#include "joystick.h"

HID_gamepad_Info_TypeDef* joymap;

void ProcessJoystick() {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

			
			SetupJoystick();
 8000d06:	f000 fdad 	bl	8001864 <SetupJoystick>
			HID_gamepad_Info_TypeDef *joymap = (HID_gamepad_Info_TypeDef *)USBH_Get_Device_Data_Host(&hUsbHostHS,HUB_GAMEPAD);
 8000d0a:	2103      	movs	r1, #3
 8000d0c:	483c      	ldr	r0, [pc, #240]	; (8000e00 <ProcessJoystick+0x100>)
 8000d0e:	f000 fcdf 	bl	80016d0 <USBH_Get_Device_Data_Host>
 8000d12:	6078      	str	r0, [r7, #4]


			if (joymap == NULL) return;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d06e      	beq.n	8000df8 <ProcessJoystick+0xf8>
			if ((joymap->gamepad_data & 0x1)) LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_10); else LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10); //RIGHT - PC7
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <ProcessJoystick+0x32>
 8000d26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d2a:	4836      	ldr	r0, [pc, #216]	; (8000e04 <ProcessJoystick+0x104>)
 8000d2c:	f7ff ffca 	bl	8000cc4 <LL_GPIO_SetOutputPin>
 8000d30:	e004      	b.n	8000d3c <ProcessJoystick+0x3c>
 8000d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d36:	4833      	ldr	r0, [pc, #204]	; (8000e04 <ProcessJoystick+0x104>)
 8000d38:	f7ff ffd2 	bl	8000ce0 <LL_GPIO_ResetOutputPin>
			if ((joymap->gamepad_data >> 1 & 0x1)) LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7); else LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7); //LEFT - PC10
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	085b      	lsrs	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d004      	beq.n	8000d56 <ProcessJoystick+0x56>
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	482d      	ldr	r0, [pc, #180]	; (8000e04 <ProcessJoystick+0x104>)
 8000d50:	f7ff ffb8 	bl	8000cc4 <LL_GPIO_SetOutputPin>
 8000d54:	e003      	b.n	8000d5e <ProcessJoystick+0x5e>
 8000d56:	2180      	movs	r1, #128	; 0x80
 8000d58:	482a      	ldr	r0, [pc, #168]	; (8000e04 <ProcessJoystick+0x104>)
 8000d5a:	f7ff ffc1 	bl	8000ce0 <LL_GPIO_ResetOutputPin>
			if ((joymap->gamepad_data >> 2 & 0x1)) LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13); else LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13); //BACK - PC11
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d005      	beq.n	8000d7a <ProcessJoystick+0x7a>
 8000d6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d72:	4824      	ldr	r0, [pc, #144]	; (8000e04 <ProcessJoystick+0x104>)
 8000d74:	f7ff ffa6 	bl	8000cc4 <LL_GPIO_SetOutputPin>
 8000d78:	e004      	b.n	8000d84 <ProcessJoystick+0x84>
 8000d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7e:	4821      	ldr	r0, [pc, #132]	; (8000e04 <ProcessJoystick+0x104>)
 8000d80:	f7ff ffae 	bl	8000ce0 <LL_GPIO_ResetOutputPin>
			if ((joymap->gamepad_data >> 3 & 0x1)) LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_11); else LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_11); //FORWARD - PC13
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	08db      	lsrs	r3, r3, #3
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d005      	beq.n	8000da0 <ProcessJoystick+0xa0>
 8000d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d98:	481a      	ldr	r0, [pc, #104]	; (8000e04 <ProcessJoystick+0x104>)
 8000d9a:	f7ff ff93 	bl	8000cc4 <LL_GPIO_SetOutputPin>
 8000d9e:	e004      	b.n	8000daa <ProcessJoystick+0xaa>
 8000da0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da4:	4817      	ldr	r0, [pc, #92]	; (8000e04 <ProcessJoystick+0x104>)
 8000da6:	f7ff ff9b 	bl	8000ce0 <LL_GPIO_ResetOutputPin>
			if ((joymap->gamepad_data >> 4 & 0x1)) LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_15); else LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_15); //TR1 - PC15
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	091b      	lsrs	r3, r3, #4
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d005      	beq.n	8000dc6 <ProcessJoystick+0xc6>
 8000dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dbe:	4811      	ldr	r0, [pc, #68]	; (8000e04 <ProcessJoystick+0x104>)
 8000dc0:	f7ff ff8e 	bl	8000ce0 <LL_GPIO_ResetOutputPin>
 8000dc4:	e004      	b.n	8000dd0 <ProcessJoystick+0xd0>
 8000dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dca:	480e      	ldr	r0, [pc, #56]	; (8000e04 <ProcessJoystick+0x104>)
 8000dcc:	f7ff ff7a 	bl	8000cc4 <LL_GPIO_SetOutputPin>
			if ((joymap->gamepad_data >> 5 & 0x1)) LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_14); else LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_14); //TR2 - PC14
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	095b      	lsrs	r3, r3, #5
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d005      	beq.n	8000dec <ProcessJoystick+0xec>
 8000de0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de4:	4807      	ldr	r0, [pc, #28]	; (8000e04 <ProcessJoystick+0x104>)
 8000de6:	f7ff ff7b 	bl	8000ce0 <LL_GPIO_ResetOutputPin>
 8000dea:	e006      	b.n	8000dfa <ProcessJoystick+0xfa>
 8000dec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <ProcessJoystick+0x104>)
 8000df2:	f7ff ff67 	bl	8000cc4 <LL_GPIO_SetOutputPin>
 8000df6:	e000      	b.n	8000dfa <ProcessJoystick+0xfa>
			if (joymap == NULL) return;
 8000df8:	bf00      	nop


		//		HAL_GPIO_WritePin(MB_GPIO_Port, RB_Pin, !(joymap->gamepad_data >> 5 & 0x1));
		//		HAL_GPIO_WritePin(RB_GPIO_Port, MB_Pin, !(joymap->gamepad_data >> 6 & 0x1));
	
}
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000046c 	.word	0x2000046c
 8000e04:	40020800 	.word	0x40020800

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 8000e0c:	f000 feaf 	bl	8001b6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e10:	f000 f812 	bl	8000e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e14:	f7ff fd26 	bl	8000864 <MX_GPIO_Init>
  MX_UART5_Init();
 8000e18:	f000 fba0 	bl	800155c <MX_UART5_Init>
  MX_USB_HOST_Init();
 8000e1c:	f00c fbee 	bl	800d5fc <MX_USB_HOST_Init>
  MX_DAC_Init();
 8000e20:	f7ff fb80 	bl	8000524 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  InitMSXKeyboard();
 8000e24:	f000 f8dc 	bl	8000fe0 <InitMSXKeyboard>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e28:	f00c fc4e 	bl	800d6c8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
     ProcessMSXKeyboard();
 8000e2c:	f000 f930 	bl	8001090 <ProcessMSXKeyboard>
     ProcessJoystick();
 8000e30:	f7ff ff66 	bl	8000d00 <ProcessJoystick>
    MX_USB_HOST_Process();
 8000e34:	e7f8      	b.n	8000e28 <main+0x20>
	...

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b094      	sub	sp, #80	; 0x50
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 0320 	add.w	r3, r7, #32
 8000e42:	2230      	movs	r2, #48	; 0x30
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f00d f832 	bl	800deb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5c:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <SystemClock_Config+0xd8>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a2b      	ldr	r2, [pc, #172]	; (8000f10 <SystemClock_Config+0xd8>)
 8000e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e66:	6413      	str	r3, [r2, #64]	; 0x40
 8000e68:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <SystemClock_Config+0xd8>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e74:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <SystemClock_Config+0xdc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a26      	ldr	r2, [pc, #152]	; (8000f14 <SystemClock_Config+0xdc>)
 8000e7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <SystemClock_Config+0xdc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e96:	2302      	movs	r3, #2
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ea0:	2319      	movs	r3, #25
 8000ea2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000ea4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000ea8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000eae:	2309      	movs	r3, #9
 8000eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb2:	f107 0320 	add.w	r3, r7, #32
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f003 f9ac 	bl	8004214 <HAL_RCC_OscConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ec2:	f000 f83b 	bl	8000f3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ec6:	f003 f955 	bl	8004174 <HAL_PWREx_EnableOverDrive>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ed0:	f000 f834 	bl	8000f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ee0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ee4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2107      	movs	r1, #7
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 fc34 	bl	8004760 <HAL_RCC_ClockConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000efe:	f000 f81d 	bl	8000f3c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000f02:	f003 fd19 	bl	8004938 <HAL_RCC_EnableCSS>
}
 8000f06:	bf00      	nop
 8000f08:	3750      	adds	r7, #80	; 0x50
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40007000 	.word	0x40007000

08000f18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f2a:	f000 fe2d 	bl	8001b88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40002000 	.word	0x40002000

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <Error_Handler+0x8>

08000f46 <LL_GPIO_ReadInputPort>:
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	691b      	ldr	r3, [r3, #16]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <LL_GPIO_WriteOutputPort>:
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, PortValue);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	615a      	str	r2, [r3, #20]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <LL_GPIO_ReadOutputPort>:
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	695b      	ldr	r3, [r3, #20]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_22
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000f9e:	695a      	ldr	r2, [r3, #20]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	bf0c      	ite	eq
 8000faa:	2301      	moveq	r3, #1
 8000fac:	2300      	movne	r3, #0
 8000fae:	b2db      	uxtb	r3, r3
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	40013c00 	.word	0x40013c00

08000fc0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_22
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6153      	str	r3, [r2, #20]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40013c00 	.word	0x40013c00

08000fe0 <InitMSXKeyboard>:
uint32_t MSX_Matrix_temp[11];

HID_KEYBD_Info_TypeDef *kb_data;

void InitMSXKeyboard()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0

	//Reset matrix state etc
	memset(&MSX_Matrix_data, 0, sizeof(MSX_Matrix_data));
 8000fe4:	222c      	movs	r2, #44	; 0x2c
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4804      	ldr	r0, [pc, #16]	; (8000ffc <InitMSXKeyboard+0x1c>)
 8000fea:	f00c ff61 	bl	800deb0 <memset>
	memset(&MSX_Matrix_temp, 0, sizeof(MSX_Matrix_data));
 8000fee:	222c      	movs	r2, #44	; 0x2c
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4803      	ldr	r0, [pc, #12]	; (8001000 <InitMSXKeyboard+0x20>)
 8000ff4:	f00c ff5c 	bl	800deb0 <memset>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2000011c 	.word	0x2000011c
 8001000:	20000148 	.word	0x20000148

08001004 <ProcessMSXKey>:

void ProcessMSXKey(uint8_t usbkey)
{
 8001004:	b490      	push	{r4, r7}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx=0; idx < MSX_KEYS_SIZE; idx++)
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e02f      	b.n	8001074 <ProcessMSXKey+0x70>
	{
		if (msxkeymap[idx][0]==usbkey)
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	491c      	ldr	r1, [pc, #112]	; (8001088 <ProcessMSXKey+0x84>)
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	440b      	add	r3, r1
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	429a      	cmp	r2, r3
 8001026:	d122      	bne.n	800106e <ProcessMSXKey+0x6a>
		{
			MSX_Matrix_temp[msxkeymap[idx][1]] |= msxkeymap[idx][2];
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	4917      	ldr	r1, [pc, #92]	; (8001088 <ProcessMSXKey+0x84>)
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	440b      	add	r3, r1
 8001034:	3301      	adds	r3, #1
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <ProcessMSXKey+0x88>)
 800103c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	4811      	ldr	r0, [pc, #68]	; (8001088 <ProcessMSXKey+0x84>)
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	4403      	add	r3, r0
 800104c:	3302      	adds	r3, #2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461c      	mov	r4, r3
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <ProcessMSXKey+0x84>)
 8001056:	4613      	mov	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	4403      	add	r3, r0
 800105e:	3301      	adds	r3, #1
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	ea41 0304 	orr.w	r3, r1, r4
 8001068:	4a08      	ldr	r2, [pc, #32]	; (800108c <ProcessMSXKey+0x88>)
 800106a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	for (uint8_t idx=0; idx < MSX_KEYS_SIZE; idx++)
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	3301      	adds	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b5a      	cmp	r3, #90	; 0x5a
 8001078:	d9cc      	bls.n	8001014 <ProcessMSXKey+0x10>
		}
	}

}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bc90      	pop	{r4, r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	0800e0dc 	.word	0x0800e0dc
 800108c:	20000148 	.word	0x20000148

08001090 <ProcessMSXKeyboard>:

void ProcessMSXKeyboard(){
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

	HID_KEYBD_Info_TypeDef *kb_data = (HID_KEYBD_Info_TypeDef *)USBH_Get_Device_Data_Host(&hUsbHostFS, HUB_KEYBOARD);
 8001096:	2101      	movs	r1, #1
 8001098:	4832      	ldr	r0, [pc, #200]	; (8001164 <ProcessMSXKeyboard+0xd4>)
 800109a:	f000 fb19 	bl	80016d0 <USBH_Get_Device_Data_Host>
 800109e:	6038      	str	r0, [r7, #0]


	//keyboard hasn't return any data, so there was no change in state.
	if (kb_data==NULL) return;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d059      	beq.n	800115a <ProcessMSXKeyboard+0xca>


	//reset temp array to zero
	memset(&MSX_Matrix_temp, 0, sizeof(MSX_Matrix_temp));
 80010a6:	222c      	movs	r2, #44	; 0x2c
 80010a8:	2100      	movs	r1, #0
 80010aa:	482f      	ldr	r0, [pc, #188]	; (8001168 <ProcessMSXKeyboard+0xd8>)
 80010ac:	f00c ff00 	bl	800deb0 <memset>

	//process special keys
	if (kb_data->lctrl || kb_data->rctrl)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d103      	bne.n	80010c0 <ProcessMSXKeyboard+0x30>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	795b      	ldrb	r3, [r3, #5]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <ProcessMSXKeyboard+0x3c>
	{
		//{KEY_LEFTCONTROL,								KB_ROW_6,		B_BIT_1},
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_1;
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <ProcessMSXKeyboard+0xd8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	4a27      	ldr	r2, [pc, #156]	; (8001168 <ProcessMSXKeyboard+0xd8>)
 80010ca:	6193      	str	r3, [r2, #24]
	}


	if (kb_data->lshift|| kb_data->rshift)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	789b      	ldrb	r3, [r3, #2]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d103      	bne.n	80010dc <ProcessMSXKeyboard+0x4c>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	799b      	ldrb	r3, [r3, #6]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <ProcessMSXKeyboard+0x58>
	{
		//		{KEY_LEFTSHIFT,							KB_ROW_6,		KB_BIT_0},
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_0;
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <ProcessMSXKeyboard+0xd8>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	4a20      	ldr	r2, [pc, #128]	; (8001168 <ProcessMSXKeyboard+0xd8>)
 80010e6:	6193      	str	r3, [r2, #24]
	}

	if (kb_data->lgui)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	791b      	ldrb	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <ProcessMSXKeyboard+0x6c>
	{
			//	{KEY_LEFT_GUI,							KB_ROW_6,		KB_BIT_4},
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_4;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <ProcessMSXKeyboard+0xd8>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f043 0310 	orr.w	r3, r3, #16
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <ProcessMSXKeyboard+0xd8>)
 80010fa:	6193      	str	r3, [r2, #24]
	}

	if (kb_data->ralt)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	79db      	ldrb	r3, [r3, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <ProcessMSXKeyboard+0x80>
	{
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_2;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <ProcessMSXKeyboard+0xd8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	4a16      	ldr	r2, [pc, #88]	; (8001168 <ProcessMSXKeyboard+0xd8>)
 800110e:	6193      	str	r3, [r2, #24]
			//{GRAPH,							KB_ROW_6,		KB_BIT_2},
	}

	//Interate over all keys - max 6 pressed keys at once
	for (int i = 0; i < 6; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	e011      	b.n	800113a <ProcessMSXKeyboard+0xaa>
	{
		if(kb_data->keys[i]!=0x00) ProcessMSXKey(kb_data->keys[i]);
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	3309      	adds	r3, #9
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d007      	beq.n	8001134 <ProcessMSXKeyboard+0xa4>
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	3309      	adds	r3, #9
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff68 	bl	8001004 <ProcessMSXKey>
	for (int i = 0; i < 6; i++)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3301      	adds	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b05      	cmp	r3, #5
 800113e:	ddea      	ble.n	8001116 <ProcessMSXKeyboard+0x86>
	}

	memcpy(MSX_Matrix_data,MSX_Matrix_temp,sizeof(MSX_Matrix_data));
 8001140:	4a0a      	ldr	r2, [pc, #40]	; (800116c <ProcessMSXKeyboard+0xdc>)
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <ProcessMSXKeyboard+0xd8>)
 8001144:	4614      	mov	r4, r2
 8001146:	461d      	mov	r5, r3
 8001148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001150:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001158:	e000      	b.n	800115c <ProcessMSXKeyboard+0xcc>
	if (kb_data==NULL) return;
 800115a:	bf00      	nop
}
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bdb0      	pop	{r4, r5, r7, pc}
 8001162:	bf00      	nop
 8001164:	20000848 	.word	0x20000848
 8001168:	20000148 	.word	0x20000148
 800116c:	2000011c 	.word	0x2000011c

08001170 <ProcessIRQ>:

void ProcessIRQ()
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
	uint8_t row = LL_GPIO_ReadInputPort(GPIOA)&0xF;
 8001176:	4813      	ldr	r0, [pc, #76]	; (80011c4 <ProcessIRQ+0x54>)
 8001178:	f7ff fee5 	bl	8000f46 <LL_GPIO_ReadInputPort>
 800117c:	4603      	mov	r3, r0
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f003 030f 	and.w	r3, r3, #15
 8001184:	71fb      	strb	r3, [r7, #7]
	uint16_t value = ~MSX_Matrix_data[row] & 0x00FF;
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <ProcessIRQ+0x58>)
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	b29b      	uxth	r3, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	b29b      	uxth	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	80bb      	strh	r3, [r7, #4]
	uint16_t PortValue = LL_GPIO_ReadOutputPort(GPIOB)& 0xFF00;
 8001198:	480c      	ldr	r0, [pc, #48]	; (80011cc <ProcessIRQ+0x5c>)
 800119a:	f7ff feee 	bl	8000f7a <LL_GPIO_ReadOutputPort>
 800119e:	4603      	mov	r3, r0
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011a6:	807b      	strh	r3, [r7, #2]
	value = value | PortValue;
 80011a8:	88ba      	ldrh	r2, [r7, #4]
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	80bb      	strh	r3, [r7, #4]
	LL_GPIO_WriteOutputPort(GPIOB, value);
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <ProcessIRQ+0x5c>)
 80011b6:	f7ff fed2 	bl	8000f5e <LL_GPIO_WriteOutputPort>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40020000 	.word	0x40020000
 80011c8:	2000011c 	.word	0x2000011c
 80011cc:	40020400 	.word	0x40020400

080011d0 <EXTI0_IRQHandler>:

//System IRQ handler. It reset flag and executes ProcessIRQ
void EXTI0_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80011d4:	2001      	movs	r0, #1
 80011d6:	f7ff fedd 	bl	8000f94 <LL_EXTI_IsActiveFlag_0_31>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d004      	beq.n	80011ea <EXTI0_IRQHandler+0x1a>
  {

    ProcessIRQ();
 80011e0:	f7ff ffc6 	bl	8001170 <ProcessIRQ>
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f7ff feeb 	bl	8000fc0 <LL_EXTI_ClearFlag_0_31>
  }

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <HAL_MspInit+0xc8>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a2f      	ldr	r2, [pc, #188]	; (80012b8 <HAL_MspInit+0xc8>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <HAL_MspInit+0xc8>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <HAL_MspInit+0xc8>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a29      	ldr	r2, [pc, #164]	; (80012b8 <HAL_MspInit+0xc8>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <HAL_MspInit+0xc8>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2101      	movs	r1, #1
 800122a:	f06f 000b 	mvn.w	r0, #11
 800122e:	f000 fda7 	bl	8001d80 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2101      	movs	r1, #1
 8001236:	f06f 000a 	mvn.w	r0, #10
 800123a:	f000 fda1 	bl	8001d80 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2101      	movs	r1, #1
 8001242:	f06f 0009 	mvn.w	r0, #9
 8001246:	f000 fd9b 	bl	8001d80 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2101      	movs	r1, #1
 800124e:	f06f 0004 	mvn.w	r0, #4
 8001252:	f000 fd95 	bl	8001d80 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2101      	movs	r1, #1
 800125a:	f06f 0003 	mvn.w	r0, #3
 800125e:	f000 fd8f 	bl	8001d80 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2101      	movs	r1, #1
 8001266:	f06f 0001 	mvn.w	r0, #1
 800126a:	f000 fd89 	bl	8001d80 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	2001      	movs	r0, #1
 8001274:	f000 fd84 	bl	8001d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001278:	2001      	movs	r0, #1
 800127a:	f000 fd9d 	bl	8001db8 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2004      	movs	r0, #4
 8001284:	f000 fd7c 	bl	8001d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001288:	2004      	movs	r0, #4
 800128a:	f000 fd95 	bl	8001db8 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2005      	movs	r0, #5
 8001294:	f000 fd74 	bl	8001d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001298:	2005      	movs	r0, #5
 800129a:	f000 fd8d 	bl	8001db8 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	2051      	movs	r0, #81	; 0x51
 80012a4:	f000 fd6c 	bl	8001d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80012a8:	2051      	movs	r0, #81	; 0x51
 80012aa:	f000 fd85 	bl	8001db8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800

080012bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80012cc:	4b33      	ldr	r3, [pc, #204]	; (800139c <HAL_InitTick+0xe0>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	4a32      	ldr	r2, [pc, #200]	; (800139c <HAL_InitTick+0xe0>)
 80012d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d6:	6413      	str	r3, [r2, #64]	; 0x40
 80012d8:	4b30      	ldr	r3, [pc, #192]	; (800139c <HAL_InitTick+0xe0>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012e4:	f107 0210 	add.w	r2, r7, #16
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 fc2c 	bl	8004b4c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d103      	bne.n	8001306 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012fe:	f003 fbfd 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 8001302:	6378      	str	r0, [r7, #52]	; 0x34
 8001304:	e004      	b.n	8001310 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001306:	f003 fbf9 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 800130a:	4603      	mov	r3, r0
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001312:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <HAL_InitTick+0xe4>)
 8001314:	fba2 2303 	umull	r2, r3, r2, r3
 8001318:	0c9b      	lsrs	r3, r3, #18
 800131a:	3b01      	subs	r3, #1
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <HAL_InitTick+0xe8>)
 8001320:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <HAL_InitTick+0xec>)
 8001322:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <HAL_InitTick+0xe8>)
 8001326:	f240 32e7 	movw	r2, #999	; 0x3e7
 800132a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800132c:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <HAL_InitTick+0xe8>)
 800132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001330:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_InitTick+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <HAL_InitTick+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <HAL_InitTick+0xe8>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001344:	4817      	ldr	r0, [pc, #92]	; (80013a4 <HAL_InitTick+0xe8>)
 8001346:	f003 ff99 	bl	800527c <HAL_TIM_Base_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001350:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001354:	2b00      	cmp	r3, #0
 8001356:	d11b      	bne.n	8001390 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001358:	4812      	ldr	r0, [pc, #72]	; (80013a4 <HAL_InitTick+0xe8>)
 800135a:	f003 fff1 	bl	8005340 <HAL_TIM_Base_Start_IT>
 800135e:	4603      	mov	r3, r0
 8001360:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001364:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001368:	2b00      	cmp	r3, #0
 800136a:	d111      	bne.n	8001390 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800136c:	202d      	movs	r0, #45	; 0x2d
 800136e:	f000 fd23 	bl	8001db8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d808      	bhi.n	800138a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	202d      	movs	r0, #45	; 0x2d
 800137e:	f000 fcff 	bl	8001d80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_InitTick+0xf0>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	e002      	b.n	8001390 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001390:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001394:	4618      	mov	r0, r3
 8001396:	3738      	adds	r7, #56	; 0x38
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	431bde83 	.word	0x431bde83
 80013a4:	20000174 	.word	0x20000174
 80013a8:	40002000 	.word	0x40002000
 80013ac:	20000004 	.word	0x20000004

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80013b4:	f003 fbfc 	bl	8004bb0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <NMI_Handler+0x8>

080013ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <MemManage_Handler+0x4>

080013c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800140e:	f002 fe97 	bl	8004140 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}

08001416 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800141a:	f000 fe4d 	bl	80020b8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}

08001422 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001436:	f003 fffb 	bl	8005430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000174 	.word	0x20000174

08001444 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <UART5_IRQHandler+0x10>)
 800144a:	f004 fa45 	bl	80058d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200001c4 	.word	0x200001c4

08001458 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <TIM6_DAC_IRQHandler+0x10>)
 800145e:	f000 fcdb 	bl	8001e18 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000108 	.word	0x20000108

0800146c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <OTG_FS_IRQHandler+0x10>)
 8001472:	f001 fb95 	bl	8002ba0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000c28 	.word	0x20000c28

08001480 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8001486:	f001 fb8b 	bl	8002ba0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000f2c 	.word	0x20000f2c

08001494 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 800149a:	f001 fb81 	bl	8002ba0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000f2c 	.word	0x20000f2c

080014a8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <OTG_HS_IRQHandler+0x10>)
 80014ae:	f001 fb77 	bl	8002ba0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000f2c 	.word	0x20000f2c

080014bc <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d4:	4a14      	ldr	r2, [pc, #80]	; (8001528 <_sbrk+0x5c>)
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <_sbrk+0x60>)
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <_sbrk+0x64>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <_sbrk+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d207      	bcs.n	800150c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014fc:	f00c fc9e 	bl	800de3c <__errno>
 8001500:	4603      	mov	r3, r0
 8001502:	220c      	movs	r2, #12
 8001504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800150a:	e009      	b.n	8001520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <_sbrk+0x64>)
 800151c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20040000 	.word	0x20040000
 800152c:	00002000 	.word	0x00002000
 8001530:	200001c0 	.word	0x200001c0
 8001534:	20001240 	.word	0x20001240

08001538 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <SystemInit+0x20>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <SystemInit+0x20>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_UART5_Init+0x58>)
 8001562:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <MX_UART5_Init+0x5c>)
 8001564:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_UART5_Init+0x58>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_UART5_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_UART5_Init+0x58>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_UART5_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_UART5_Init+0x58>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_UART5_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_UART5_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_UART5_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_UART5_Init+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_UART5_Init+0x58>)
 80015a0:	f004 f94c 	bl	800583c <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80015aa:	f7ff fcc7 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200001c4 	.word	0x200001c4
 80015b8:	40005000 	.word	0x40005000

080015bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0aa      	sub	sp, #168	; 0xa8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f00c fc67 	bl	800deb0 <memset>
  if(uartHandle->Instance==UART5)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a36      	ldr	r2, [pc, #216]	; (80016c0 <HAL_UART_MspInit+0x104>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d165      	bne.n	80016b8 <HAL_UART_MspInit+0xfc>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80015ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 faf4 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001606:	f7ff fc99 	bl	8000f3c <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800160a:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <HAL_UART_MspInit+0x108>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a2d      	ldr	r2, [pc, #180]	; (80016c4 <HAL_UART_MspInit+0x108>)
 8001610:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_UART_MspInit+0x108>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <HAL_UART_MspInit+0x108>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a27      	ldr	r2, [pc, #156]	; (80016c4 <HAL_UART_MspInit+0x108>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_UART_MspInit+0x108>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800163a:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <HAL_UART_MspInit+0x108>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <HAL_UART_MspInit+0x108>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <HAL_UART_MspInit+0x108>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001656:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800166c:	2308      	movs	r3, #8
 800166e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001672:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001676:	4619      	mov	r1, r3
 8001678:	4813      	ldr	r0, [pc, #76]	; (80016c8 <HAL_UART_MspInit+0x10c>)
 800167a:	f000 fe8b 	bl	8002394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800167e:	2304      	movs	r3, #4
 8001680:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001696:	2308      	movs	r3, #8
 8001698:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016a0:	4619      	mov	r1, r3
 80016a2:	480a      	ldr	r0, [pc, #40]	; (80016cc <HAL_UART_MspInit+0x110>)
 80016a4:	f000 fe76 	bl	8002394 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2100      	movs	r1, #0
 80016ac:	2035      	movs	r0, #53	; 0x35
 80016ae:	f000 fb67 	bl	8001d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80016b2:	2035      	movs	r0, #53	; 0x35
 80016b4:	f000 fb80 	bl	8001db8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80016b8:	bf00      	nop
 80016ba:	37a8      	adds	r7, #168	; 0xa8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40005000 	.word	0x40005000
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020800 	.word	0x40020800
 80016cc:	40020c00 	.word	0x40020c00

080016d0 <USBH_Get_Device_Data_Host>:


}

uint8_t *USBH_Get_Device_Data_Host(USBH_HandleTypeDef *phost,HUB_DEVICETypeDef deviceType)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]

  //handle device when connected to Hub
  if (phost->device.DevDesc.bDeviceClass == 9 && Appli_state == APPLICATION_READY)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
 80016e2:	2b09      	cmp	r3, #9
 80016e4:	d172      	bne.n	80017cc <USBH_Get_Device_Data_Host+0xfc>
 80016e6:	4b5e      	ldr	r3, [pc, #376]	; (8001860 <USBH_Get_Device_Data_Host+0x190>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d16e      	bne.n	80017cc <USBH_Get_Device_Data_Host+0xfc>
  {
    HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	613b      	str	r3, [r7, #16]

    for (int port = 0; port <4; port++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
 80016fc:	e062      	b.n	80017c4 <USBH_Get_Device_Data_Host+0xf4>
    {
      for (int interface = 0; interface <2; interface ++)
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	e059      	b.n	80017b8 <USBH_Get_Device_Data_Host+0xe8>
      {
        if (HUB_Handle->Port[port].Interface[interface].DeviceType == deviceType)
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	69b9      	ldr	r1, [r7, #24]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	206c      	movs	r0, #108	; 0x6c
 800170c:	fb00 f101 	mul.w	r1, r0, r1
 8001710:	f44f 7071 	mov.w	r0, #964	; 0x3c4
 8001714:	fb00 f303 	mul.w	r3, r0, r3
 8001718:	440b      	add	r3, r1
 800171a:	4413      	add	r3, r2
 800171c:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	429a      	cmp	r2, r3
 8001726:	d144      	bne.n	80017b2 <USBH_Get_Device_Data_Host+0xe2>
        {
            if (deviceType == HUB_KEYBOARD) return (uint8_t *)USBH_HUB_GetKeybdInfo(&HUB_Handle->Port[port].Interface[interface]);
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d113      	bne.n	8001756 <USBH_Get_Device_Data_Host+0x86>
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	226c      	movs	r2, #108	; 0x6c
 8001732:	fb03 f202 	mul.w	r2, r3, r2
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4413      	add	r3, r2
 800174a:	3304      	adds	r3, #4
 800174c:	4618      	mov	r0, r3
 800174e:	f009 f995 	bl	800aa7c <USBH_HUB_GetKeybdInfo>
 8001752:	4603      	mov	r3, r0
 8001754:	e080      	b.n	8001858 <USBH_Get_Device_Data_Host+0x188>
            if (deviceType == HUB_MOUSE)    return (uint8_t *)USBH_HUB_GetMouseInfo(&HUB_Handle->Port[port].Interface[interface]);
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d113      	bne.n	8001784 <USBH_Get_Device_Data_Host+0xb4>
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	226c      	movs	r2, #108	; 0x6c
 8001760:	fb03 f202 	mul.w	r2, r3, r2
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4413      	add	r3, r2
 8001778:	3304      	adds	r3, #4
 800177a:	4618      	mov	r0, r3
 800177c:	f009 fa7e 	bl	800ac7c <USBH_HUB_GetMouseInfo>
 8001780:	4603      	mov	r3, r0
 8001782:	e069      	b.n	8001858 <USBH_Get_Device_Data_Host+0x188>
            if (deviceType == HUB_GAMEPAD)  return (uint8_t *)USBH_HUB_GetGamepadInfo(&HUB_Handle->Port[port].Interface[interface]);
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d113      	bne.n	80017b2 <USBH_Get_Device_Data_Host+0xe2>
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	226c      	movs	r2, #108	; 0x6c
 800178e:	fb03 f202 	mul.w	r2, r3, r2
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4413      	add	r3, r2
 80017a6:	3304      	adds	r3, #4
 80017a8:	4618      	mov	r0, r3
 80017aa:	f008 fe89 	bl	800a4c0 <USBH_HUB_GetGamepadInfo>
 80017ae:	4603      	mov	r3, r0
 80017b0:	e052      	b.n	8001858 <USBH_Get_Device_Data_Host+0x188>
      for (int interface = 0; interface <2; interface ++)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	3301      	adds	r3, #1
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	dda2      	ble.n	8001704 <USBH_Get_Device_Data_Host+0x34>
    for (int port = 0; port <4; port++)
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3301      	adds	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	dd99      	ble.n	80016fe <USBH_Get_Device_Data_Host+0x2e>
  {
 80017ca:	e044      	b.n	8001856 <USBH_Get_Device_Data_Host+0x186>


    }
    
  }
  else if (Appli_state == APPLICATION_READY)
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <USBH_Get_Device_Data_Host+0x190>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d140      	bne.n	8001856 <USBH_Get_Device_Data_Host+0x186>
  {
      for (int interface = 0; interface <2; interface ++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	e03a      	b.n	8001850 <USBH_Get_Device_Data_Host+0x180>
      {
        HID_HandleTypeDef *HID_Handle  = (HID_HandleTypeDef *) phost->pActiveClass->pData[interface]; 
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	3208      	adds	r2, #8
 80017e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e8:	60fb      	str	r3, [r7, #12]
        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d107      	bne.n	800180a <USBH_Get_Device_Data_Host+0x13a>
        {
          if (deviceType == HUB_KEYBOARD)
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d104      	bne.n	800180a <USBH_Get_Device_Data_Host+0x13a>
          {
            return (uint8_t *)USBH_HID_GetKeybdInfo(phost);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f007 fbbd 	bl	8008f80 <USBH_HID_GetKeybdInfo>
 8001806:	4603      	mov	r3, r0
 8001808:	e026      	b.n	8001858 <USBH_Get_Device_Data_Host+0x188>
          }

        }

        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d107      	bne.n	800182a <USBH_Get_Device_Data_Host+0x15a>
        {
          if (deviceType == HUB_MOUSE)
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d104      	bne.n	800182a <USBH_Get_Device_Data_Host+0x15a>
          {
            return (uint8_t *)USBH_HID_GetMouseInfo(phost);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f007 fd59 	bl	80092d8 <USBH_HID_GetMouseInfo>
 8001826:	4603      	mov	r3, r0
 8001828:	e016      	b.n	8001858 <USBH_Get_Device_Data_Host+0x188>
          }

        }

        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_JOYSTICK)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b03      	cmp	r3, #3
 8001838:	d107      	bne.n	800184a <USBH_Get_Device_Data_Host+0x17a>
        {

          if (deviceType == HUB_GAMEPAD)
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	2b03      	cmp	r3, #3
 800183e:	d104      	bne.n	800184a <USBH_Get_Device_Data_Host+0x17a>
          {
            return (uint8_t *)USBH_HID_GetGamepadInfo(phost);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f007 f8c3 	bl	80089cc <USBH_HID_GetGamepadInfo>
 8001846:	4603      	mov	r3, r0
 8001848:	e006      	b.n	8001858 <USBH_Get_Device_Data_Host+0x188>
      for (int interface = 0; interface <2; interface ++)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3301      	adds	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	2b01      	cmp	r3, #1
 8001854:	ddc1      	ble.n	80017da <USBH_Get_Device_Data_Host+0x10a>

      }

  }

return NULL;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000c24 	.word	0x20000c24

08001864 <SetupJoystick>:



void SetupJoystick()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0

	uint8_t JoystickFound = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]
	USBH_HandleTypeDef *phost = &hUsbHostFS;
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <SetupJoystick+0x54>)
 8001870:	60bb      	str	r3, [r7, #8]
	USBH_HandleTypeDef *phostHS = &hUsbHostHS;
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <SetupJoystick+0x58>)
 8001874:	607b      	str	r3, [r7, #4]

	if(phost->gState == HOST_CLASS)
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b0b      	cmp	r3, #11
 800187e:	d104      	bne.n	800188a <SetupJoystick+0x26>
	{
		JoystickFound = SetupJoystick_Host(phost);
 8001880:	68b8      	ldr	r0, [r7, #8]
 8001882:	f000 f81d 	bl	80018c0 <SetupJoystick_Host>
 8001886:	4603      	mov	r3, r0
 8001888:	73fb      	strb	r3, [r7, #15]
	}

	if(phostHS->gState == HOST_CLASS)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b0b      	cmp	r3, #11
 8001892:	d104      	bne.n	800189e <SetupJoystick+0x3a>
	{
		JoystickFound = SetupJoystick_Host(phostHS);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f813 	bl	80018c0 <SetupJoystick_Host>
 800189a:	4603      	mov	r3, r0
 800189c:	73fb      	strb	r3, [r7, #15]
	}

	if (JoystickFound == 1)
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d102      	bne.n	80018aa <SetupJoystick+0x46>
	{
		SetPinsOn();
 80018a4:	f000 f872 	bl	800198c <SetPinsOn>
	else
	{
		SetPinsOff();
	}

}
 80018a8:	e001      	b.n	80018ae <SetupJoystick+0x4a>
		SetPinsOff();
 80018aa:	f000 f8df 	bl	8001a6c <SetPinsOff>
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000848 	.word	0x20000848
 80018bc:	2000046c 	.word	0x2000046c

080018c0 <SetupJoystick_Host>:



uint8_t SetupJoystick_Host(USBH_HandleTypeDef *phost)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint8_t JoystickFound = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	74fb      	strb	r3, [r7, #19]
  //handle device when connected to Hub
  if (phost->device.DevDesc.bDeviceClass == 9 && Appli_state == APPLICATION_READY)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
 80018d2:	2b09      	cmp	r3, #9
 80018d4:	d130      	bne.n	8001938 <SetupJoystick_Host+0x78>
 80018d6:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <SetupJoystick_Host+0xc8>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d12c      	bne.n	8001938 <SetupJoystick_Host+0x78>
  {
    HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	60fb      	str	r3, [r7, #12]

    for (int port = 0; port <4; port++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
 80018ec:	e020      	b.n	8001930 <SetupJoystick_Host+0x70>
    {
      for (int interface = 0; interface <2; interface ++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	e017      	b.n	8001924 <SetupJoystick_Host+0x64>
      {
        if (HUB_Handle->Port[port].Interface[interface].DeviceType == HUB_GAMEPAD)
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	69b9      	ldr	r1, [r7, #24]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	206c      	movs	r0, #108	; 0x6c
 80018fc:	fb00 f101 	mul.w	r1, r0, r1
 8001900:	f44f 7071 	mov.w	r0, #964	; 0x3c4
 8001904:	fb00 f303 	mul.w	r3, r0, r3
 8001908:	440b      	add	r3, r1
 800190a:	4413      	add	r3, r2
 800190c:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d103      	bne.n	800191e <SetupJoystick_Host+0x5e>
        {
        	JoystickFound = 1;
 8001916:	2301      	movs	r3, #1
 8001918:	74fb      	strb	r3, [r7, #19]
            return JoystickFound;
 800191a:	7cfb      	ldrb	r3, [r7, #19]
 800191c:	e02e      	b.n	800197c <SetupJoystick_Host+0xbc>
      for (int interface = 0; interface <2; interface ++)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	3301      	adds	r3, #1
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2b01      	cmp	r3, #1
 8001928:	dde4      	ble.n	80018f4 <SetupJoystick_Host+0x34>
    for (int port = 0; port <4; port++)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3301      	adds	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b03      	cmp	r3, #3
 8001934:	dddb      	ble.n	80018ee <SetupJoystick_Host+0x2e>
  {
 8001936:	e020      	b.n	800197a <SetupJoystick_Host+0xba>


    }
    
  }
  else if (Appli_state == APPLICATION_READY)
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <SetupJoystick_Host+0xc8>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d11c      	bne.n	800197a <SetupJoystick_Host+0xba>
  {
      for (int interface = 0; interface <2; interface ++)
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e016      	b.n	8001974 <SetupJoystick_Host+0xb4>
      {
        HID_HandleTypeDef *HID_Handle  = (HID_HandleTypeDef *) phost->pActiveClass->pData[interface]; 
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	3208      	adds	r2, #8
 8001950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001954:	60bb      	str	r3, [r7, #8]


        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_JOYSTICK)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b03      	cmp	r3, #3
 8001964:	d103      	bne.n	800196e <SetupJoystick_Host+0xae>
        {

            //TURN ON PINS and return
        	JoystickFound = 1;
 8001966:	2301      	movs	r3, #1
 8001968:	74fb      	strb	r3, [r7, #19]
            return JoystickFound;
 800196a:	7cfb      	ldrb	r3, [r7, #19]
 800196c:	e006      	b.n	800197c <SetupJoystick_Host+0xbc>
      for (int interface = 0; interface <2; interface ++)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b01      	cmp	r3, #1
 8001978:	dde5      	ble.n	8001946 <SetupJoystick_Host+0x86>
      }

  }

  //If we are here, no joystick detected change pins back to Input
  return JoystickFound;
 800197a:	7cfb      	ldrb	r3, [r7, #19]


}
 800197c:	4618      	mov	r0, r3
 800197e:	3724      	adds	r7, #36	; 0x24
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	20000c24 	.word	0x20000c24

0800198c <SetPinsOn>:


void SetPinsOn()
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001992:	463b      	mov	r3, r7
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
 80019a0:	615a      	str	r2, [r3, #20]
    /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019a6:	2301      	movs	r3, #1
 80019a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b6:	463b      	mov	r3, r7
 80019b8:	4619      	mov	r1, r3
 80019ba:	482b      	ldr	r0, [pc, #172]	; (8001a68 <SetPinsOn+0xdc>)
 80019bc:	f005 f944 	bl	8006c48 <LL_GPIO_Init>

    /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80019c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019c6:	2301      	movs	r3, #1
 80019c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d6:	463b      	mov	r3, r7
 80019d8:	4619      	mov	r1, r3
 80019da:	4823      	ldr	r0, [pc, #140]	; (8001a68 <SetPinsOn+0xdc>)
 80019dc:	f005 f934 	bl	8006c48 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80019e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019e4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019e6:	2301      	movs	r3, #1
 80019e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f6:	463b      	mov	r3, r7
 80019f8:	4619      	mov	r1, r3
 80019fa:	481b      	ldr	r0, [pc, #108]	; (8001a68 <SetPinsOn+0xdc>)
 80019fc:	f005 f924 	bl	8006c48 <LL_GPIO_Init>
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8001a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a06:	2301      	movs	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a16:	463b      	mov	r3, r7
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4813      	ldr	r0, [pc, #76]	; (8001a68 <SetPinsOn+0xdc>)
 8001a1c:	f005 f914 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8001a20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a24:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a26:	2301      	movs	r3, #1
 8001a28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a36:	463b      	mov	r3, r7
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480b      	ldr	r0, [pc, #44]	; (8001a68 <SetPinsOn+0xdc>)
 8001a3c:	f005 f904 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a44:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a46:	2301      	movs	r3, #1
 8001a48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a56:	463b      	mov	r3, r7
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4803      	ldr	r0, [pc, #12]	; (8001a68 <SetPinsOn+0xdc>)
 8001a5c:	f005 f8f4 	bl	8006c48 <LL_GPIO_Init>


}
 8001a60:	bf00      	nop
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40020800 	.word	0x40020800

08001a6c <SetPinsOff>:


void SetPinsOff()
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	463b      	mov	r3, r7
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	615a      	str	r2, [r3, #20]
    /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8e:	463b      	mov	r3, r7
 8001a90:	4619      	mov	r1, r3
 8001a92:	4821      	ldr	r0, [pc, #132]	; (8001b18 <SetPinsOff+0xac>)
 8001a94:	f005 f8d8 	bl	8006c48 <LL_GPIO_Init>

    /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a9c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	481b      	ldr	r0, [pc, #108]	; (8001b18 <SetPinsOff+0xac>)
 8001aac:	f005 f8cc 	bl	8006c48 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001ab0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ab4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abe:	463b      	mov	r3, r7
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4815      	ldr	r0, [pc, #84]	; (8001b18 <SetPinsOff+0xac>)
 8001ac4:	f005 f8c0 	bl	8006c48 <LL_GPIO_Init>
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8001ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001acc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480f      	ldr	r0, [pc, #60]	; (8001b18 <SetPinsOff+0xac>)
 8001adc:	f005 f8b4 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8001ae0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ae4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aee:	463b      	mov	r3, r7
 8001af0:	4619      	mov	r1, r3
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <SetPinsOff+0xac>)
 8001af4:	f005 f8a8 	bl	8006c48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001af8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001afc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b06:	463b      	mov	r3, r7
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4803      	ldr	r0, [pc, #12]	; (8001b18 <SetPinsOff+0xac>)
 8001b0c:	f005 f89c 	bl	8006c48 <LL_GPIO_Init>


}
 8001b10:	bf00      	nop
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40020800 	.word	0x40020800

08001b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b22:	490e      	ldr	r1, [pc, #56]	; (8001b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b38:	4c0b      	ldr	r4, [pc, #44]	; (8001b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b46:	f7ff fcf7 	bl	8001538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f00c f97d 	bl	800de48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4e:	f7ff f95b 	bl	8000e08 <main>
  bx  lr    
 8001b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001b60:	0800e458 	.word	0x0800e458
  ldr r2, =_sbss
 8001b64:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8001b68:	20001240 	.word	0x20001240

08001b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC_IRQHandler>

08001b6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b72:	2003      	movs	r0, #3
 8001b74:	f000 f8f9 	bl	8001d6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b78:	200f      	movs	r0, #15
 8001b7a:	f7ff fb9f 	bl	80012bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b7e:	f7ff fb37 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	2000024c 	.word	0x2000024c

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	2000024c 	.word	0x2000024c

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_Delay+0x44>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000008 	.word	0x20000008

08001c10 <__NVIC_SetPriorityGrouping>:
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <__NVIC_SetPriorityGrouping+0x40>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <__NVIC_SetPriorityGrouping+0x40>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00
 8001c54:	05fa0000 	.word	0x05fa0000

08001c58 <__NVIC_GetPriorityGrouping>:
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <__NVIC_GetPriorityGrouping+0x18>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f003 0307 	and.w	r3, r3, #7
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_EnableIRQ>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	db0b      	blt.n	8001c9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	f003 021f 	and.w	r2, r3, #31
 8001c8c:	4907      	ldr	r1, [pc, #28]	; (8001cac <__NVIC_EnableIRQ+0x38>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	2001      	movs	r0, #1
 8001c96:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__NVIC_SetPriority>:
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	; (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	; (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ff4c 	bl	8001c10 <__NVIC_SetPriorityGrouping>
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d92:	f7ff ff61 	bl	8001c58 <__NVIC_GetPriorityGrouping>
 8001d96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	68b9      	ldr	r1, [r7, #8]
 8001d9c:	6978      	ldr	r0, [r7, #20]
 8001d9e:	f7ff ffb1 	bl	8001d04 <NVIC_EncodePriority>
 8001da2:	4602      	mov	r2, r0
 8001da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ff80 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001db0:	bf00      	nop
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff54 	bl	8001c74 <__NVIC_EnableIRQ>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e014      	b.n	8001e10 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	791b      	ldrb	r3, [r3, #4]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d105      	bne.n	8001dfc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7fe fbbe 	bl	8000578 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e2e:	d120      	bne.n	8001e72 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e3e:	d118      	bne.n	8001e72 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2204      	movs	r2, #4
 8001e44:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f82d 	bl	8001ecc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e80:	d120      	bne.n	8001ec4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e90:	d118      	bne.n	8001ec4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2204      	movs	r2, #4
 8001e96:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f043 0202 	orr.w	r2, r3, #2
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001ebc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f85d 	bl	8001f7e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	795b      	ldrb	r3, [r3, #5]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_DAC_ConfigChannel+0x18>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e03c      	b.n	8001f72 <HAL_DAC_ConfigChannel+0x92>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2202      	movs	r2, #2
 8001f02:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f003 0310 	and.w	r3, r3, #16
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6819      	ldr	r1, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	22c0      	movs	r2, #192	; 0xc0
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	400a      	ands	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2201      	movs	r2, #1
 8001f68:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	371c      	adds	r7, #28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fa0:	f7ff fe06 	bl	8001bb0 <HAL_GetTick>
 8001fa4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d008      	beq.n	8001fc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e052      	b.n	800206a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0216 	bic.w	r2, r2, #22
 8001fd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d103      	bne.n	8001ff4 <HAL_DMA_Abort+0x62>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0208 	bic.w	r2, r2, #8
 8002002:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002014:	e013      	b.n	800203e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002016:	f7ff fdcb 	bl	8001bb0 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b05      	cmp	r3, #5
 8002022:	d90c      	bls.n	800203e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2220      	movs	r2, #32
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2203      	movs	r2, #3
 800202e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e015      	b.n	800206a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e4      	bne.n	8002016 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	223f      	movs	r2, #63	; 0x3f
 8002052:	409a      	lsls	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d004      	beq.n	8002090 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2280      	movs	r2, #128	; 0x80
 800208a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e00c      	b.n	80020aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2205      	movs	r2, #5
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
 80020c2:	4b56      	ldr	r3, [pc, #344]	; (800221c <HAL_FLASH_IRQHandler+0x164>)
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	4a55      	ldr	r2, [pc, #340]	; (800221c <HAL_FLASH_IRQHandler+0x164>)
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
 80020ce:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_FLASH_IRQHandler+0x164>)
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	4a52      	ldr	r2, [pc, #328]	; (800221c <HAL_FLASH_IRQHandler+0x164>)
 80020d4:	f023 0302 	bic.w	r3, r3, #2
 80020d8:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
 80020da:	4b50      	ldr	r3, [pc, #320]	; (800221c <HAL_FLASH_IRQHandler+0x164>)
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	4a4f      	ldr	r2, [pc, #316]	; (800221c <HAL_FLASH_IRQHandler+0x164>)
 80020e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80020e4:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
 80020e6:	4b4d      	ldr	r3, [pc, #308]	; (800221c <HAL_FLASH_IRQHandler+0x164>)
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	4a4c      	ldr	r2, [pc, #304]	; (800221c <HAL_FLASH_IRQHandler+0x164>)
 80020ec:	f023 0304 	bic.w	r3, r3, #4
 80020f0:	6113      	str	r3, [r2, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80020f2:	4b4a      	ldr	r3, [pc, #296]	; (800221c <HAL_FLASH_IRQHandler+0x164>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d048      	beq.n	8002190 <HAL_FLASH_IRQHandler+0xd8>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_FLASH_IRQHandler+0x164>)
 8002100:	2201      	movs	r2, #1
 8002102:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
 8002104:	4b46      	ldr	r3, [pc, #280]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b03      	cmp	r3, #3
 800210c:	d037      	beq.n	800217e <HAL_FLASH_IRQHandler+0xc6>
 800210e:	2b03      	cmp	r3, #3
 8002110:	dc40      	bgt.n	8002194 <HAL_FLASH_IRQHandler+0xdc>
 8002112:	2b01      	cmp	r3, #1
 8002114:	d002      	beq.n	800211c <HAL_FLASH_IRQHandler+0x64>
 8002116:	2b02      	cmp	r3, #2
 8002118:	d02a      	beq.n	8002170 <HAL_FLASH_IRQHandler+0xb8>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
 800211a:	e03b      	b.n	8002194 <HAL_FLASH_IRQHandler+0xdc>
        pFlash.NbSectorsToErase--;
 800211c:	4b40      	ldr	r3, [pc, #256]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	3b01      	subs	r3, #1
 8002122:	4a3f      	ldr	r2, [pc, #252]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 8002124:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
 8002126:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d013      	beq.n	8002156 <HAL_FLASH_IRQHandler+0x9e>
          temp = pFlash.Sector;
 800212e:	4b3c      	ldr	r3, [pc, #240]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f875 	bl	8002224 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 800213a:	4b39      	ldr	r3, [pc, #228]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	3301      	adds	r3, #1
 8002140:	4a37      	ldr	r2, [pc, #220]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 8002142:	60d3      	str	r3, [r2, #12]
 8002144:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 8002146:	4b36      	ldr	r3, [pc, #216]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 8002148:	7a1b      	ldrb	r3, [r3, #8]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4619      	mov	r1, r3
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f8d4 	bl	80022fc <FLASH_Erase_Sector>
        break;
 8002154:	e01f      	b.n	8002196 <HAL_FLASH_IRQHandler+0xde>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	4a30      	ldr	r2, [pc, #192]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f85e 	bl	8002224 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002168:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
        break;
 800216e:	e012      	b.n	8002196 <HAL_FLASH_IRQHandler+0xde>
        HAL_FLASH_EndOfOperationCallback(0);
 8002170:	2000      	movs	r0, #0
 8002172:	f000 f857 	bl	8002224 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
        break;
 800217c:	e00b      	b.n	8002196 <HAL_FLASH_IRQHandler+0xde>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800217e:	4b28      	ldr	r3, [pc, #160]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f84e 	bl	8002224 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002188:	4b25      	ldr	r3, [pc, #148]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
        break;
 800218e:	e002      	b.n	8002196 <HAL_FLASH_IRQHandler+0xde>
    }
  }
 8002190:	bf00      	nop
 8002192:	e000      	b.n	8002196 <HAL_FLASH_IRQHandler+0xde>
        break;
 8002194:	bf00      	nop
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <HAL_FLASH_IRQHandler+0x164>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d023      	beq.n	80021ea <HAL_FLASH_IRQHandler+0x132>
  {
    switch (pFlash.ProcedureOnGoing)
 80021a2:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d011      	beq.n	80021d0 <HAL_FLASH_IRQHandler+0x118>
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	dc13      	bgt.n	80021d8 <HAL_FLASH_IRQHandler+0x120>
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d002      	beq.n	80021ba <HAL_FLASH_IRQHandler+0x102>
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d008      	beq.n	80021ca <HAL_FLASH_IRQHandler+0x112>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
 80021b8:	e00e      	b.n	80021d8 <HAL_FLASH_IRQHandler+0x120>
        temp = pFlash.Sector;
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
 80021c0:	4b17      	ldr	r3, [pc, #92]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 80021c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021c6:	60da      	str	r2, [r3, #12]
        break;
 80021c8:	e007      	b.n	80021da <HAL_FLASH_IRQHandler+0x122>
        temp = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
        break;
 80021ce:	e004      	b.n	80021da <HAL_FLASH_IRQHandler+0x122>
        temp = pFlash.Address;
 80021d0:	4b13      	ldr	r3, [pc, #76]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	607b      	str	r3, [r7, #4]
        break;
 80021d6:	e000      	b.n	80021da <HAL_FLASH_IRQHandler+0x122>
      break;
 80021d8:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
 80021da:	f000 f837 	bl	800224c <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f82a 	bl	8002238 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80021e4:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10e      	bne.n	8002212 <HAL_FLASH_IRQHandler+0x15a>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_FLASH_IRQHandler+0x164>)
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	4a08      	ldr	r2, [pc, #32]	; (800221c <HAL_FLASH_IRQHandler+0x164>)
 80021fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fe:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_FLASH_IRQHandler+0x164>)
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	4a05      	ldr	r2, [pc, #20]	; (800221c <HAL_FLASH_IRQHandler+0x164>)
 8002206:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800220a:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <HAL_FLASH_IRQHandler+0x168>)
 800220e:	2200      	movs	r2, #0
 8002210:	751a      	strb	r2, [r3, #20]
  }
  
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023c00 	.word	0x40023c00
 8002220:	20000250 	.word	0x20000250

08002224 <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
  */ 
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <FLASH_SetErrorCode+0xa8>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800225c:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <FLASH_SetErrorCode+0xac>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f043 0320 	orr.w	r3, r3, #32
 8002264:	4a24      	ldr	r2, [pc, #144]	; (80022f8 <FLASH_SetErrorCode+0xac>)
 8002266:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002268:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <FLASH_SetErrorCode+0xa8>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <FLASH_SetErrorCode+0xac>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f043 0310 	orr.w	r3, r3, #16
 800227c:	4a1e      	ldr	r2, [pc, #120]	; (80022f8 <FLASH_SetErrorCode+0xac>)
 800227e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002280:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <FLASH_SetErrorCode+0xa8>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800228c:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <FLASH_SetErrorCode+0xac>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f043 0308 	orr.w	r3, r3, #8
 8002294:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <FLASH_SetErrorCode+0xac>)
 8002296:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002298:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <FLASH_SetErrorCode+0xa8>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <FLASH_SetErrorCode+0xac>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <FLASH_SetErrorCode+0xac>)
 80022ae:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <FLASH_SetErrorCode+0xa8>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <FLASH_SetErrorCode+0xac>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	4a0c      	ldr	r2, [pc, #48]	; (80022f8 <FLASH_SetErrorCode+0xac>)
 80022c6:	6193      	str	r3, [r2, #24]
  }
  
#if defined (FLASH_OPTCR2_PCROP)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <FLASH_SetErrorCode+0xa8>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <FLASH_SetErrorCode+0x94>
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <FLASH_SetErrorCode+0xac>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022dc:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <FLASH_SetErrorCode+0xac>)
 80022de:	6193      	str	r3, [r2, #24]
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <FLASH_SetErrorCode+0xa8>)
 80022e2:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 80022e6:	60da      	str	r2, [r3, #12]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40023c00 	.word	0x40023c00
 80022f8:	20000250 	.word	0x20000250

080022fc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d102      	bne.n	8002318 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e010      	b.n	800233a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d103      	bne.n	8002326 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800231e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	e009      	b.n	800233a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d103      	bne.n	8002334 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800232c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e002      	b.n	800233a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002334:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002338:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <FLASH_Erase_Sector+0x94>)
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	4a14      	ldr	r2, [pc, #80]	; (8002390 <FLASH_Erase_Sector+0x94>)
 8002340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002344:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <FLASH_Erase_Sector+0x94>)
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	4911      	ldr	r1, [pc, #68]	; (8002390 <FLASH_Erase_Sector+0x94>)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <FLASH_Erase_Sector+0x94>)
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <FLASH_Erase_Sector+0x94>)
 8002358:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800235c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <FLASH_Erase_Sector+0x94>)
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4313      	orrs	r3, r2
 8002368:	4a09      	ldr	r2, [pc, #36]	; (8002390 <FLASH_Erase_Sector+0x94>)
 800236a:	f043 0302 	orr.w	r3, r3, #2
 800236e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <FLASH_Erase_Sector+0x94>)
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	4a06      	ldr	r2, [pc, #24]	; (8002390 <FLASH_Erase_Sector+0x94>)
 8002376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800237c:	f3bf 8f4f 	dsb	sy
}
 8002380:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40023c00 	.word	0x40023c00

08002394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	; 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	e169      	b.n	8002688 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023b4:	2201      	movs	r2, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	f040 8158 	bne.w	8002682 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d005      	beq.n	80023ea <HAL_GPIO_Init+0x56>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d130      	bne.n	800244c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	2203      	movs	r2, #3
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f003 0201 	and.w	r2, r3, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b03      	cmp	r3, #3
 8002456:	d017      	beq.n	8002488 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d123      	bne.n	80024dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	08da      	lsrs	r2, r3, #3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3208      	adds	r2, #8
 800249c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	220f      	movs	r2, #15
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	08da      	lsrs	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3208      	adds	r2, #8
 80024d6:	69b9      	ldr	r1, [r7, #24]
 80024d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0203 	and.w	r2, r3, #3
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80b2 	beq.w	8002682 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251e:	4b60      	ldr	r3, [pc, #384]	; (80026a0 <HAL_GPIO_Init+0x30c>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	4a5f      	ldr	r2, [pc, #380]	; (80026a0 <HAL_GPIO_Init+0x30c>)
 8002524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002528:	6453      	str	r3, [r2, #68]	; 0x44
 800252a:	4b5d      	ldr	r3, [pc, #372]	; (80026a0 <HAL_GPIO_Init+0x30c>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002536:	4a5b      	ldr	r2, [pc, #364]	; (80026a4 <HAL_GPIO_Init+0x310>)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	3302      	adds	r3, #2
 800253e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	220f      	movs	r2, #15
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a52      	ldr	r2, [pc, #328]	; (80026a8 <HAL_GPIO_Init+0x314>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d02b      	beq.n	80025ba <HAL_GPIO_Init+0x226>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a51      	ldr	r2, [pc, #324]	; (80026ac <HAL_GPIO_Init+0x318>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d025      	beq.n	80025b6 <HAL_GPIO_Init+0x222>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a50      	ldr	r2, [pc, #320]	; (80026b0 <HAL_GPIO_Init+0x31c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d01f      	beq.n	80025b2 <HAL_GPIO_Init+0x21e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4f      	ldr	r2, [pc, #316]	; (80026b4 <HAL_GPIO_Init+0x320>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d019      	beq.n	80025ae <HAL_GPIO_Init+0x21a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4e      	ldr	r2, [pc, #312]	; (80026b8 <HAL_GPIO_Init+0x324>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <HAL_GPIO_Init+0x216>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4d      	ldr	r2, [pc, #308]	; (80026bc <HAL_GPIO_Init+0x328>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00d      	beq.n	80025a6 <HAL_GPIO_Init+0x212>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4c      	ldr	r2, [pc, #304]	; (80026c0 <HAL_GPIO_Init+0x32c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d007      	beq.n	80025a2 <HAL_GPIO_Init+0x20e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4b      	ldr	r2, [pc, #300]	; (80026c4 <HAL_GPIO_Init+0x330>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d101      	bne.n	800259e <HAL_GPIO_Init+0x20a>
 800259a:	2307      	movs	r3, #7
 800259c:	e00e      	b.n	80025bc <HAL_GPIO_Init+0x228>
 800259e:	2308      	movs	r3, #8
 80025a0:	e00c      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025a2:	2306      	movs	r3, #6
 80025a4:	e00a      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025a6:	2305      	movs	r3, #5
 80025a8:	e008      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025aa:	2304      	movs	r3, #4
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025ae:	2303      	movs	r3, #3
 80025b0:	e004      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e002      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025ba:	2300      	movs	r3, #0
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	f002 0203 	and.w	r2, r2, #3
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	4093      	lsls	r3, r2
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025cc:	4935      	ldr	r1, [pc, #212]	; (80026a4 <HAL_GPIO_Init+0x310>)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025da:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_GPIO_Init+0x334>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025fe:	4a32      	ldr	r2, [pc, #200]	; (80026c8 <HAL_GPIO_Init+0x334>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002604:	4b30      	ldr	r3, [pc, #192]	; (80026c8 <HAL_GPIO_Init+0x334>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002628:	4a27      	ldr	r2, [pc, #156]	; (80026c8 <HAL_GPIO_Init+0x334>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800262e:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <HAL_GPIO_Init+0x334>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002652:	4a1d      	ldr	r2, [pc, #116]	; (80026c8 <HAL_GPIO_Init+0x334>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_GPIO_Init+0x334>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800267c:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <HAL_GPIO_Init+0x334>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3301      	adds	r3, #1
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	f67f ae92 	bls.w	80023b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40021400 	.word	0x40021400
 80026c0:	40021800 	.word	0x40021800
 80026c4:	40021c00 	.word	0x40021c00
 80026c8:	40013c00 	.word	0x40013c00

080026cc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80026cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ce:	b08f      	sub	sp, #60	; 0x3c
 80026d0:	af0a      	add	r7, sp, #40	; 0x28
 80026d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e054      	b.n	8002788 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d106      	bne.n	80026fe <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f00b f863 	bl	800d7c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2203      	movs	r2, #3
 8002702:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d102      	bne.n	8002718 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f004 fbae 	bl	8006e7e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	687e      	ldr	r6, [r7, #4]
 800272a:	466d      	mov	r5, sp
 800272c:	f106 0410 	add.w	r4, r6, #16
 8002730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002738:	e894 0003 	ldmia.w	r4, {r0, r1}
 800273c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002740:	1d33      	adds	r3, r6, #4
 8002742:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002744:	6838      	ldr	r0, [r7, #0]
 8002746:	f004 faf3 	bl	8006d30 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2101      	movs	r1, #1
 8002750:	4618      	mov	r0, r3
 8002752:	f004 fba5 	bl	8006ea0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	687e      	ldr	r6, [r7, #4]
 800275e:	466d      	mov	r5, sp
 8002760:	f106 0410 	add.w	r4, r6, #16
 8002764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800276c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002770:	e885 0003 	stmia.w	r5, {r0, r1}
 8002774:	1d33      	adds	r3, r6, #4
 8002776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002778:	6838      	ldr	r0, [r7, #0]
 800277a:	f004 fd85 	bl	8007288 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002790 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002790:	b590      	push	{r4, r7, lr}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af04      	add	r7, sp, #16
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	4608      	mov	r0, r1
 800279a:	4611      	mov	r1, r2
 800279c:	461a      	mov	r2, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	70fb      	strb	r3, [r7, #3]
 80027a2:	460b      	mov	r3, r1
 80027a4:	70bb      	strb	r3, [r7, #2]
 80027a6:	4613      	mov	r3, r2
 80027a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_HCD_HC_Init+0x28>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e076      	b.n	80028a6 <HAL_HCD_HC_Init+0x116>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	333d      	adds	r3, #61	; 0x3d
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3338      	adds	r3, #56	; 0x38
 80027e0:	787a      	ldrb	r2, [r7, #1]
 80027e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3340      	adds	r3, #64	; 0x40
 80027f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80027f4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	3339      	adds	r3, #57	; 0x39
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	212c      	movs	r1, #44	; 0x2c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	333f      	adds	r3, #63	; 0x3f
 8002816:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800281a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	78ba      	ldrb	r2, [r7, #2]
 8002820:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002824:	b2d0      	uxtb	r0, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	333a      	adds	r3, #58	; 0x3a
 8002832:	4602      	mov	r2, r0
 8002834:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002836:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800283a:	2b00      	cmp	r3, #0
 800283c:	da09      	bge.n	8002852 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	333b      	adds	r3, #59	; 0x3b
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	e008      	b.n	8002864 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	333b      	adds	r3, #59	; 0x3b
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	333c      	adds	r3, #60	; 0x3c
 8002872:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002876:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	787c      	ldrb	r4, [r7, #1]
 800287e:	78ba      	ldrb	r2, [r7, #2]
 8002880:	78f9      	ldrb	r1, [r7, #3]
 8002882:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002884:	9302      	str	r3, [sp, #8]
 8002886:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4623      	mov	r3, r4
 8002894:	f004 fe72 	bl	800757c <USB_HC_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd90      	pop	{r4, r7, pc}

080028ae <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_HCD_HC_Halt+0x1e>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e00f      	b.n	80028ec <HAL_HCD_HC_Halt+0x3e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f005 f8c2 	bl	8007a66 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
 8002900:	461a      	mov	r2, r3
 8002902:	4603      	mov	r3, r0
 8002904:	70fb      	strb	r3, [r7, #3]
 8002906:	460b      	mov	r3, r1
 8002908:	70bb      	strb	r3, [r7, #2]
 800290a:	4613      	mov	r3, r2
 800290c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	212c      	movs	r1, #44	; 0x2c
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	333b      	adds	r3, #59	; 0x3b
 800291c:	78ba      	ldrb	r2, [r7, #2]
 800291e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	333f      	adds	r3, #63	; 0x3f
 800292e:	787a      	ldrb	r2, [r7, #1]
 8002930:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002932:	7c3b      	ldrb	r3, [r7, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d112      	bne.n	800295e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3342      	adds	r3, #66	; 0x42
 8002946:	2203      	movs	r2, #3
 8002948:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	333d      	adds	r3, #61	; 0x3d
 8002958:	7f3a      	ldrb	r2, [r7, #28]
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e008      	b.n	8002970 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3342      	adds	r3, #66	; 0x42
 800296c:	2202      	movs	r2, #2
 800296e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002970:	787b      	ldrb	r3, [r7, #1]
 8002972:	2b03      	cmp	r3, #3
 8002974:	f200 80c6 	bhi.w	8002b04 <HAL_HCD_HC_SubmitRequest+0x210>
 8002978:	a201      	add	r2, pc, #4	; (adr r2, 8002980 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800297a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297e:	bf00      	nop
 8002980:	08002991 	.word	0x08002991
 8002984:	08002af1 	.word	0x08002af1
 8002988:	080029f5 	.word	0x080029f5
 800298c:	08002a73 	.word	0x08002a73
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002990:	7c3b      	ldrb	r3, [r7, #16]
 8002992:	2b01      	cmp	r3, #1
 8002994:	f040 80b8 	bne.w	8002b08 <HAL_HCD_HC_SubmitRequest+0x214>
 8002998:	78bb      	ldrb	r3, [r7, #2]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f040 80b4 	bne.w	8002b08 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80029a0:	8b3b      	ldrh	r3, [r7, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d108      	bne.n	80029b8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80029a6:	78fb      	ldrb	r3, [r7, #3]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	3355      	adds	r3, #85	; 0x55
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3355      	adds	r3, #85	; 0x55
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d109      	bne.n	80029e0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3342      	adds	r3, #66	; 0x42
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029de:	e093      	b.n	8002b08 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3342      	adds	r3, #66	; 0x42
 80029ee:	2202      	movs	r2, #2
 80029f0:	701a      	strb	r2, [r3, #0]
      break;
 80029f2:	e089      	b.n	8002b08 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80029f4:	78bb      	ldrb	r3, [r7, #2]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d11d      	bne.n	8002a36 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	3355      	adds	r3, #85	; 0x55
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3342      	adds	r3, #66	; 0x42
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002a20:	e073      	b.n	8002b0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3342      	adds	r3, #66	; 0x42
 8002a30:	2202      	movs	r2, #2
 8002a32:	701a      	strb	r2, [r3, #0]
      break;
 8002a34:	e069      	b.n	8002b0a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	3354      	adds	r3, #84	; 0x54
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3342      	adds	r3, #66	; 0x42
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
      break;
 8002a5c:	e055      	b.n	8002b0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3342      	adds	r3, #66	; 0x42
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	701a      	strb	r2, [r3, #0]
      break;
 8002a70:	e04b      	b.n	8002b0a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002a72:	78bb      	ldrb	r3, [r7, #2]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d11d      	bne.n	8002ab4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	3355      	adds	r3, #85	; 0x55
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	3342      	adds	r3, #66	; 0x42
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a9e:	e034      	b.n	8002b0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3342      	adds	r3, #66	; 0x42
 8002aae:	2202      	movs	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]
      break;
 8002ab2:	e02a      	b.n	8002b0a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	3354      	adds	r3, #84	; 0x54
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d109      	bne.n	8002adc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3342      	adds	r3, #66	; 0x42
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
      break;
 8002ada:	e016      	b.n	8002b0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3342      	adds	r3, #66	; 0x42
 8002aea:	2202      	movs	r2, #2
 8002aec:	701a      	strb	r2, [r3, #0]
      break;
 8002aee:	e00c      	b.n	8002b0a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3342      	adds	r3, #66	; 0x42
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
      break;
 8002b02:	e002      	b.n	8002b0a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002b04:	bf00      	nop
 8002b06:	e000      	b.n	8002b0a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002b08:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	3344      	adds	r3, #68	; 0x44
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	8b3a      	ldrh	r2, [r7, #24]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	202c      	movs	r0, #44	; 0x2c
 8002b24:	fb00 f303 	mul.w	r3, r0, r3
 8002b28:	440b      	add	r3, r1
 8002b2a:	334c      	adds	r3, #76	; 0x4c
 8002b2c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3360      	adds	r3, #96	; 0x60
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3350      	adds	r3, #80	; 0x50
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b52:	78fb      	ldrb	r3, [r7, #3]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3339      	adds	r3, #57	; 0x39
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3361      	adds	r3, #97	; 0x61
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	222c      	movs	r2, #44	; 0x2c
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	3338      	adds	r3, #56	; 0x38
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	18d1      	adds	r1, r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f004 fe16 	bl	80077c0 <USB_HC_StartXfer>
 8002b94:	4603      	mov	r3, r0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop

08002ba0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f004 faec 	bl	8007194 <USB_GetMode>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	f040 80f6 	bne.w	8002db0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f004 faaf 	bl	800712c <USB_ReadInterrupts>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80ec 	beq.w	8002dae <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f004 faa6 	bl	800712c <USB_ReadInterrupts>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bea:	d104      	bne.n	8002bf6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002bf4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f004 fa96 	bl	800712c <USB_ReadInterrupts>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c0a:	d104      	bne.n	8002c16 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f004 fa86 	bl	800712c <USB_ReadInterrupts>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c2a:	d104      	bne.n	8002c36 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f004 fa76 	bl	800712c <USB_ReadInterrupts>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d103      	bne.n	8002c52 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f004 fa68 	bl	800712c <USB_ReadInterrupts>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c66:	d11c      	bne.n	8002ca2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c70:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10f      	bne.n	8002ca2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c82:	2110      	movs	r1, #16
 8002c84:	6938      	ldr	r0, [r7, #16]
 8002c86:	f004 f957 	bl	8006f38 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c8a:	6938      	ldr	r0, [r7, #16]
 8002c8c:	f004 f988 	bl	8006fa0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2101      	movs	r1, #1
 8002c96:	4618      	mov	r0, r3
 8002c98:	f004 fbaa 	bl	80073f0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f00a fe8b 	bl	800d9b8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f004 fa40 	bl	800712c <USB_ReadInterrupts>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb6:	d102      	bne.n	8002cbe <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f001 f9ce 	bl	800405a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f004 fa32 	bl	800712c <USB_ReadInterrupts>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d106      	bne.n	8002ce0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f00a fe54 	bl	800d980 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2208      	movs	r2, #8
 8002cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f004 fa21 	bl	800712c <USB_ReadInterrupts>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	d101      	bne.n	8002cf8 <HAL_HCD_IRQHandler+0x158>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <HAL_HCD_IRQHandler+0x15a>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d012      	beq.n	8002d24 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699a      	ldr	r2, [r3, #24]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0210 	bic.w	r2, r2, #16
 8002d0c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f001 f8d1 	bl	8003eb6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0210 	orr.w	r2, r2, #16
 8002d22:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f004 f9ff 	bl	800712c <USB_ReadInterrupts>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d38:	d13a      	bne.n	8002db0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f004 fe80 	bl	8007a44 <USB_HC_ReadInterrupt>
 8002d44:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	e025      	b.n	8002d98 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d018      	beq.n	8002d92 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d76:	d106      	bne.n	8002d86 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f8ab 	bl	8002eda <HCD_HC_IN_IRQHandler>
 8002d84:	e005      	b.n	8002d92 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fcc6 	bl	800371e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	3301      	adds	r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d3d4      	bcc.n	8002d4c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002daa:	615a      	str	r2, [r3, #20]
 8002dac:	e000      	b.n	8002db0 <HAL_HCD_IRQHandler+0x210>
      return;
 8002dae:	bf00      	nop
    }
  }
}
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_HCD_Start+0x16>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e013      	b.n	8002df4 <HAL_HCD_Start+0x3e>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2101      	movs	r1, #1
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f004 fb6c 	bl	80074b8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f004 f839 	bl	8006e5c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_HCD_Stop+0x16>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e00d      	b.n	8002e2e <HAL_HCD_Stop+0x32>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f004 ff5a 	bl	8007cd8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f004 fb0e 	bl	8007464 <USB_ResetPort>
 8002e48:	4603      	mov	r3, r0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	212c      	movs	r1, #44	; 0x2c
 8002e64:	fb01 f303 	mul.w	r3, r1, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	3360      	adds	r3, #96	; 0x60
 8002e6c:	781b      	ldrb	r3, [r3, #0]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	3350      	adds	r3, #80	; 0x50
 8002e94:	681b      	ldr	r3, [r3, #0]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f004 fb52 	bl	8007558 <USB_GetCurrentFrame>
 8002eb4:	4603      	mov	r3, r0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f004 fb2d 	bl	800752a <USB_GetHostSpeed>
 8002ed0:	4603      	mov	r3, r0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f004 f927 	bl	8007152 <USB_ReadChInterrupts>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d11a      	bne.n	8002f44 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	212c      	movs	r1, #44	; 0x2c
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3361      	adds	r3, #97	; 0x61
 8002f2e:	2207      	movs	r2, #7
 8002f30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f004 fd92 	bl	8007a66 <USB_HC_Halt>
 8002f42:	e0a2      	b.n	800308a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f004 f8ff 	bl	8007152 <USB_ReadChInterrupts>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f5e:	d11b      	bne.n	8002f98 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	212c      	movs	r1, #44	; 0x2c
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	3361      	adds	r3, #97	; 0x61
 8002f82:	2208      	movs	r2, #8
 8002f84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f004 fd68 	bl	8007a66 <USB_HC_Halt>
 8002f96:	e078      	b.n	800308a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f004 f8d5 	bl	8007152 <USB_ReadChInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d11a      	bne.n	8002fe8 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3361      	adds	r3, #97	; 0x61
 8002fd2:	2206      	movs	r2, #6
 8002fd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f004 fd40 	bl	8007a66 <USB_HC_Halt>
 8002fe6:	e050      	b.n	800308a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f004 f8ad 	bl	8007152 <USB_ReadChInterrupts>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003002:	d11b      	bne.n	800303c <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003010:	461a      	mov	r2, r3
 8003012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003016:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	3361      	adds	r3, #97	; 0x61
 8003026:	2209      	movs	r2, #9
 8003028:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f004 fd16 	bl	8007a66 <USB_HC_Halt>
 800303a:	e026      	b.n	800308a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f004 f883 	bl	8007152 <USB_ReadChInterrupts>
 800304c:	4603      	mov	r3, r0
 800304e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003052:	2b80      	cmp	r3, #128	; 0x80
 8003054:	d119      	bne.n	800308a <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4413      	add	r3, r2
 800305e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003062:	461a      	mov	r2, r3
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	212c      	movs	r1, #44	; 0x2c
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	4413      	add	r3, r2
 8003074:	3361      	adds	r3, #97	; 0x61
 8003076:	2207      	movs	r2, #7
 8003078:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f004 fcee 	bl	8007a66 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f004 f85c 	bl	8007152 <USB_ReadChInterrupts>
 800309a:	4603      	mov	r3, r0
 800309c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a4:	d112      	bne.n	80030cc <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f004 fcd8 	bl	8007a66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	461a      	mov	r2, r3
 80030c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030c8:	6093      	str	r3, [r2, #8]
 80030ca:	e325      	b.n	8003718 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f004 f83b 	bl	8007152 <USB_ReadChInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	f040 80e8 	bne.w	80032b8 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f4:	461a      	mov	r2, r3
 80030f6:	2320      	movs	r3, #32
 80030f8:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d019      	beq.n	8003136 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3348      	adds	r3, #72	; 0x48
 8003110:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	0159      	lsls	r1, r3, #5
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	440b      	add	r3, r1
 800311a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003124:	1ad2      	subs	r2, r2, r3
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	202c      	movs	r0, #44	; 0x2c
 800312c:	fb00 f303 	mul.w	r3, r0, r3
 8003130:	440b      	add	r3, r1
 8003132:	3350      	adds	r3, #80	; 0x50
 8003134:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	212c      	movs	r1, #44	; 0x2c
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	3361      	adds	r3, #97	; 0x61
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	335c      	adds	r3, #92	; 0x5c
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4413      	add	r3, r2
 8003162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003166:	461a      	mov	r2, r3
 8003168:	2301      	movs	r3, #1
 800316a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	333f      	adds	r3, #63	; 0x3f
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d009      	beq.n	8003194 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	333f      	adds	r3, #63	; 0x3f
 800318e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003190:	2b02      	cmp	r3, #2
 8003192:	d111      	bne.n	80031b8 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f004 fc61 	bl	8007a66 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b0:	461a      	mov	r2, r3
 80031b2:	2310      	movs	r3, #16
 80031b4:	6093      	str	r3, [r2, #8]
 80031b6:	e03a      	b.n	800322e <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	212c      	movs	r1, #44	; 0x2c
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	333f      	adds	r3, #63	; 0x3f
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d009      	beq.n	80031e0 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	333f      	adds	r3, #63	; 0x3f
 80031da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d126      	bne.n	800322e <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	0151      	lsls	r1, r2, #5
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	440a      	add	r2, r1
 80031f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031fe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	3360      	adds	r3, #96	; 0x60
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	b2d9      	uxtb	r1, r3
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	202c      	movs	r0, #44	; 0x2c
 800321c:	fb00 f303 	mul.w	r3, r0, r3
 8003220:	4413      	add	r3, r2
 8003222:	3360      	adds	r3, #96	; 0x60
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f00a fbd3 	bl	800d9d4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d12b      	bne.n	800328e <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	212c      	movs	r1, #44	; 0x2c
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	4413      	add	r3, r2
 8003242:	3348      	adds	r3, #72	; 0x48
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	202c      	movs	r0, #44	; 0x2c
 800324c:	fb00 f202 	mul.w	r2, r0, r2
 8003250:	440a      	add	r2, r1
 8003252:	3240      	adds	r2, #64	; 0x40
 8003254:	8812      	ldrh	r2, [r2, #0]
 8003256:	fbb3 f3f2 	udiv	r3, r3, r2
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 825a 	beq.w	8003718 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	212c      	movs	r1, #44	; 0x2c
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	3354      	adds	r3, #84	; 0x54
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	f083 0301 	eor.w	r3, r3, #1
 8003278:	b2d8      	uxtb	r0, r3
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	212c      	movs	r1, #44	; 0x2c
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	4413      	add	r3, r2
 8003286:	3354      	adds	r3, #84	; 0x54
 8003288:	4602      	mov	r2, r0
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e244      	b.n	8003718 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	212c      	movs	r1, #44	; 0x2c
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	3354      	adds	r3, #84	; 0x54
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	f083 0301 	eor.w	r3, r3, #1
 80032a2:	b2d8      	uxtb	r0, r3
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	3354      	adds	r3, #84	; 0x54
 80032b2:	4602      	mov	r2, r0
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e22f      	b.n	8003718 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f003 ff45 	bl	8007152 <USB_ReadChInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d109      	bne.n	80032e6 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032de:	461a      	mov	r2, r3
 80032e0:	2320      	movs	r3, #32
 80032e2:	6093      	str	r3, [r2, #8]
 80032e4:	e218      	b.n	8003718 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f003 ff2e 	bl	8007152 <USB_ReadChInterrupts>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	f040 816b 	bne.w	80035d8 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330e:	461a      	mov	r2, r3
 8003310:	2302      	movs	r3, #2
 8003312:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	212c      	movs	r1, #44	; 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	3361      	adds	r3, #97	; 0x61
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d112      	bne.n	800334e <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	3361      	adds	r3, #97	; 0x61
 8003336:	2202      	movs	r2, #2
 8003338:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	212c      	movs	r1, #44	; 0x2c
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	4413      	add	r3, r2
 8003346:	3360      	adds	r3, #96	; 0x60
 8003348:	2201      	movs	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]
 800334c:	e135      	b.n	80035ba <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	3361      	adds	r3, #97	; 0x61
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d112      	bne.n	8003388 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	3361      	adds	r3, #97	; 0x61
 8003370:	2202      	movs	r2, #2
 8003372:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	212c      	movs	r1, #44	; 0x2c
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	4413      	add	r3, r2
 8003380:	3360      	adds	r3, #96	; 0x60
 8003382:	2205      	movs	r2, #5
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	e118      	b.n	80035ba <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	212c      	movs	r1, #44	; 0x2c
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4413      	add	r3, r2
 8003394:	3361      	adds	r3, #97	; 0x61
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b07      	cmp	r3, #7
 800339a:	d009      	beq.n	80033b0 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	3361      	adds	r3, #97	; 0x61
 80033aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033ac:	2b09      	cmp	r3, #9
 80033ae:	d159      	bne.n	8003464 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	3361      	adds	r3, #97	; 0x61
 80033be:	2202      	movs	r2, #2
 80033c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	335c      	adds	r3, #92	; 0x5c
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	202c      	movs	r0, #44	; 0x2c
 80033da:	fb00 f303 	mul.w	r3, r0, r3
 80033de:	440b      	add	r3, r1
 80033e0:	335c      	adds	r3, #92	; 0x5c
 80033e2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	335c      	adds	r3, #92	; 0x5c
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d912      	bls.n	800341e <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	335c      	adds	r3, #92	; 0x5c
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	212c      	movs	r1, #44	; 0x2c
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	4413      	add	r3, r2
 8003416:	3360      	adds	r3, #96	; 0x60
 8003418:	2204      	movs	r2, #4
 800341a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800341c:	e0cd      	b.n	80035ba <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	212c      	movs	r1, #44	; 0x2c
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	4413      	add	r3, r2
 800342a:	3360      	adds	r3, #96	; 0x60
 800342c:	2202      	movs	r2, #2
 800342e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003446:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800344e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345c:	461a      	mov	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003462:	e0aa      	b.n	80035ba <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3361      	adds	r3, #97	; 0x61
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b05      	cmp	r3, #5
 8003476:	d109      	bne.n	800348c <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	212c      	movs	r1, #44	; 0x2c
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	4413      	add	r3, r2
 8003484:	3361      	adds	r3, #97	; 0x61
 8003486:	2202      	movs	r2, #2
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	e096      	b.n	80035ba <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3361      	adds	r3, #97	; 0x61
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b03      	cmp	r3, #3
 800349e:	d109      	bne.n	80034b4 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	212c      	movs	r1, #44	; 0x2c
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	4413      	add	r3, r2
 80034ac:	3361      	adds	r3, #97	; 0x61
 80034ae:	2202      	movs	r2, #2
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	e082      	b.n	80035ba <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	212c      	movs	r1, #44	; 0x2c
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	3361      	adds	r3, #97	; 0x61
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d13f      	bne.n	8003548 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	212c      	movs	r1, #44	; 0x2c
 80034ce:	fb01 f303 	mul.w	r3, r1, r3
 80034d2:	4413      	add	r3, r2
 80034d4:	3361      	adds	r3, #97	; 0x61
 80034d6:	2202      	movs	r2, #2
 80034d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	3360      	adds	r3, #96	; 0x60
 80034e8:	2202      	movs	r2, #2
 80034ea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	212c      	movs	r1, #44	; 0x2c
 80034f2:	fb01 f303 	mul.w	r3, r1, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	333f      	adds	r3, #63	; 0x3f
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	212c      	movs	r1, #44	; 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	333f      	adds	r3, #63	; 0x3f
 800350e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003510:	2b02      	cmp	r3, #2
 8003512:	d152      	bne.n	80035ba <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4413      	add	r3, r2
 800351c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800352a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003532:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003540:	461a      	mov	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e038      	b.n	80035ba <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	212c      	movs	r1, #44	; 0x2c
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	4413      	add	r3, r2
 8003554:	3361      	adds	r3, #97	; 0x61
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b08      	cmp	r3, #8
 800355a:	d123      	bne.n	80035a4 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	3361      	adds	r3, #97	; 0x61
 800356a:	2202      	movs	r2, #2
 800356c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	335c      	adds	r3, #92	; 0x5c
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	202c      	movs	r0, #44	; 0x2c
 8003586:	fb00 f303 	mul.w	r3, r0, r3
 800358a:	440b      	add	r3, r1
 800358c:	335c      	adds	r3, #92	; 0x5c
 800358e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	212c      	movs	r1, #44	; 0x2c
 8003596:	fb01 f303 	mul.w	r3, r1, r3
 800359a:	4413      	add	r3, r2
 800359c:	3360      	adds	r3, #96	; 0x60
 800359e:	2204      	movs	r2, #4
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	e00a      	b.n	80035ba <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	212c      	movs	r1, #44	; 0x2c
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	3361      	adds	r3, #97	; 0x61
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	f000 80ae 	beq.w	8003716 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	b2d9      	uxtb	r1, r3
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	202c      	movs	r0, #44	; 0x2c
 80035c4:	fb00 f303 	mul.w	r3, r0, r3
 80035c8:	4413      	add	r3, r2
 80035ca:	3360      	adds	r3, #96	; 0x60
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f00a f9ff 	bl	800d9d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035d6:	e09f      	b.n	8003718 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f003 fdb5 	bl	8007152 <USB_ReadChInterrupts>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d123      	bne.n	800363a <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fe:	461a      	mov	r2, r3
 8003600:	2340      	movs	r3, #64	; 0x40
 8003602:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	212c      	movs	r1, #44	; 0x2c
 800360a:	fb01 f303 	mul.w	r3, r1, r3
 800360e:	4413      	add	r3, r2
 8003610:	3361      	adds	r3, #97	; 0x61
 8003612:	2205      	movs	r2, #5
 8003614:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	212c      	movs	r1, #44	; 0x2c
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	4413      	add	r3, r2
 8003622:	335c      	adds	r3, #92	; 0x5c
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	4611      	mov	r1, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f004 fa17 	bl	8007a66 <USB_HC_Halt>
 8003638:	e06e      	b.n	8003718 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f003 fd84 	bl	8007152 <USB_ReadChInterrupts>
 800364a:	4603      	mov	r3, r0
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b10      	cmp	r3, #16
 8003652:	d161      	bne.n	8003718 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	212c      	movs	r1, #44	; 0x2c
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	4413      	add	r3, r2
 8003660:	333f      	adds	r3, #63	; 0x3f
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d11a      	bne.n	800369e <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	212c      	movs	r1, #44	; 0x2c
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	335c      	adds	r3, #92	; 0x5c
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	3361      	adds	r3, #97	; 0x61
 8003688:	2204      	movs	r2, #4
 800368a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	4611      	mov	r1, r2
 8003696:	4618      	mov	r0, r3
 8003698:	f004 f9e5 	bl	8007a66 <USB_HC_Halt>
 800369c:	e031      	b.n	8003702 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	333f      	adds	r3, #63	; 0x3f
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	333f      	adds	r3, #63	; 0x3f
 80036c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d11d      	bne.n	8003702 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	212c      	movs	r1, #44	; 0x2c
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	4413      	add	r3, r2
 80036d2:	335c      	adds	r3, #92	; 0x5c
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d110      	bne.n	8003702 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	212c      	movs	r1, #44	; 0x2c
 80036e6:	fb01 f303 	mul.w	r3, r1, r3
 80036ea:	4413      	add	r3, r2
 80036ec:	3361      	adds	r3, #97	; 0x61
 80036ee:	2204      	movs	r2, #4
 80036f0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	4611      	mov	r1, r2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f004 f9b2 	bl	8007a66 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4413      	add	r3, r2
 800370a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370e:	461a      	mov	r2, r3
 8003710:	2310      	movs	r3, #16
 8003712:	6093      	str	r3, [r2, #8]
 8003714:	e000      	b.n	8003718 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 8003716:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b088      	sub	sp, #32
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	460b      	mov	r3, r1
 8003728:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	4611      	mov	r1, r2
 8003742:	4618      	mov	r0, r3
 8003744:	f003 fd05 	bl	8007152 <USB_ReadChInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b04      	cmp	r3, #4
 8003750:	d11a      	bne.n	8003788 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	4413      	add	r3, r2
 800375a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375e:	461a      	mov	r2, r3
 8003760:	2304      	movs	r3, #4
 8003762:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	212c      	movs	r1, #44	; 0x2c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	3361      	adds	r3, #97	; 0x61
 8003772:	2207      	movs	r2, #7
 8003774:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f004 f970 	bl	8007a66 <USB_HC_Halt>
 8003786:	e393      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f003 fcdd 	bl	8007152 <USB_ReadChInterrupts>
 8003798:	4603      	mov	r3, r0
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d137      	bne.n	8003812 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ae:	461a      	mov	r2, r3
 80037b0:	2320      	movs	r3, #32
 80037b2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	212c      	movs	r1, #44	; 0x2c
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	4413      	add	r3, r2
 80037c0:	333d      	adds	r3, #61	; 0x3d
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	f040 8373 	bne.w	8003eb0 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	333d      	adds	r3, #61	; 0x3d
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	3360      	adds	r3, #96	; 0x60
 80037ea:	2202      	movs	r2, #2
 80037ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	212c      	movs	r1, #44	; 0x2c
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	3361      	adds	r3, #97	; 0x61
 80037fc:	2203      	movs	r2, #3
 80037fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f004 f92b 	bl	8007a66 <USB_HC_Halt>
 8003810:	e34e      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f003 fc98 	bl	8007152 <USB_ReadChInterrupts>
 8003822:	4603      	mov	r3, r0
 8003824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800382c:	d112      	bne.n	8003854 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383a:	461a      	mov	r2, r3
 800383c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003840:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f004 f90a 	bl	8007a66 <USB_HC_Halt>
 8003852:	e32d      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f003 fc77 	bl	8007152 <USB_ReadChInterrupts>
 8003864:	4603      	mov	r3, r0
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d142      	bne.n	80038f4 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	212c      	movs	r1, #44	; 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	335c      	adds	r3, #92	; 0x5c
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f003 fc61 	bl	8007152 <USB_ReadChInterrupts>
 8003890:	4603      	mov	r3, r0
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b40      	cmp	r3, #64	; 0x40
 8003898:	d111      	bne.n	80038be <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	212c      	movs	r1, #44	; 0x2c
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	333d      	adds	r3, #61	; 0x3d
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b8:	461a      	mov	r2, r3
 80038ba:	2340      	movs	r3, #64	; 0x40
 80038bc:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ca:	461a      	mov	r2, r3
 80038cc:	2301      	movs	r3, #1
 80038ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	212c      	movs	r1, #44	; 0x2c
 80038d6:	fb01 f303 	mul.w	r3, r1, r3
 80038da:	4413      	add	r3, r2
 80038dc:	3361      	adds	r3, #97	; 0x61
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f004 f8ba 	bl	8007a66 <USB_HC_Halt>
 80038f2:	e2dd      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	4611      	mov	r1, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	f003 fc27 	bl	8007152 <USB_ReadChInterrupts>
 8003904:	4603      	mov	r3, r0
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	d12c      	bne.n	8003968 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	212c      	movs	r1, #44	; 0x2c
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	4413      	add	r3, r2
 800391a:	3361      	adds	r3, #97	; 0x61
 800391c:	2205      	movs	r2, #5
 800391e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	212c      	movs	r1, #44	; 0x2c
 8003926:	fb01 f303 	mul.w	r3, r1, r3
 800392a:	4413      	add	r3, r2
 800392c:	333d      	adds	r3, #61	; 0x3d
 800392e:	2201      	movs	r2, #1
 8003930:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	212c      	movs	r1, #44	; 0x2c
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	335c      	adds	r3, #92	; 0x5c
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f004 f889 	bl	8007a66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003960:	461a      	mov	r2, r3
 8003962:	2340      	movs	r3, #64	; 0x40
 8003964:	6093      	str	r3, [r2, #8]
 8003966:	e2a3      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f003 fbed 	bl	8007152 <USB_ReadChInterrupts>
 8003978:	4603      	mov	r3, r0
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b08      	cmp	r3, #8
 8003980:	d11a      	bne.n	80039b8 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	4413      	add	r3, r2
 800398a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398e:	461a      	mov	r2, r3
 8003990:	2308      	movs	r3, #8
 8003992:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	3361      	adds	r3, #97	; 0x61
 80039a2:	2206      	movs	r2, #6
 80039a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f004 f858 	bl	8007a66 <USB_HC_Halt>
 80039b6:	e27b      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f003 fbc5 	bl	8007152 <USB_ReadChInterrupts>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b10      	cmp	r3, #16
 80039d0:	d140      	bne.n	8003a54 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	212c      	movs	r1, #44	; 0x2c
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	4413      	add	r3, r2
 80039de:	335c      	adds	r3, #92	; 0x5c
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	212c      	movs	r1, #44	; 0x2c
 80039ea:	fb01 f303 	mul.w	r3, r1, r3
 80039ee:	4413      	add	r3, r2
 80039f0:	3361      	adds	r3, #97	; 0x61
 80039f2:	2204      	movs	r2, #4
 80039f4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	212c      	movs	r1, #44	; 0x2c
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	4413      	add	r3, r2
 8003a02:	333d      	adds	r3, #61	; 0x3d
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d112      	bne.n	8003a30 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	212c      	movs	r1, #44	; 0x2c
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	4413      	add	r3, r2
 8003a16:	333c      	adds	r3, #60	; 0x3c
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d108      	bne.n	8003a30 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	212c      	movs	r1, #44	; 0x2c
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	333d      	adds	r3, #61	; 0x3d
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	4611      	mov	r1, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f004 f813 	bl	8007a66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2310      	movs	r3, #16
 8003a50:	6093      	str	r3, [r2, #8]
 8003a52:	e22d      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f003 fb77 	bl	8007152 <USB_ReadChInterrupts>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	d164      	bne.n	8003b38 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d111      	bne.n	8003a9a <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	212c      	movs	r1, #44	; 0x2c
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	4413      	add	r3, r2
 8003a82:	3361      	adds	r3, #97	; 0x61
 8003a84:	2207      	movs	r2, #7
 8003a86:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f003 ffe7 	bl	8007a66 <USB_HC_Halt>
 8003a98:	e044      	b.n	8003b24 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	212c      	movs	r1, #44	; 0x2c
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	335c      	adds	r3, #92	; 0x5c
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	202c      	movs	r0, #44	; 0x2c
 8003ab2:	fb00 f303 	mul.w	r3, r0, r3
 8003ab6:	440b      	add	r3, r1
 8003ab8:	335c      	adds	r3, #92	; 0x5c
 8003aba:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	335c      	adds	r3, #92	; 0x5c
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d920      	bls.n	8003b12 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	212c      	movs	r1, #44	; 0x2c
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	335c      	adds	r3, #92	; 0x5c
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	212c      	movs	r1, #44	; 0x2c
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	4413      	add	r3, r2
 8003aee:	3360      	adds	r3, #96	; 0x60
 8003af0:	2204      	movs	r2, #4
 8003af2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	b2d9      	uxtb	r1, r3
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	202c      	movs	r0, #44	; 0x2c
 8003afe:	fb00 f303 	mul.w	r3, r0, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	3360      	adds	r3, #96	; 0x60
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f009 ff62 	bl	800d9d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b10:	e008      	b.n	8003b24 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	212c      	movs	r1, #44	; 0x2c
 8003b18:	fb01 f303 	mul.w	r3, r1, r3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3360      	adds	r3, #96	; 0x60
 8003b20:	2202      	movs	r2, #2
 8003b22:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b30:	461a      	mov	r2, r3
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	6093      	str	r3, [r2, #8]
 8003b36:	e1bb      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f003 fb05 	bl	8007152 <USB_ReadChInterrupts>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b52:	d11b      	bne.n	8003b8c <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3361      	adds	r3, #97	; 0x61
 8003b62:	2209      	movs	r2, #9
 8003b64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f003 ff78 	bl	8007a66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b82:	461a      	mov	r2, r3
 8003b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b88:	6093      	str	r3, [r2, #8]
 8003b8a:	e191      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f003 fadb 	bl	8007152 <USB_ReadChInterrupts>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	f040 8184 	bne.w	8003eb0 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	212c      	movs	r1, #44	; 0x2c
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3361      	adds	r3, #97	; 0x61
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	f040 8087 	bne.w	8003cde <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	212c      	movs	r1, #44	; 0x2c
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	4413      	add	r3, r2
 8003bdc:	3361      	adds	r3, #97	; 0x61
 8003bde:	2202      	movs	r2, #2
 8003be0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	212c      	movs	r1, #44	; 0x2c
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	3360      	adds	r3, #96	; 0x60
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	333f      	adds	r3, #63	; 0x3f
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d00a      	beq.n	8003c1e <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	212c      	movs	r1, #44	; 0x2c
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	333f      	adds	r3, #63	; 0x3f
 8003c16:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	f040 8139 	bne.w	8003e90 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d113      	bne.n	8003c4e <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	212c      	movs	r1, #44	; 0x2c
 8003c2c:	fb01 f303 	mul.w	r3, r1, r3
 8003c30:	4413      	add	r3, r2
 8003c32:	3355      	adds	r3, #85	; 0x55
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	f083 0301 	eor.w	r3, r3, #1
 8003c3a:	b2d8      	uxtb	r0, r3
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3355      	adds	r3, #85	; 0x55
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	f040 811c 	bne.w	8003e90 <HCD_HC_OUT_IRQHandler+0x772>
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	212c      	movs	r1, #44	; 0x2c
 8003c5e:	fb01 f303 	mul.w	r3, r1, r3
 8003c62:	4413      	add	r3, r2
 8003c64:	334c      	adds	r3, #76	; 0x4c
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8111 	beq.w	8003e90 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	212c      	movs	r1, #44	; 0x2c
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	4413      	add	r3, r2
 8003c7a:	334c      	adds	r3, #76	; 0x4c
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	202c      	movs	r0, #44	; 0x2c
 8003c84:	fb00 f202 	mul.w	r2, r0, r2
 8003c88:	440a      	add	r2, r1
 8003c8a:	3240      	adds	r2, #64	; 0x40
 8003c8c:	8812      	ldrh	r2, [r2, #0]
 8003c8e:	4413      	add	r3, r2
 8003c90:	3b01      	subs	r3, #1
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	202c      	movs	r0, #44	; 0x2c
 8003c98:	fb00 f202 	mul.w	r2, r0, r2
 8003c9c:	440a      	add	r2, r1
 8003c9e:	3240      	adds	r2, #64	; 0x40
 8003ca0:	8812      	ldrh	r2, [r2, #0]
 8003ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80ee 	beq.w	8003e90 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	212c      	movs	r1, #44	; 0x2c
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3355      	adds	r3, #85	; 0x55
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	f083 0301 	eor.w	r3, r3, #1
 8003cc8:	b2d8      	uxtb	r0, r3
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	212c      	movs	r1, #44	; 0x2c
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3355      	adds	r3, #85	; 0x55
 8003cd8:	4602      	mov	r2, r0
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e0d8      	b.n	8003e90 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	212c      	movs	r1, #44	; 0x2c
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	4413      	add	r3, r2
 8003cea:	3361      	adds	r3, #97	; 0x61
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d109      	bne.n	8003d06 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	212c      	movs	r1, #44	; 0x2c
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3361      	adds	r3, #97	; 0x61
 8003d00:	2202      	movs	r2, #2
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e0c4      	b.n	8003e90 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	212c      	movs	r1, #44	; 0x2c
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	4413      	add	r3, r2
 8003d12:	3361      	adds	r3, #97	; 0x61
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d112      	bne.n	8003d40 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	212c      	movs	r1, #44	; 0x2c
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	4413      	add	r3, r2
 8003d26:	3361      	adds	r3, #97	; 0x61
 8003d28:	2202      	movs	r2, #2
 8003d2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	212c      	movs	r1, #44	; 0x2c
 8003d32:	fb01 f303 	mul.w	r3, r1, r3
 8003d36:	4413      	add	r3, r2
 8003d38:	3360      	adds	r3, #96	; 0x60
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	e0a7      	b.n	8003e90 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	212c      	movs	r1, #44	; 0x2c
 8003d46:	fb01 f303 	mul.w	r3, r1, r3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3361      	adds	r3, #97	; 0x61
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b05      	cmp	r3, #5
 8003d52:	d112      	bne.n	8003d7a <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	212c      	movs	r1, #44	; 0x2c
 8003d5a:	fb01 f303 	mul.w	r3, r1, r3
 8003d5e:	4413      	add	r3, r2
 8003d60:	3361      	adds	r3, #97	; 0x61
 8003d62:	2202      	movs	r2, #2
 8003d64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	212c      	movs	r1, #44	; 0x2c
 8003d6c:	fb01 f303 	mul.w	r3, r1, r3
 8003d70:	4413      	add	r3, r2
 8003d72:	3360      	adds	r3, #96	; 0x60
 8003d74:	2202      	movs	r2, #2
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e08a      	b.n	8003e90 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	212c      	movs	r1, #44	; 0x2c
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	4413      	add	r3, r2
 8003d86:	3361      	adds	r3, #97	; 0x61
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b06      	cmp	r3, #6
 8003d8c:	d112      	bne.n	8003db4 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	212c      	movs	r1, #44	; 0x2c
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	4413      	add	r3, r2
 8003d9a:	3361      	adds	r3, #97	; 0x61
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	212c      	movs	r1, #44	; 0x2c
 8003da6:	fb01 f303 	mul.w	r3, r1, r3
 8003daa:	4413      	add	r3, r2
 8003dac:	3360      	adds	r3, #96	; 0x60
 8003dae:	2205      	movs	r2, #5
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	e06d      	b.n	8003e90 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	212c      	movs	r1, #44	; 0x2c
 8003dba:	fb01 f303 	mul.w	r3, r1, r3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3361      	adds	r3, #97	; 0x61
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b07      	cmp	r3, #7
 8003dc6:	d009      	beq.n	8003ddc <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	212c      	movs	r1, #44	; 0x2c
 8003dce:	fb01 f303 	mul.w	r3, r1, r3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3361      	adds	r3, #97	; 0x61
 8003dd6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003dd8:	2b09      	cmp	r3, #9
 8003dda:	d168      	bne.n	8003eae <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	212c      	movs	r1, #44	; 0x2c
 8003de2:	fb01 f303 	mul.w	r3, r1, r3
 8003de6:	4413      	add	r3, r2
 8003de8:	3361      	adds	r3, #97	; 0x61
 8003dea:	2202      	movs	r2, #2
 8003dec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	212c      	movs	r1, #44	; 0x2c
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	335c      	adds	r3, #92	; 0x5c
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	202c      	movs	r0, #44	; 0x2c
 8003e06:	fb00 f303 	mul.w	r3, r0, r3
 8003e0a:	440b      	add	r3, r1
 8003e0c:	335c      	adds	r3, #92	; 0x5c
 8003e0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	212c      	movs	r1, #44	; 0x2c
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	335c      	adds	r3, #92	; 0x5c
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d912      	bls.n	8003e4a <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	212c      	movs	r1, #44	; 0x2c
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	4413      	add	r3, r2
 8003e30:	335c      	adds	r3, #92	; 0x5c
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	212c      	movs	r1, #44	; 0x2c
 8003e3c:	fb01 f303 	mul.w	r3, r1, r3
 8003e40:	4413      	add	r3, r2
 8003e42:	3360      	adds	r3, #96	; 0x60
 8003e44:	2204      	movs	r2, #4
 8003e46:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e48:	e021      	b.n	8003e8e <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	212c      	movs	r1, #44	; 0x2c
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	3360      	adds	r3, #96	; 0x60
 8003e58:	2202      	movs	r2, #2
 8003e5a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e72:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e7a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	461a      	mov	r2, r3
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e8e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	b2d9      	uxtb	r1, r3
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	202c      	movs	r0, #44	; 0x2c
 8003e9a:	fb00 f303 	mul.w	r3, r0, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3360      	adds	r3, #96	; 0x60
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f009 fd94 	bl	800d9d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003eac:	e000      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8003eae:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b08a      	sub	sp, #40	; 0x28
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	0c5b      	lsrs	r3, r3, #17
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d004      	beq.n	8003efc <HCD_RXQLVL_IRQHandler+0x46>
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b05      	cmp	r3, #5
 8003ef6:	f000 80a9 	beq.w	800404c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003efa:	e0aa      	b.n	8004052 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 80a6 	beq.w	8004050 <HCD_RXQLVL_IRQHandler+0x19a>
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	212c      	movs	r1, #44	; 0x2c
 8003f0a:	fb01 f303 	mul.w	r3, r1, r3
 8003f0e:	4413      	add	r3, r2
 8003f10:	3344      	adds	r3, #68	; 0x44
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 809b 	beq.w	8004050 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	212c      	movs	r1, #44	; 0x2c
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	4413      	add	r3, r2
 8003f26:	3350      	adds	r3, #80	; 0x50
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	441a      	add	r2, r3
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	202c      	movs	r0, #44	; 0x2c
 8003f34:	fb00 f303 	mul.w	r3, r0, r3
 8003f38:	440b      	add	r3, r1
 8003f3a:	334c      	adds	r3, #76	; 0x4c
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d87a      	bhi.n	8004038 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	212c      	movs	r1, #44	; 0x2c
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	4413      	add	r3, r2
 8003f52:	3344      	adds	r3, #68	; 0x44
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	b292      	uxth	r2, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f003 f88e 	bl	800707c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	212c      	movs	r1, #44	; 0x2c
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3344      	adds	r3, #68	; 0x44
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	441a      	add	r2, r3
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	202c      	movs	r0, #44	; 0x2c
 8003f7a:	fb00 f303 	mul.w	r3, r0, r3
 8003f7e:	440b      	add	r3, r1
 8003f80:	3344      	adds	r3, #68	; 0x44
 8003f82:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	212c      	movs	r1, #44	; 0x2c
 8003f8a:	fb01 f303 	mul.w	r3, r1, r3
 8003f8e:	4413      	add	r3, r2
 8003f90:	3350      	adds	r3, #80	; 0x50
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	441a      	add	r2, r3
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	202c      	movs	r0, #44	; 0x2c
 8003f9e:	fb00 f303 	mul.w	r3, r0, r3
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3350      	adds	r3, #80	; 0x50
 8003fa6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	0cdb      	lsrs	r3, r3, #19
 8003fb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fbc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	212c      	movs	r1, #44	; 0x2c
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	3340      	adds	r3, #64	; 0x40
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d13c      	bne.n	8004050 <HCD_RXQLVL_IRQHandler+0x19a>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d039      	beq.n	8004050 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ff2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ffa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	4413      	add	r3, r2
 8004004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004008:	461a      	mov	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	212c      	movs	r1, #44	; 0x2c
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	4413      	add	r3, r2
 800401a:	3354      	adds	r3, #84	; 0x54
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	f083 0301 	eor.w	r3, r3, #1
 8004022:	b2d8      	uxtb	r0, r3
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	212c      	movs	r1, #44	; 0x2c
 800402a:	fb01 f303 	mul.w	r3, r1, r3
 800402e:	4413      	add	r3, r2
 8004030:	3354      	adds	r3, #84	; 0x54
 8004032:	4602      	mov	r2, r0
 8004034:	701a      	strb	r2, [r3, #0]
      break;
 8004036:	e00b      	b.n	8004050 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	212c      	movs	r1, #44	; 0x2c
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	3360      	adds	r3, #96	; 0x60
 8004046:	2204      	movs	r2, #4
 8004048:	701a      	strb	r2, [r3, #0]
      break;
 800404a:	e001      	b.n	8004050 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800404c:	bf00      	nop
 800404e:	e000      	b.n	8004052 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004050:	bf00      	nop
  }
}
 8004052:	bf00      	nop
 8004054:	3728      	adds	r7, #40	; 0x28
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004086:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b02      	cmp	r3, #2
 8004090:	d10b      	bne.n	80040aa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d102      	bne.n	80040a2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f009 fc7d 	bl	800d99c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f043 0302 	orr.w	r3, r3, #2
 80040a8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d132      	bne.n	800411a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f043 0308 	orr.w	r3, r3, #8
 80040ba:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d126      	bne.n	8004114 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d113      	bne.n	80040f6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80040d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040d8:	d106      	bne.n	80040e8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2102      	movs	r1, #2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f003 f985 	bl	80073f0 <USB_InitFSLSPClkSel>
 80040e6:	e011      	b.n	800410c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2101      	movs	r1, #1
 80040ee:	4618      	mov	r0, r3
 80040f0:	f003 f97e 	bl	80073f0 <USB_InitFSLSPClkSel>
 80040f4:	e00a      	b.n	800410c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d106      	bne.n	800410c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004104:	461a      	mov	r2, r3
 8004106:	f64e 2360 	movw	r3, #60000	; 0xea60
 800410a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f009 fc6f 	bl	800d9f0 <HAL_HCD_PortEnabled_Callback>
 8004112:	e002      	b.n	800411a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f009 fc79 	bl	800da0c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b20      	cmp	r3, #32
 8004122:	d103      	bne.n	800412c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f043 0320 	orr.w	r3, r3, #32
 800412a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004132:	461a      	mov	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	6013      	str	r3, [r2, #0]
}
 8004138:	bf00      	nop
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004150:	f000 f808 	bl	8004164 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004154:	4b02      	ldr	r3, [pc, #8]	; (8004160 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004156:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800415a:	615a      	str	r2, [r3, #20]
  }
}
 800415c:	bf00      	nop
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40013c00 	.word	0x40013c00

08004164 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	4b23      	ldr	r3, [pc, #140]	; (800420c <HAL_PWREx_EnableOverDrive+0x98>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a22      	ldr	r2, [pc, #136]	; (800420c <HAL_PWREx_EnableOverDrive+0x98>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	4b20      	ldr	r3, [pc, #128]	; (800420c <HAL_PWREx_EnableOverDrive+0x98>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004196:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1d      	ldr	r2, [pc, #116]	; (8004210 <HAL_PWREx_EnableOverDrive+0x9c>)
 800419c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041a2:	f7fd fd05 	bl	8001bb0 <HAL_GetTick>
 80041a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041a8:	e009      	b.n	80041be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041aa:	f7fd fd01 	bl	8001bb0 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041b8:	d901      	bls.n	80041be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e022      	b.n	8004204 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041be:	4b14      	ldr	r3, [pc, #80]	; (8004210 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ca:	d1ee      	bne.n	80041aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041cc:	4b10      	ldr	r3, [pc, #64]	; (8004210 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0f      	ldr	r2, [pc, #60]	; (8004210 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041d8:	f7fd fcea 	bl	8001bb0 <HAL_GetTick>
 80041dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041de:	e009      	b.n	80041f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041e0:	f7fd fce6 	bl	8001bb0 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ee:	d901      	bls.n	80041f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e007      	b.n	8004204 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004200:	d1ee      	bne.n	80041e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40023800 	.word	0x40023800
 8004210:	40007000 	.word	0x40007000

08004214 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800421c:	2300      	movs	r3, #0
 800421e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e293      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 8089 	beq.w	800434a <HAL_RCC_OscConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004238:	4b97      	ldr	r3, [pc, #604]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 030c 	and.w	r3, r3, #12
 8004240:	2b04      	cmp	r3, #4
 8004242:	d00c      	beq.n	800425e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004244:	4b94      	ldr	r3, [pc, #592]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 030c 	and.w	r3, r3, #12
 800424c:	2b08      	cmp	r3, #8
 800424e:	d112      	bne.n	8004276 <HAL_RCC_OscConfig+0x62>
 8004250:	4b91      	ldr	r3, [pc, #580]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800425c:	d10b      	bne.n	8004276 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425e:	4b8e      	ldr	r3, [pc, #568]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d06e      	beq.n	8004348 <HAL_RCC_OscConfig+0x134>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d16a      	bne.n	8004348 <HAL_RCC_OscConfig+0x134>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e26d      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427e:	d106      	bne.n	800428e <HAL_RCC_OscConfig+0x7a>
 8004280:	4b85      	ldr	r3, [pc, #532]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a84      	ldr	r2, [pc, #528]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	e02e      	b.n	80042ec <HAL_RCC_OscConfig+0xd8>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10c      	bne.n	80042b0 <HAL_RCC_OscConfig+0x9c>
 8004296:	4b80      	ldr	r3, [pc, #512]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a7f      	ldr	r2, [pc, #508]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 800429c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	4b7d      	ldr	r3, [pc, #500]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a7c      	ldr	r2, [pc, #496]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80042a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e01d      	b.n	80042ec <HAL_RCC_OscConfig+0xd8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCC_OscConfig+0xc0>
 80042ba:	4b77      	ldr	r3, [pc, #476]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a76      	ldr	r2, [pc, #472]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80042c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b74      	ldr	r3, [pc, #464]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a73      	ldr	r2, [pc, #460]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80042cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e00b      	b.n	80042ec <HAL_RCC_OscConfig+0xd8>
 80042d4:	4b70      	ldr	r3, [pc, #448]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a6f      	ldr	r2, [pc, #444]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80042da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	4b6d      	ldr	r3, [pc, #436]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a6c      	ldr	r2, [pc, #432]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80042e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d014      	beq.n	800431e <HAL_RCC_OscConfig+0x10a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fd fc5c 	bl	8001bb0 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fa:	e009      	b.n	8004310 <HAL_RCC_OscConfig+0xfc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042fc:	f7fd fc58 	bl	8001bb0 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0xfc>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e220      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004310:	4b61      	ldr	r3, [pc, #388]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ef      	beq.n	80042fc <HAL_RCC_OscConfig+0xe8>
 800431c:	e015      	b.n	800434a <HAL_RCC_OscConfig+0x136>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431e:	f7fd fc47 	bl	8001bb0 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004324:	e009      	b.n	800433a <HAL_RCC_OscConfig+0x126>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004326:	f7fd fc43 	bl	8001bb0 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e20b      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433a:	4b57      	ldr	r3, [pc, #348]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1ef      	bne.n	8004326 <HAL_RCC_OscConfig+0x112>
 8004346:	e000      	b.n	800434a <HAL_RCC_OscConfig+0x136>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d069      	beq.n	800442a <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004356:	4b50      	ldr	r3, [pc, #320]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00b      	beq.n	800437a <HAL_RCC_OscConfig+0x166>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004362:	4b4d      	ldr	r3, [pc, #308]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b08      	cmp	r3, #8
 800436c:	d11c      	bne.n	80043a8 <HAL_RCC_OscConfig+0x194>
 800436e:	4b4a      	ldr	r3, [pc, #296]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d116      	bne.n	80043a8 <HAL_RCC_OscConfig+0x194>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437a:	4b47      	ldr	r3, [pc, #284]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_RCC_OscConfig+0x17e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d001      	beq.n	8004392 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e1df      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004392:	4b41      	ldr	r3, [pc, #260]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	493d      	ldr	r1, [pc, #244]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a6:	e040      	b.n	800442a <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d023      	beq.n	80043f8 <HAL_RCC_OscConfig+0x1e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b0:	4b39      	ldr	r3, [pc, #228]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a38      	ldr	r2, [pc, #224]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fd fbf8 	bl	8001bb0 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x1c2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c4:	f7fd fbf4 	bl	8001bb0 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e1bd      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d6:	4b30      	ldr	r3, [pc, #192]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e2:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4929      	ldr	r1, [pc, #164]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]
 80043f6:	e018      	b.n	800442a <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f8:	4b27      	ldr	r3, [pc, #156]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a26      	ldr	r2, [pc, #152]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fd fbd4 	bl	8001bb0 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x20a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440c:	f7fd fbd0 	bl	8001bb0 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e199      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441e:	4b1e      	ldr	r3, [pc, #120]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d038      	beq.n	80044a8 <HAL_RCC_OscConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d019      	beq.n	8004472 <HAL_RCC_OscConfig+0x25e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800443e:	4b16      	ldr	r3, [pc, #88]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004442:	4a15      	ldr	r2, [pc, #84]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444a:	f7fd fbb1 	bl	8001bb0 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x250>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004452:	f7fd fbad 	bl	8001bb0 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x250>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e176      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0x23e>
 8004470:	e01a      	b.n	80044a8 <HAL_RCC_OscConfig+0x294>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004472:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <HAL_RCC_OscConfig+0x284>)
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447e:	f7fd fb97 	bl	8001bb0 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004484:	e00a      	b.n	800449c <HAL_RCC_OscConfig+0x288>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004486:	f7fd fb93 	bl	8001bb0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d903      	bls.n	800449c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e15c      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>
 8004498:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800449c:	4b91      	ldr	r3, [pc, #580]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 800449e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1ee      	bne.n	8004486 <HAL_RCC_OscConfig+0x272>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80a4 	beq.w	80045fe <HAL_RCC_OscConfig+0x3ea>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b6:	4b8b      	ldr	r3, [pc, #556]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10d      	bne.n	80044de <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c2:	4b88      	ldr	r3, [pc, #544]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	4a87      	ldr	r2, [pc, #540]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 80044c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044cc:	6413      	str	r3, [r2, #64]	; 0x40
 80044ce:	4b85      	ldr	r3, [pc, #532]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044da:	2301      	movs	r3, #1
 80044dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044de:	4b82      	ldr	r3, [pc, #520]	; (80046e8 <HAL_RCC_OscConfig+0x4d4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d118      	bne.n	800451c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80044ea:	4b7f      	ldr	r3, [pc, #508]	; (80046e8 <HAL_RCC_OscConfig+0x4d4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a7e      	ldr	r2, [pc, #504]	; (80046e8 <HAL_RCC_OscConfig+0x4d4>)
 80044f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f6:	f7fd fb5b 	bl	8001bb0 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fe:	f7fd fb57 	bl	8001bb0 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b64      	cmp	r3, #100	; 0x64
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e120      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004510:	4b75      	ldr	r3, [pc, #468]	; (80046e8 <HAL_RCC_OscConfig+0x4d4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f0      	beq.n	80044fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d106      	bne.n	8004532 <HAL_RCC_OscConfig+0x31e>
 8004524:	4b6f      	ldr	r3, [pc, #444]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	4a6e      	ldr	r2, [pc, #440]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	6713      	str	r3, [r2, #112]	; 0x70
 8004530:	e02d      	b.n	800458e <HAL_RCC_OscConfig+0x37a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10c      	bne.n	8004554 <HAL_RCC_OscConfig+0x340>
 800453a:	4b6a      	ldr	r3, [pc, #424]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	4a69      	ldr	r2, [pc, #420]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	6713      	str	r3, [r2, #112]	; 0x70
 8004546:	4b67      	ldr	r3, [pc, #412]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454a:	4a66      	ldr	r2, [pc, #408]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 800454c:	f023 0304 	bic.w	r3, r3, #4
 8004550:	6713      	str	r3, [r2, #112]	; 0x70
 8004552:	e01c      	b.n	800458e <HAL_RCC_OscConfig+0x37a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b05      	cmp	r3, #5
 800455a:	d10c      	bne.n	8004576 <HAL_RCC_OscConfig+0x362>
 800455c:	4b61      	ldr	r3, [pc, #388]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004560:	4a60      	ldr	r2, [pc, #384]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 8004562:	f043 0304 	orr.w	r3, r3, #4
 8004566:	6713      	str	r3, [r2, #112]	; 0x70
 8004568:	4b5e      	ldr	r3, [pc, #376]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	4a5d      	ldr	r2, [pc, #372]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6713      	str	r3, [r2, #112]	; 0x70
 8004574:	e00b      	b.n	800458e <HAL_RCC_OscConfig+0x37a>
 8004576:	4b5b      	ldr	r3, [pc, #364]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	4a5a      	ldr	r2, [pc, #360]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	6713      	str	r3, [r2, #112]	; 0x70
 8004582:	4b58      	ldr	r3, [pc, #352]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	4a57      	ldr	r2, [pc, #348]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 8004588:	f023 0304 	bic.w	r3, r3, #4
 800458c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d015      	beq.n	80045c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004596:	f7fd fb0b 	bl	8001bb0 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459c:	e00a      	b.n	80045b4 <HAL_RCC_OscConfig+0x3a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459e:	f7fd fb07 	bl	8001bb0 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x3a0>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e0ce      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b4:	4b4b      	ldr	r3, [pc, #300]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 80045b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0ee      	beq.n	800459e <HAL_RCC_OscConfig+0x38a>
 80045c0:	e014      	b.n	80045ec <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c2:	f7fd faf5 	bl	8001bb0 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7fd faf1 	bl	8001bb0 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e0b8      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e0:	4b40      	ldr	r3, [pc, #256]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ee      	bne.n	80045ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d105      	bne.n	80045fe <HAL_RCC_OscConfig+0x3ea>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f2:	4b3c      	ldr	r3, [pc, #240]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	4a3b      	ldr	r2, [pc, #236]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 80045f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 80a4 	beq.w	8004750 <HAL_RCC_OscConfig+0x53c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004608:	4b36      	ldr	r3, [pc, #216]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 030c 	and.w	r3, r3, #12
 8004610:	2b08      	cmp	r3, #8
 8004612:	d06b      	beq.n	80046ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d149      	bne.n	80046b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461c:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a30      	ldr	r2, [pc, #192]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 8004622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fd fac2 	bl	8001bb0 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x42e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004630:	f7fd fabe 	bl	8001bb0 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e087      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004642:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x41c>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69da      	ldr	r2, [r3, #28]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	019b      	lsls	r3, r3, #6
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004664:	085b      	lsrs	r3, r3, #1
 8004666:	3b01      	subs	r3, #1
 8004668:	041b      	lsls	r3, r3, #16
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	061b      	lsls	r3, r3, #24
 8004672:	4313      	orrs	r3, r2
 8004674:	4a1b      	ldr	r2, [pc, #108]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 8004676:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800467a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800467c:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a18      	ldr	r2, [pc, #96]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 8004682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fd fa92 	bl	8001bb0 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004690:	f7fd fa8e 	bl	8001bb0 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e057      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a2:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x47c>
 80046ae:	e04f      	b.n	8004750 <HAL_RCC_OscConfig+0x53c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b0:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0b      	ldr	r2, [pc, #44]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 80046b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fd fa78 	bl	8001bb0 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fd fa74 	bl	8001bb0 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e03d      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d6:	4b03      	ldr	r3, [pc, #12]	; (80046e4 <HAL_RCC_OscConfig+0x4d0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4b0>
 80046e2:	e035      	b.n	8004750 <HAL_RCC_OscConfig+0x53c>
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <HAL_RCC_OscConfig+0x548>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d028      	beq.n	800474c <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004704:	429a      	cmp	r2, r3
 8004706:	d121      	bne.n	800474c <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d11a      	bne.n	800474c <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800471c:	4013      	ands	r3, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004722:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004724:	4293      	cmp	r3, r2
 8004726:	d111      	bne.n	800474c <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	085b      	lsrs	r3, r3, #1
 8004734:	3b01      	subs	r3, #1
 8004736:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004738:	429a      	cmp	r2, r3
 800473a:	d107      	bne.n	800474c <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_OscConfig+0x53c>
#endif
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x53e>
      }
    }
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40023800 	.word	0x40023800

08004760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0d0      	b.n	800491a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004778:	4b6a      	ldr	r3, [pc, #424]	; (8004924 <HAL_RCC_ClockConfig+0x1c4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d910      	bls.n	80047a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004786:	4b67      	ldr	r3, [pc, #412]	; (8004924 <HAL_RCC_ClockConfig+0x1c4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 020f 	bic.w	r2, r3, #15
 800478e:	4965      	ldr	r1, [pc, #404]	; (8004924 <HAL_RCC_ClockConfig+0x1c4>)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	4313      	orrs	r3, r2
 8004794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004796:	4b63      	ldr	r3, [pc, #396]	; (8004924 <HAL_RCC_ClockConfig+0x1c4>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0b8      	b.n	800491a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d020      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c0:	4b59      	ldr	r3, [pc, #356]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4a58      	ldr	r2, [pc, #352]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 80047c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047d8:	4b53      	ldr	r3, [pc, #332]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4a52      	ldr	r2, [pc, #328]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 80047de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e4:	4b50      	ldr	r3, [pc, #320]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	494d      	ldr	r1, [pc, #308]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d040      	beq.n	8004884 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	4b47      	ldr	r3, [pc, #284]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d115      	bne.n	8004842 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e07f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d107      	bne.n	8004832 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004822:	4b41      	ldr	r3, [pc, #260]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d109      	bne.n	8004842 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e073      	b.n	800491a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004832:	4b3d      	ldr	r3, [pc, #244]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e06b      	b.n	800491a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004842:	4b39      	ldr	r3, [pc, #228]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f023 0203 	bic.w	r2, r3, #3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	4936      	ldr	r1, [pc, #216]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 8004850:	4313      	orrs	r3, r2
 8004852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004854:	f7fd f9ac 	bl	8001bb0 <HAL_GetTick>
 8004858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485a:	e00a      	b.n	8004872 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800485c:	f7fd f9a8 	bl	8001bb0 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	f241 3288 	movw	r2, #5000	; 0x1388
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e053      	b.n	800491a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004872:	4b2d      	ldr	r3, [pc, #180]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 020c 	and.w	r2, r3, #12
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	429a      	cmp	r2, r3
 8004882:	d1eb      	bne.n	800485c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004884:	4b27      	ldr	r3, [pc, #156]	; (8004924 <HAL_RCC_ClockConfig+0x1c4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d210      	bcs.n	80048b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004892:	4b24      	ldr	r3, [pc, #144]	; (8004924 <HAL_RCC_ClockConfig+0x1c4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 020f 	bic.w	r2, r3, #15
 800489a:	4922      	ldr	r1, [pc, #136]	; (8004924 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	4313      	orrs	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a2:	4b20      	ldr	r3, [pc, #128]	; (8004924 <HAL_RCC_ClockConfig+0x1c4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e032      	b.n	800491a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c0:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4916      	ldr	r1, [pc, #88]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048de:	4b12      	ldr	r3, [pc, #72]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	490e      	ldr	r1, [pc, #56]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048f2:	f000 f831 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 80048f6:	4602      	mov	r2, r0
 80048f8:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	490a      	ldr	r1, [pc, #40]	; (800492c <HAL_RCC_ClockConfig+0x1cc>)
 8004904:	5ccb      	ldrb	r3, [r1, r3]
 8004906:	fa22 f303 	lsr.w	r3, r2, r3
 800490a:	4a09      	ldr	r2, [pc, #36]	; (8004930 <HAL_RCC_ClockConfig+0x1d0>)
 800490c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <HAL_RCC_ClockConfig+0x1d4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7fc fcd2 	bl	80012bc <HAL_InitTick>

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40023c00 	.word	0x40023c00
 8004928:	40023800 	.word	0x40023800
 800492c:	0800e1f0 	.word	0x0800e1f0
 8004930:	20000000 	.word	0x20000000
 8004934:	20000004 	.word	0x20000004

08004938 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <HAL_RCC_EnableCSS+0x1c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a04      	ldr	r2, [pc, #16]	; (8004954 <HAL_RCC_EnableCSS+0x1c>)
 8004942:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004946:	6013      	str	r3, [r2, #0]
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800

08004958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800495c:	b090      	sub	sp, #64	; 0x40
 800495e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	637b      	str	r3, [r7, #52]	; 0x34
 8004964:	2300      	movs	r3, #0
 8004966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004968:	2300      	movs	r3, #0
 800496a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004970:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b08      	cmp	r3, #8
 800497a:	d00d      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x40>
 800497c:	2b08      	cmp	r3, #8
 800497e:	f200 80a1 	bhi.w	8004ac4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0x34>
 8004986:	2b04      	cmp	r3, #4
 8004988:	d003      	beq.n	8004992 <HAL_RCC_GetSysClockFreq+0x3a>
 800498a:	e09b      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800498c:	4b53      	ldr	r3, [pc, #332]	; (8004adc <HAL_RCC_GetSysClockFreq+0x184>)
 800498e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004990:	e09b      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004992:	4b53      	ldr	r3, [pc, #332]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004994:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004996:	e098      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004998:	4b4f      	ldr	r3, [pc, #316]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80049a2:	4b4d      	ldr	r3, [pc, #308]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d028      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ae:	4b4a      	ldr	r3, [pc, #296]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	099b      	lsrs	r3, r3, #6
 80049b4:	2200      	movs	r2, #0
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	627a      	str	r2, [r7, #36]	; 0x24
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049c0:	2100      	movs	r1, #0
 80049c2:	4b47      	ldr	r3, [pc, #284]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80049c4:	fb03 f201 	mul.w	r2, r3, r1
 80049c8:	2300      	movs	r3, #0
 80049ca:	fb00 f303 	mul.w	r3, r0, r3
 80049ce:	4413      	add	r3, r2
 80049d0:	4a43      	ldr	r2, [pc, #268]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80049d2:	fba0 1202 	umull	r1, r2, r0, r2
 80049d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049d8:	460a      	mov	r2, r1
 80049da:	62ba      	str	r2, [r7, #40]	; 0x28
 80049dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049de:	4413      	add	r3, r2
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e4:	2200      	movs	r2, #0
 80049e6:	61bb      	str	r3, [r7, #24]
 80049e8:	61fa      	str	r2, [r7, #28]
 80049ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80049f2:	f7fb fc15 	bl	8000220 <__aeabi_uldivmod>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4613      	mov	r3, r2
 80049fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049fe:	e053      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a00:	4b35      	ldr	r3, [pc, #212]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	099b      	lsrs	r3, r3, #6
 8004a06:	2200      	movs	r2, #0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	617a      	str	r2, [r7, #20]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a12:	f04f 0b00 	mov.w	fp, #0
 8004a16:	4652      	mov	r2, sl
 8004a18:	465b      	mov	r3, fp
 8004a1a:	f04f 0000 	mov.w	r0, #0
 8004a1e:	f04f 0100 	mov.w	r1, #0
 8004a22:	0159      	lsls	r1, r3, #5
 8004a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a28:	0150      	lsls	r0, r2, #5
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	ebb2 080a 	subs.w	r8, r2, sl
 8004a32:	eb63 090b 	sbc.w	r9, r3, fp
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a4a:	ebb2 0408 	subs.w	r4, r2, r8
 8004a4e:	eb63 0509 	sbc.w	r5, r3, r9
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	00eb      	lsls	r3, r5, #3
 8004a5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a60:	00e2      	lsls	r2, r4, #3
 8004a62:	4614      	mov	r4, r2
 8004a64:	461d      	mov	r5, r3
 8004a66:	eb14 030a 	adds.w	r3, r4, sl
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	eb45 030b 	adc.w	r3, r5, fp
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a7e:	4629      	mov	r1, r5
 8004a80:	028b      	lsls	r3, r1, #10
 8004a82:	4621      	mov	r1, r4
 8004a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a88:	4621      	mov	r1, r4
 8004a8a:	028a      	lsls	r2, r1, #10
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	2200      	movs	r2, #0
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	60fa      	str	r2, [r7, #12]
 8004a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a9c:	f7fb fbc0 	bl	8000220 <__aeabi_uldivmod>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	0c1b      	lsrs	r3, r3, #16
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004ab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ac2:	e002      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <HAL_RCC_GetSysClockFreq+0x184>)
 8004ac6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3740      	adds	r7, #64	; 0x40
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	00f42400 	.word	0x00f42400
 8004ae0:	017d7840 	.word	0x017d7840

08004ae4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	; (8004af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aea:	681b      	ldr	r3, [r3, #0]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20000000 	.word	0x20000000

08004afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b00:	f7ff fff0 	bl	8004ae4 <HAL_RCC_GetHCLKFreq>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	0a9b      	lsrs	r3, r3, #10
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	4903      	ldr	r1, [pc, #12]	; (8004b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b12:	5ccb      	ldrb	r3, [r1, r3]
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	0800e200 	.word	0x0800e200

08004b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b28:	f7ff ffdc 	bl	8004ae4 <HAL_RCC_GetHCLKFreq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	0b5b      	lsrs	r3, r3, #13
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	4903      	ldr	r1, [pc, #12]	; (8004b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b3a:	5ccb      	ldrb	r3, [r1, r3]
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40023800 	.word	0x40023800
 8004b48:	0800e200 	.word	0x0800e200

08004b4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	220f      	movs	r2, #15
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b5c:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 0203 	and.w	r2, r3, #3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b68:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b74:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b80:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	08db      	lsrs	r3, r3, #3
 8004b86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b8e:	4b07      	ldr	r3, [pc, #28]	; (8004bac <HAL_RCC_GetClockConfig+0x60>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 020f 	and.w	r2, r3, #15
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	601a      	str	r2, [r3, #0]
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	40023c00 	.word	0x40023c00

08004bb0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004bb4:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbc:	2b80      	cmp	r3, #128	; 0x80
 8004bbe:	d104      	bne.n	8004bca <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004bc0:	f000 f80a 	bl	8004bd8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004bc4:	4b03      	ldr	r3, [pc, #12]	; (8004bd4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004bc6:	2280      	movs	r2, #128	; 0x80
 8004bc8:	701a      	strb	r2, [r3, #0]
  }
}
 8004bca:	bf00      	nop
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	4002380e 	.word	0x4002380e

08004bd8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d012      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c0c:	4b65      	ldr	r3, [pc, #404]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	4a64      	ldr	r2, [pc, #400]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c16:	6093      	str	r3, [r2, #8]
 8004c18:	4b62      	ldr	r3, [pc, #392]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	4960      	ldr	r1, [pc, #384]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d017      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c3e:	4b59      	ldr	r3, [pc, #356]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4c:	4955      	ldr	r1, [pc, #340]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d017      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c7a:	4b4a      	ldr	r3, [pc, #296]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	4946      	ldr	r1, [pc, #280]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c98:	d101      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 808b 	beq.w	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cb8:	4b3a      	ldr	r3, [pc, #232]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	4a39      	ldr	r2, [pc, #228]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc4:	4b37      	ldr	r3, [pc, #220]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cd0:	4b35      	ldr	r3, [pc, #212]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a34      	ldr	r2, [pc, #208]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cdc:	f7fc ff68 	bl	8001bb0 <HAL_GetTick>
 8004ce0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce4:	f7fc ff64 	bl	8001bb0 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e2bc      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004cf6:	4b2c      	ldr	r3, [pc, #176]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d02:	4b28      	ldr	r3, [pc, #160]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d035      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d02e      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d20:	4b20      	ldr	r3, [pc, #128]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d28:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d2a:	4b1e      	ldr	r3, [pc, #120]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	4a1d      	ldr	r2, [pc, #116]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d34:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d36:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	4a1a      	ldr	r2, [pc, #104]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d42:	4a18      	ldr	r2, [pc, #96]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d48:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d114      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fc ff2c 	bl	8001bb0 <HAL_GetTick>
 8004d58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5a:	e00a      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d5c:	f7fc ff28 	bl	8001bb0 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e27e      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d72:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0ee      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d8a:	d111      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004d98:	4b04      	ldr	r3, [pc, #16]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d9a:	400b      	ands	r3, r1
 8004d9c:	4901      	ldr	r1, [pc, #4]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	608b      	str	r3, [r1, #8]
 8004da2:	e00b      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004da4:	40023800 	.word	0x40023800
 8004da8:	40007000 	.word	0x40007000
 8004dac:	0ffffcff 	.word	0x0ffffcff
 8004db0:	4ba4      	ldr	r3, [pc, #656]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	4aa3      	ldr	r2, [pc, #652]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004db6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dba:	6093      	str	r3, [r2, #8]
 8004dbc:	4ba1      	ldr	r3, [pc, #644]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004dbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc8:	499e      	ldr	r1, [pc, #632]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0310 	and.w	r3, r3, #16
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d010      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dda:	4b9a      	ldr	r3, [pc, #616]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004de0:	4a98      	ldr	r2, [pc, #608]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004de6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004dea:	4b96      	ldr	r3, [pc, #600]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004dec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df4:	4993      	ldr	r1, [pc, #588]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e08:	4b8e      	ldr	r3, [pc, #568]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e16:	498b      	ldr	r1, [pc, #556]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e2a:	4b86      	ldr	r3, [pc, #536]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e38:	4982      	ldr	r1, [pc, #520]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e4c:	4b7d      	ldr	r3, [pc, #500]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e5a:	497a      	ldr	r1, [pc, #488]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e6e:	4b75      	ldr	r3, [pc, #468]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e74:	f023 0203 	bic.w	r2, r3, #3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7c:	4971      	ldr	r1, [pc, #452]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e90:	4b6c      	ldr	r3, [pc, #432]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e96:	f023 020c 	bic.w	r2, r3, #12
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	4969      	ldr	r1, [pc, #420]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004eb2:	4b64      	ldr	r3, [pc, #400]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec0:	4960      	ldr	r1, [pc, #384]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ed4:	4b5b      	ldr	r3, [pc, #364]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee2:	4958      	ldr	r1, [pc, #352]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ef6:	4b53      	ldr	r3, [pc, #332]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f04:	494f      	ldr	r1, [pc, #316]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f18:	4b4a      	ldr	r3, [pc, #296]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f26:	4947      	ldr	r1, [pc, #284]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f3a:	4b42      	ldr	r3, [pc, #264]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f48:	493e      	ldr	r1, [pc, #248]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f5c:	4b39      	ldr	r3, [pc, #228]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6a:	4936      	ldr	r1, [pc, #216]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d011      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f7e:	4b31      	ldr	r3, [pc, #196]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f8c:	492d      	ldr	r1, [pc, #180]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f9c:	d101      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fae:	4b25      	ldr	r3, [pc, #148]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fbc:	4921      	ldr	r1, [pc, #132]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fd0:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fde:	4919      	ldr	r1, [pc, #100]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ff2:	4b14      	ldr	r3, [pc, #80]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005000:	4910      	ldr	r1, [pc, #64]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d006      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 809d 	beq.w	8005156 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800501c:	4b09      	ldr	r3, [pc, #36]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a08      	ldr	r2, [pc, #32]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005022:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005028:	f7fc fdc2 	bl	8001bb0 <HAL_GetTick>
 800502c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800502e:	e00b      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005030:	f7fc fdbe 	bl	8001bb0 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b64      	cmp	r3, #100	; 0x64
 800503c:	d904      	bls.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e116      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005042:	bf00      	nop
 8005044:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005048:	4b8b      	ldr	r3, [pc, #556]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1ed      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d017      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	2b00      	cmp	r3, #0
 8005066:	d113      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005068:	4b83      	ldr	r3, [pc, #524]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800506a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800506e:	0e1b      	lsrs	r3, r3, #24
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	019a      	lsls	r2, r3, #6
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	061b      	lsls	r3, r3, #24
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	071b      	lsls	r3, r3, #28
 8005088:	497b      	ldr	r1, [pc, #492]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d004      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050a4:	d00a      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d024      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050ba:	d11f      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050bc:	4b6e      	ldr	r3, [pc, #440]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c2:	0f1b      	lsrs	r3, r3, #28
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	019a      	lsls	r2, r3, #6
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	061b      	lsls	r3, r3, #24
 80050d6:	431a      	orrs	r2, r3
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	071b      	lsls	r3, r3, #28
 80050dc:	4966      	ldr	r1, [pc, #408]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050e4:	4b64      	ldr	r3, [pc, #400]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ea:	f023 021f 	bic.w	r2, r3, #31
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	4960      	ldr	r1, [pc, #384]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00d      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	019a      	lsls	r2, r3, #6
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	061b      	lsls	r3, r3, #24
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	071b      	lsls	r3, r3, #28
 800511c:	4956      	ldr	r1, [pc, #344]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005124:	4b54      	ldr	r3, [pc, #336]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a53      	ldr	r2, [pc, #332]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800512a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800512e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005130:	f7fc fd3e 	bl	8001bb0 <HAL_GetTick>
 8005134:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005136:	e008      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005138:	f7fc fd3a 	bl	8001bb0 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	; 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e092      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800514a:	4b4b      	ldr	r3, [pc, #300]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b01      	cmp	r3, #1
 800515a:	f040 8088 	bne.w	800526e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800515e:	4b46      	ldr	r3, [pc, #280]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a45      	ldr	r2, [pc, #276]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800516a:	f7fc fd21 	bl	8001bb0 <HAL_GetTick>
 800516e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005172:	f7fc fd1d 	bl	8001bb0 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b64      	cmp	r3, #100	; 0x64
 800517e:	d901      	bls.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e075      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005184:	4b3c      	ldr	r3, [pc, #240]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800518c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005190:	d0ef      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d024      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d120      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051ba:	4b2f      	ldr	r3, [pc, #188]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c0:	0c1b      	lsrs	r3, r3, #16
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	019a      	lsls	r2, r3, #6
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	041b      	lsls	r3, r3, #16
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	061b      	lsls	r3, r3, #24
 80051da:	4927      	ldr	r1, [pc, #156]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051e2:	4b25      	ldr	r3, [pc, #148]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80051e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	3b01      	subs	r3, #1
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	4920      	ldr	r1, [pc, #128]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d018      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800520c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005210:	d113      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005212:	4b19      	ldr	r3, [pc, #100]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005218:	0e1b      	lsrs	r3, r3, #24
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	019a      	lsls	r2, r3, #6
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	041b      	lsls	r3, r3, #16
 800522c:	431a      	orrs	r2, r3
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	061b      	lsls	r3, r3, #24
 8005232:	4911      	ldr	r1, [pc, #68]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800523a:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a0e      	ldr	r2, [pc, #56]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005246:	f7fc fcb3 	bl	8001bb0 <HAL_GetTick>
 800524a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800524c:	e008      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800524e:	f7fc fcaf 	bl	8001bb0 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b64      	cmp	r3, #100	; 0x64
 800525a:	d901      	bls.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e007      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800526c:	d1ef      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40023800 	.word	0x40023800

0800527c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e049      	b.n	8005322 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f841 	bl	800532a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f000 fa00 	bl	80056c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	d001      	beq.n	8005358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e054      	b.n	8005402 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a26      	ldr	r2, [pc, #152]	; (8005410 <HAL_TIM_Base_Start_IT+0xd0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d022      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x80>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005382:	d01d      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x80>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a22      	ldr	r2, [pc, #136]	; (8005414 <HAL_TIM_Base_Start_IT+0xd4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d018      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x80>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a21      	ldr	r2, [pc, #132]	; (8005418 <HAL_TIM_Base_Start_IT+0xd8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d013      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x80>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1f      	ldr	r2, [pc, #124]	; (800541c <HAL_TIM_Base_Start_IT+0xdc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00e      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x80>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <HAL_TIM_Base_Start_IT+0xe0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d009      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x80>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a1c      	ldr	r2, [pc, #112]	; (8005424 <HAL_TIM_Base_Start_IT+0xe4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d004      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x80>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <HAL_TIM_Base_Start_IT+0xe8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d115      	bne.n	80053ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	4b19      	ldr	r3, [pc, #100]	; (800542c <HAL_TIM_Base_Start_IT+0xec>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b06      	cmp	r3, #6
 80053d0:	d015      	beq.n	80053fe <HAL_TIM_Base_Start_IT+0xbe>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d8:	d011      	beq.n	80053fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0201 	orr.w	r2, r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ea:	e008      	b.n	80053fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	e000      	b.n	8005400 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40010000 	.word	0x40010000
 8005414:	40000400 	.word	0x40000400
 8005418:	40000800 	.word	0x40000800
 800541c:	40000c00 	.word	0x40000c00
 8005420:	40010400 	.word	0x40010400
 8005424:	40014000 	.word	0x40014000
 8005428:	40001800 	.word	0x40001800
 800542c:	00010007 	.word	0x00010007

08005430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b02      	cmp	r3, #2
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b02      	cmp	r3, #2
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0202 	mvn.w	r2, #2
 800545c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f905 	bl	8005682 <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f8f7 	bl	800566e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f908 	bl	8005696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b04      	cmp	r3, #4
 8005498:	d122      	bne.n	80054e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d11b      	bne.n	80054e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0204 	mvn.w	r2, #4
 80054b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f8db 	bl	8005682 <HAL_TIM_IC_CaptureCallback>
 80054cc:	e005      	b.n	80054da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f8cd 	bl	800566e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f8de 	bl	8005696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d122      	bne.n	8005534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d11b      	bne.n	8005534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0208 	mvn.w	r2, #8
 8005504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2204      	movs	r2, #4
 800550a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f8b1 	bl	8005682 <HAL_TIM_IC_CaptureCallback>
 8005520:	e005      	b.n	800552e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f8a3 	bl	800566e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f8b4 	bl	8005696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2b10      	cmp	r3, #16
 8005540:	d122      	bne.n	8005588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b10      	cmp	r3, #16
 800554e:	d11b      	bne.n	8005588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0210 	mvn.w	r2, #16
 8005558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2208      	movs	r2, #8
 800555e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f887 	bl	8005682 <HAL_TIM_IC_CaptureCallback>
 8005574:	e005      	b.n	8005582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f879 	bl	800566e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f88a 	bl	8005696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b01      	cmp	r3, #1
 8005594:	d10e      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d107      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0201 	mvn.w	r2, #1
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fb fcb2 	bl	8000f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055be:	2b80      	cmp	r3, #128	; 0x80
 80055c0:	d10e      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055cc:	2b80      	cmp	r3, #128	; 0x80
 80055ce:	d107      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f91a 	bl	8005814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ee:	d10e      	bne.n	800560e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fa:	2b80      	cmp	r3, #128	; 0x80
 80055fc:	d107      	bne.n	800560e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f90d 	bl	8005828 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005618:	2b40      	cmp	r3, #64	; 0x40
 800561a:	d10e      	bne.n	800563a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d107      	bne.n	800563a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f838 	bl	80056aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b20      	cmp	r3, #32
 8005646:	d10e      	bne.n	8005666 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b20      	cmp	r3, #32
 8005654:	d107      	bne.n	8005666 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f06f 0220 	mvn.w	r2, #32
 800565e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f8cd 	bl	8005800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005666:	bf00      	nop
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a40      	ldr	r2, [pc, #256]	; (80057d4 <TIM_Base_SetConfig+0x114>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d013      	beq.n	8005700 <TIM_Base_SetConfig+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056de:	d00f      	beq.n	8005700 <TIM_Base_SetConfig+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a3d      	ldr	r2, [pc, #244]	; (80057d8 <TIM_Base_SetConfig+0x118>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00b      	beq.n	8005700 <TIM_Base_SetConfig+0x40>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a3c      	ldr	r2, [pc, #240]	; (80057dc <TIM_Base_SetConfig+0x11c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d007      	beq.n	8005700 <TIM_Base_SetConfig+0x40>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a3b      	ldr	r2, [pc, #236]	; (80057e0 <TIM_Base_SetConfig+0x120>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d003      	beq.n	8005700 <TIM_Base_SetConfig+0x40>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a3a      	ldr	r2, [pc, #232]	; (80057e4 <TIM_Base_SetConfig+0x124>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d108      	bne.n	8005712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2f      	ldr	r2, [pc, #188]	; (80057d4 <TIM_Base_SetConfig+0x114>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d02b      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005720:	d027      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2c      	ldr	r2, [pc, #176]	; (80057d8 <TIM_Base_SetConfig+0x118>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d023      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a2b      	ldr	r2, [pc, #172]	; (80057dc <TIM_Base_SetConfig+0x11c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d01f      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a2a      	ldr	r2, [pc, #168]	; (80057e0 <TIM_Base_SetConfig+0x120>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01b      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a29      	ldr	r2, [pc, #164]	; (80057e4 <TIM_Base_SetConfig+0x124>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d017      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a28      	ldr	r2, [pc, #160]	; (80057e8 <TIM_Base_SetConfig+0x128>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a27      	ldr	r2, [pc, #156]	; (80057ec <TIM_Base_SetConfig+0x12c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a26      	ldr	r2, [pc, #152]	; (80057f0 <TIM_Base_SetConfig+0x130>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a25      	ldr	r2, [pc, #148]	; (80057f4 <TIM_Base_SetConfig+0x134>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a24      	ldr	r2, [pc, #144]	; (80057f8 <TIM_Base_SetConfig+0x138>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a23      	ldr	r2, [pc, #140]	; (80057fc <TIM_Base_SetConfig+0x13c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a0a      	ldr	r2, [pc, #40]	; (80057d4 <TIM_Base_SetConfig+0x114>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_Base_SetConfig+0xf8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a0c      	ldr	r2, [pc, #48]	; (80057e4 <TIM_Base_SetConfig+0x124>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d103      	bne.n	80057c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	615a      	str	r2, [r3, #20]
}
 80057c6:	bf00      	nop
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40010000 	.word	0x40010000
 80057d8:	40000400 	.word	0x40000400
 80057dc:	40000800 	.word	0x40000800
 80057e0:	40000c00 	.word	0x40000c00
 80057e4:	40010400 	.word	0x40010400
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800
 80057f4:	40001800 	.word	0x40001800
 80057f8:	40001c00 	.word	0x40001c00
 80057fc:	40002000 	.word	0x40002000

08005800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e040      	b.n	80058d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fb feac 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2224      	movs	r2, #36	; 0x24
 8005868:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fb1e 	bl	8005ebc <UART_SetConfig>
 8005880:	4603      	mov	r3, r0
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e022      	b.n	80058d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fd76 	bl	8006384 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fdfd 	bl	80064c8 <UART_CheckIdleState>
 80058ce:	4603      	mov	r3, r0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b0ba      	sub	sp, #232	; 0xe8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005902:	f640 030f 	movw	r3, #2063	; 0x80f
 8005906:	4013      	ands	r3, r2
 8005908:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800590c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005910:	2b00      	cmp	r3, #0
 8005912:	d115      	bne.n	8005940 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005918:	f003 0320 	and.w	r3, r3, #32
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00f      	beq.n	8005940 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 8297 	beq.w	8005e64 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	4798      	blx	r3
      }
      return;
 800593e:	e291      	b.n	8005e64 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005940:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8117 	beq.w	8005b78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800594a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005956:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800595a:	4b85      	ldr	r3, [pc, #532]	; (8005b70 <HAL_UART_IRQHandler+0x298>)
 800595c:	4013      	ands	r3, r2
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 810a 	beq.w	8005b78 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d011      	beq.n	8005994 <HAL_UART_IRQHandler+0xbc>
 8005970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00b      	beq.n	8005994 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2201      	movs	r2, #1
 8005982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800598a:	f043 0201 	orr.w	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d011      	beq.n	80059c4 <HAL_UART_IRQHandler+0xec>
 80059a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00b      	beq.n	80059c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2202      	movs	r2, #2
 80059b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ba:	f043 0204 	orr.w	r2, r3, #4
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d011      	beq.n	80059f4 <HAL_UART_IRQHandler+0x11c>
 80059d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00b      	beq.n	80059f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2204      	movs	r2, #4
 80059e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ea:	f043 0202 	orr.w	r2, r3, #2
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d017      	beq.n	8005a30 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d105      	bne.n	8005a18 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00b      	beq.n	8005a30 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a26:	f043 0208 	orr.w	r2, r3, #8
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d012      	beq.n	8005a62 <HAL_UART_IRQHandler+0x18a>
 8005a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00c      	beq.n	8005a62 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a58:	f043 0220 	orr.w	r2, r3, #32
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 81fd 	beq.w	8005e68 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00d      	beq.n	8005a96 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aaa:	2b40      	cmp	r3, #64	; 0x40
 8005aac:	d005      	beq.n	8005aba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ab2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d04f      	beq.n	8005b5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fe01 	bl	80066c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d141      	bne.n	8005b52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3308      	adds	r3, #8
 8005af6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005afa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1d9      	bne.n	8005ace <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d013      	beq.n	8005b4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b26:	4a13      	ldr	r2, [pc, #76]	; (8005b74 <HAL_UART_IRQHandler+0x29c>)
 8005b28:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fc fa9f 	bl	8002072 <HAL_DMA_Abort_IT>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d017      	beq.n	8005b6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b44:	4610      	mov	r0, r2
 8005b46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b48:	e00f      	b.n	8005b6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f9a0 	bl	8005e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b50:	e00b      	b.n	8005b6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f99c 	bl	8005e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b58:	e007      	b.n	8005b6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f998 	bl	8005e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005b68:	e17e      	b.n	8005e68 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b6a:	bf00      	nop
    return;
 8005b6c:	e17c      	b.n	8005e68 <HAL_UART_IRQHandler+0x590>
 8005b6e:	bf00      	nop
 8005b70:	04000120 	.word	0x04000120
 8005b74:	0800678b 	.word	0x0800678b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 814c 	bne.w	8005e1a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b86:	f003 0310 	and.w	r3, r3, #16
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 8145 	beq.w	8005e1a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 813e 	beq.w	8005e1a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2210      	movs	r2, #16
 8005ba4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	f040 80b6 	bne.w	8005d22 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bc2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 8150 	beq.w	8005e6c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	f080 8148 	bcs.w	8005e6c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005be2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf0:	f000 8086 	beq.w	8005d00 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1da      	bne.n	8005bf4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3308      	adds	r3, #8
 8005c44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c50:	f023 0301 	bic.w	r3, r3, #1
 8005c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e1      	bne.n	8005c3e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3308      	adds	r3, #8
 8005c80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3308      	adds	r3, #8
 8005c9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ca0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ca4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e3      	bne.n	8005c7a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd0:	f023 0310 	bic.w	r3, r3, #16
 8005cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ce2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ce4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ce8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e4      	bne.n	8005cc0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fc f949 	bl	8001f92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f8c2 	bl	8005ea4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d20:	e0a4      	b.n	8005e6c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 8096 	beq.w	8005e70 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005d44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 8091 	beq.w	8005e70 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d70:	647b      	str	r3, [r7, #68]	; 0x44
 8005d72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e4      	bne.n	8005d4e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	623b      	str	r3, [r7, #32]
   return(result);
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	f023 0301 	bic.w	r3, r3, #1
 8005d9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3308      	adds	r3, #8
 8005da4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005da8:	633a      	str	r2, [r7, #48]	; 0x30
 8005daa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e3      	bne.n	8005d84 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f023 0310 	bic.w	r3, r3, #16
 8005de4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	461a      	mov	r2, r3
 8005dee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005df2:	61fb      	str	r3, [r7, #28]
 8005df4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	69b9      	ldr	r1, [r7, #24]
 8005df8:	69fa      	ldr	r2, [r7, #28]
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	617b      	str	r3, [r7, #20]
   return(result);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e4      	bne.n	8005dd0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e10:	4619      	mov	r1, r3
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f846 	bl	8005ea4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e18:	e02a      	b.n	8005e70 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00e      	beq.n	8005e44 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d008      	beq.n	8005e44 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d01c      	beq.n	8005e74 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	4798      	blx	r3
    }
    return;
 8005e42:	e017      	b.n	8005e74 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d012      	beq.n	8005e76 <HAL_UART_IRQHandler+0x59e>
 8005e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00c      	beq.n	8005e76 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fcaa 	bl	80067b6 <UART_EndTransmit_IT>
    return;
 8005e62:	e008      	b.n	8005e76 <HAL_UART_IRQHandler+0x59e>
      return;
 8005e64:	bf00      	nop
 8005e66:	e006      	b.n	8005e76 <HAL_UART_IRQHandler+0x59e>
    return;
 8005e68:	bf00      	nop
 8005e6a:	e004      	b.n	8005e76 <HAL_UART_IRQHandler+0x59e>
      return;
 8005e6c:	bf00      	nop
 8005e6e:	e002      	b.n	8005e76 <HAL_UART_IRQHandler+0x59e>
      return;
 8005e70:	bf00      	nop
 8005e72:	e000      	b.n	8005e76 <HAL_UART_IRQHandler+0x59e>
    return;
 8005e74:	bf00      	nop
  }

}
 8005e76:	37e8      	adds	r7, #232	; 0xe8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	4ba6      	ldr	r3, [pc, #664]	; (8006180 <UART_SetConfig+0x2c4>)
 8005ee8:	4013      	ands	r3, r2
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6812      	ldr	r2, [r2, #0]
 8005eee:	6979      	ldr	r1, [r7, #20]
 8005ef0:	430b      	orrs	r3, r1
 8005ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a94      	ldr	r2, [pc, #592]	; (8006184 <UART_SetConfig+0x2c8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d120      	bne.n	8005f7a <UART_SetConfig+0xbe>
 8005f38:	4b93      	ldr	r3, [pc, #588]	; (8006188 <UART_SetConfig+0x2cc>)
 8005f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d816      	bhi.n	8005f74 <UART_SetConfig+0xb8>
 8005f46:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <UART_SetConfig+0x90>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f5d 	.word	0x08005f5d
 8005f50:	08005f69 	.word	0x08005f69
 8005f54:	08005f63 	.word	0x08005f63
 8005f58:	08005f6f 	.word	0x08005f6f
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e150      	b.n	8006204 <UART_SetConfig+0x348>
 8005f62:	2302      	movs	r3, #2
 8005f64:	77fb      	strb	r3, [r7, #31]
 8005f66:	e14d      	b.n	8006204 <UART_SetConfig+0x348>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	77fb      	strb	r3, [r7, #31]
 8005f6c:	e14a      	b.n	8006204 <UART_SetConfig+0x348>
 8005f6e:	2308      	movs	r3, #8
 8005f70:	77fb      	strb	r3, [r7, #31]
 8005f72:	e147      	b.n	8006204 <UART_SetConfig+0x348>
 8005f74:	2310      	movs	r3, #16
 8005f76:	77fb      	strb	r3, [r7, #31]
 8005f78:	e144      	b.n	8006204 <UART_SetConfig+0x348>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a83      	ldr	r2, [pc, #524]	; (800618c <UART_SetConfig+0x2d0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d132      	bne.n	8005fea <UART_SetConfig+0x12e>
 8005f84:	4b80      	ldr	r3, [pc, #512]	; (8006188 <UART_SetConfig+0x2cc>)
 8005f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8a:	f003 030c 	and.w	r3, r3, #12
 8005f8e:	2b0c      	cmp	r3, #12
 8005f90:	d828      	bhi.n	8005fe4 <UART_SetConfig+0x128>
 8005f92:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <UART_SetConfig+0xdc>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fcd 	.word	0x08005fcd
 8005f9c:	08005fe5 	.word	0x08005fe5
 8005fa0:	08005fe5 	.word	0x08005fe5
 8005fa4:	08005fe5 	.word	0x08005fe5
 8005fa8:	08005fd9 	.word	0x08005fd9
 8005fac:	08005fe5 	.word	0x08005fe5
 8005fb0:	08005fe5 	.word	0x08005fe5
 8005fb4:	08005fe5 	.word	0x08005fe5
 8005fb8:	08005fd3 	.word	0x08005fd3
 8005fbc:	08005fe5 	.word	0x08005fe5
 8005fc0:	08005fe5 	.word	0x08005fe5
 8005fc4:	08005fe5 	.word	0x08005fe5
 8005fc8:	08005fdf 	.word	0x08005fdf
 8005fcc:	2300      	movs	r3, #0
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e118      	b.n	8006204 <UART_SetConfig+0x348>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	77fb      	strb	r3, [r7, #31]
 8005fd6:	e115      	b.n	8006204 <UART_SetConfig+0x348>
 8005fd8:	2304      	movs	r3, #4
 8005fda:	77fb      	strb	r3, [r7, #31]
 8005fdc:	e112      	b.n	8006204 <UART_SetConfig+0x348>
 8005fde:	2308      	movs	r3, #8
 8005fe0:	77fb      	strb	r3, [r7, #31]
 8005fe2:	e10f      	b.n	8006204 <UART_SetConfig+0x348>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	77fb      	strb	r3, [r7, #31]
 8005fe8:	e10c      	b.n	8006204 <UART_SetConfig+0x348>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a68      	ldr	r2, [pc, #416]	; (8006190 <UART_SetConfig+0x2d4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d120      	bne.n	8006036 <UART_SetConfig+0x17a>
 8005ff4:	4b64      	ldr	r3, [pc, #400]	; (8006188 <UART_SetConfig+0x2cc>)
 8005ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ffe:	2b30      	cmp	r3, #48	; 0x30
 8006000:	d013      	beq.n	800602a <UART_SetConfig+0x16e>
 8006002:	2b30      	cmp	r3, #48	; 0x30
 8006004:	d814      	bhi.n	8006030 <UART_SetConfig+0x174>
 8006006:	2b20      	cmp	r3, #32
 8006008:	d009      	beq.n	800601e <UART_SetConfig+0x162>
 800600a:	2b20      	cmp	r3, #32
 800600c:	d810      	bhi.n	8006030 <UART_SetConfig+0x174>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <UART_SetConfig+0x15c>
 8006012:	2b10      	cmp	r3, #16
 8006014:	d006      	beq.n	8006024 <UART_SetConfig+0x168>
 8006016:	e00b      	b.n	8006030 <UART_SetConfig+0x174>
 8006018:	2300      	movs	r3, #0
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e0f2      	b.n	8006204 <UART_SetConfig+0x348>
 800601e:	2302      	movs	r3, #2
 8006020:	77fb      	strb	r3, [r7, #31]
 8006022:	e0ef      	b.n	8006204 <UART_SetConfig+0x348>
 8006024:	2304      	movs	r3, #4
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e0ec      	b.n	8006204 <UART_SetConfig+0x348>
 800602a:	2308      	movs	r3, #8
 800602c:	77fb      	strb	r3, [r7, #31]
 800602e:	e0e9      	b.n	8006204 <UART_SetConfig+0x348>
 8006030:	2310      	movs	r3, #16
 8006032:	77fb      	strb	r3, [r7, #31]
 8006034:	e0e6      	b.n	8006204 <UART_SetConfig+0x348>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a56      	ldr	r2, [pc, #344]	; (8006194 <UART_SetConfig+0x2d8>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d120      	bne.n	8006082 <UART_SetConfig+0x1c6>
 8006040:	4b51      	ldr	r3, [pc, #324]	; (8006188 <UART_SetConfig+0x2cc>)
 8006042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006046:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800604a:	2bc0      	cmp	r3, #192	; 0xc0
 800604c:	d013      	beq.n	8006076 <UART_SetConfig+0x1ba>
 800604e:	2bc0      	cmp	r3, #192	; 0xc0
 8006050:	d814      	bhi.n	800607c <UART_SetConfig+0x1c0>
 8006052:	2b80      	cmp	r3, #128	; 0x80
 8006054:	d009      	beq.n	800606a <UART_SetConfig+0x1ae>
 8006056:	2b80      	cmp	r3, #128	; 0x80
 8006058:	d810      	bhi.n	800607c <UART_SetConfig+0x1c0>
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <UART_SetConfig+0x1a8>
 800605e:	2b40      	cmp	r3, #64	; 0x40
 8006060:	d006      	beq.n	8006070 <UART_SetConfig+0x1b4>
 8006062:	e00b      	b.n	800607c <UART_SetConfig+0x1c0>
 8006064:	2300      	movs	r3, #0
 8006066:	77fb      	strb	r3, [r7, #31]
 8006068:	e0cc      	b.n	8006204 <UART_SetConfig+0x348>
 800606a:	2302      	movs	r3, #2
 800606c:	77fb      	strb	r3, [r7, #31]
 800606e:	e0c9      	b.n	8006204 <UART_SetConfig+0x348>
 8006070:	2304      	movs	r3, #4
 8006072:	77fb      	strb	r3, [r7, #31]
 8006074:	e0c6      	b.n	8006204 <UART_SetConfig+0x348>
 8006076:	2308      	movs	r3, #8
 8006078:	77fb      	strb	r3, [r7, #31]
 800607a:	e0c3      	b.n	8006204 <UART_SetConfig+0x348>
 800607c:	2310      	movs	r3, #16
 800607e:	77fb      	strb	r3, [r7, #31]
 8006080:	e0c0      	b.n	8006204 <UART_SetConfig+0x348>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a44      	ldr	r2, [pc, #272]	; (8006198 <UART_SetConfig+0x2dc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d125      	bne.n	80060d8 <UART_SetConfig+0x21c>
 800608c:	4b3e      	ldr	r3, [pc, #248]	; (8006188 <UART_SetConfig+0x2cc>)
 800608e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800609a:	d017      	beq.n	80060cc <UART_SetConfig+0x210>
 800609c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060a0:	d817      	bhi.n	80060d2 <UART_SetConfig+0x216>
 80060a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060a6:	d00b      	beq.n	80060c0 <UART_SetConfig+0x204>
 80060a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ac:	d811      	bhi.n	80060d2 <UART_SetConfig+0x216>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <UART_SetConfig+0x1fe>
 80060b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b6:	d006      	beq.n	80060c6 <UART_SetConfig+0x20a>
 80060b8:	e00b      	b.n	80060d2 <UART_SetConfig+0x216>
 80060ba:	2300      	movs	r3, #0
 80060bc:	77fb      	strb	r3, [r7, #31]
 80060be:	e0a1      	b.n	8006204 <UART_SetConfig+0x348>
 80060c0:	2302      	movs	r3, #2
 80060c2:	77fb      	strb	r3, [r7, #31]
 80060c4:	e09e      	b.n	8006204 <UART_SetConfig+0x348>
 80060c6:	2304      	movs	r3, #4
 80060c8:	77fb      	strb	r3, [r7, #31]
 80060ca:	e09b      	b.n	8006204 <UART_SetConfig+0x348>
 80060cc:	2308      	movs	r3, #8
 80060ce:	77fb      	strb	r3, [r7, #31]
 80060d0:	e098      	b.n	8006204 <UART_SetConfig+0x348>
 80060d2:	2310      	movs	r3, #16
 80060d4:	77fb      	strb	r3, [r7, #31]
 80060d6:	e095      	b.n	8006204 <UART_SetConfig+0x348>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a2f      	ldr	r2, [pc, #188]	; (800619c <UART_SetConfig+0x2e0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d125      	bne.n	800612e <UART_SetConfig+0x272>
 80060e2:	4b29      	ldr	r3, [pc, #164]	; (8006188 <UART_SetConfig+0x2cc>)
 80060e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060f0:	d017      	beq.n	8006122 <UART_SetConfig+0x266>
 80060f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060f6:	d817      	bhi.n	8006128 <UART_SetConfig+0x26c>
 80060f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060fc:	d00b      	beq.n	8006116 <UART_SetConfig+0x25a>
 80060fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006102:	d811      	bhi.n	8006128 <UART_SetConfig+0x26c>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <UART_SetConfig+0x254>
 8006108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610c:	d006      	beq.n	800611c <UART_SetConfig+0x260>
 800610e:	e00b      	b.n	8006128 <UART_SetConfig+0x26c>
 8006110:	2301      	movs	r3, #1
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e076      	b.n	8006204 <UART_SetConfig+0x348>
 8006116:	2302      	movs	r3, #2
 8006118:	77fb      	strb	r3, [r7, #31]
 800611a:	e073      	b.n	8006204 <UART_SetConfig+0x348>
 800611c:	2304      	movs	r3, #4
 800611e:	77fb      	strb	r3, [r7, #31]
 8006120:	e070      	b.n	8006204 <UART_SetConfig+0x348>
 8006122:	2308      	movs	r3, #8
 8006124:	77fb      	strb	r3, [r7, #31]
 8006126:	e06d      	b.n	8006204 <UART_SetConfig+0x348>
 8006128:	2310      	movs	r3, #16
 800612a:	77fb      	strb	r3, [r7, #31]
 800612c:	e06a      	b.n	8006204 <UART_SetConfig+0x348>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1b      	ldr	r2, [pc, #108]	; (80061a0 <UART_SetConfig+0x2e4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d138      	bne.n	80061aa <UART_SetConfig+0x2ee>
 8006138:	4b13      	ldr	r3, [pc, #76]	; (8006188 <UART_SetConfig+0x2cc>)
 800613a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006142:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006146:	d017      	beq.n	8006178 <UART_SetConfig+0x2bc>
 8006148:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800614c:	d82a      	bhi.n	80061a4 <UART_SetConfig+0x2e8>
 800614e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006152:	d00b      	beq.n	800616c <UART_SetConfig+0x2b0>
 8006154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006158:	d824      	bhi.n	80061a4 <UART_SetConfig+0x2e8>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <UART_SetConfig+0x2aa>
 800615e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006162:	d006      	beq.n	8006172 <UART_SetConfig+0x2b6>
 8006164:	e01e      	b.n	80061a4 <UART_SetConfig+0x2e8>
 8006166:	2300      	movs	r3, #0
 8006168:	77fb      	strb	r3, [r7, #31]
 800616a:	e04b      	b.n	8006204 <UART_SetConfig+0x348>
 800616c:	2302      	movs	r3, #2
 800616e:	77fb      	strb	r3, [r7, #31]
 8006170:	e048      	b.n	8006204 <UART_SetConfig+0x348>
 8006172:	2304      	movs	r3, #4
 8006174:	77fb      	strb	r3, [r7, #31]
 8006176:	e045      	b.n	8006204 <UART_SetConfig+0x348>
 8006178:	2308      	movs	r3, #8
 800617a:	77fb      	strb	r3, [r7, #31]
 800617c:	e042      	b.n	8006204 <UART_SetConfig+0x348>
 800617e:	bf00      	nop
 8006180:	efff69f3 	.word	0xefff69f3
 8006184:	40011000 	.word	0x40011000
 8006188:	40023800 	.word	0x40023800
 800618c:	40004400 	.word	0x40004400
 8006190:	40004800 	.word	0x40004800
 8006194:	40004c00 	.word	0x40004c00
 8006198:	40005000 	.word	0x40005000
 800619c:	40011400 	.word	0x40011400
 80061a0:	40007800 	.word	0x40007800
 80061a4:	2310      	movs	r3, #16
 80061a6:	77fb      	strb	r3, [r7, #31]
 80061a8:	e02c      	b.n	8006204 <UART_SetConfig+0x348>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a72      	ldr	r2, [pc, #456]	; (8006378 <UART_SetConfig+0x4bc>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d125      	bne.n	8006200 <UART_SetConfig+0x344>
 80061b4:	4b71      	ldr	r3, [pc, #452]	; (800637c <UART_SetConfig+0x4c0>)
 80061b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061c2:	d017      	beq.n	80061f4 <UART_SetConfig+0x338>
 80061c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061c8:	d817      	bhi.n	80061fa <UART_SetConfig+0x33e>
 80061ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ce:	d00b      	beq.n	80061e8 <UART_SetConfig+0x32c>
 80061d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d4:	d811      	bhi.n	80061fa <UART_SetConfig+0x33e>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <UART_SetConfig+0x326>
 80061da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061de:	d006      	beq.n	80061ee <UART_SetConfig+0x332>
 80061e0:	e00b      	b.n	80061fa <UART_SetConfig+0x33e>
 80061e2:	2300      	movs	r3, #0
 80061e4:	77fb      	strb	r3, [r7, #31]
 80061e6:	e00d      	b.n	8006204 <UART_SetConfig+0x348>
 80061e8:	2302      	movs	r3, #2
 80061ea:	77fb      	strb	r3, [r7, #31]
 80061ec:	e00a      	b.n	8006204 <UART_SetConfig+0x348>
 80061ee:	2304      	movs	r3, #4
 80061f0:	77fb      	strb	r3, [r7, #31]
 80061f2:	e007      	b.n	8006204 <UART_SetConfig+0x348>
 80061f4:	2308      	movs	r3, #8
 80061f6:	77fb      	strb	r3, [r7, #31]
 80061f8:	e004      	b.n	8006204 <UART_SetConfig+0x348>
 80061fa:	2310      	movs	r3, #16
 80061fc:	77fb      	strb	r3, [r7, #31]
 80061fe:	e001      	b.n	8006204 <UART_SetConfig+0x348>
 8006200:	2310      	movs	r3, #16
 8006202:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800620c:	d15b      	bne.n	80062c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800620e:	7ffb      	ldrb	r3, [r7, #31]
 8006210:	2b08      	cmp	r3, #8
 8006212:	d828      	bhi.n	8006266 <UART_SetConfig+0x3aa>
 8006214:	a201      	add	r2, pc, #4	; (adr r2, 800621c <UART_SetConfig+0x360>)
 8006216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621a:	bf00      	nop
 800621c:	08006241 	.word	0x08006241
 8006220:	08006249 	.word	0x08006249
 8006224:	08006251 	.word	0x08006251
 8006228:	08006267 	.word	0x08006267
 800622c:	08006257 	.word	0x08006257
 8006230:	08006267 	.word	0x08006267
 8006234:	08006267 	.word	0x08006267
 8006238:	08006267 	.word	0x08006267
 800623c:	0800625f 	.word	0x0800625f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006240:	f7fe fc5c 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 8006244:	61b8      	str	r0, [r7, #24]
        break;
 8006246:	e013      	b.n	8006270 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006248:	f7fe fc6c 	bl	8004b24 <HAL_RCC_GetPCLK2Freq>
 800624c:	61b8      	str	r0, [r7, #24]
        break;
 800624e:	e00f      	b.n	8006270 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006250:	4b4b      	ldr	r3, [pc, #300]	; (8006380 <UART_SetConfig+0x4c4>)
 8006252:	61bb      	str	r3, [r7, #24]
        break;
 8006254:	e00c      	b.n	8006270 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006256:	f7fe fb7f 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 800625a:	61b8      	str	r0, [r7, #24]
        break;
 800625c:	e008      	b.n	8006270 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800625e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006262:	61bb      	str	r3, [r7, #24]
        break;
 8006264:	e004      	b.n	8006270 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	77bb      	strb	r3, [r7, #30]
        break;
 800626e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d074      	beq.n	8006360 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	005a      	lsls	r2, r3, #1
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	085b      	lsrs	r3, r3, #1
 8006280:	441a      	add	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	fbb2 f3f3 	udiv	r3, r2, r3
 800628a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	2b0f      	cmp	r3, #15
 8006290:	d916      	bls.n	80062c0 <UART_SetConfig+0x404>
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006298:	d212      	bcs.n	80062c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	b29b      	uxth	r3, r3
 800629e:	f023 030f 	bic.w	r3, r3, #15
 80062a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	085b      	lsrs	r3, r3, #1
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	89fb      	ldrh	r3, [r7, #14]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	89fa      	ldrh	r2, [r7, #14]
 80062bc:	60da      	str	r2, [r3, #12]
 80062be:	e04f      	b.n	8006360 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	77bb      	strb	r3, [r7, #30]
 80062c4:	e04c      	b.n	8006360 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062c6:	7ffb      	ldrb	r3, [r7, #31]
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d828      	bhi.n	800631e <UART_SetConfig+0x462>
 80062cc:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <UART_SetConfig+0x418>)
 80062ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d2:	bf00      	nop
 80062d4:	080062f9 	.word	0x080062f9
 80062d8:	08006301 	.word	0x08006301
 80062dc:	08006309 	.word	0x08006309
 80062e0:	0800631f 	.word	0x0800631f
 80062e4:	0800630f 	.word	0x0800630f
 80062e8:	0800631f 	.word	0x0800631f
 80062ec:	0800631f 	.word	0x0800631f
 80062f0:	0800631f 	.word	0x0800631f
 80062f4:	08006317 	.word	0x08006317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f8:	f7fe fc00 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 80062fc:	61b8      	str	r0, [r7, #24]
        break;
 80062fe:	e013      	b.n	8006328 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006300:	f7fe fc10 	bl	8004b24 <HAL_RCC_GetPCLK2Freq>
 8006304:	61b8      	str	r0, [r7, #24]
        break;
 8006306:	e00f      	b.n	8006328 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006308:	4b1d      	ldr	r3, [pc, #116]	; (8006380 <UART_SetConfig+0x4c4>)
 800630a:	61bb      	str	r3, [r7, #24]
        break;
 800630c:	e00c      	b.n	8006328 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800630e:	f7fe fb23 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 8006312:	61b8      	str	r0, [r7, #24]
        break;
 8006314:	e008      	b.n	8006328 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631a:	61bb      	str	r3, [r7, #24]
        break;
 800631c:	e004      	b.n	8006328 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	77bb      	strb	r3, [r7, #30]
        break;
 8006326:	bf00      	nop
    }

    if (pclk != 0U)
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d018      	beq.n	8006360 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	085a      	lsrs	r2, r3, #1
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	441a      	add	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006340:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2b0f      	cmp	r3, #15
 8006346:	d909      	bls.n	800635c <UART_SetConfig+0x4a0>
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800634e:	d205      	bcs.n	800635c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	b29a      	uxth	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	60da      	str	r2, [r3, #12]
 800635a:	e001      	b.n	8006360 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800636c:	7fbb      	ldrb	r3, [r7, #30]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	40007c00 	.word	0x40007c00
 800637c:	40023800 	.word	0x40023800
 8006380:	00f42400 	.word	0x00f42400

08006384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00a      	beq.n	80063ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00a      	beq.n	80063f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	f003 0310 	and.w	r3, r3, #16
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00a      	beq.n	8006436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006460:	2b00      	cmp	r3, #0
 8006462:	d01a      	beq.n	800649a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006482:	d10a      	bne.n	800649a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	605a      	str	r2, [r3, #4]
  }
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064d8:	f7fb fb6a 	bl	8001bb0 <HAL_GetTick>
 80064dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0308 	and.w	r3, r3, #8
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d10e      	bne.n	800650a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f81b 	bl	8006536 <UART_WaitOnFlagUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e011      	b.n	800652e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2220      	movs	r2, #32
 8006514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b09c      	sub	sp, #112	; 0x70
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	4613      	mov	r3, r2
 8006544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006546:	e0a7      	b.n	8006698 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800654e:	f000 80a3 	beq.w	8006698 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006552:	f7fb fb2d 	bl	8001bb0 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800655e:	429a      	cmp	r2, r3
 8006560:	d302      	bcc.n	8006568 <UART_WaitOnFlagUntilTimeout+0x32>
 8006562:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006564:	2b00      	cmp	r3, #0
 8006566:	d13f      	bne.n	80065e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006578:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800657c:	667b      	str	r3, [r7, #100]	; 0x64
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006586:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006588:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800658c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e6      	bne.n	8006568 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3308      	adds	r3, #8
 80065a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	f023 0301 	bic.w	r3, r3, #1
 80065b0:	663b      	str	r3, [r7, #96]	; 0x60
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3308      	adds	r3, #8
 80065b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80065bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e5      	bne.n	800659a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2220      	movs	r2, #32
 80065d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e068      	b.n	80066ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d050      	beq.n	8006698 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006604:	d148      	bne.n	8006698 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800660e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	e853 3f00 	ldrex	r3, [r3]
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006624:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800662e:	637b      	str	r3, [r7, #52]	; 0x34
 8006630:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006632:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1e6      	bne.n	8006610 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3308      	adds	r3, #8
 8006648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	613b      	str	r3, [r7, #16]
   return(result);
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f023 0301 	bic.w	r3, r3, #1
 8006658:	66bb      	str	r3, [r7, #104]	; 0x68
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3308      	adds	r3, #8
 8006660:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006662:	623a      	str	r2, [r7, #32]
 8006664:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	69f9      	ldr	r1, [r7, #28]
 8006668:	6a3a      	ldr	r2, [r7, #32]
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e5      	bne.n	8006642 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e010      	b.n	80066ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69da      	ldr	r2, [r3, #28]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	4013      	ands	r3, r2
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	bf0c      	ite	eq
 80066a8:	2301      	moveq	r3, #1
 80066aa:	2300      	movne	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	f43f af48 	beq.w	8006548 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3770      	adds	r7, #112	; 0x70
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b095      	sub	sp, #84	; 0x54
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d2:	e853 3f00 	ldrex	r3, [r3]
 80066d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e8:	643b      	str	r3, [r7, #64]	; 0x40
 80066ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066f0:	e841 2300 	strex	r3, r2, [r1]
 80066f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e6      	bne.n	80066ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3308      	adds	r3, #8
 8006702:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	61fb      	str	r3, [r7, #28]
   return(result);
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f023 0301 	bic.w	r3, r3, #1
 8006712:	64bb      	str	r3, [r7, #72]	; 0x48
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3308      	adds	r3, #8
 800671a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800671c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800671e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e5      	bne.n	80066fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006734:	2b01      	cmp	r3, #1
 8006736:	d118      	bne.n	800676a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	60bb      	str	r3, [r7, #8]
   return(result);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f023 0310 	bic.w	r3, r3, #16
 800674c:	647b      	str	r3, [r7, #68]	; 0x44
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006756:	61bb      	str	r3, [r7, #24]
 8006758:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675a:	6979      	ldr	r1, [r7, #20]
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	613b      	str	r3, [r7, #16]
   return(result);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1e6      	bne.n	8006738 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2220      	movs	r2, #32
 800676e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800677e:	bf00      	nop
 8006780:	3754      	adds	r7, #84	; 0x54
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006796:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7ff fb71 	bl	8005e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ae:	bf00      	nop
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b088      	sub	sp, #32
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	e853 3f00 	ldrex	r3, [r3]
 80067ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	461a      	mov	r2, r3
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e0:	6979      	ldr	r1, [r7, #20]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	613b      	str	r3, [r7, #16]
   return(result);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e6      	bne.n	80067be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2220      	movs	r2, #32
 80067f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7ff fb3d 	bl	8005e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006802:	bf00      	nop
 8006804:	3720      	adds	r7, #32
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <LL_EXTI_EnableIT_0_31>:
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8006814:	4b05      	ldr	r3, [pc, #20]	; (800682c <LL_EXTI_EnableIT_0_31+0x20>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	4904      	ldr	r1, [pc, #16]	; (800682c <LL_EXTI_EnableIT_0_31+0x20>)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4313      	orrs	r3, r2
 800681e:	600b      	str	r3, [r1, #0]
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	40013c00 	.word	0x40013c00

08006830 <LL_EXTI_DisableIT_0_31>:
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8006838:	4b06      	ldr	r3, [pc, #24]	; (8006854 <LL_EXTI_DisableIT_0_31+0x24>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	43db      	mvns	r3, r3
 8006840:	4904      	ldr	r1, [pc, #16]	; (8006854 <LL_EXTI_DisableIT_0_31+0x24>)
 8006842:	4013      	ands	r3, r2
 8006844:	600b      	str	r3, [r1, #0]
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	40013c00 	.word	0x40013c00

08006858 <LL_EXTI_EnableEvent_0_31>:
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8006860:	4b05      	ldr	r3, [pc, #20]	; (8006878 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	4904      	ldr	r1, [pc, #16]	; (8006878 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4313      	orrs	r3, r2
 800686a:	604b      	str	r3, [r1, #4]
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	40013c00 	.word	0x40013c00

0800687c <LL_EXTI_DisableEvent_0_31>:
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8006884:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	43db      	mvns	r3, r3
 800688c:	4904      	ldr	r1, [pc, #16]	; (80068a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800688e:	4013      	ands	r3, r2
 8006890:	604b      	str	r3, [r1, #4]
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40013c00 	.word	0x40013c00

080068a4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80068ac:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	4904      	ldr	r1, [pc, #16]	; (80068c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	608b      	str	r3, [r1, #8]
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	40013c00 	.word	0x40013c00

080068c8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80068d0:	4b06      	ldr	r3, [pc, #24]	; (80068ec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	43db      	mvns	r3, r3
 80068d8:	4904      	ldr	r1, [pc, #16]	; (80068ec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80068da:	4013      	ands	r3, r2
 80068dc:	608b      	str	r3, [r1, #8]
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40013c00 	.word	0x40013c00

080068f0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80068f8:	4b05      	ldr	r3, [pc, #20]	; (8006910 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	4904      	ldr	r1, [pc, #16]	; (8006910 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4313      	orrs	r3, r2
 8006902:	60cb      	str	r3, [r1, #12]
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	40013c00 	.word	0x40013c00

08006914 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800691c:	4b06      	ldr	r3, [pc, #24]	; (8006938 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	43db      	mvns	r3, r3
 8006924:	4904      	ldr	r1, [pc, #16]	; (8006938 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006926:	4013      	ands	r3, r2
 8006928:	60cb      	str	r3, [r1, #12]
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	40013c00 	.word	0x40013c00

0800693c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8006944:	2300      	movs	r3, #0
 8006946:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	791b      	ldrb	r3, [r3, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d065      	beq.n	8006a1c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d06c      	beq.n	8006a32 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	795b      	ldrb	r3, [r3, #5]
 800695c:	2b02      	cmp	r3, #2
 800695e:	d01c      	beq.n	800699a <LL_EXTI_Init+0x5e>
 8006960:	2b02      	cmp	r3, #2
 8006962:	dc25      	bgt.n	80069b0 <LL_EXTI_Init+0x74>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d002      	beq.n	800696e <LL_EXTI_Init+0x32>
 8006968:	2b01      	cmp	r3, #1
 800696a:	d00b      	beq.n	8006984 <LL_EXTI_Init+0x48>
 800696c:	e020      	b.n	80069b0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff ff82 	bl	800687c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f7ff ff45 	bl	800680c <LL_EXTI_EnableIT_0_31>
          break;
 8006982:	e018      	b.n	80069b6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff ff51 	bl	8006830 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff ff60 	bl	8006858 <LL_EXTI_EnableEvent_0_31>
          break;
 8006998:	e00d      	b.n	80069b6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff ff34 	bl	800680c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff ff55 	bl	8006858 <LL_EXTI_EnableEvent_0_31>
          break;
 80069ae:	e002      	b.n	80069b6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
          break;
 80069b4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	799b      	ldrb	r3, [r3, #6]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d039      	beq.n	8006a32 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	799b      	ldrb	r3, [r3, #6]
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d01c      	beq.n	8006a00 <LL_EXTI_Init+0xc4>
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	dc25      	bgt.n	8006a16 <LL_EXTI_Init+0xda>
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d002      	beq.n	80069d4 <LL_EXTI_Init+0x98>
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d00b      	beq.n	80069ea <LL_EXTI_Init+0xae>
 80069d2:	e020      	b.n	8006a16 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff ff9b 	bl	8006914 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7ff ff5e 	bl	80068a4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80069e8:	e024      	b.n	8006a34 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7ff ff6a 	bl	80068c8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7ff ff79 	bl	80068f0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80069fe:	e019      	b.n	8006a34 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff ff4d 	bl	80068a4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff ff6e 	bl	80068f0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006a14:	e00e      	b.n	8006a34 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	73fb      	strb	r3, [r7, #15]
            break;
 8006a1a:	e00b      	b.n	8006a34 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff ff05 	bl	8006830 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff ff26 	bl	800687c <LL_EXTI_DisableEvent_0_31>
 8006a30:	e000      	b.n	8006a34 <LL_EXTI_Init+0xf8>
      }
 8006a32:	bf00      	nop
  }
  return status;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <LL_GPIO_SetPinMode>:
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b089      	sub	sp, #36	; 0x24
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	fa93 f3a3 	rbit	r3, r3
 8006a58:	613b      	str	r3, [r7, #16]
  return result;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	fab3 f383 	clz	r3, r3
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	2103      	movs	r1, #3
 8006a66:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6a:	43db      	mvns	r3, r3
 8006a6c:	401a      	ands	r2, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	fa93 f3a3 	rbit	r3, r3
 8006a78:	61bb      	str	r3, [r7, #24]
  return result;
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	fab3 f383 	clz	r3, r3
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	601a      	str	r2, [r3, #0]
}
 8006a90:	bf00      	nop
 8006a92:	3724      	adds	r7, #36	; 0x24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <LL_GPIO_SetPinOutputType>:
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	43db      	mvns	r3, r3
 8006ab0:	401a      	ands	r2, r3
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	fb01 f303 	mul.w	r3, r1, r3
 8006aba:	431a      	orrs	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	605a      	str	r2, [r3, #4]
}
 8006ac0:	bf00      	nop
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <LL_GPIO_SetPinSpeed>:
{
 8006acc:	b480      	push	{r7}
 8006ace:	b089      	sub	sp, #36	; 0x24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	fa93 f3a3 	rbit	r3, r3
 8006ae6:	613b      	str	r3, [r7, #16]
  return result;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	fab3 f383 	clz	r3, r3
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	2103      	movs	r1, #3
 8006af4:	fa01 f303 	lsl.w	r3, r1, r3
 8006af8:	43db      	mvns	r3, r3
 8006afa:	401a      	ands	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	fa93 f3a3 	rbit	r3, r3
 8006b06:	61bb      	str	r3, [r7, #24]
  return result;
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	fab3 f383 	clz	r3, r3
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	fa01 f303 	lsl.w	r3, r1, r3
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	609a      	str	r2, [r3, #8]
}
 8006b1e:	bf00      	nop
 8006b20:	3724      	adds	r7, #36	; 0x24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <LL_GPIO_SetPinPull>:
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b089      	sub	sp, #36	; 0x24
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	fa93 f3a3 	rbit	r3, r3
 8006b44:	613b      	str	r3, [r7, #16]
  return result;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	fab3 f383 	clz	r3, r3
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	2103      	movs	r1, #3
 8006b52:	fa01 f303 	lsl.w	r3, r1, r3
 8006b56:	43db      	mvns	r3, r3
 8006b58:	401a      	ands	r2, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	fa93 f3a3 	rbit	r3, r3
 8006b64:	61bb      	str	r3, [r7, #24]
  return result;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	fab3 f383 	clz	r3, r3
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	fa01 f303 	lsl.w	r3, r1, r3
 8006b76:	431a      	orrs	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	60da      	str	r2, [r3, #12]
}
 8006b7c:	bf00      	nop
 8006b7e:	3724      	adds	r7, #36	; 0x24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <LL_GPIO_SetAFPin_0_7>:
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b089      	sub	sp, #36	; 0x24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a1a      	ldr	r2, [r3, #32]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	fa93 f3a3 	rbit	r3, r3
 8006ba2:	613b      	str	r3, [r7, #16]
  return result;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	fab3 f383 	clz	r3, r3
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	210f      	movs	r1, #15
 8006bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	401a      	ands	r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	fa93 f3a3 	rbit	r3, r3
 8006bc2:	61bb      	str	r3, [r7, #24]
  return result;
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	fab3 f383 	clz	r3, r3
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	621a      	str	r2, [r3, #32]
}
 8006bda:	bf00      	nop
 8006bdc:	3724      	adds	r7, #36	; 0x24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <LL_GPIO_SetAFPin_8_15>:
{
 8006be6:	b480      	push	{r7}
 8006be8:	b089      	sub	sp, #36	; 0x24
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	0a1b      	lsrs	r3, r3, #8
 8006bfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	fa93 f3a3 	rbit	r3, r3
 8006c02:	613b      	str	r3, [r7, #16]
  return result;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	fab3 f383 	clz	r3, r3
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	210f      	movs	r1, #15
 8006c10:	fa01 f303 	lsl.w	r3, r1, r3
 8006c14:	43db      	mvns	r3, r3
 8006c16:	401a      	ands	r2, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	0a1b      	lsrs	r3, r3, #8
 8006c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	fa93 f3a3 	rbit	r3, r3
 8006c24:	61bb      	str	r3, [r7, #24]
  return result;
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	fab3 f383 	clz	r3, r3
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	fa01 f303 	lsl.w	r3, r1, r3
 8006c36:	431a      	orrs	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006c3c:	bf00      	nop
 8006c3e:	3724      	adds	r7, #36	; 0x24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	fa93 f3a3 	rbit	r3, r3
 8006c66:	613b      	str	r3, [r7, #16]
  return result;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	fab3 f383 	clz	r3, r3
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006c72:	e051      	b.n	8006d18 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	2101      	movs	r1, #1
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c80:	4013      	ands	r3, r2
 8006c82:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d043      	beq.n	8006d12 <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d003      	beq.n	8006c9a <LL_GPIO_Init+0x52>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d10e      	bne.n	8006cb8 <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	69b9      	ldr	r1, [r7, #24]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff ff12 	bl	8006acc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	6819      	ldr	r1, [r3, #0]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7ff fef2 	bl	8006a9c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	69b9      	ldr	r1, [r7, #24]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff ff32 	bl	8006b2a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d11a      	bne.n	8006d04 <LL_GPIO_Init+0xbc>
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	fa93 f3a3 	rbit	r3, r3
 8006cd8:	60bb      	str	r3, [r7, #8]
  return result;
 8006cda:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006cdc:	fab3 f383 	clz	r3, r3
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b07      	cmp	r3, #7
 8006ce4:	d807      	bhi.n	8006cf6 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	461a      	mov	r2, r3
 8006cec:	69b9      	ldr	r1, [r7, #24]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff ff4a 	bl	8006b88 <LL_GPIO_SetAFPin_0_7>
 8006cf4:	e006      	b.n	8006d04 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	69b9      	ldr	r1, [r7, #24]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff ff71 	bl	8006be6 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	69b9      	ldr	r1, [r7, #24]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff fe96 	bl	8006a3e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	3301      	adds	r3, #1
 8006d16:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1a6      	bne.n	8006c74 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3720      	adds	r7, #32
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d30:	b084      	sub	sp, #16
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	f107 001c 	add.w	r0, r7, #28
 8006d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d126      	bne.n	8006d96 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	4b3f      	ldr	r3, [pc, #252]	; (8006e58 <USB_CoreInit+0x128>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f043 0210 	orr.w	r2, r3, #16
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d105      	bne.n	8006d8a <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fa10 	bl	80071b0 <USB_CoreReset>
 8006d90:	4603      	mov	r3, r0
 8006d92:	73fb      	strb	r3, [r7, #15]
 8006d94:	e048      	b.n	8006e28 <USB_CoreInit+0xf8>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d134      	bne.n	8006e06 <USB_CoreInit+0xd6>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	4b2a      	ldr	r3, [pc, #168]	; (8006e58 <USB_CoreInit+0x128>)
 8006dae:	4013      	ands	r3, r2
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f023 0210 	bic.w	r2, r3, #16
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	60da      	str	r2, [r3, #12]
#ifdef USBPHYC
    /* Enable USB HS PHY */
    USBx->GCCFG |= USB_OTG_GCCFG_PHYHSEN;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enables control of a High Speed USB PHY */
    if (USB_HS_PHYCInit(USBx) != HAL_OK)
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fa1d 	bl	8007218 <USB_HS_PHYCInit>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <USB_CoreInit+0xb8>
    {
      return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e02f      	b.n	8006e48 <USB_CoreInit+0x118>
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8006de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d105      	bne.n	8006dfa <USB_CoreInit+0xca>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f9d8 	bl	80071b0 <USB_CoreReset>
 8006e00:	4603      	mov	r3, r0
 8006e02:	73fb      	strb	r3, [r7, #15]
 8006e04:	e010      	b.n	8006e28 <USB_CoreInit+0xf8>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9cc 	bl	80071b0 <USB_CoreReset>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d10b      	bne.n	8006e46 <USB_CoreInit+0x116>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f043 0206 	orr.w	r2, r3, #6
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f043 0220 	orr.w	r2, r3, #32
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e52:	b004      	add	sp, #16
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	ffbdffbf 	.word	0xffbdffbf

08006e5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f043 0201 	orr.w	r2, r3, #1
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f023 0201 	bic.w	r2, r3, #1
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ebc:	78fb      	ldrb	r3, [r7, #3]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d115      	bne.n	8006eee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ece:	2001      	movs	r0, #1
 8006ed0:	f7fa fe7a 	bl	8001bc8 <HAL_Delay>
      ms++;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f95a 	bl	8007194 <USB_GetMode>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d01e      	beq.n	8006f24 <USB_SetCurrentMode+0x84>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b31      	cmp	r3, #49	; 0x31
 8006eea:	d9f0      	bls.n	8006ece <USB_SetCurrentMode+0x2e>
 8006eec:	e01a      	b.n	8006f24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006eee:	78fb      	ldrb	r3, [r7, #3]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d115      	bne.n	8006f20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f00:	2001      	movs	r0, #1
 8006f02:	f7fa fe61 	bl	8001bc8 <HAL_Delay>
      ms++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f941 	bl	8007194 <USB_GetMode>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <USB_SetCurrentMode+0x84>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b31      	cmp	r3, #49	; 0x31
 8006f1c:	d9f0      	bls.n	8006f00 <USB_SetCurrentMode+0x60>
 8006f1e:	e001      	b.n	8006f24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e005      	b.n	8006f30 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b32      	cmp	r3, #50	; 0x32
 8006f28:	d101      	bne.n	8006f2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e000      	b.n	8006f30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4a13      	ldr	r2, [pc, #76]	; (8006f9c <USB_FlushTxFifo+0x64>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d901      	bls.n	8006f58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e01b      	b.n	8006f90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	daf2      	bge.n	8006f46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	019b      	lsls	r3, r3, #6
 8006f68:	f043 0220 	orr.w	r2, r3, #32
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3301      	adds	r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4a08      	ldr	r2, [pc, #32]	; (8006f9c <USB_FlushTxFifo+0x64>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d901      	bls.n	8006f82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e006      	b.n	8006f90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	d0f0      	beq.n	8006f70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	00030d40 	.word	0x00030d40

08006fa0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4a11      	ldr	r2, [pc, #68]	; (8006ffc <USB_FlushRxFifo+0x5c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d901      	bls.n	8006fbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e018      	b.n	8006ff0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	daf2      	bge.n	8006fac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2210      	movs	r2, #16
 8006fce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4a08      	ldr	r2, [pc, #32]	; (8006ffc <USB_FlushRxFifo+0x5c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d901      	bls.n	8006fe2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e006      	b.n	8006ff0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f003 0310 	and.w	r3, r3, #16
 8006fea:	2b10      	cmp	r3, #16
 8006fec:	d0f0      	beq.n	8006fd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	00030d40 	.word	0x00030d40

08007000 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007000:	b480      	push	{r7}
 8007002:	b089      	sub	sp, #36	; 0x24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4611      	mov	r1, r2
 800700c:	461a      	mov	r2, r3
 800700e:	460b      	mov	r3, r1
 8007010:	71fb      	strb	r3, [r7, #7]
 8007012:	4613      	mov	r3, r2
 8007014:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800701e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007022:	2b00      	cmp	r3, #0
 8007024:	d123      	bne.n	800706e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007026:	88bb      	ldrh	r3, [r7, #4]
 8007028:	3303      	adds	r3, #3
 800702a:	089b      	lsrs	r3, r3, #2
 800702c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800702e:	2300      	movs	r3, #0
 8007030:	61bb      	str	r3, [r7, #24]
 8007032:	e018      	b.n	8007066 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	031a      	lsls	r2, r3, #12
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	4413      	add	r3, r2
 800703c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007040:	461a      	mov	r2, r3
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	3301      	adds	r3, #1
 800704c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	3301      	adds	r3, #1
 8007052:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	3301      	adds	r3, #1
 8007058:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	3301      	adds	r3, #1
 800705e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	3301      	adds	r3, #1
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	429a      	cmp	r2, r3
 800706c:	d3e2      	bcc.n	8007034 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3724      	adds	r7, #36	; 0x24
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800707c:	b480      	push	{r7}
 800707e:	b08b      	sub	sp, #44	; 0x2c
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	089b      	lsrs	r3, r3, #2
 8007096:	b29b      	uxth	r3, r3
 8007098:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	f003 0303 	and.w	r3, r3, #3
 80070a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80070a2:	2300      	movs	r3, #0
 80070a4:	623b      	str	r3, [r7, #32]
 80070a6:	e014      	b.n	80070d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	3301      	adds	r3, #1
 80070b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	3301      	adds	r3, #1
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	3301      	adds	r3, #1
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	3301      	adds	r3, #1
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	3301      	adds	r3, #1
 80070d0:	623b      	str	r3, [r7, #32]
 80070d2:	6a3a      	ldr	r2, [r7, #32]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d3e6      	bcc.n	80070a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80070da:	8bfb      	ldrh	r3, [r7, #30]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01e      	beq.n	800711e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ea:	461a      	mov	r2, r3
 80070ec:	f107 0310 	add.w	r3, r7, #16
 80070f0:	6812      	ldr	r2, [r2, #0]
 80070f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007100:	b2da      	uxtb	r2, r3
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	701a      	strb	r2, [r3, #0]
      i++;
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	3301      	adds	r3, #1
 800710a:	623b      	str	r3, [r7, #32]
      pDest++;
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	3301      	adds	r3, #1
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007112:	8bfb      	ldrh	r3, [r7, #30]
 8007114:	3b01      	subs	r3, #1
 8007116:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007118:	8bfb      	ldrh	r3, [r7, #30]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1ea      	bne.n	80070f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007120:	4618      	mov	r0, r3
 8007122:	372c      	adds	r7, #44	; 0x2c
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	4013      	ands	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007144:	68fb      	ldr	r3, [r7, #12]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007152:	b480      	push	{r7}
 8007154:	b085      	sub	sp, #20
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007172:	78fb      	ldrb	r3, [r7, #3]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4413      	add	r3, r2
 800717a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	4013      	ands	r3, r2
 8007184:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007186:	68bb      	ldr	r3, [r7, #8]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	f003 0301 	and.w	r3, r3, #1
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3301      	adds	r3, #1
 80071c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	4a13      	ldr	r2, [pc, #76]	; (8007214 <USB_CoreReset+0x64>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d901      	bls.n	80071ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e01b      	b.n	8007206 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	daf2      	bge.n	80071bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f043 0201 	orr.w	r2, r3, #1
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3301      	adds	r3, #1
 80071ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4a09      	ldr	r2, [pc, #36]	; (8007214 <USB_CoreReset+0x64>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d901      	bls.n	80071f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e006      	b.n	8007206 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b01      	cmp	r3, #1
 8007202:	d0f0      	beq.n	80071e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	00030d40 	.word	0x00030d40

08007218 <USB_HS_PHYCInit>:
  *         Init the low level hardware : GPIO, CLOCK, NVIC...
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_HS_PHYCInit(USB_OTG_GlobalTypeDef *USBx)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  __IO uint32_t count = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	60fb      	str	r3, [r7, #12]

  /* Enable LDO */
  USB_HS_PHYC->USB_HS_PHYC_LDO |= USB_HS_PHYC_LDO_ENABLE;
 8007224:	4b16      	ldr	r3, [pc, #88]	; (8007280 <USB_HS_PHYCInit+0x68>)
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	4a15      	ldr	r2, [pc, #84]	; (8007280 <USB_HS_PHYCInit+0x68>)
 800722a:	f043 0304 	orr.w	r3, r3, #4
 800722e:	6193      	str	r3, [r2, #24]

  /* wait for LDO Ready */
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8007230:	e008      	b.n	8007244 <USB_HS_PHYCInit+0x2c>
  {
    count++;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	3301      	adds	r3, #1
 8007236:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4a12      	ldr	r2, [pc, #72]	; (8007284 <USB_HS_PHYCInit+0x6c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d901      	bls.n	8007244 <USB_HS_PHYCInit+0x2c>
    {
      return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e019      	b.n	8007278 <USB_HS_PHYCInit+0x60>
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8007244:	4b0e      	ldr	r3, [pc, #56]	; (8007280 <USB_HS_PHYCInit+0x68>)
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d0f0      	beq.n	8007232 <USB_HS_PHYCInit+0x1a>
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x4U << 1);
  }
  else if (HSE_VALUE == 25000000U) /* HSE = 25MHz */
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x5U << 1);
 8007250:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <USB_HS_PHYCInit+0x68>)
 8007252:	220a      	movs	r2, #10
 8007254:	601a      	str	r2, [r3, #0]
  {
    /* ... */
  }

  /* Control the tuning interface of the High Speed PHY */
  USB_HS_PHYC->USB_HS_PHYC_TUNE |= USB_HS_PHYC_TUNE_VALUE;
 8007256:	4b0a      	ldr	r3, [pc, #40]	; (8007280 <USB_HS_PHYCInit+0x68>)
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	4909      	ldr	r1, [pc, #36]	; (8007280 <USB_HS_PHYCInit+0x68>)
 800725c:	f640 7313 	movw	r3, #3859	; 0xf13
 8007260:	4313      	orrs	r3, r2
 8007262:	60cb      	str	r3, [r1, #12]

  /* Enable PLL internal PHY */
  USB_HS_PHYC->USB_HS_PHYC_PLL |= USB_HS_PHYC_PLL_PLLEN;
 8007264:	4b06      	ldr	r3, [pc, #24]	; (8007280 <USB_HS_PHYCInit+0x68>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a05      	ldr	r2, [pc, #20]	; (8007280 <USB_HS_PHYCInit+0x68>)
 800726a:	f043 0301 	orr.w	r3, r3, #1
 800726e:	6013      	str	r3, [r2, #0]


  /* 2ms Delay required to get internal phy clock stable */
  HAL_Delay(2U);
 8007270:	2002      	movs	r0, #2
 8007272:	f7fa fca9 	bl	8001bc8 <HAL_Delay>

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40017c00 	.word	0x40017c00
 8007284:	00030d40 	.word	0x00030d40

08007288 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007288:	b084      	sub	sp, #16
 800728a:	b580      	push	{r7, lr}
 800728c:	b086      	sub	sp, #24
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072a8:	461a      	mov	r2, r3
 80072aa:	2300      	movs	r3, #0
 80072ac:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d018      	beq.n	80072f8 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80072c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d10a      	bne.n	80072e2 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072da:	f043 0304 	orr.w	r3, r3, #4
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	e014      	b.n	800730c <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072f0:	f023 0304 	bic.w	r3, r3, #4
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	e009      	b.n	800730c <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007306:	f023 0304 	bic.w	r3, r3, #4
 800730a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800730c:	2110      	movs	r1, #16
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff fe12 	bl	8006f38 <USB_FlushTxFifo>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff fe3e 	bl	8006fa0 <USB_FlushRxFifo>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800732e:	2300      	movs	r3, #0
 8007330:	613b      	str	r3, [r7, #16]
 8007332:	e015      	b.n	8007360 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007340:	461a      	mov	r2, r3
 8007342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007346:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4413      	add	r3, r2
 8007350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007354:	461a      	mov	r2, r3
 8007356:	2300      	movs	r3, #0
 8007358:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	3301      	adds	r3, #1
 800735e:	613b      	str	r3, [r7, #16]
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	429a      	cmp	r2, r3
 8007366:	d3e5      	bcc.n	8007334 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007374:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00b      	beq.n	800739a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007388:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a13      	ldr	r2, [pc, #76]	; (80073dc <USB_HostInit+0x154>)
 800738e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a13      	ldr	r2, [pc, #76]	; (80073e0 <USB_HostInit+0x158>)
 8007394:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007398:	e009      	b.n	80073ae <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2280      	movs	r2, #128	; 0x80
 800739e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a10      	ldr	r2, [pc, #64]	; (80073e4 <USB_HostInit+0x15c>)
 80073a4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a0f      	ldr	r2, [pc, #60]	; (80073e8 <USB_HostInit+0x160>)
 80073aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d105      	bne.n	80073c0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	f043 0210 	orr.w	r2, r3, #16
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	699a      	ldr	r2, [r3, #24]
 80073c4:	4b09      	ldr	r3, [pc, #36]	; (80073ec <USB_HostInit+0x164>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80073cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073d8:	b004      	add	sp, #16
 80073da:	4770      	bx	lr
 80073dc:	01000200 	.word	0x01000200
 80073e0:	00e00300 	.word	0x00e00300
 80073e4:	00600080 	.word	0x00600080
 80073e8:	004000e0 	.word	0x004000e0
 80073ec:	a3200008 	.word	0xa3200008

080073f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800740e:	f023 0303 	bic.w	r3, r3, #3
 8007412:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	68f9      	ldr	r1, [r7, #12]
 8007424:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007428:	4313      	orrs	r3, r2
 800742a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800742c:	78fb      	ldrb	r3, [r7, #3]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d107      	bne.n	8007442 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007438:	461a      	mov	r2, r3
 800743a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800743e:	6053      	str	r3, [r2, #4]
 8007440:	e009      	b.n	8007456 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007442:	78fb      	ldrb	r3, [r7, #3]
 8007444:	2b02      	cmp	r3, #2
 8007446:	d106      	bne.n	8007456 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800744e:	461a      	mov	r2, r3
 8007450:	f241 7370 	movw	r3, #6000	; 0x1770
 8007454:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007484:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800748e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007492:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007494:	2064      	movs	r0, #100	; 0x64
 8007496:	f7fa fb97 	bl	8001bc8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80074a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80074a8:	200a      	movs	r0, #10
 80074aa:	f7fa fb8d 	bl	8001bc8 <HAL_Delay>

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80074dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d109      	bne.n	80074fc <USB_DriveVbus+0x44>
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d106      	bne.n	80074fc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80074f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074fa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007506:	d109      	bne.n	800751c <USB_DriveVbus+0x64>
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d106      	bne.n	800751c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800751a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800752a:	b480      	push	{r7}
 800752c:	b085      	sub	sp, #20
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	0c5b      	lsrs	r3, r3, #17
 8007548:	f003 0303 	and.w	r3, r3, #3
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	b29b      	uxth	r3, r3
}
 800756e:	4618      	mov	r0, r3
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
	...

0800757c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	4608      	mov	r0, r1
 8007586:	4611      	mov	r1, r2
 8007588:	461a      	mov	r2, r3
 800758a:	4603      	mov	r3, r0
 800758c:	70fb      	strb	r3, [r7, #3]
 800758e:	460b      	mov	r3, r1
 8007590:	70bb      	strb	r3, [r7, #2]
 8007592:	4613      	mov	r3, r2
 8007594:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800759e:	78fb      	ldrb	r3, [r7, #3]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075aa:	461a      	mov	r2, r3
 80075ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80075b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d87e      	bhi.n	80076b8 <USB_HC_Init+0x13c>
 80075ba:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <USB_HC_Init+0x44>)
 80075bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c0:	080075d1 	.word	0x080075d1
 80075c4:	0800767b 	.word	0x0800767b
 80075c8:	080075d1 	.word	0x080075d1
 80075cc:	0800763d 	.word	0x0800763d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075dc:	461a      	mov	r2, r3
 80075de:	f240 439d 	movw	r3, #1181	; 0x49d
 80075e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80075e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	da10      	bge.n	800760e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	78fa      	ldrb	r2, [r7, #3]
 80075fc:	0151      	lsls	r1, r2, #5
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	440a      	add	r2, r1
 8007602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800760a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800760c:	e057      	b.n	80076be <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007616:	2b00      	cmp	r3, #0
 8007618:	d051      	beq.n	80076be <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	4413      	add	r3, r2
 8007622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	78fa      	ldrb	r2, [r7, #3]
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	440a      	add	r2, r1
 8007630:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007634:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007638:	60d3      	str	r3, [r2, #12]
      break;
 800763a:	e040      	b.n	80076be <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	4413      	add	r3, r2
 8007644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007648:	461a      	mov	r2, r3
 800764a:	f240 639d 	movw	r3, #1693	; 0x69d
 800764e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007650:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007654:	2b00      	cmp	r3, #0
 8007656:	da34      	bge.n	80076c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007658:	78fb      	ldrb	r3, [r7, #3]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	4413      	add	r3, r2
 8007660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	78fa      	ldrb	r2, [r7, #3]
 8007668:	0151      	lsls	r1, r2, #5
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	440a      	add	r2, r1
 800766e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007676:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007678:	e023      	b.n	80076c2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800767a:	78fb      	ldrb	r3, [r7, #3]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	4413      	add	r3, r2
 8007682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007686:	461a      	mov	r2, r3
 8007688:	f240 2325 	movw	r3, #549	; 0x225
 800768c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800768e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007692:	2b00      	cmp	r3, #0
 8007694:	da17      	bge.n	80076c6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007696:	78fb      	ldrb	r3, [r7, #3]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	4413      	add	r3, r2
 800769e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	78fa      	ldrb	r2, [r7, #3]
 80076a6:	0151      	lsls	r1, r2, #5
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	440a      	add	r2, r1
 80076ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076b0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80076b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80076b6:	e006      	b.n	80076c6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	77fb      	strb	r3, [r7, #31]
      break;
 80076bc:	e004      	b.n	80076c8 <USB_HC_Init+0x14c>
      break;
 80076be:	bf00      	nop
 80076c0:	e002      	b.n	80076c8 <USB_HC_Init+0x14c>
      break;
 80076c2:	bf00      	nop
 80076c4:	e000      	b.n	80076c8 <USB_HC_Init+0x14c>
      break;
 80076c6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	78fa      	ldrb	r2, [r7, #3]
 80076d8:	0151      	lsls	r1, r2, #5
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	440a      	add	r2, r1
 80076de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076e2:	f043 0302 	orr.w	r3, r3, #2
 80076e6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ee:	699a      	ldr	r2, [r3, #24]
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	f003 030f 	and.w	r3, r3, #15
 80076f6:	2101      	movs	r1, #1
 80076f8:	fa01 f303 	lsl.w	r3, r1, r3
 80076fc:	6939      	ldr	r1, [r7, #16]
 80076fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007702:	4313      	orrs	r3, r2
 8007704:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007712:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007716:	2b00      	cmp	r3, #0
 8007718:	da03      	bge.n	8007722 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800771a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800771e:	61bb      	str	r3, [r7, #24]
 8007720:	e001      	b.n	8007726 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7ff feff 	bl	800752a <USB_GetHostSpeed>
 800772c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800772e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007732:	2b02      	cmp	r3, #2
 8007734:	d106      	bne.n	8007744 <USB_HC_Init+0x1c8>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2b02      	cmp	r3, #2
 800773a:	d003      	beq.n	8007744 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800773c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	e001      	b.n	8007748 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007748:	787b      	ldrb	r3, [r7, #1]
 800774a:	059b      	lsls	r3, r3, #22
 800774c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007750:	78bb      	ldrb	r3, [r7, #2]
 8007752:	02db      	lsls	r3, r3, #11
 8007754:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007758:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800775a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800775e:	049b      	lsls	r3, r3, #18
 8007760:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007764:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007766:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007768:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800776c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	0159      	lsls	r1, r3, #5
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	440b      	add	r3, r1
 800777a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007784:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007786:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800778a:	2b03      	cmp	r3, #3
 800778c:	d003      	beq.n	8007796 <USB_HC_Init+0x21a>
 800778e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007792:	2b01      	cmp	r3, #1
 8007794:	d10f      	bne.n	80077b6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007796:	78fb      	ldrb	r3, [r7, #3]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	4413      	add	r3, r2
 800779e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	78fa      	ldrb	r2, [r7, #3]
 80077a6:	0151      	lsls	r1, r2, #5
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	440a      	add	r2, r1
 80077ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077b4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80077b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3720      	adds	r7, #32
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b08c      	sub	sp, #48	; 0x30
 80077c4:	af02      	add	r7, sp, #8
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	785b      	ldrb	r3, [r3, #1]
 80077d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80077d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077dc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d02d      	beq.n	8007846 <USB_HC_StartXfer+0x86>
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	791b      	ldrb	r3, [r3, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d129      	bne.n	8007846 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d117      	bne.n	8007828 <USB_HC_StartXfer+0x68>
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	79db      	ldrb	r3, [r3, #7]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d003      	beq.n	8007808 <USB_HC_StartXfer+0x48>
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	79db      	ldrb	r3, [r3, #7]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d10f      	bne.n	8007828 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	4413      	add	r3, r2
 8007810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	69fa      	ldr	r2, [r7, #28]
 8007818:	0151      	lsls	r1, r2, #5
 800781a:	6a3a      	ldr	r2, [r7, #32]
 800781c:	440a      	add	r2, r1
 800781e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007826:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007828:	79fb      	ldrb	r3, [r7, #7]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10b      	bne.n	8007846 <USB_HC_StartXfer+0x86>
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	795b      	ldrb	r3, [r3, #5]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d107      	bne.n	8007846 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	785b      	ldrb	r3, [r3, #1]
 800783a:	4619      	mov	r1, r3
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fa0f 	bl	8007c60 <USB_DoPing>
      return HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	e0f8      	b.n	8007a38 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d018      	beq.n	8007880 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	8912      	ldrh	r2, [r2, #8]
 8007856:	4413      	add	r3, r2
 8007858:	3b01      	subs	r3, #1
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	8912      	ldrh	r2, [r2, #8]
 800785e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007862:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007864:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007866:	8b7b      	ldrh	r3, [r7, #26]
 8007868:	429a      	cmp	r2, r3
 800786a:	d90b      	bls.n	8007884 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800786c:	8b7b      	ldrh	r3, [r7, #26]
 800786e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007870:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	8912      	ldrh	r2, [r2, #8]
 8007876:	fb03 f202 	mul.w	r2, r3, r2
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	611a      	str	r2, [r3, #16]
 800787e:	e001      	b.n	8007884 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007880:	2301      	movs	r3, #1
 8007882:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	78db      	ldrb	r3, [r3, #3]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d007      	beq.n	800789c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800788c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	8912      	ldrh	r2, [r2, #8]
 8007892:	fb03 f202 	mul.w	r2, r3, r2
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	611a      	str	r2, [r3, #16]
 800789a:	e003      	b.n	80078a4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	695a      	ldr	r2, [r3, #20]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80078ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80078ae:	04d9      	lsls	r1, r3, #19
 80078b0:	4b63      	ldr	r3, [pc, #396]	; (8007a40 <USB_HC_StartXfer+0x280>)
 80078b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	7a9b      	ldrb	r3, [r3, #10]
 80078ba:	075b      	lsls	r3, r3, #29
 80078bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078c0:	69f9      	ldr	r1, [r7, #28]
 80078c2:	0148      	lsls	r0, r1, #5
 80078c4:	6a39      	ldr	r1, [r7, #32]
 80078c6:	4401      	add	r1, r0
 80078c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80078cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80078d0:	79fb      	ldrb	r3, [r7, #7]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d009      	beq.n	80078ea <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	68d9      	ldr	r1, [r3, #12]
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078e6:	460a      	mov	r2, r1
 80078e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	bf0c      	ite	eq
 80078fa:	2301      	moveq	r3, #1
 80078fc:	2300      	movne	r3, #0
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	4413      	add	r3, r2
 800790a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	69fa      	ldr	r2, [r7, #28]
 8007912:	0151      	lsls	r1, r2, #5
 8007914:	6a3a      	ldr	r2, [r7, #32]
 8007916:	440a      	add	r2, r1
 8007918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800791c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007920:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	4413      	add	r3, r2
 800792a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	7e7b      	ldrb	r3, [r7, #25]
 8007932:	075b      	lsls	r3, r3, #29
 8007934:	69f9      	ldr	r1, [r7, #28]
 8007936:	0148      	lsls	r0, r1, #5
 8007938:	6a39      	ldr	r1, [r7, #32]
 800793a:	4401      	add	r1, r0
 800793c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007940:	4313      	orrs	r3, r2
 8007942:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	4413      	add	r3, r2
 800794c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800795a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	78db      	ldrb	r3, [r3, #3]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d004      	beq.n	800796e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800796a:	613b      	str	r3, [r7, #16]
 800796c:	e003      	b.n	8007976 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007974:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800797c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	4413      	add	r3, r2
 8007986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800798a:	461a      	mov	r2, r3
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007990:	79fb      	ldrb	r3, [r7, #7]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	e04e      	b.n	8007a38 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	78db      	ldrb	r3, [r3, #3]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d149      	bne.n	8007a36 <USB_HC_StartXfer+0x276>
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d045      	beq.n	8007a36 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	79db      	ldrb	r3, [r3, #7]
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d830      	bhi.n	8007a14 <USB_HC_StartXfer+0x254>
 80079b2:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <USB_HC_StartXfer+0x1f8>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	080079c9 	.word	0x080079c9
 80079bc:	080079ed 	.word	0x080079ed
 80079c0:	080079c9 	.word	0x080079c9
 80079c4:	080079ed 	.word	0x080079ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	3303      	adds	r3, #3
 80079ce:	089b      	lsrs	r3, r3, #2
 80079d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80079d2:	8afa      	ldrh	r2, [r7, #22]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	b29b      	uxth	r3, r3
 80079da:	429a      	cmp	r2, r3
 80079dc:	d91c      	bls.n	8007a18 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	f043 0220 	orr.w	r2, r3, #32
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80079ea:	e015      	b.n	8007a18 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	3303      	adds	r3, #3
 80079f2:	089b      	lsrs	r3, r3, #2
 80079f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80079f6:	8afa      	ldrh	r2, [r7, #22]
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d90a      	bls.n	8007a1c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a12:	e003      	b.n	8007a1c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007a14:	bf00      	nop
 8007a16:	e002      	b.n	8007a1e <USB_HC_StartXfer+0x25e>
        break;
 8007a18:	bf00      	nop
 8007a1a:	e000      	b.n	8007a1e <USB_HC_StartXfer+0x25e>
        break;
 8007a1c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	68d9      	ldr	r1, [r3, #12]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	785a      	ldrb	r2, [r3, #1]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	9000      	str	r0, [sp, #0]
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f7ff fae5 	bl	8007000 <USB_WritePacket>
  }

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3728      	adds	r7, #40	; 0x28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	1ff80000 	.word	0x1ff80000

08007a44 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	b29b      	uxth	r3, r3
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b089      	sub	sp, #36	; 0x24
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007a76:	78fb      	ldrb	r3, [r7, #3]
 8007a78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	0c9b      	lsrs	r3, r3, #18
 8007a8e:	f003 0303 	and.w	r3, r3, #3
 8007a92:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	0fdb      	lsrs	r3, r3, #31
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d104      	bne.n	8007ac0 <USB_HC_Halt+0x5a>
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	e0c8      	b.n	8007c52 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <USB_HC_Halt+0x66>
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d163      	bne.n	8007b94 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	0151      	lsls	r1, r2, #5
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	440a      	add	r2, r1
 8007ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ae6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007aea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f003 0320 	and.w	r3, r3, #32
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f040 80ab 	bne.w	8007c50 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d133      	bne.n	8007b6e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	0151      	lsls	r1, r2, #5
 8007b18:	69fa      	ldr	r2, [r7, #28]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b24:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	0151      	lsls	r1, r2, #5
 8007b38:	69fa      	ldr	r2, [r7, #28]
 8007b3a:	440a      	add	r2, r1
 8007b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b44:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b52:	d81d      	bhi.n	8007b90 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b6a:	d0ec      	beq.n	8007b46 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b6c:	e070      	b.n	8007c50 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	0151      	lsls	r1, r2, #5
 8007b80:	69fa      	ldr	r2, [r7, #28]
 8007b82:	440a      	add	r2, r1
 8007b84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b8c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b8e:	e05f      	b.n	8007c50 <USB_HC_Halt+0x1ea>
            break;
 8007b90:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b92:	e05d      	b.n	8007c50 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	0151      	lsls	r1, r2, #5
 8007ba6:	69fa      	ldr	r2, [r7, #28]
 8007ba8:	440a      	add	r2, r1
 8007baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bb2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d133      	bne.n	8007c2c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69ba      	ldr	r2, [r7, #24]
 8007bd4:	0151      	lsls	r1, r2, #5
 8007bd6:	69fa      	ldr	r2, [r7, #28]
 8007bd8:	440a      	add	r2, r1
 8007bda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007be2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	0151      	lsls	r1, r2, #5
 8007bf6:	69fa      	ldr	r2, [r7, #28]
 8007bf8:	440a      	add	r2, r1
 8007bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c02:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3301      	adds	r3, #1
 8007c08:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c10:	d81d      	bhi.n	8007c4e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c28:	d0ec      	beq.n	8007c04 <USB_HC_Halt+0x19e>
 8007c2a:	e011      	b.n	8007c50 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	0151      	lsls	r1, r2, #5
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	440a      	add	r2, r1
 8007c42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	e000      	b.n	8007c50 <USB_HC_Halt+0x1ea>
          break;
 8007c4e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3724      	adds	r7, #36	; 0x24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
	...

08007c60 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007c74:	2301      	movs	r3, #1
 8007c76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	04da      	lsls	r2, r3, #19
 8007c7c:	4b15      	ldr	r3, [pc, #84]	; (8007cd4 <USB_DoPing+0x74>)
 8007c7e:	4013      	ands	r3, r2
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	0151      	lsls	r1, r2, #5
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	440a      	add	r2, r1
 8007c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c90:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ca8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cb0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	1ff80000 	.word	0x1ff80000

08007cd8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff f8c6 	bl	8006e7e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007cf2:	2110      	movs	r1, #16
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff f91f 	bl	8006f38 <USB_FlushTxFifo>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff f94b 	bl	8006fa0 <USB_FlushRxFifo>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007d14:	2300      	movs	r3, #0
 8007d16:	61bb      	str	r3, [r7, #24]
 8007d18:	e01f      	b.n	8007d5a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d30:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d38:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d40:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d4e:	461a      	mov	r2, r3
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	3301      	adds	r3, #1
 8007d58:	61bb      	str	r3, [r7, #24]
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	2b0f      	cmp	r3, #15
 8007d5e:	d9dc      	bls.n	8007d1a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007d60:	2300      	movs	r3, #0
 8007d62:	61bb      	str	r3, [r7, #24]
 8007d64:	e034      	b.n	8007dd0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d7c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d84:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d8c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3301      	adds	r3, #1
 8007da4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dac:	d80c      	bhi.n	8007dc8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dc4:	d0ec      	beq.n	8007da0 <USB_StopHost+0xc8>
 8007dc6:	e000      	b.n	8007dca <USB_StopHost+0xf2>
        break;
 8007dc8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	61bb      	str	r3, [r7, #24]
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	2b0f      	cmp	r3, #15
 8007dd4:	d9c7      	bls.n	8007d66 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ddc:	461a      	mov	r2, r3
 8007dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007de2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff f835 	bl	8006e5c <USB_EnableGlobalInt>

  return ret;
 8007df2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3720      	adds	r7, #32
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBH_HID_InterfaceInit>:
 phost->pActiveClass->iface_initnum  - variable where last index of an active interface is hold. It
 is used as an index of HID_Handle index as well.

 phost->pActiveClass->interfaces - this variable hold all successfully initialised interfaces.
 */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost) {
 8007dfc:	b5b0      	push	{r4, r5, r7, lr}
 8007dfe:	b08c      	sub	sp, #48	; 0x30
 8007e00:	af04      	add	r7, sp, #16
 8007e02:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8007e04:	2301      	movs	r3, #1
 8007e06:	77fb      	strb	r3, [r7, #31]
	USBH_StatusTypeDef ctlStatus = USBH_BUSY;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	77bb      	strb	r3, [r7, #30]
	HID_HandleTypeDef *HID_Handle;
	USBH_InterfaceDescTypeDef *Itf_Desc;

	uint8_t iface_num = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	76fb      	strb	r3, [r7, #27]
	uint8_t i = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	777b      	strb	r3, [r7, #29]
	uint8_t max_ep;
	uint8_t num = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	773b      	strb	r3, [r7, #28]

	switch (phost->pActiveClass->iface_init) {
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e1e:	7f9b      	ldrb	r3, [r3, #30]
 8007e20:	2b07      	cmp	r3, #7
 8007e22:	f200 829f 	bhi.w	8008364 <USBH_HID_InterfaceInit+0x568>
 8007e26:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <USBH_HID_InterfaceInit+0x30>)
 8007e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2c:	08007e4d 	.word	0x08007e4d
 8007e30:	08007eff 	.word	0x08007eff
 8007e34:	08007f75 	.word	0x08007f75
 8007e38:	08007fed 	.word	0x08007fed
 8007e3c:	080080c7 	.word	0x080080c7
 8007e40:	08008223 	.word	0x08008223
 8007e44:	08008253 	.word	0x08008253
 8007e48:	08008309 	.word	0x08008309
	case IFACE_INIT: {

		phost->pActiveClass->iface_initnum = 0U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e52:	2200      	movs	r2, #0
 8007e54:	775a      	strb	r2, [r3, #29]

		//init all possible HID_Handlers even if not all will be used.

		for (; i < USBH_MAX_NUM_INTERFACES; i++) {
 8007e56:	e044      	b.n	8007ee2 <USBH_HID_InterfaceInit+0xe6>
			phost->pActiveClass->pData[i] = (HID_HandleTypeDef*) USBH_malloc(
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 4380 	ldr.w	r4, [r3, #896]	; 0x380
 8007e5e:	7f7d      	ldrb	r5, [r7, #29]
 8007e60:	206c      	movs	r0, #108	; 0x6c
 8007e62:	f006 f815 	bl	800de90 <malloc>
 8007e66:	4603      	mov	r3, r0
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f105 0308 	add.w	r3, r5, #8
 8007e6e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
					sizeof(HID_HandleTypeDef));
			HID_Handle = (HID_HandleTypeDef*) phost->pActiveClass->pData[i];
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e78:	7f7a      	ldrb	r2, [r7, #29]
 8007e7a:	3208      	adds	r2, #8
 8007e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e80:	617b      	str	r3, [r7, #20]
			memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8007e82:	226c      	movs	r2, #108	; 0x6c
 8007e84:	2100      	movs	r1, #0
 8007e86:	6978      	ldr	r0, [r7, #20]
 8007e88:	f006 f812 	bl	800deb0 <memset>

			// HID_Handle = phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
			HID_Handle->state = HID_INIT;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	709a      	strb	r2, [r3, #2]
			HID_Handle->ctl_state = HID_REQ_INIT;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2200      	movs	r2, #0
 8007e96:	715a      	strb	r2, [r3, #5]
			HID_Handle->ep_addr =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].bEndpointAddress;
 8007e98:	7f7b      	ldrb	r3, [r7, #29]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	211a      	movs	r1, #26
 8007e9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ea8:	781a      	ldrb	r2, [r3, #0]
			HID_Handle->ep_addr =
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	769a      	strb	r2, [r3, #26]
			HID_Handle->length =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].wMaxPacketSize;
 8007eae:	7f7b      	ldrb	r3, [r7, #29]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	211a      	movs	r1, #26
 8007eb4:	fb01 f303 	mul.w	r3, r1, r3
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ebe:	881a      	ldrh	r2, [r3, #0]
			HID_Handle->length =
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	831a      	strh	r2, [r3, #24]
			HID_Handle->poll =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].bInterval;
 8007ec4:	7f7b      	ldrb	r3, [r7, #29]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	211a      	movs	r1, #26
 8007eca:	fb01 f303 	mul.w	r3, r1, r3
 8007ece:	4413      	add	r3, r2
 8007ed0:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	b29a      	uxth	r2, r3
			HID_Handle->poll =
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	839a      	strh	r2, [r3, #28]
		for (; i < USBH_MAX_NUM_INTERFACES; i++) {
 8007edc:	7f7b      	ldrb	r3, [r7, #29]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	777b      	strb	r3, [r7, #29]
 8007ee2:	7f7b      	ldrb	r3, [r7, #29]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d9b7      	bls.n	8007e58 <USBH_HID_InterfaceInit+0x5c>

		}
		phost->pActiveClass->interfaces = 0U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007eee:	2200      	movs	r2, #0
 8007ef0:	771a      	strb	r2, [r3, #28]
		phost->pActiveClass->iface_init = IFACE_READHID;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ef8:	2201      	movs	r2, #1
 8007efa:	779a      	strb	r2, [r3, #30]

	}
		break;
 8007efc:	e232      	b.n	8008364 <USBH_HID_InterfaceInit+0x568>

	case IFACE_READHID: {
		iface_num =
				phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum].bInterfaceNumber;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f04:	7f5b      	ldrb	r3, [r3, #29]
 8007f06:	4619      	mov	r1, r3
		iface_num =
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	231a      	movs	r3, #26
 8007f0c:	fb01 f303 	mul.w	r3, r1, r3
 8007f10:	4413      	add	r3, r2
 8007f12:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	76fb      	strb	r3, [r7, #27]
		USBH_SelectInterface(phost, iface_num);
 8007f1a:	7efb      	ldrb	r3, [r7, #27]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f004 f8c5 	bl	800c0ae <USBH_SelectInterface>

		if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE,
				phost->pActiveClass->iface_initnum) == USBH_OK) {
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
		if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE,
 8007f2a:	7f5b      	ldrb	r3, [r3, #29]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	2109      	movs	r1, #9
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fba3 	bl	800867c <USBH_HID_GetHIDDescriptor>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f040 820c 	bne.w	8008356 <USBH_HID_InterfaceInit+0x55a>

			HID_Handle =
					phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 8007f4a:	7f52      	ldrb	r2, [r2, #29]
			HID_Handle =
 8007f4c:	3208      	adds	r2, #8
 8007f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f52:	617b      	str	r3, [r7, #20]
			USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f60:	4619      	mov	r1, r3
 8007f62:	4610      	mov	r0, r2
 8007f64:	f000 fbf7 	bl	8008756 <USBH_HID_ParseHIDDesc>
			phost->pActiveClass->iface_init = IFACE_READHIDRPTDESC;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f6e:	2202      	movs	r2, #2
 8007f70:	779a      	strb	r2, [r3, #30]
		} else {
			//TODO Check if device is XBOX360 game controller as it doesn't do HID Descriptors aparently
		}

	}
		break;
 8007f72:	e1f0      	b.n	8008356 <USBH_HID_InterfaceInit+0x55a>

	case IFACE_READHIDRPTDESC: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 8007f80:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 8007f82:	3208      	adds	r2, #8
 8007f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f88:	617b      	str	r3, [r7, #20]
		iface_num =
				phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum].bInterfaceNumber;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f90:	7f5b      	ldrb	r3, [r3, #29]
 8007f92:	4619      	mov	r1, r3
		iface_num =
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	231a      	movs	r3, #26
 8007f98:	fb01 f303 	mul.w	r3, r1, r3
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	76fb      	strb	r3, [r7, #27]
		USBH_SelectInterface(phost, iface_num);
 8007fa6:	7efb      	ldrb	r3, [r7, #27]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f004 f87f 	bl	800c0ae <USBH_SelectInterface>

		if (USBH_HID_GetHIDReportDescriptor(phost,
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
				HID_Handle->HID_Desc.wItemLength,
				phost->pActiveClass->iface_initnum) == USBH_OK) {
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
		if (USBH_HID_GetHIDReportDescriptor(phost,
 8007fba:	7f5b      	ldrb	r3, [r3, #29]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fb3f 	bl	8008642 <USBH_HID_GetHIDReportDescriptor>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f040 81c7 	bne.w	800835a <USBH_HID_InterfaceInit+0x55e>

			parse_report_descriptor(phost->device.Data,
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f503 708e 	add.w	r0, r3, #284	; 0x11c
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	3330      	adds	r3, #48	; 0x30
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f001 fb74 	bl	80096c8 <parse_report_descriptor>
					HID_Handle->HID_Desc.wItemLength,
					&(HID_Handle->HID_Desc.RptDesc));

			phost->pActiveClass->iface_init = IFACE_INITSUBCLASS;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fe6:	2203      	movs	r2, #3
 8007fe8:	779a      	strb	r2, [r3, #30]
		}
	}
		break;
 8007fea:	e1b6      	b.n	800835a <USBH_HID_InterfaceInit+0x55e>

	case IFACE_INITSUBCLASS: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 8007ff8:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 8007ffa:	3208      	adds	r2, #8
 8007ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008000:	617b      	str	r3, [r7, #20]

		Itf_Desc =
				&phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum];
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008008:	7f5b      	ldrb	r3, [r3, #29]
 800800a:	461a      	mov	r2, r3
		Itf_Desc =
 800800c:	231a      	movs	r3, #26
 800800e:	fb02 f303 	mul.w	r3, r2, r3
 8008012:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	4413      	add	r3, r2
 800801a:	330a      	adds	r3, #10
 800801c:	613b      	str	r3, [r7, #16]

		if ((Itf_Desc->bInterfaceClass == 0x03
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	795b      	ldrb	r3, [r3, #5]
 8008022:	2b03      	cmp	r3, #3
 8008024:	d107      	bne.n	8008036 <USBH_HID_InterfaceInit+0x23a>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	799b      	ldrb	r3, [r3, #6]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d103      	bne.n	8008036 <USBH_HID_InterfaceInit+0x23a>
				&& Itf_Desc->bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	79db      	ldrb	r3, [r3, #7]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d007      	beq.n	8008046 <USBH_HID_InterfaceInit+0x24a>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD))
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800803c:	f003 0303 	and.w	r3, r3, #3
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d109      	bne.n	800805a <USBH_HID_InterfaceInit+0x25e>

				{
			HID_Handle->Init = USBH_HID_KeybdInit;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	4aac      	ldr	r2, [pc, #688]	; (80082fc <USBH_HID_InterfaceInit+0x500>)
 800804a:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008052:	7f1a      	ldrb	r2, [r3, #28]
 8008054:	3201      	adds	r2, #1
 8008056:	b2d2      	uxtb	r2, r2
 8008058:	771a      	strb	r2, [r3, #28]
		}

		if ((Itf_Desc->bInterfaceClass == 0x03
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	795b      	ldrb	r3, [r3, #5]
 800805e:	2b03      	cmp	r3, #3
 8008060:	d107      	bne.n	8008072 <USBH_HID_InterfaceInit+0x276>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	799b      	ldrb	r3, [r3, #6]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d103      	bne.n	8008072 <USBH_HID_InterfaceInit+0x276>
				&& Itf_Desc->bInterfaceProtocol == HID_MOUSE_BOOT_CODE)
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	79db      	ldrb	r3, [r3, #7]
 800806e:	2b02      	cmp	r3, #2
 8008070:	d007      	beq.n	8008082 <USBH_HID_InterfaceInit+0x286>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE))
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008078:	f003 0303 	and.w	r3, r3, #3
 800807c:	b2db      	uxtb	r3, r3
 800807e:	2b01      	cmp	r3, #1
 8008080:	d109      	bne.n	8008096 <USBH_HID_InterfaceInit+0x29a>

				{
			HID_Handle->Init = USBH_HID_MouseInit;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	4a9e      	ldr	r2, [pc, #632]	; (8008300 <USBH_HID_InterfaceInit+0x504>)
 8008086:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800808e:	7f1a      	ldrb	r2, [r3, #28]
 8008090:	3201      	adds	r2, #1
 8008092:	b2d2      	uxtb	r2, r2
 8008094:	771a      	strb	r2, [r3, #28]
		}

		if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_JOYSTICK) {
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800809c:	f003 0303 	and.w	r3, r3, #3
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d109      	bne.n	80080ba <USBH_HID_InterfaceInit+0x2be>
			HID_Handle->Init = USBH_HID_GamepadInit;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	4a96      	ldr	r2, [pc, #600]	; (8008304 <USBH_HID_InterfaceInit+0x508>)
 80080aa:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080b2:	7f1a      	ldrb	r2, [r3, #28]
 80080b4:	3201      	adds	r2, #1
 80080b6:	b2d2      	uxtb	r2, r2
 80080b8:	771a      	strb	r2, [r3, #28]
		}

		phost->pActiveClass->iface_init = IFACE_INITENDPNT;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080c0:	2204      	movs	r2, #4
 80080c2:	779a      	strb	r2, [r3, #30]
	}
		break;
 80080c4:	e14e      	b.n	8008364 <USBH_HID_InterfaceInit+0x568>

	case IFACE_INITENDPNT: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 80080d2:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 80080d4:	3208      	adds	r2, #8
 80080d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080da:	617b      	str	r3, [r7, #20]

		/* Check fo available number of endpoints*/
		/* Find the number of EPs in the Interface Descriptor*/
		/* Choose the lower number in order not to overrun the buffer allocated*/
		max_ep =
				((phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80080e2:	4619      	mov	r1, r3
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	231a      	movs	r3, #26
 80080e8:	fb01 f303 	mul.w	r3, r1, r3
 80080ec:	4413      	add	r3, r2
 80080ee:	f203 3346 	addw	r3, r3, #838	; 0x346
 80080f2:	781b      	ldrb	r3, [r3, #0]
		max_ep =
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	bf28      	it	cs
 80080f8:	2302      	movcs	r3, #2
 80080fa:	73fb      	strb	r3, [r7, #15]
						<= USBH_MAX_NUM_ENDPOINTS) ?
						phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
						USBH_MAX_NUM_ENDPOINTS);

		/* Decode endpoint IN and OUT address from interface descriptor*/
		for (; num < max_ep; num++) {
 80080fc:	e086      	b.n	800820c <USBH_HID_InterfaceInit+0x410>
			if (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008104:	4618      	mov	r0, r3
 8008106:	7f3b      	ldrb	r3, [r7, #28]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	3301      	adds	r3, #1
 800810c:	00d9      	lsls	r1, r3, #3
 800810e:	231a      	movs	r3, #26
 8008110:	fb00 f303 	mul.w	r3, r0, r3
 8008114:	440b      	add	r3, r1
 8008116:	4413      	add	r3, r2
 8008118:	f203 3346 	addw	r3, r3, #838	; 0x346
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	b25b      	sxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	da38      	bge.n	8008196 <USBH_HID_InterfaceInit+0x39a>
					& 0x80U) {
				HID_Handle->InEp =
						(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800812a:	4618      	mov	r0, r3
 800812c:	7f3b      	ldrb	r3, [r7, #28]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	3301      	adds	r3, #1
 8008132:	00d9      	lsls	r1, r3, #3
 8008134:	231a      	movs	r3, #26
 8008136:	fb00 f303 	mul.w	r3, r0, r3
 800813a:	440b      	add	r3, r1
 800813c:	4413      	add	r3, r2
 800813e:	f203 3346 	addw	r3, r3, #838	; 0x346
 8008142:	781a      	ldrb	r2, [r3, #0]
				HID_Handle->InEp =
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	711a      	strb	r2, [r3, #4]
				HID_Handle->InPipe =\
 USBH_AllocPipe(phost, HID_Handle->InEp);
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	791b      	ldrb	r3, [r3, #4]
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f005 f9d7 	bl	800d502 <USBH_AllocPipe>
 8008154:	4603      	mov	r3, r0
 8008156:	461a      	mov	r2, r3
				HID_Handle->InPipe =\
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	705a      	strb	r2, [r3, #1]

				/* Open pipe for IN endpoint*/
				USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp,
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	7859      	ldrb	r1, [r3, #1]
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	7918      	ldrb	r0, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	8b12      	ldrh	r2, [r2, #24]
 8008174:	9202      	str	r2, [sp, #8]
 8008176:	2203      	movs	r2, #3
 8008178:	9201      	str	r2, [sp, #4]
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	4623      	mov	r3, r4
 800817e:	4602      	mov	r2, r0
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f005 f98f 	bl	800d4a4 <USBH_OpenPipe>
						phost->device.address, phost->device.speed,
						USB_EP_TYPE_INTR, HID_Handle->length);

				USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	785b      	ldrb	r3, [r3, #1]
 800818a:	2200      	movs	r2, #0
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f005 fded 	bl	800dd6e <USBH_LL_SetToggle>
 8008194:	e037      	b.n	8008206 <USBH_HID_InterfaceInit+0x40a>

			} else {
				HID_Handle->OutEp =
						(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800819c:	4618      	mov	r0, r3
 800819e:	7f3b      	ldrb	r3, [r7, #28]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	3301      	adds	r3, #1
 80081a4:	00d9      	lsls	r1, r3, #3
 80081a6:	231a      	movs	r3, #26
 80081a8:	fb00 f303 	mul.w	r3, r0, r3
 80081ac:	440b      	add	r3, r1
 80081ae:	4413      	add	r3, r2
 80081b0:	f203 3346 	addw	r3, r3, #838	; 0x346
 80081b4:	781a      	ldrb	r2, [r3, #0]
				HID_Handle->OutEp =
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	70da      	strb	r2, [r3, #3]
				HID_Handle->OutPipe =\
 USBH_AllocPipe(phost,
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	78db      	ldrb	r3, [r3, #3]
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f005 f99e 	bl	800d502 <USBH_AllocPipe>
 80081c6:	4603      	mov	r3, r0
 80081c8:	461a      	mov	r2, r3
				HID_Handle->OutPipe =\
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	701a      	strb	r2, [r3, #0]
						HID_Handle->OutEp);

				/* Open pipe for OUT endpoint*/
				USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp,
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	7819      	ldrb	r1, [r3, #0]
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	78d8      	ldrb	r0, [r3, #3]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	8b12      	ldrh	r2, [r2, #24]
 80081e6:	9202      	str	r2, [sp, #8]
 80081e8:	2203      	movs	r2, #3
 80081ea:	9201      	str	r2, [sp, #4]
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	4623      	mov	r3, r4
 80081f0:	4602      	mov	r2, r0
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f005 f956 	bl	800d4a4 <USBH_OpenPipe>
						phost->device.address, phost->device.speed,
						USB_EP_TYPE_INTR, HID_Handle->length);

				USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	2200      	movs	r2, #0
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f005 fdb4 	bl	800dd6e <USBH_LL_SetToggle>
		for (; num < max_ep; num++) {
 8008206:	7f3b      	ldrb	r3, [r7, #28]
 8008208:	3301      	adds	r3, #1
 800820a:	773b      	strb	r3, [r7, #28]
 800820c:	7f3a      	ldrb	r2, [r7, #28]
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	429a      	cmp	r2, r3
 8008212:	f4ff af74 	bcc.w	80080fe <USBH_HID_InterfaceInit+0x302>
			}

		}

		phost->pActiveClass->iface_init = IFACE_SETPROTOCOL;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800821c:	2205      	movs	r2, #5
 800821e:	779a      	strb	r2, [r3, #30]
	}
		break;
 8008220:	e0a0      	b.n	8008364 <USBH_HID_InterfaceInit+0x568>

	case IFACE_SETPROTOCOL: {
		//Set protocol (0U boot, 1U report)

		ctlStatus = USBH_HID_SetProtocol(phost, 1U,
				phost->device.current_interface);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
		ctlStatus = USBH_HID_SetProtocol(phost, 1U,
 8008228:	b29b      	uxth	r3, r3
 800822a:	461a      	mov	r2, r3
 800822c:	2101      	movs	r1, #1
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fa6f 	bl	8008712 <USBH_HID_SetProtocol>
 8008234:	4603      	mov	r3, r0
 8008236:	77bb      	strb	r3, [r7, #30]

		if (ctlStatus == USBH_OK || ctlStatus == USBH_NOT_SUPPORTED) {
 8008238:	7fbb      	ldrb	r3, [r7, #30]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <USBH_HID_InterfaceInit+0x44a>
 800823e:	7fbb      	ldrb	r3, [r7, #30]
 8008240:	2b03      	cmp	r3, #3
 8008242:	f040 808c 	bne.w	800835e <USBH_HID_InterfaceInit+0x562>
			phost->pActiveClass->iface_init = IFACE_SETIDLE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800824c:	2206      	movs	r2, #6
 800824e:	779a      	strb	r2, [r3, #30]
		}

	}
		break;
 8008250:	e085      	b.n	800835e <USBH_HID_InterfaceInit+0x562>

	case IFACE_SETIDLE: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 800825e:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 8008260:	3208      	adds	r2, #8
 8008262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008266:	617b      	str	r3, [r7, #20]
		Itf_Desc =
				&phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum];
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800826e:	7f5b      	ldrb	r3, [r3, #29]
 8008270:	461a      	mov	r2, r3
		Itf_Desc =
 8008272:	231a      	movs	r3, #26
 8008274:	fb02 f303 	mul.w	r3, r2, r3
 8008278:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	4413      	add	r3, r2
 8008280:	330a      	adds	r3, #10
 8008282:	613b      	str	r3, [r7, #16]

		if ((Itf_Desc->bInterfaceClass == 0x03
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	795b      	ldrb	r3, [r3, #5]
 8008288:	2b03      	cmp	r3, #3
 800828a:	d107      	bne.n	800829c <USBH_HID_InterfaceInit+0x4a0>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	799b      	ldrb	r3, [r3, #6]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d103      	bne.n	800829c <USBH_HID_InterfaceInit+0x4a0>
				&& Itf_Desc->bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	79db      	ldrb	r3, [r3, #7]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d007      	beq.n	80082ac <USBH_HID_InterfaceInit+0x4b0>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD)) {
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082a2:	f003 0303 	and.w	r3, r3, #3
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d10a      	bne.n	80082c2 <USBH_HID_InterfaceInit+0x4c6>
			//set up polling at 500ms - 1 unit should be 4ms
			ctlStatus = USBH_HID_SetIdle(phost, 125U, 0U,
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80082b2:	2200      	movs	r2, #0
 80082b4:	217d      	movs	r1, #125	; 0x7d
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f9fd 	bl	80086b6 <USBH_HID_SetIdle>
 80082bc:	4603      	mov	r3, r0
 80082be:	77bb      	strb	r3, [r7, #30]
 80082c0:	e009      	b.n	80082d6 <USBH_HID_InterfaceInit+0x4da>
					phost->device.current_interface);
		} else {
			ctlStatus = USBH_HID_SetIdle(phost, 0U, 0U,
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80082c8:	2200      	movs	r2, #0
 80082ca:	2100      	movs	r1, #0
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f9f2 	bl	80086b6 <USBH_HID_SetIdle>
 80082d2:	4603      	mov	r3, r0
 80082d4:	77bb      	strb	r3, [r7, #30]
					phost->device.current_interface);
		}

		if (ctlStatus == USBH_OK) {
 80082d6:	7fbb      	ldrb	r3, [r7, #30]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d105      	bne.n	80082e8 <USBH_HID_InterfaceInit+0x4ec>
			phost->pActiveClass->iface_init = IFACE_SELECTIFACE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80082e2:	2207      	movs	r2, #7
 80082e4:	779a      	strb	r2, [r3, #30]

			}
		}

	}
		break;
 80082e6:	e03c      	b.n	8008362 <USBH_HID_InterfaceInit+0x566>
			if (ctlStatus == USBH_NOT_SUPPORTED) {
 80082e8:	7fbb      	ldrb	r3, [r7, #30]
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d139      	bne.n	8008362 <USBH_HID_InterfaceInit+0x566>
				phost->pActiveClass->iface_init = IFACE_SELECTIFACE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80082f4:	2207      	movs	r2, #7
 80082f6:	779a      	strb	r2, [r3, #30]
		break;
 80082f8:	e033      	b.n	8008362 <USBH_HID_InterfaceInit+0x566>
 80082fa:	bf00      	nop
 80082fc:	08008ec9 	.word	0x08008ec9
 8008300:	08009219 	.word	0x08009219
 8008304:	08008955 	.word	0x08008955

	case IFACE_SELECTIFACE: {
		//Check if we have any other interfaces to phost->device.CfgDesc.bNumInterfaces
		if (++phost->pActiveClass->iface_initnum
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800830e:	7f5a      	ldrb	r2, [r3, #29]
 8008310:	3201      	adds	r2, #1
 8008312:	b2d2      	uxtb	r2, r2
 8008314:	775a      	strb	r2, [r3, #29]
 8008316:	7f5a      	ldrb	r2, [r3, #29]
				< phost->device.CfgDesc.bNumInterfaces) {
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
		if (++phost->pActiveClass->iface_initnum
 800831e:	429a      	cmp	r2, r3
 8008320:	d212      	bcs.n	8008348 <USBH_HID_InterfaceInit+0x54c>
			//Have we reached maximum of interfaces? USBH_MAX_NUM_INTERFACES
			if (phost->pActiveClass->iface_initnum <= USBH_MAX_NUM_INTERFACES) {
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008328:	7f5b      	ldrb	r3, [r3, #29]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d805      	bhi.n	800833a <USBH_HID_InterfaceInit+0x53e>
				phost->pActiveClass->iface_init = IFACE_READHID;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008334:	2201      	movs	r2, #1
 8008336:	779a      	strb	r2, [r3, #30]
			status = USBH_OK;
			phost->device.current_interface = 0;

		}
	}
		break;
 8008338:	e014      	b.n	8008364 <USBH_HID_InterfaceInit+0x568>
				status = USBH_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	77fb      	strb	r3, [r7, #31]
				phost->device.current_interface = 0;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
		break;
 8008346:	e00d      	b.n	8008364 <USBH_HID_InterfaceInit+0x568>
			status = USBH_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	77fb      	strb	r3, [r7, #31]
			phost->device.current_interface = 0;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
		break;
 8008354:	e006      	b.n	8008364 <USBH_HID_InterfaceInit+0x568>
		break;
 8008356:	bf00      	nop
 8008358:	e004      	b.n	8008364 <USBH_HID_InterfaceInit+0x568>
		break;
 800835a:	bf00      	nop
 800835c:	e002      	b.n	8008364 <USBH_HID_InterfaceInit+0x568>
		break;
 800835e:	bf00      	nop
 8008360:	e000      	b.n	8008364 <USBH_HID_InterfaceInit+0x568>
		break;
 8008362:	bf00      	nop
	}

	return status;
 8008364:	7ffb      	ldrb	r3, [r7, #31]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3720      	adds	r7, #32
 800836a:	46bd      	mov	sp, r7
 800836c:	bdb0      	pop	{r4, r5, r7, pc}
 800836e:	bf00      	nop

08008370 <USBH_HID_InterfaceDeInit>:
 * @brief  USBH_HID_InterfaceDeInit
 *         The function DeInit the Pipes used for the HID class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef static USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost) {
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]

	HID_HandleTypeDef *HID_Handle;

	uint8_t i = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	73fb      	strb	r3, [r7, #15]
	for (; i <= (USBH_MAX_NUM_INTERFACES - 1); i++) {
 800837c:	e055      	b.n	800842a <USBH_HID_InterfaceDeInit+0xba>

		HID_Handle = (HID_HandleTypeDef*) phost->pActiveClass->pData[i];
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008384:	7bfa      	ldrb	r2, [r7, #15]
 8008386:	3208      	adds	r2, #8
 8008388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838c:	60bb      	str	r3, [r7, #8]

		if (HID_Handle->InPipe != 0x00U) {
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	785b      	ldrb	r3, [r3, #1]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00e      	beq.n	80083b4 <USBH_HID_InterfaceDeInit+0x44>
			USBH_ClosePipe(phost, HID_Handle->InPipe);
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	785b      	ldrb	r3, [r3, #1]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f005 f8a0 	bl	800d4e2 <USBH_ClosePipe>
			USBH_FreePipe(phost, HID_Handle->InPipe);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	785b      	ldrb	r3, [r3, #1]
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f005 f8ca 	bl	800d542 <USBH_FreePipe>
			HID_Handle->InPipe = 0U; /* Reset the pipe as Free */
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2200      	movs	r2, #0
 80083b2:	705a      	strb	r2, [r3, #1]
		}

		if (HID_Handle->OutPipe != 0x00U) {
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00e      	beq.n	80083da <USBH_HID_InterfaceDeInit+0x6a>
			USBH_ClosePipe(phost, HID_Handle->OutPipe);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f005 f88d 	bl	800d4e2 <USBH_ClosePipe>
			USBH_FreePipe(phost, HID_Handle->OutPipe);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f005 f8b7 	bl	800d542 <USBH_FreePipe>
			HID_Handle->OutPipe = 0U; /* Reset the pipe as Free */
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2200      	movs	r2, #0
 80083d8:	701a      	strb	r2, [r3, #0]
		}

		if (phost->pActiveClass->pData[i]) {
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80083e0:	7bfa      	ldrb	r2, [r7, #15]
 80083e2:	3208      	adds	r2, #8
 80083e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d01b      	beq.n	8008424 <USBH_HID_InterfaceDeInit+0xb4>
			USBH_free(phost->pActiveClass->pData[i]);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80083f2:	7bfa      	ldrb	r2, [r7, #15]
 80083f4:	3208      	adds	r2, #8
 80083f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f005 fd50 	bl	800dea0 <free>
			free(phost->pActiveClass->pData[i]);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008406:	7bfa      	ldrb	r2, [r7, #15]
 8008408:	3208      	adds	r2, #8
 800840a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840e:	4618      	mov	r0, r3
 8008410:	f005 fd46 	bl	800dea0 <free>
			phost->pActiveClass->pData[i] = 0U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800841a:	7bfa      	ldrb	r2, [r7, #15]
 800841c:	3208      	adds	r2, #8
 800841e:	2100      	movs	r1, #0
 8008420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (; i <= (USBH_MAX_NUM_INTERFACES - 1); i++) {
 8008424:	7bfb      	ldrb	r3, [r7, #15]
 8008426:	3301      	adds	r3, #1
 8008428:	73fb      	strb	r3, [r7, #15]
 800842a:	7bfb      	ldrb	r3, [r7, #15]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d9a6      	bls.n	800837e <USBH_HID_InterfaceDeInit+0xe>
		}
	}
	phost->pActiveClass->iface_init = 0U;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008436:	2200      	movs	r2, #0
 8008438:	779a      	strb	r2, [r3, #30]
	phost->pActiveClass->iface_initnum = 0U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008440:	2200      	movs	r2, #0
 8008442:	775a      	strb	r2, [r3, #29]
	phost->pActiveClass->interfaces = 0U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800844a:	2200      	movs	r2, #0
 800844c:	771a      	strb	r2, [r3, #28]

	return USBH_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBH_HID_NextInterface>:
 *         for HID class.
 * @param  phost: Host handle
 * @retval USBH Status
 */

void USBH_HID_NextInterface(USBH_HandleTypeDef *phost) {
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	phost->device.current_interface++;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008466:	3301      	adds	r3, #1
 8008468:	b2da      	uxtb	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	if (phost->device.current_interface >= phost->pActiveClass->interfaces) {
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800847c:	7f1b      	ldrb	r3, [r3, #28]
 800847e:	429a      	cmp	r2, r3
 8008480:	d303      	bcc.n	800848a <USBH_HID_NextInterface+0x32>
		phost->device.current_interface = 0;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
	}
}
 800848a:	bf00      	nop
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <USBH_HID_ClassRequest>:

static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost) {
 8008496:	b480      	push	{r7}
 8008498:	b083      	sub	sp, #12
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
	//All config has been done already in USBH_HID_InterfaceInit
	return USBH_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <USBH_HID_Process>:
 * @brief  USBH_HID_Process
 *         The function is for managing state machine for HID data transfers
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost) {
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	75fb      	strb	r3, [r7, #23]
	HID_HandleTypeDef *HID_Handle =
			(HID_HandleTypeDef*) phost->pActiveClass->pData[phost->device.current_interface];
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
	HID_HandleTypeDef *HID_Handle =
 80084c4:	3208      	adds	r2, #8
 80084c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ca:	613b      	str	r3, [r7, #16]
	uint32_t XferSize;

	switch (HID_Handle->state) {
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	789b      	ldrb	r3, [r3, #2]
 80084d0:	2b06      	cmp	r3, #6
 80084d2:	f200 8084 	bhi.w	80085de <USBH_HID_Process+0x132>
 80084d6:	a201      	add	r2, pc, #4	; (adr r2, 80084dc <USBH_HID_Process+0x30>)
 80084d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084dc:	080084f9 	.word	0x080084f9
 80084e0:	080085df 	.word	0x080085df
 80084e4:	080085df 	.word	0x080085df
 80084e8:	080085df 	.word	0x080085df
 80084ec:	0800852b 	.word	0x0800852b
 80084f0:	08008515 	.word	0x08008515
 80084f4:	08008559 	.word	0x08008559
	case HID_INIT:
		HID_Handle->Init(phost);
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	4798      	blx	r3
		HID_Handle->state = HID_SYNC;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	2205      	movs	r2, #5
 8008504:	709a      	strb	r2, [r3, #2]
		phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800850c:	2102      	movs	r1, #2
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	4798      	blx	r3
		break;
 8008512:	e069      	b.n	80085e8 <USBH_HID_Process+0x13c>

	case HID_SYNC:
		/* Sync with start of Even Frame */
		if (phost->Timer & 1U) {
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	d05f      	beq.n	80085e2 <USBH_HID_Process+0x136>
			HID_Handle->state = HID_GET_DATA;
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	2204      	movs	r2, #4
 8008526:	709a      	strb	r2, [r3, #2]
		}
		break;
 8008528:	e05b      	b.n	80085e2 <USBH_HID_Process+0x136>

	case HID_GET_DATA:
		USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	6959      	ldr	r1, [r3, #20]
				(uint8_t) HID_Handle->length, HID_Handle->InPipe);
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	8b1b      	ldrh	r3, [r3, #24]
		USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8008532:	b2da      	uxtb	r2, r3
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	785b      	ldrb	r3, [r3, #1]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f004 ff94 	bl	800d466 <USBH_InterruptReceiveData>

		HID_Handle->state = HID_POLL;
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	2206      	movs	r2, #6
 8008542:	709a      	strb	r2, [r3, #2]
		HID_Handle->timer = phost->Timer;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	621a      	str	r2, [r3, #32]
		HID_Handle->DataReady = 0U;
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 8008556:	e047      	b.n	80085e8 <USBH_HID_Process+0x13c>

	case HID_POLL:
		if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE) {
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f005 fbe4 	bl	800dd2c <USBH_LL_GetURBState>
 8008564:	4603      	mov	r3, r0
 8008566:	2b01      	cmp	r3, #1
 8008568:	d120      	bne.n	80085ac <USBH_HID_Process+0x100>

			XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	785b      	ldrb	r3, [r3, #1]
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f005 fb49 	bl	800dc08 <USBH_LL_GetLastXferSize>
 8008576:	60f8      	str	r0, [r7, #12]

			if (HID_Handle->DataReady == 0U && XferSize != 0U) {
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800857e:	2b00      	cmp	r3, #0
 8008580:	d131      	bne.n	80085e6 <USBH_HID_Process+0x13a>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d02e      	beq.n	80085e6 <USBH_HID_Process+0x13a>
				USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData,
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f103 0008 	add.w	r0, r3, #8
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	6959      	ldr	r1, [r3, #20]
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	8b1b      	ldrh	r3, [r3, #24]
 8008596:	461a      	mov	r2, r3
 8008598:	f000 f97d 	bl	8008896 <USBH_HID_FifoWrite>
						HID_Handle->length);
				HID_Handle->DataReady = 1U;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				USBH_HID_EventCallback(phost);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f9ca 	bl	800893e <USBH_HID_EventCallback>
					HID_Handle->state = HID_GET_DATA;
					USBH_HID_NextInterface(phost);
				}
			}
		}
		break;
 80085aa:	e01c      	b.n	80085e6 <USBH_HID_Process+0x13a>
			if (USBH_LL_GetURBState(phost, HID_Handle->InPipe)
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	785b      	ldrb	r3, [r3, #1]
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f005 fbba 	bl	800dd2c <USBH_LL_GetURBState>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b05      	cmp	r3, #5
 80085bc:	d113      	bne.n	80085e6 <USBH_HID_Process+0x13a>
				if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK) {
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	7e9b      	ldrb	r3, [r3, #26]
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f004 fb60 	bl	800cc8a <USBH_ClrFeature>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10a      	bne.n	80085e6 <USBH_HID_Process+0x13a>
					HID_Handle->state = HID_GET_DATA;
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	2204      	movs	r2, #4
 80085d4:	709a      	strb	r2, [r3, #2]
					USBH_HID_NextInterface(phost);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff ff3e 	bl	8008458 <USBH_HID_NextInterface>
		break;
 80085dc:	e003      	b.n	80085e6 <USBH_HID_Process+0x13a>

	default:
		break;
 80085de:	bf00      	nop
 80085e0:	e002      	b.n	80085e8 <USBH_HID_Process+0x13c>
		break;
 80085e2:	bf00      	nop
 80085e4:	e000      	b.n	80085e8 <USBH_HID_Process+0x13c>
		break;
 80085e6:	bf00      	nop
	}

	return status;
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop

080085f4 <USBH_HID_SOFProcess>:
 * @brief  USBH_HID_SOFProcess
 *         The function is for managing the SOF Process
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost) {
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
	HID_HandleTypeDef *HID_Handle =
			(HID_HandleTypeDef*) phost->pActiveClass->pData[phost->device.current_interface];
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
	HID_HandleTypeDef *HID_Handle =
 8008608:	3208      	adds	r2, #8
 800860a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860e:	60fb      	str	r3, [r7, #12]

	if (HID_Handle->state == HID_POLL) {
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	789b      	ldrb	r3, [r3, #2]
 8008614:	2b06      	cmp	r3, #6
 8008616:	d10f      	bne.n	8008638 <USBH_HID_SOFProcess+0x44>
		if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll) {
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	8b92      	ldrh	r2, [r2, #28]
 8008628:	4293      	cmp	r3, r2
 800862a:	d305      	bcc.n	8008638 <USBH_HID_SOFProcess+0x44>
			HID_Handle->state = HID_GET_DATA;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2204      	movs	r2, #4
 8008630:	709a      	strb	r2, [r3, #2]
			USBH_HID_NextInterface(phost);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7ff ff10 	bl	8008458 <USBH_HID_NextInterface>
		}
	}
	return USBH_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <USBH_HID_GetHIDReportDescriptor>:
 * @param  phost: Host handle
 * @param  Length : HID Report Descriptor Length
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
		uint16_t length, uint8_t iface_idx) {
 8008642:	b580      	push	{r7, lr}
 8008644:	b086      	sub	sp, #24
 8008646:	af02      	add	r7, sp, #8
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	460b      	mov	r3, r1
 800864c:	807b      	strh	r3, [r7, #2]
 800864e:	4613      	mov	r3, r2
 8008650:	707b      	strb	r3, [r7, #1]

	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID_REPORT, iface_idx, phost->device.Data, length);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f503 738e 	add.w	r3, r3, #284	; 0x11c
	status = USBH_GetDescriptor(phost,
 8008658:	7879      	ldrb	r1, [r7, #1]
 800865a:	887a      	ldrh	r2, [r7, #2]
 800865c:	9201      	str	r2, [sp, #4]
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	460b      	mov	r3, r1
 8008662:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8008666:	2101      	movs	r1, #1
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f004 fa69 	bl	800cb40 <USBH_GetDescriptor>
 800866e:	4603      	mov	r3, r0
 8008670:	73fb      	strb	r3, [r7, #15]
	 In case of USB Boot Mode devices for In report handling ,
	 HID report descriptor parsing is not required.
	 In case, for supporting Non-Boot Protocol devices and output reports,
	 user may parse the report descriptor*/

	return status;
 8008672:	7bfb      	ldrb	r3, [r7, #15]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBH_HID_GetHIDDescriptor>:
 * @param  phost: Host handle
 * @param  Length : HID Descriptor Length
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor(USBH_HandleTypeDef *phost,
		uint16_t length, uint8_t iface_idx) {
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af02      	add	r7, sp, #8
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	807b      	strh	r3, [r7, #2]
 8008688:	4613      	mov	r3, r2
 800868a:	707b      	strb	r3, [r7, #1]
	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID, iface_idx, phost->device.Data, length);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
	status = USBH_GetDescriptor(phost,
 8008692:	7879      	ldrb	r1, [r7, #1]
 8008694:	887a      	ldrh	r2, [r7, #2]
 8008696:	9201      	str	r2, [sp, #4]
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	460b      	mov	r3, r1
 800869c:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 80086a0:	2101      	movs	r1, #1
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f004 fa4c 	bl	800cb40 <USBH_GetDescriptor>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]

	return status;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBH_HID_SetIdle>:
 * @param  duration: Duration for HID Idle request
 * @param  reportId : Targeted report ID for Set Idle request
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost, uint8_t duration,
		uint8_t reportId, uint8_t interface) {
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	4608      	mov	r0, r1
 80086c0:	4611      	mov	r1, r2
 80086c2:	461a      	mov	r2, r3
 80086c4:	4603      	mov	r3, r0
 80086c6:	70fb      	strb	r3, [r7, #3]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70bb      	strb	r3, [r7, #2]
 80086cc:	4613      	mov	r3, r2
 80086ce:	707b      	strb	r3, [r7, #1]

	phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2221      	movs	r2, #33	; 0x21
 80086d4:	741a      	strb	r2, [r3, #16]
			|
			USB_REQ_TYPE_CLASS;

	phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	220a      	movs	r2, #10
 80086da:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.w = (uint16_t) (((uint32_t) duration << 8U)
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	021b      	lsls	r3, r3, #8
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	78bb      	ldrb	r3, [r7, #2]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	4313      	orrs	r3, r2
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	825a      	strh	r2, [r3, #18]
			| (uint32_t) reportId);

	phost->Control.setup.b.wIndex.w = 0U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	829a      	strh	r2, [r3, #20]
	phost->Control.setup.b.wLength.w = interface;
 80086f6:	787b      	ldrb	r3, [r7, #1]
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	82da      	strh	r2, [r3, #22]

	return USBH_CtlReq(phost, 0U, 0U);
 80086fe:	2200      	movs	r2, #0
 8008700:	2100      	movs	r1, #0
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f004 fca1 	bl	800d04a <USBH_CtlReq>
 8008708:	4603      	mov	r3, r0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBH_HID_SetProtocol>:
 * @param  phost: Host handle
 * @param  protocol : Set Protocol for HID : boot/report protocol
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
		uint8_t protocol, uint16_t interface) {
 8008712:	b580      	push	{r7, lr}
 8008714:	b082      	sub	sp, #8
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	460b      	mov	r3, r1
 800871c:	70fb      	strb	r3, [r7, #3]
 800871e:	4613      	mov	r3, r2
 8008720:	803b      	strh	r3, [r7, #0]
	phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2221      	movs	r2, #33	; 0x21
 8008726:	741a      	strb	r2, [r3, #16]
			| USB_REQ_TYPE_CLASS;

	phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	220b      	movs	r2, #11
 800872c:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.w = protocol;
 800872e:	78fb      	ldrb	r3, [r7, #3]
 8008730:	b29a      	uxth	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	825a      	strh	r2, [r3, #18]
	phost->Control.setup.b.wIndex.w = interface;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	883a      	ldrh	r2, [r7, #0]
 800873a:	829a      	strh	r2, [r3, #20]
	phost->Control.setup.b.wLength.w = 0U;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	82da      	strh	r2, [r3, #22]

	return USBH_CtlReq(phost, 0U, 0U);
 8008742:	2200      	movs	r2, #0
 8008744:	2100      	movs	r1, #0
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f004 fc7f 	bl	800d04a <USBH_CtlReq>
 800874c:	4603      	mov	r3, r0

}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBH_HID_ParseHIDDesc>:
 *         This function Parse the HID descriptor
 * @param  desc: HID Descriptor
 * @param  buf: Buffer where the source descriptor is available
 * @retval None
 */
void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf) {
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	6039      	str	r1, [r7, #0]

	desc->bLength = *(uint8_t*) (buf + 0);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	781a      	ldrb	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	701a      	strb	r2, [r3, #0]
	desc->bDescriptorType = *(uint8_t*) (buf + 1);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	785a      	ldrb	r2, [r3, #1]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	705a      	strb	r2, [r3, #1]
	desc->bcdHID = LE16(buf + 2);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	3302      	adds	r3, #2
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	b29a      	uxth	r2, r3
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	3303      	adds	r3, #3
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	b29b      	uxth	r3, r3
 8008780:	021b      	lsls	r3, r3, #8
 8008782:	b29b      	uxth	r3, r3
 8008784:	4313      	orrs	r3, r2
 8008786:	b29a      	uxth	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	805a      	strh	r2, [r3, #2]
	desc->bCountryCode = *(uint8_t*) (buf + 4);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	791a      	ldrb	r2, [r3, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	711a      	strb	r2, [r3, #4]
	desc->bNumDescriptors = *(uint8_t*) (buf + 5);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	795a      	ldrb	r2, [r3, #5]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	715a      	strb	r2, [r3, #5]
	desc->bReportDescriptorType = *(uint8_t*) (buf + 6);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	799a      	ldrb	r2, [r3, #6]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	719a      	strb	r2, [r3, #6]
	desc->wItemLength = LE16(buf + 7);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	3307      	adds	r3, #7
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	3308      	adds	r3, #8
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	021b      	lsls	r3, r3, #8
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	4313      	orrs	r3, r2
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	811a      	strh	r2, [r3, #8]
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <USBH_HID_FifoInit>:
 * @param  f: Fifo address
 * @param  buf: Fifo buffer
 * @param  size: Fifo Size
 * @retval none
 */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size) {
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	80fb      	strh	r3, [r7, #6]
	f->head = 0U;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	809a      	strh	r2, [r3, #4]
	f->tail = 0U;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	80da      	strh	r2, [r3, #6]
	f->lock = 0U;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	729a      	strb	r2, [r3, #10]
	f->size = size;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	88fa      	ldrh	r2, [r7, #6]
 80087f0:	811a      	strh	r2, [r3, #8]
	f->buf = buf;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	601a      	str	r2, [r3, #0]
}
 80087f8:	bf00      	nop
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <USBH_HID_FifoRead>:
 * @param  f: Fifo address
 * @param  buf: read buffer
 * @param  nbytes: number of item to read
 * @retval number of read items
 */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes) {
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t *p;

	p = (uint8_t*) buf;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	613b      	str	r3, [r7, #16]

	if (f->lock == 0U) {
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	7a9b      	ldrb	r3, [r3, #10]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d131      	bne.n	8008882 <USBH_HID_FifoRead+0x7e>
		f->lock = 1U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2201      	movs	r2, #1
 8008822:	729a      	strb	r2, [r3, #10]

		for (i = 0U; i < nbytes; i++) {
 8008824:	2300      	movs	r3, #0
 8008826:	82fb      	strh	r3, [r7, #22]
 8008828:	e027      	b.n	800887a <USBH_HID_FifoRead+0x76>
			if (f->tail != f->head) {
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	88da      	ldrh	r2, [r3, #6]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	889b      	ldrh	r3, [r3, #4]
 8008832:	429a      	cmp	r2, r3
 8008834:	d019      	beq.n	800886a <USBH_HID_FifoRead+0x66>
				*p++ = f->buf[f->tail];
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	88d2      	ldrh	r2, [r2, #6]
 800883e:	441a      	add	r2, r3
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	1c59      	adds	r1, r3, #1
 8008844:	6139      	str	r1, [r7, #16]
 8008846:	7812      	ldrb	r2, [r2, #0]
 8008848:	701a      	strb	r2, [r3, #0]
				f->tail++;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	88db      	ldrh	r3, [r3, #6]
 800884e:	3301      	adds	r3, #1
 8008850:	b29a      	uxth	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	80da      	strh	r2, [r3, #6]

				if (f->tail == f->size) {
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	88da      	ldrh	r2, [r3, #6]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	891b      	ldrh	r3, [r3, #8]
 800885e:	429a      	cmp	r2, r3
 8008860:	d108      	bne.n	8008874 <USBH_HID_FifoRead+0x70>
					f->tail = 0U;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	80da      	strh	r2, [r3, #6]
 8008868:	e004      	b.n	8008874 <USBH_HID_FifoRead+0x70>
				}
			} else {
				f->lock = 0U;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	729a      	strb	r2, [r3, #10]
				return i;
 8008870:	8afb      	ldrh	r3, [r7, #22]
 8008872:	e00a      	b.n	800888a <USBH_HID_FifoRead+0x86>
		for (i = 0U; i < nbytes; i++) {
 8008874:	8afb      	ldrh	r3, [r7, #22]
 8008876:	3301      	adds	r3, #1
 8008878:	82fb      	strh	r3, [r7, #22]
 800887a:	8afa      	ldrh	r2, [r7, #22]
 800887c:	88fb      	ldrh	r3, [r7, #6]
 800887e:	429a      	cmp	r2, r3
 8008880:	d3d3      	bcc.n	800882a <USBH_HID_FifoRead+0x26>
			}
		}
	}

	f->lock = 0U;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	729a      	strb	r2, [r3, #10]

	return nbytes;
 8008888:	88fb      	ldrh	r3, [r7, #6]
}
 800888a:	4618      	mov	r0, r3
 800888c:	371c      	adds	r7, #28
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <USBH_HID_FifoWrite>:
 * @param  f: Fifo address
 * @param  buf: read buffer
 * @param  nbytes: number of item to write
 * @retval number of written items
 */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t nbytes) {
 8008896:	b480      	push	{r7}
 8008898:	b087      	sub	sp, #28
 800889a:	af00      	add	r7, sp, #0
 800889c:	60f8      	str	r0, [r7, #12]
 800889e:	60b9      	str	r1, [r7, #8]
 80088a0:	4613      	mov	r3, r2
 80088a2:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t *p;

	p = (uint8_t*) buf;
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	613b      	str	r3, [r7, #16]

	if (f->lock == 0U) {
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	7a9b      	ldrb	r3, [r3, #10]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d13c      	bne.n	800892a <USBH_HID_FifoWrite+0x94>
		f->lock = 1U;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2201      	movs	r2, #1
 80088b4:	729a      	strb	r2, [r3, #10]

		for (i = 0U; i < nbytes; i++) {
 80088b6:	2300      	movs	r3, #0
 80088b8:	82fb      	strh	r3, [r7, #22]
 80088ba:	e032      	b.n	8008922 <USBH_HID_FifoWrite+0x8c>
			if ((f->head + 1U == f->tail)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	889b      	ldrh	r3, [r3, #4]
 80088c0:	3301      	adds	r3, #1
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	88d2      	ldrh	r2, [r2, #6]
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d00a      	beq.n	80088e0 <USBH_HID_FifoWrite+0x4a>
					|| ((f->head + 1U == f->size) && (f->tail == 0U))) {
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	889b      	ldrh	r3, [r3, #4]
 80088ce:	3301      	adds	r3, #1
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	8912      	ldrh	r2, [r2, #8]
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d108      	bne.n	80088ea <USBH_HID_FifoWrite+0x54>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	88db      	ldrh	r3, [r3, #6]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d104      	bne.n	80088ea <USBH_HID_FifoWrite+0x54>
				f->lock = 0U;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	729a      	strb	r2, [r3, #10]
				return i;
 80088e6:	8afb      	ldrh	r3, [r7, #22]
 80088e8:	e023      	b.n	8008932 <USBH_HID_FifoWrite+0x9c>
			} else {
				f->buf[f->head] = *p++;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	613a      	str	r2, [r7, #16]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	6812      	ldr	r2, [r2, #0]
 80088f4:	68f9      	ldr	r1, [r7, #12]
 80088f6:	8889      	ldrh	r1, [r1, #4]
 80088f8:	440a      	add	r2, r1
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	7013      	strb	r3, [r2, #0]
				f->head++;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	889b      	ldrh	r3, [r3, #4]
 8008902:	3301      	adds	r3, #1
 8008904:	b29a      	uxth	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	809a      	strh	r2, [r3, #4]

				if (f->head == f->size) {
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	889a      	ldrh	r2, [r3, #4]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	891b      	ldrh	r3, [r3, #8]
 8008912:	429a      	cmp	r2, r3
 8008914:	d102      	bne.n	800891c <USBH_HID_FifoWrite+0x86>
					f->head = 0U;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	809a      	strh	r2, [r3, #4]
		for (i = 0U; i < nbytes; i++) {
 800891c:	8afb      	ldrh	r3, [r7, #22]
 800891e:	3301      	adds	r3, #1
 8008920:	82fb      	strh	r3, [r7, #22]
 8008922:	8afa      	ldrh	r2, [r7, #22]
 8008924:	88fb      	ldrh	r3, [r7, #6]
 8008926:	429a      	cmp	r2, r3
 8008928:	d3c8      	bcc.n	80088bc <USBH_HID_FifoWrite+0x26>
				}
			}
		}
	}

	f->lock = 0U;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	729a      	strb	r2, [r3, #10]

	return nbytes;
 8008930:	88fb      	ldrh	r3, [r7, #6]
}
 8008932:	4618      	mov	r0, r3
 8008934:	371c      	adds	r7, #28
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <USBH_HID_EventCallback>:
/**
 * @brief  The function is a callback about HID Data events
 *  @param  phost: Selected device
 * @retval None
 */
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) {
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(phost);
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
	...

08008954 <USBH_HID_GamepadInit>:
  *         The function init the HID gamepad.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GamepadInit(USBH_HandleTypeDef *phost)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8008968:	3208      	adds	r2, #8
 800896a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896e:	60fb      	str	r3, [r7, #12]
  uint8_t reportSize = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	72fb      	strb	r3, [r7, #11]
  reportSize = HID_Handle->HID_Desc.RptDesc.report_size;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800897a:	72fb      	strb	r3, [r7, #11]





  HID_Handle->length = reportSize;
 800897c:	7afb      	ldrb	r3, [r7, #11]
 800897e:	b29a      	uxth	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	831a      	strh	r2, [r3, #24]


  HID_Handle->pData = (uint8_t*) malloc (reportSize *sizeof(uint8_t)); //(uint8_t*)(void *)
 8008984:	7afb      	ldrb	r3, [r7, #11]
 8008986:	4618      	mov	r0, r3
 8008988:	f005 fa82 	bl	800de90 <malloc>
 800898c:	4603      	mov	r3, r0
 800898e:	461a      	mov	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	615a      	str	r2, [r3, #20]
  gamepad_report_data = HID_Handle->pData;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	4a0a      	ldr	r2, [pc, #40]	; (80089c4 <USBH_HID_GamepadInit+0x70>)
 800899a:	6013      	str	r3, [r2, #0]
  USBH_HID_FifoInit(&HID_Handle->fifo, gamepad_report_data_buf, HID_QUEUE_SIZE * reportSize);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f103 0008 	add.w	r0, r3, #8
 80089a2:	7afb      	ldrb	r3, [r7, #11]
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	461a      	mov	r2, r3
 80089a8:	0092      	lsls	r2, r2, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	005b      	lsls	r3, r3, #1
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	461a      	mov	r2, r3
 80089b2:	4905      	ldr	r1, [pc, #20]	; (80089c8 <USBH_HID_GamepadInit+0x74>)
 80089b4:	f7ff ff0a 	bl	80087cc <USBH_HID_FifoInit>

  return USBH_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20000270 	.word	0x20000270
 80089c8:	20000274 	.word	0x20000274

080089cc <USBH_HID_GetGamepadInfo>:
  *         The function return gamepad information.
  * @param  phost: Host handle
  * @retval gamepad information
  */
HID_gamepad_Info_TypeDef *USBH_HID_GetGamepadInfo(USBH_HandleTypeDef *phost)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
	//refresh value of joymap and return value
	if(USBH_HID_GamepadDecode(phost)== USBH_OK)
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f80d 	bl	80089f4 <USBH_HID_GamepadDecode>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <USBH_HID_GetGamepadInfo+0x18>
	{
		return &gamepad_info;
 80089e0:	4b03      	ldr	r3, [pc, #12]	; (80089f0 <USBH_HID_GetGamepadInfo+0x24>)
 80089e2:	e000      	b.n	80089e6 <USBH_HID_GetGamepadInfo+0x1a>
	}
	else
	{
		return NULL;
 80089e4:	2300      	movs	r3, #0
	}
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	2000026c 	.word	0x2000026c

080089f4 <USBH_HID_GamepadDecode>:
  *         The function decode gamepad data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_GamepadDecode(USBH_HandleTypeDef *phost)
{
 80089f4:	b5b0      	push	{r4, r5, r7, lr}
 80089f6:	b098      	sub	sp, #96	; 0x60
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
	HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8008a08:	3208      	adds	r2, #8
 8008a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a0e:	65bb      	str	r3, [r7, #88]	; 0x58

	  if(HID_Handle->length == 0U)
 8008a10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a12:	8b1b      	ldrh	r3, [r3, #24]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <USBH_HID_GamepadDecode+0x28>
	  {
	    return USBH_FAIL;
 8008a18:	2302      	movs	r3, #2
 8008a1a:	e24f      	b.n	8008ebc <USBH_HID_GamepadDecode+0x4c8>
	  }

	  if(USBH_HID_FifoRead(&HID_Handle->fifo, gamepad_report_data, HID_Handle->length) ==  HID_Handle->length)
 8008a1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a1e:	f103 0008 	add.w	r0, r3, #8
 8008a22:	4bc6      	ldr	r3, [pc, #792]	; (8008d3c <USBH_HID_GamepadDecode+0x348>)
 8008a24:	6819      	ldr	r1, [r3, #0]
 8008a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a28:	8b1b      	ldrh	r3, [r3, #24]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f7ff feea 	bl	8008804 <USBH_HID_FifoRead>
 8008a30:	4603      	mov	r3, r0
 8008a32:	461a      	mov	r2, r3
 8008a34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a36:	8b1b      	ldrh	r3, [r3, #24]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	f040 823e 	bne.w	8008eba <USBH_HID_GamepadDecode+0x4c6>
	    {


		uint8_t jmap = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		uint8_t btn = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		uint8_t btn_extra = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		int16_t a[2];
		uint8_t i;

		hid_report_t conf = HID_Handle->HID_Desc.RptDesc;
 8008a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a52:	f107 040c 	add.w	r4, r7, #12
 8008a56:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8008a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008a6a:	6020      	str	r0, [r4, #0]
 8008a6c:	3404      	adds	r4, #4
 8008a6e:	8021      	strh	r1, [r4, #0]

		// skip report id if present
		uint8_t *p = gamepad_report_data+(conf.report_id?1:0);
 8008a70:	4bb2      	ldr	r3, [pc, #712]	; (8008d3c <USBH_HID_GamepadDecode+0x348>)
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	7b7b      	ldrb	r3, [r7, #13]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <USBH_HID_GamepadDecode+0x8a>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e000      	b.n	8008a80 <USBH_HID_GamepadDecode+0x8c>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	4413      	add	r3, r2
 8008a82:	657b      	str	r3, [r7, #84]	; 0x54


		//process axis
		// two axes ...
				for(i=0;i<2;i++) {
 8008a84:	2300      	movs	r3, #0
 8008a86:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008a8a:	e038      	b.n	8008afe <USBH_HID_GamepadDecode+0x10a>
					// if logical minimum is > logical maximum then logical minimum
					// is signed. This means that the value itself is also signed
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 8008a8c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008a90:	3301      	adds	r3, #1
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	3360      	adds	r3, #96	; 0x60
 8008a96:	443b      	add	r3, r7
 8008a98:	f833 2c50 	ldrh.w	r2, [r3, #-80]
					conf.joystick_mouse.axis[i].logical.max;
 8008a9c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	3360      	adds	r3, #96	; 0x60
 8008aa6:	443b      	add	r3, r7
 8008aa8:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 8008aac:	429a      	cmp	r2, r3
 8008aae:	bf8c      	ite	hi
 8008ab0:	2301      	movhi	r3, #1
 8008ab2:	2300      	movls	r3, #0
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	64bb      	str	r3, [r7, #72]	; 0x48
					a[i] = collect_bits(p, conf.joystick_mouse.axis[i].offset,
 8008ab8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008abc:	3301      	adds	r3, #1
 8008abe:	00db      	lsls	r3, r3, #3
 8008ac0:	3360      	adds	r3, #96	; 0x60
 8008ac2:	443b      	add	r3, r7
 8008ac4:	f833 1c54 	ldrh.w	r1, [r3, #-84]
 8008ac8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008acc:	3301      	adds	r3, #1
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	3360      	adds	r3, #96	; 0x60
 8008ad2:	443b      	add	r3, r7
 8008ad4:	f813 2c52 	ldrb.w	r2, [r3, #-82]
 8008ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ada:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008adc:	f000 fb08 	bl	80090f0 <collect_bits>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008ae8:	b212      	sxth	r2, r2
 8008aea:	005b      	lsls	r3, r3, #1
 8008aec:	3360      	adds	r3, #96	; 0x60
 8008aee:	443b      	add	r3, r7
 8008af0:	f823 2c1c 	strh.w	r2, [r3, #-28]
				for(i=0;i<2;i++) {
 8008af4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008af8:	3301      	adds	r3, #1
 8008afa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008afe:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d9c2      	bls.n	8008a8c <USBH_HID_GamepadDecode+0x98>
								conf.joystick_mouse.axis[i].size, is_signed);
				}

		//process 4 first buttons
		for(i=0;i<4;i++)
 8008b06:	2300      	movs	r3, #0
 8008b08:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008b0c:	e028      	b.n	8008b60 <USBH_HID_GamepadDecode+0x16c>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008b0e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b12:	330c      	adds	r3, #12
 8008b14:	005b      	lsls	r3, r3, #1
 8008b16:	3360      	adds	r3, #96	; 0x60
 8008b18:	443b      	add	r3, r7
 8008b1a:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b22:	4413      	add	r3, r2
 8008b24:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 8008b26:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b2a:	330c      	adds	r3, #12
 8008b2c:	005b      	lsls	r3, r3, #1
 8008b2e:	3360      	adds	r3, #96	; 0x60
 8008b30:	443b      	add	r3, r7
 8008b32:	f813 3c53 	ldrb.w	r3, [r3, #-83]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008b36:	4013      	ands	r3, r2
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00b      	beq.n	8008b56 <USBH_HID_GamepadDecode+0x162>
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 8008b3e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b42:	2201      	movs	r2, #1
 8008b44:	fa02 f303 	lsl.w	r3, r2, r3
 8008b48:	b25a      	sxtb	r2, r3
 8008b4a:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	b25b      	sxtb	r3, r3
 8008b52:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		for(i=0;i<4;i++)
 8008b56:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008b60:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d9d2      	bls.n	8008b0e <USBH_HID_GamepadDecode+0x11a>

		// ... and the eight extra buttons
		for(i=4;i<12;i++)
 8008b68:	2304      	movs	r3, #4
 8008b6a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008b6e:	e029      	b.n	8008bc4 <USBH_HID_GamepadDecode+0x1d0>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008b70:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b74:	330c      	adds	r3, #12
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	3360      	adds	r3, #96	; 0x60
 8008b7a:	443b      	add	r3, r7
 8008b7c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8008b80:	461a      	mov	r2, r3
 8008b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b84:	4413      	add	r3, r2
 8008b86:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8008b88:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b8c:	330c      	adds	r3, #12
 8008b8e:	005b      	lsls	r3, r3, #1
 8008b90:	3360      	adds	r3, #96	; 0x60
 8008b92:	443b      	add	r3, r7
 8008b94:	f813 3c53 	ldrb.w	r3, [r3, #-83]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008b98:	4013      	ands	r3, r2
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00c      	beq.n	8008bba <USBH_HID_GamepadDecode+0x1c6>
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8008ba0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008ba4:	3b04      	subs	r3, #4
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bac:	b25a      	sxtb	r2, r3
 8008bae:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	b25b      	sxtb	r3, r3
 8008bb6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		for(i=4;i<12;i++)
 8008bba:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008bc4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008bc8:	2b0b      	cmp	r3, #11
 8008bca:	d9d1      	bls.n	8008b70 <USBH_HID_GamepadDecode+0x17c>



	for(i=0;i<2;i++) {
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008bd2:	e131      	b.n	8008e38 <USBH_HID_GamepadDecode+0x444>

		int hrange = (conf.joystick_mouse.axis[i].logical.max - abs(conf.joystick_mouse.axis[i].logical.min)) / 2;
 8008bd4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008bd8:	3301      	adds	r3, #1
 8008bda:	00db      	lsls	r3, r3, #3
 8008bdc:	3360      	adds	r3, #96	; 0x60
 8008bde:	443b      	add	r3, r7
 8008be0:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8008be4:	461a      	mov	r2, r3
 8008be6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008bea:	3301      	adds	r3, #1
 8008bec:	00db      	lsls	r3, r3, #3
 8008bee:	3360      	adds	r3, #96	; 0x60
 8008bf0:	443b      	add	r3, r7
 8008bf2:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	da00      	bge.n	8008bfe <USBH_HID_GamepadDecode+0x20a>
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	105b      	asrs	r3, r3, #1
 8008c00:	653b      	str	r3, [r7, #80]	; 0x50
		int dead = hrange/63;
 8008c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c04:	4a4e      	ldr	r2, [pc, #312]	; (8008d40 <USBH_HID_GamepadDecode+0x34c>)
 8008c06:	fb82 1203 	smull	r1, r2, r2, r3
 8008c0a:	441a      	add	r2, r3
 8008c0c:	1152      	asrs	r2, r2, #5
 8008c0e:	17db      	asrs	r3, r3, #31
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (a[i] < conf.joystick_mouse.axis[i].logical.min) a[i] = conf.joystick_mouse.axis[i].logical.min;
 8008c14:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c18:	005b      	lsls	r3, r3, #1
 8008c1a:	3360      	adds	r3, #96	; 0x60
 8008c1c:	443b      	add	r3, r7
 8008c1e:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008c22:	461a      	mov	r2, r3
 8008c24:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c28:	3301      	adds	r3, #1
 8008c2a:	00db      	lsls	r3, r3, #3
 8008c2c:	3360      	adds	r3, #96	; 0x60
 8008c2e:	443b      	add	r3, r7
 8008c30:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	da10      	bge.n	8008c5a <USBH_HID_GamepadDecode+0x266>
 8008c38:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	3360      	adds	r3, #96	; 0x60
 8008c42:	443b      	add	r3, r7
 8008c44:	f833 2c50 	ldrh.w	r2, [r3, #-80]
 8008c48:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c4c:	b212      	sxth	r2, r2
 8008c4e:	005b      	lsls	r3, r3, #1
 8008c50:	3360      	adds	r3, #96	; 0x60
 8008c52:	443b      	add	r3, r7
 8008c54:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8008c58:	e021      	b.n	8008c9e <USBH_HID_GamepadDecode+0x2aa>
		else if (a[i] > conf.joystick_mouse.axis[i].logical.max) a[i] = conf.joystick_mouse.axis[i].logical.max;
 8008c5a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	3360      	adds	r3, #96	; 0x60
 8008c62:	443b      	add	r3, r7
 8008c64:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c6e:	3301      	adds	r3, #1
 8008c70:	00db      	lsls	r3, r3, #3
 8008c72:	3360      	adds	r3, #96	; 0x60
 8008c74:	443b      	add	r3, r7
 8008c76:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	dd0f      	ble.n	8008c9e <USBH_HID_GamepadDecode+0x2aa>
 8008c7e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c82:	3301      	adds	r3, #1
 8008c84:	00db      	lsls	r3, r3, #3
 8008c86:	3360      	adds	r3, #96	; 0x60
 8008c88:	443b      	add	r3, r7
 8008c8a:	f833 2c4e 	ldrh.w	r2, [r3, #-78]
 8008c8e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c92:	b212      	sxth	r2, r2
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	3360      	adds	r3, #96	; 0x60
 8008c98:	443b      	add	r3, r7
 8008c9a:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i] = a[i] - (abs(conf.joystick_mouse.axis[i].logical.min) + conf.joystick_mouse.axis[i].logical.max) / 2;
 8008c9e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	3360      	adds	r3, #96	; 0x60
 8008ca6:	443b      	add	r3, r7
 8008ca8:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	3360      	adds	r3, #96	; 0x60
 8008cb8:	443b      	add	r3, r7
 8008cba:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	3360      	adds	r3, #96	; 0x60
 8008cca:	443b      	add	r3, r7
 8008ccc:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8008cd0:	440b      	add	r3, r1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	da00      	bge.n	8008cd8 <USBH_HID_GamepadDecode+0x2e4>
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	105b      	asrs	r3, r3, #1
 8008cda:	425b      	negs	r3, r3
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	4413      	add	r3, r2
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008ce6:	b212      	sxth	r2, r2
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	3360      	adds	r3, #96	; 0x60
 8008cec:	443b      	add	r3, r7
 8008cee:	f823 2c1c 	strh.w	r2, [r3, #-28]

		hrange -= dead;
 8008cf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	653b      	str	r3, [r7, #80]	; 0x50
		if (a[i] < -dead) a[i] += dead;
 8008cfa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008cfe:	005b      	lsls	r3, r3, #1
 8008d00:	3360      	adds	r3, #96	; 0x60
 8008d02:	443b      	add	r3, r7
 8008d04:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d0c:	425b      	negs	r3, r3
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	da18      	bge.n	8008d44 <USBH_HID_GamepadDecode+0x350>
 8008d12:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d16:	005b      	lsls	r3, r3, #1
 8008d18:	3360      	adds	r3, #96	; 0x60
 8008d1a:	443b      	add	r3, r7
 8008d1c:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	4413      	add	r3, r2
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d2e:	b212      	sxth	r2, r2
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	3360      	adds	r3, #96	; 0x60
 8008d34:	443b      	add	r3, r7
 8008d36:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8008d3a:	e02b      	b.n	8008d94 <USBH_HID_GamepadDecode+0x3a0>
 8008d3c:	20000270 	.word	0x20000270
 8008d40:	82082083 	.word	0x82082083
		else if (a[i] > dead) a[i] -= dead;
 8008d44:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	3360      	adds	r3, #96	; 0x60
 8008d4c:	443b      	add	r3, r7
 8008d4e:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008d52:	461a      	mov	r2, r3
 8008d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d56:	4293      	cmp	r3, r2
 8008d58:	da14      	bge.n	8008d84 <USBH_HID_GamepadDecode+0x390>
 8008d5a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d5e:	005b      	lsls	r3, r3, #1
 8008d60:	3360      	adds	r3, #96	; 0x60
 8008d62:	443b      	add	r3, r7
 8008d64:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d76:	b212      	sxth	r2, r2
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	3360      	adds	r3, #96	; 0x60
 8008d7c:	443b      	add	r3, r7
 8008d7e:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8008d82:	e007      	b.n	8008d94 <USBH_HID_GamepadDecode+0x3a0>
		else a[i] = 0;
 8008d84:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d88:	005b      	lsls	r3, r3, #1
 8008d8a:	3360      	adds	r3, #96	; 0x60
 8008d8c:	443b      	add	r3, r7
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i] = (a[i] * 127) / hrange;
 8008d94:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	3360      	adds	r3, #96	; 0x60
 8008d9c:	443b      	add	r3, r7
 8008d9e:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008da2:	461a      	mov	r2, r3
 8008da4:	4613      	mov	r3, r2
 8008da6:	01db      	lsls	r3, r3, #7
 8008da8:	1a9a      	subs	r2, r3, r2
 8008daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dac:	fb92 f2f3 	sdiv	r2, r2, r3
 8008db0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008db4:	b212      	sxth	r2, r2
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	3360      	adds	r3, #96	; 0x60
 8008dba:	443b      	add	r3, r7
 8008dbc:	f823 2c1c 	strh.w	r2, [r3, #-28]

		if (a[i] < -127) a[i] = -127;
 8008dc0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008dc4:	005b      	lsls	r3, r3, #1
 8008dc6:	3360      	adds	r3, #96	; 0x60
 8008dc8:	443b      	add	r3, r7
 8008dca:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008dce:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8008dd2:	da09      	bge.n	8008de8 <USBH_HID_GamepadDecode+0x3f4>
 8008dd4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008dd8:	005b      	lsls	r3, r3, #1
 8008dda:	3360      	adds	r3, #96	; 0x60
 8008ddc:	443b      	add	r3, r7
 8008dde:	f64f 7281 	movw	r2, #65409	; 0xff81
 8008de2:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8008de6:	e010      	b.n	8008e0a <USBH_HID_GamepadDecode+0x416>
		else if (a[i] > 127) a[i] = 127;
 8008de8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008dec:	005b      	lsls	r3, r3, #1
 8008dee:	3360      	adds	r3, #96	; 0x60
 8008df0:	443b      	add	r3, r7
 8008df2:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008df6:	2b7f      	cmp	r3, #127	; 0x7f
 8008df8:	dd07      	ble.n	8008e0a <USBH_HID_GamepadDecode+0x416>
 8008dfa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008dfe:	005b      	lsls	r3, r3, #1
 8008e00:	3360      	adds	r3, #96	; 0x60
 8008e02:	443b      	add	r3, r7
 8008e04:	227f      	movs	r2, #127	; 0x7f
 8008e06:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i]=a[i]+127; // mist wants a value in the range [0..255]
 8008e0a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e0e:	005b      	lsls	r3, r3, #1
 8008e10:	3360      	adds	r3, #96	; 0x60
 8008e12:	443b      	add	r3, r7
 8008e14:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	337f      	adds	r3, #127	; 0x7f
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e22:	b212      	sxth	r2, r2
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	3360      	adds	r3, #96	; 0x60
 8008e28:	443b      	add	r3, r7
 8008e2a:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for(i=0;i<2;i++) {
 8008e2e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e32:	3301      	adds	r3, #1
 8008e34:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008e38:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	f67f aec9 	bls.w	8008bd4 <USBH_HID_GamepadDecode+0x1e0>
	}

				if(a[0] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_LEFT;
 8008e42:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8008e46:	2b3f      	cmp	r3, #63	; 0x3f
 8008e48:	dc05      	bgt.n	8008e56 <USBH_HID_GamepadDecode+0x462>
 8008e4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e4e:	f043 0302 	orr.w	r3, r3, #2
 8008e52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[0] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_RIGHT;
 8008e56:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8008e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8008e5c:	dd05      	ble.n	8008e6a <USBH_HID_GamepadDecode+0x476>
 8008e5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e62:	f043 0301 	orr.w	r3, r3, #1
 8008e66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[1] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_UP;
 8008e6a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8008e6e:	2b3f      	cmp	r3, #63	; 0x3f
 8008e70:	dc05      	bgt.n	8008e7e <USBH_HID_GamepadDecode+0x48a>
 8008e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e76:	f043 0308 	orr.w	r3, r3, #8
 8008e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[1] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_DOWN;
 8008e7e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8008e82:	2bc0      	cmp	r3, #192	; 0xc0
 8008e84:	dd05      	ble.n	8008e92 <USBH_HID_GamepadDecode+0x49e>
 8008e86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e8a:	f043 0304 	orr.w	r3, r3, #4
 8008e8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				jmap |= btn << JOY_BTN_SHIFT;      // add buttons
 8008e92:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8008e96:	011b      	lsls	r3, r3, #4
 8008e98:	b25a      	sxtb	r2, r3
 8008e9a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	b25b      	sxtb	r3, r3
 8008ea2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

				gamepad_info.gamepad_data = jmap;
 8008ea6:	4a07      	ldr	r2, [pc, #28]	; (8008ec4 <USBH_HID_GamepadDecode+0x4d0>)
 8008ea8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eac:	7013      	strb	r3, [r2, #0]
				gamepad_info.gamepad_extraBtn = btn_extra;
 8008eae:	4a05      	ldr	r2, [pc, #20]	; (8008ec4 <USBH_HID_GamepadDecode+0x4d0>)
 8008eb0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8008eb4:	7053      	strb	r3, [r2, #1]

		  return USBH_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e000      	b.n	8008ebc <USBH_HID_GamepadDecode+0x4c8>
	    }



	  return USBH_FAIL;
 8008eba:	2302      	movs	r3, #2

}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3760      	adds	r7, #96	; 0x60
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8008ec4:	2000026c 	.word	0x2000026c

08008ec8 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8008edc:	3208      	adds	r2, #8
 8008ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee2:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 8008ee4:	4b22      	ldr	r3, [pc, #136]	; (8008f70 <USBH_HID_KeybdInit+0xa8>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	709a      	strb	r2, [r3, #2]
 8008eea:	4b21      	ldr	r3, [pc, #132]	; (8008f70 <USBH_HID_KeybdInit+0xa8>)
 8008eec:	789a      	ldrb	r2, [r3, #2]
 8008eee:	4b20      	ldr	r3, [pc, #128]	; (8008f70 <USBH_HID_KeybdInit+0xa8>)
 8008ef0:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 8008ef2:	4b1f      	ldr	r3, [pc, #124]	; (8008f70 <USBH_HID_KeybdInit+0xa8>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	711a      	strb	r2, [r3, #4]
 8008ef8:	4b1d      	ldr	r3, [pc, #116]	; (8008f70 <USBH_HID_KeybdInit+0xa8>)
 8008efa:	791a      	ldrb	r2, [r3, #4]
 8008efc:	4b1c      	ldr	r3, [pc, #112]	; (8008f70 <USBH_HID_KeybdInit+0xa8>)
 8008efe:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 8008f00:	4b1b      	ldr	r3, [pc, #108]	; (8008f70 <USBH_HID_KeybdInit+0xa8>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	719a      	strb	r2, [r3, #6]
 8008f06:	4b1a      	ldr	r3, [pc, #104]	; (8008f70 <USBH_HID_KeybdInit+0xa8>)
 8008f08:	799a      	ldrb	r2, [r3, #6]
 8008f0a:	4b19      	ldr	r3, [pc, #100]	; (8008f70 <USBH_HID_KeybdInit+0xa8>)
 8008f0c:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8008f0e:	4b18      	ldr	r3, [pc, #96]	; (8008f70 <USBH_HID_KeybdInit+0xa8>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	721a      	strb	r2, [r3, #8]
 8008f14:	4b16      	ldr	r3, [pc, #88]	; (8008f70 <USBH_HID_KeybdInit+0xa8>)
 8008f16:	7a1a      	ldrb	r2, [r3, #8]
 8008f18:	4b15      	ldr	r3, [pc, #84]	; (8008f70 <USBH_HID_KeybdInit+0xa8>)
 8008f1a:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	60fb      	str	r3, [r7, #12]
 8008f20:	e00c      	b.n	8008f3c <USBH_HID_KeybdInit+0x74>
  {
    keybd_report_data[x] = 0U;
 8008f22:	4a14      	ldr	r2, [pc, #80]	; (8008f74 <USBH_HID_KeybdInit+0xac>)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2100      	movs	r1, #0
 8008f28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8008f2c:	4a12      	ldr	r2, [pc, #72]	; (8008f78 <USBH_HID_KeybdInit+0xb0>)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2100      	movs	r1, #0
 8008f32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	60fb      	str	r3, [r7, #12]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d9ef      	bls.n	8008f22 <USBH_HID_KeybdInit+0x5a>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	8b1b      	ldrh	r3, [r3, #24]
 8008f46:	2b08      	cmp	r3, #8
 8008f48:	d902      	bls.n	8008f50 <USBH_HID_KeybdInit+0x88>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2208      	movs	r2, #8
 8008f4e:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	4a09      	ldr	r2, [pc, #36]	; (8008f78 <USBH_HID_KeybdInit+0xb0>)
 8008f54:	615a      	str	r2, [r3, #20]

  USBH_HID_FifoInit(&HID_Handle->fifo, keybd_fifo_buf, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	3308      	adds	r3, #8
 8008f5a:	2250      	movs	r2, #80	; 0x50
 8008f5c:	4907      	ldr	r1, [pc, #28]	; (8008f7c <USBH_HID_KeybdInit+0xb4>)
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff fc34 	bl	80087cc <USBH_HID_FifoInit>

  return USBH_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	200002f4 	.word	0x200002f4
 8008f74:	2000030c 	.word	0x2000030c
 8008f78:	20000304 	.word	0x20000304
 8008f7c:	20000314 	.word	0x20000314

08008f80 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f80d 	bl	8008fa8 <USBH_HID_KeybdDecode>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 8008f94:	4b03      	ldr	r3, [pc, #12]	; (8008fa4 <USBH_HID_GetKeybdInfo+0x24>)
 8008f96:	e000      	b.n	8008f9a <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 8008f98:	2300      	movs	r3, #0
  }
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	200002f4 	.word	0x200002f4

08008fa8 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8008fbc:	3208      	adds	r2, #8
 8008fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc2:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	8b1b      	ldrh	r3, [r3, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d101      	bne.n	8008fd0 <USBH_HID_KeybdDecode+0x28>
  {
    return USBH_FAIL;
 8008fcc:	2302      	movs	r3, #2
 8008fce:	e072      	b.n	80090b6 <USBH_HID_KeybdDecode+0x10e>
  }
  /*Fill report */

  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f103 0008 	add.w	r0, r3, #8
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	8b1b      	ldrh	r3, [r3, #24]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	4938      	ldr	r1, [pc, #224]	; (80090c0 <USBH_HID_KeybdDecode+0x118>)
 8008fde:	f7ff fc11 	bl	8008804 <USBH_HID_FifoRead>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	8b1b      	ldrh	r3, [r3, #24]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d162      	bne.n	80090b4 <USBH_HID_KeybdDecode+0x10c>
  {
	  if (keybd_report_data[0] == 0x1010000 && keybd_report_data[1]==0x1010101)
 8008fee:	4b34      	ldr	r3, [pc, #208]	; (80090c0 <USBH_HID_KeybdDecode+0x118>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a34      	ldr	r2, [pc, #208]	; (80090c4 <USBH_HID_KeybdDecode+0x11c>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d106      	bne.n	8009006 <USBH_HID_KeybdDecode+0x5e>
 8008ff8:	4b31      	ldr	r3, [pc, #196]	; (80090c0 <USBH_HID_KeybdDecode+0x118>)
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 8009000:	d101      	bne.n	8009006 <USBH_HID_KeybdDecode+0x5e>
	  {
		  return USBH_FAIL;
 8009002:	2302      	movs	r3, #2
 8009004:	e057      	b.n	80090b6 <USBH_HID_KeybdDecode+0x10e>
	  }
	//  if keybd_re  5055
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8009006:	2100      	movs	r1, #0
 8009008:	482f      	ldr	r0, [pc, #188]	; (80090c8 <USBH_HID_KeybdDecode+0x120>)
 800900a:	f000 fa8f 	bl	800952c <HID_ReadItem>
 800900e:	4603      	mov	r3, r0
 8009010:	b2da      	uxtb	r2, r3
 8009012:	4b2e      	ldr	r3, [pc, #184]	; (80090cc <USBH_HID_KeybdDecode+0x124>)
 8009014:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 8009016:	2100      	movs	r1, #0
 8009018:	482d      	ldr	r0, [pc, #180]	; (80090d0 <USBH_HID_KeybdDecode+0x128>)
 800901a:	f000 fa87 	bl	800952c <HID_ReadItem>
 800901e:	4603      	mov	r3, r0
 8009020:	b2da      	uxtb	r2, r3
 8009022:	4b2a      	ldr	r3, [pc, #168]	; (80090cc <USBH_HID_KeybdDecode+0x124>)
 8009024:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8009026:	2100      	movs	r1, #0
 8009028:	482a      	ldr	r0, [pc, #168]	; (80090d4 <USBH_HID_KeybdDecode+0x12c>)
 800902a:	f000 fa7f 	bl	800952c <HID_ReadItem>
 800902e:	4603      	mov	r3, r0
 8009030:	b2da      	uxtb	r2, r3
 8009032:	4b26      	ldr	r3, [pc, #152]	; (80090cc <USBH_HID_KeybdDecode+0x124>)
 8009034:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8009036:	2100      	movs	r1, #0
 8009038:	4827      	ldr	r0, [pc, #156]	; (80090d8 <USBH_HID_KeybdDecode+0x130>)
 800903a:	f000 fa77 	bl	800952c <HID_ReadItem>
 800903e:	4603      	mov	r3, r0
 8009040:	b2da      	uxtb	r2, r3
 8009042:	4b22      	ldr	r3, [pc, #136]	; (80090cc <USBH_HID_KeybdDecode+0x124>)
 8009044:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8009046:	2100      	movs	r1, #0
 8009048:	4824      	ldr	r0, [pc, #144]	; (80090dc <USBH_HID_KeybdDecode+0x134>)
 800904a:	f000 fa6f 	bl	800952c <HID_ReadItem>
 800904e:	4603      	mov	r3, r0
 8009050:	b2da      	uxtb	r2, r3
 8009052:	4b1e      	ldr	r3, [pc, #120]	; (80090cc <USBH_HID_KeybdDecode+0x124>)
 8009054:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8009056:	2100      	movs	r1, #0
 8009058:	4821      	ldr	r0, [pc, #132]	; (80090e0 <USBH_HID_KeybdDecode+0x138>)
 800905a:	f000 fa67 	bl	800952c <HID_ReadItem>
 800905e:	4603      	mov	r3, r0
 8009060:	b2da      	uxtb	r2, r3
 8009062:	4b1a      	ldr	r3, [pc, #104]	; (80090cc <USBH_HID_KeybdDecode+0x124>)
 8009064:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 8009066:	2100      	movs	r1, #0
 8009068:	481e      	ldr	r0, [pc, #120]	; (80090e4 <USBH_HID_KeybdDecode+0x13c>)
 800906a:	f000 fa5f 	bl	800952c <HID_ReadItem>
 800906e:	4603      	mov	r3, r0
 8009070:	b2da      	uxtb	r2, r3
 8009072:	4b16      	ldr	r3, [pc, #88]	; (80090cc <USBH_HID_KeybdDecode+0x124>)
 8009074:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8009076:	2100      	movs	r1, #0
 8009078:	481b      	ldr	r0, [pc, #108]	; (80090e8 <USBH_HID_KeybdDecode+0x140>)
 800907a:	f000 fa57 	bl	800952c <HID_ReadItem>
 800907e:	4603      	mov	r3, r0
 8009080:	b2da      	uxtb	r2, r3
 8009082:	4b12      	ldr	r3, [pc, #72]	; (80090cc <USBH_HID_KeybdDecode+0x124>)
 8009084:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8009086:	2300      	movs	r3, #0
 8009088:	73fb      	strb	r3, [r7, #15]
 800908a:	e00e      	b.n	80090aa <USBH_HID_KeybdDecode+0x102>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800908c:	7bfb      	ldrb	r3, [r7, #15]
 800908e:	4619      	mov	r1, r3
 8009090:	4816      	ldr	r0, [pc, #88]	; (80090ec <USBH_HID_KeybdDecode+0x144>)
 8009092:	f000 fa4b 	bl	800952c <HID_ReadItem>
 8009096:	4602      	mov	r2, r0
 8009098:	7bfb      	ldrb	r3, [r7, #15]
 800909a:	b2d1      	uxtb	r1, r2
 800909c:	4a0b      	ldr	r2, [pc, #44]	; (80090cc <USBH_HID_KeybdDecode+0x124>)
 800909e:	4413      	add	r3, r2
 80090a0:	460a      	mov	r2, r1
 80090a2:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
 80090a6:	3301      	adds	r3, #1
 80090a8:	73fb      	strb	r3, [r7, #15]
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	2b05      	cmp	r3, #5
 80090ae:	d9ed      	bls.n	800908c <USBH_HID_KeybdDecode+0xe4>
    }

    return USBH_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	e000      	b.n	80090b6 <USBH_HID_KeybdDecode+0x10e>
  }
  return   USBH_FAIL;
 80090b4:	2302      	movs	r3, #2
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	2000030c 	.word	0x2000030c
 80090c4:	01010000 	.word	0x01010000
 80090c8:	0800e208 	.word	0x0800e208
 80090cc:	200002f4 	.word	0x200002f4
 80090d0:	0800e228 	.word	0x0800e228
 80090d4:	0800e248 	.word	0x0800e248
 80090d8:	0800e268 	.word	0x0800e268
 80090dc:	0800e288 	.word	0x0800e288
 80090e0:	0800e2a8 	.word	0x0800e2a8
 80090e4:	0800e2c8 	.word	0x0800e2c8
 80090e8:	0800e2e8 	.word	0x0800e2e8
 80090ec:	0800e308 	.word	0x0800e308

080090f0 <collect_bits>:


/**
  * @}
  */
uint16_t collect_bits(uint8_t *p, uint16_t offset, uint8_t size, int is_signed) {
 80090f0:	b480      	push	{r7}
 80090f2:	b089      	sub	sp, #36	; 0x24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	607b      	str	r3, [r7, #4]
 80090fa:	460b      	mov	r3, r1
 80090fc:	817b      	strh	r3, [r7, #10]
 80090fe:	4613      	mov	r3, r2
 8009100:	727b      	strb	r3, [r7, #9]
  // mask unused bits of first byte
  uint8_t mask = 0xff << (offset&7);
 8009102:	897b      	ldrh	r3, [r7, #10]
 8009104:	f003 0307 	and.w	r3, r3, #7
 8009108:	22ff      	movs	r2, #255	; 0xff
 800910a:	fa02 f303 	lsl.w	r3, r2, r3
 800910e:	75fb      	strb	r3, [r7, #23]
  uint8_t byte = offset/8;
 8009110:	897b      	ldrh	r3, [r7, #10]
 8009112:	08db      	lsrs	r3, r3, #3
 8009114:	b29b      	uxth	r3, r3
 8009116:	77fb      	strb	r3, [r7, #31]
  uint8_t bits = size;
 8009118:	7a7b      	ldrb	r3, [r7, #9]
 800911a:	77bb      	strb	r3, [r7, #30]
  uint8_t shift = offset&7;
 800911c:	897b      	ldrh	r3, [r7, #10]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	f003 0307 	and.w	r3, r3, #7
 8009124:	777b      	strb	r3, [r7, #29]


  uint16_t rval = (p[byte++] & mask) >> shift;
 8009126:	7ffb      	ldrb	r3, [r7, #31]
 8009128:	1c5a      	adds	r2, r3, #1
 800912a:	77fa      	strb	r2, [r7, #31]
 800912c:	461a      	mov	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	4413      	add	r3, r2
 8009132:	781a      	ldrb	r2, [r3, #0]
 8009134:	7dfb      	ldrb	r3, [r7, #23]
 8009136:	4013      	ands	r3, r2
 8009138:	b2db      	uxtb	r3, r3
 800913a:	461a      	mov	r2, r3
 800913c:	7f7b      	ldrb	r3, [r7, #29]
 800913e:	fa42 f303 	asr.w	r3, r2, r3
 8009142:	837b      	strh	r3, [r7, #26]
  mask = 0xff;
 8009144:	23ff      	movs	r3, #255	; 0xff
 8009146:	75fb      	strb	r3, [r7, #23]
  shift = 8-shift;
 8009148:	7f7b      	ldrb	r3, [r7, #29]
 800914a:	f1c3 0308 	rsb	r3, r3, #8
 800914e:	777b      	strb	r3, [r7, #29]
  bits -= shift;
 8009150:	7fba      	ldrb	r2, [r7, #30]
 8009152:	7f7b      	ldrb	r3, [r7, #29]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	77bb      	strb	r3, [r7, #30]

  // first byte already contained more bits than we need
  if(shift > size) {
 8009158:	7f7a      	ldrb	r2, [r7, #29]
 800915a:	7a7b      	ldrb	r3, [r7, #9]
 800915c:	429a      	cmp	r2, r3
 800915e:	d937      	bls.n	80091d0 <collect_bits+0xe0>
    // mask unused bits
    rval &= (1<<size)-1;
 8009160:	7a7b      	ldrb	r3, [r7, #9]
 8009162:	2201      	movs	r2, #1
 8009164:	fa02 f303 	lsl.w	r3, r2, r3
 8009168:	b29b      	uxth	r3, r3
 800916a:	3b01      	subs	r3, #1
 800916c:	b29b      	uxth	r3, r3
 800916e:	b21a      	sxth	r2, r3
 8009170:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009174:	4013      	ands	r3, r2
 8009176:	b21b      	sxth	r3, r3
 8009178:	837b      	strh	r3, [r7, #26]
 800917a:	e02c      	b.n	80091d6 <collect_bits+0xe6>
  } else {
    // further bytes if required
    while(bits) {
      mask = (bits<8)?(0xff>>(8-bits)):0xff;
 800917c:	7fbb      	ldrb	r3, [r7, #30]
 800917e:	2b07      	cmp	r3, #7
 8009180:	d807      	bhi.n	8009192 <collect_bits+0xa2>
 8009182:	7fbb      	ldrb	r3, [r7, #30]
 8009184:	f1c3 0308 	rsb	r3, r3, #8
 8009188:	22ff      	movs	r2, #255	; 0xff
 800918a:	fa42 f303 	asr.w	r3, r2, r3
 800918e:	b2db      	uxtb	r3, r3
 8009190:	e000      	b.n	8009194 <collect_bits+0xa4>
 8009192:	23ff      	movs	r3, #255	; 0xff
 8009194:	75fb      	strb	r3, [r7, #23]
      rval += (p[byte++] & mask) << shift;
 8009196:	7ffb      	ldrb	r3, [r7, #31]
 8009198:	1c5a      	adds	r2, r3, #1
 800919a:	77fa      	strb	r2, [r7, #31]
 800919c:	461a      	mov	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	4413      	add	r3, r2
 80091a2:	781a      	ldrb	r2, [r3, #0]
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
 80091a6:	4013      	ands	r3, r2
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	461a      	mov	r2, r3
 80091ac:	7f7b      	ldrb	r3, [r7, #29]
 80091ae:	fa02 f303 	lsl.w	r3, r2, r3
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	8b7b      	ldrh	r3, [r7, #26]
 80091b6:	4413      	add	r3, r2
 80091b8:	837b      	strh	r3, [r7, #26]
      shift += 8;
 80091ba:	7f7b      	ldrb	r3, [r7, #29]
 80091bc:	3308      	adds	r3, #8
 80091be:	777b      	strb	r3, [r7, #29]
      bits -= (bits>8)?8:bits;
 80091c0:	7fbb      	ldrb	r3, [r7, #30]
 80091c2:	2b08      	cmp	r3, #8
 80091c4:	bf28      	it	cs
 80091c6:	2308      	movcs	r3, #8
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	7fba      	ldrb	r2, [r7, #30]
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	77bb      	strb	r3, [r7, #30]
    while(bits) {
 80091d0:	7fbb      	ldrb	r3, [r7, #30]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1d2      	bne.n	800917c <collect_bits+0x8c>
    }
  }

  if(is_signed) {
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d016      	beq.n	800920a <collect_bits+0x11a>
    // do sign expansion
    uint16_t sign_bit = 1<<(size-1);
 80091dc:	7a7b      	ldrb	r3, [r7, #9]
 80091de:	3b01      	subs	r3, #1
 80091e0:	2201      	movs	r2, #1
 80091e2:	fa02 f303 	lsl.w	r3, r2, r3
 80091e6:	833b      	strh	r3, [r7, #24]
    if(rval & sign_bit) {
 80091e8:	8b7a      	ldrh	r2, [r7, #26]
 80091ea:	8b3b      	ldrh	r3, [r7, #24]
 80091ec:	4013      	ands	r3, r2
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00a      	beq.n	800920a <collect_bits+0x11a>
      while(sign_bit) {
 80091f4:	e006      	b.n	8009204 <collect_bits+0x114>
	rval |= sign_bit;
 80091f6:	8b7a      	ldrh	r2, [r7, #26]
 80091f8:	8b3b      	ldrh	r3, [r7, #24]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	837b      	strh	r3, [r7, #26]
	sign_bit <<= 1;
 80091fe:	8b3b      	ldrh	r3, [r7, #24]
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	833b      	strh	r3, [r7, #24]
      while(sign_bit) {
 8009204:	8b3b      	ldrh	r3, [r7, #24]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1f5      	bne.n	80091f6 <collect_bits+0x106>
      }
    }
  }

  return rval;
 800920a:	8b7b      	ldrh	r3, [r7, #26]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3724      	adds	r7, #36	; 0x24
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 800922c:	3208      	adds	r2, #8
 800922e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009232:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8009234:	4b25      	ldr	r3, [pc, #148]	; (80092cc <USBH_HID_MouseInit+0xb4>)
 8009236:	2200      	movs	r2, #0
 8009238:	801a      	strh	r2, [r3, #0]
  mouse_info.y = 0U;
 800923a:	4b24      	ldr	r3, [pc, #144]	; (80092cc <USBH_HID_MouseInit+0xb4>)
 800923c:	2200      	movs	r2, #0
 800923e:	805a      	strh	r2, [r3, #2]
  mouse_info.buttons[0] = 0U;
 8009240:	4b22      	ldr	r3, [pc, #136]	; (80092cc <USBH_HID_MouseInit+0xb4>)
 8009242:	2200      	movs	r2, #0
 8009244:	711a      	strb	r2, [r3, #4]
  mouse_info.buttons[1] = 0U;
 8009246:	4b21      	ldr	r3, [pc, #132]	; (80092cc <USBH_HID_MouseInit+0xb4>)
 8009248:	2200      	movs	r2, #0
 800924a:	715a      	strb	r2, [r3, #5]
  mouse_info.buttons[2] = 0U;
 800924c:	4b1f      	ldr	r3, [pc, #124]	; (80092cc <USBH_HID_MouseInit+0xb4>)
 800924e:	2200      	movs	r2, #0
 8009250:	719a      	strb	r2, [r3, #6]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8009252:	2300      	movs	r3, #0
 8009254:	60fb      	str	r3, [r7, #12]
 8009256:	e00c      	b.n	8009272 <USBH_HID_MouseInit+0x5a>
  {
    mouse_report_data[i] = 0U;
 8009258:	4a1d      	ldr	r2, [pc, #116]	; (80092d0 <USBH_HID_MouseInit+0xb8>)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	4413      	add	r3, r2
 800925e:	2200      	movs	r2, #0
 8009260:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 8009262:	4a1c      	ldr	r2, [pc, #112]	; (80092d4 <USBH_HID_MouseInit+0xbc>)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2100      	movs	r1, #0
 8009268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3301      	adds	r3, #1
 8009270:	60fb      	str	r3, [r7, #12]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d9ef      	bls.n	8009258 <USBH_HID_MouseInit+0x40>

  //if (HID_Handle->length > sizeof(mouse_report_data))
  //{
  //  HID_Handle->length = sizeof(mouse_report_data);
  //}
  HID_Handle->length = HID_Handle->HID_Desc.RptDesc.report_size+ (HID_Handle->HID_Desc.RptDesc.report_id?1:0);
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800927e:	b29a      	uxth	r2, r3
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009286:	2b00      	cmp	r3, #0
 8009288:	bf14      	ite	ne
 800928a:	2301      	movne	r3, #1
 800928c:	2300      	moveq	r3, #0
 800928e:	b2db      	uxtb	r3, r3
 8009290:	b29b      	uxth	r3, r3
 8009292:	4413      	add	r3, r2
 8009294:	b29a      	uxth	r2, r3
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	831a      	strh	r2, [r3, #24]
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	4a0d      	ldr	r2, [pc, #52]	; (80092d4 <USBH_HID_MouseInit+0xbc>)
 800929e:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * HID_Handle->length);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f103 0008 	add.w	r0, r3, #8
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	8b1b      	ldrh	r3, [r3, #24]
 80092b0:	461a      	mov	r2, r3
 80092b2:	0092      	lsls	r2, r2, #2
 80092b4:	4413      	add	r3, r2
 80092b6:	005b      	lsls	r3, r3, #1
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	461a      	mov	r2, r3
 80092bc:	f7ff fa86 	bl	80087cc <USBH_HID_FifoInit>

  return USBH_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20000414 	.word	0x20000414
 80092d0:	2000041c 	.word	0x2000041c
 80092d4:	20000424 	.word	0x20000424

080092d8 <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f80d 	bl	8009300 <USBH_HID_MouseDecode>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 80092ec:	4b03      	ldr	r3, [pc, #12]	; (80092fc <USBH_HID_GetMouseInfo+0x24>)
 80092ee:	e000      	b.n	80092f2 <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 80092f0:	2300      	movs	r3, #0
  }
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20000414 	.word	0x20000414

08009300 <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8009314:	3208      	adds	r2, #8
 8009316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931a:	61bb      	str	r3, [r7, #24]

  if (HID_Handle->length == 0U)
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	8b1b      	ldrh	r3, [r3, #24]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d101      	bne.n	8009328 <USBH_HID_MouseDecode+0x28>
  {
    return USBH_FAIL;
 8009324:	2302      	movs	r3, #2
 8009326:	e0f6      	b.n	8009516 <USBH_HID_MouseDecode+0x216>
  }

  //Clear mouse_report_data

  memset(&mouse_report_data,0,sizeof(mouse_report_data));
 8009328:	2208      	movs	r2, #8
 800932a:	2100      	movs	r1, #0
 800932c:	487c      	ldr	r0, [pc, #496]	; (8009520 <USBH_HID_MouseDecode+0x220>)
 800932e:	f004 fdbf 	bl	800deb0 <memset>


  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) !=0)
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	f103 0008 	add.w	r0, r3, #8
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	8b1b      	ldrh	r3, [r3, #24]
 800933c:	461a      	mov	r2, r3
 800933e:	4978      	ldr	r1, [pc, #480]	; (8009520 <USBH_HID_MouseDecode+0x220>)
 8009340:	f7ff fa60 	bl	8008804 <USBH_HID_FifoRead>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	f000 80e4 	beq.w	8009514 <USBH_HID_MouseDecode+0x214>
  {

	  uint8_t btn = 0;
 800934c:	2300      	movs	r3, #0
 800934e:	77fb      	strb	r3, [r7, #31]
	  uint8_t btn_extra = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	77bb      	strb	r3, [r7, #30]
	  uint8_t i;



	  // skip report id if present
	  uint8_t *p = mouse_report_data + (HID_Handle->HID_Desc.RptDesc.report_id?1:0);
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <USBH_HID_MouseDecode+0x62>
 800935e:	4b71      	ldr	r3, [pc, #452]	; (8009524 <USBH_HID_MouseDecode+0x224>)
 8009360:	e000      	b.n	8009364 <USBH_HID_MouseDecode+0x64>
 8009362:	4b6f      	ldr	r3, [pc, #444]	; (8009520 <USBH_HID_MouseDecode+0x220>)
 8009364:	617b      	str	r3, [r7, #20]


	  //process axis
	  // two axes ...
	  		for(i=0;i<2;i++) {
 8009366:	2300      	movs	r3, #0
 8009368:	777b      	strb	r3, [r7, #29]
 800936a:	e02d      	b.n	80093c8 <USBH_HID_MouseDecode+0xc8>
	  			// if logical minimum is > logical maximum then logical minimum
	  			// is signed. This means that the value itself is also signed
	  			int is_signed = HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.min >
 800936c:	7f7b      	ldrb	r3, [r7, #29]
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	3306      	adds	r3, #6
 8009372:	00db      	lsls	r3, r3, #3
 8009374:	4413      	add	r3, r2
 8009376:	899a      	ldrh	r2, [r3, #12]
	  				HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.max;
 8009378:	7f7b      	ldrb	r3, [r7, #29]
 800937a:	69b9      	ldr	r1, [r7, #24]
 800937c:	3306      	adds	r3, #6
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	440b      	add	r3, r1
 8009382:	89db      	ldrh	r3, [r3, #14]
	  			int is_signed = HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.min >
 8009384:	429a      	cmp	r2, r3
 8009386:	bf8c      	ite	hi
 8009388:	2301      	movhi	r3, #1
 800938a:	2300      	movls	r3, #0
 800938c:	b2db      	uxtb	r3, r3
 800938e:	613b      	str	r3, [r7, #16]
	  			a[i] = collect_bits(p, HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].offset,
 8009390:	7f7b      	ldrb	r3, [r7, #29]
 8009392:	69ba      	ldr	r2, [r7, #24]
 8009394:	3306      	adds	r3, #6
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	4413      	add	r3, r2
 800939a:	8919      	ldrh	r1, [r3, #8]
 800939c:	7f7b      	ldrb	r3, [r7, #29]
 800939e:	69ba      	ldr	r2, [r7, #24]
 80093a0:	3306      	adds	r3, #6
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	4413      	add	r3, r2
 80093a6:	7a9a      	ldrb	r2, [r3, #10]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	6978      	ldr	r0, [r7, #20]
 80093ac:	f7ff fea0 	bl	80090f0 <collect_bits>
 80093b0:	4603      	mov	r3, r0
 80093b2:	461a      	mov	r2, r3
 80093b4:	7f7b      	ldrb	r3, [r7, #29]
 80093b6:	b212      	sxth	r2, r2
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	3320      	adds	r3, #32
 80093bc:	443b      	add	r3, r7
 80093be:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		for(i=0;i<2;i++) {
 80093c2:	7f7b      	ldrb	r3, [r7, #29]
 80093c4:	3301      	adds	r3, #1
 80093c6:	777b      	strb	r3, [r7, #29]
 80093c8:	7f7b      	ldrb	r3, [r7, #29]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d9ce      	bls.n	800936c <USBH_HID_MouseDecode+0x6c>
	  					HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].size, is_signed);
	  		}

	  //process 4 first buttons
	  for(i=0;i<4;i++)
 80093ce:	2300      	movs	r3, #0
 80093d0:	777b      	strb	r3, [r7, #29]
 80093d2:	e020      	b.n	8009416 <USBH_HID_MouseDecode+0x116>
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 80093d4:	7f7b      	ldrb	r3, [r7, #29]
 80093d6:	69ba      	ldr	r2, [r7, #24]
 80093d8:	3320      	adds	r3, #32
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	4413      	add	r3, r2
 80093de:	7a1b      	ldrb	r3, [r3, #8]
 80093e0:	461a      	mov	r2, r3
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	4413      	add	r3, r2
 80093e6:	781a      	ldrb	r2, [r3, #0]
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 80093e8:	7f7b      	ldrb	r3, [r7, #29]
 80093ea:	69b9      	ldr	r1, [r7, #24]
 80093ec:	3320      	adds	r3, #32
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	440b      	add	r3, r1
 80093f2:	7a5b      	ldrb	r3, [r3, #9]
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 80093f4:	4013      	ands	r3, r2
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d009      	beq.n	8009410 <USBH_HID_MouseDecode+0x110>
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 80093fc:	7f7b      	ldrb	r3, [r7, #29]
 80093fe:	2201      	movs	r2, #1
 8009400:	fa02 f303 	lsl.w	r3, r2, r3
 8009404:	b25a      	sxtb	r2, r3
 8009406:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800940a:	4313      	orrs	r3, r2
 800940c:	b25b      	sxtb	r3, r3
 800940e:	77fb      	strb	r3, [r7, #31]
	  for(i=0;i<4;i++)
 8009410:	7f7b      	ldrb	r3, [r7, #29]
 8009412:	3301      	adds	r3, #1
 8009414:	777b      	strb	r3, [r7, #29]
 8009416:	7f7b      	ldrb	r3, [r7, #29]
 8009418:	2b03      	cmp	r3, #3
 800941a:	d9db      	bls.n	80093d4 <USBH_HID_MouseDecode+0xd4>

	  // ... and the eight extra buttons
	  for(i=4;i<12;i++)
 800941c:	2304      	movs	r3, #4
 800941e:	777b      	strb	r3, [r7, #29]
 8009420:	e021      	b.n	8009466 <USBH_HID_MouseDecode+0x166>
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 8009422:	7f7b      	ldrb	r3, [r7, #29]
 8009424:	69ba      	ldr	r2, [r7, #24]
 8009426:	3320      	adds	r3, #32
 8009428:	005b      	lsls	r3, r3, #1
 800942a:	4413      	add	r3, r2
 800942c:	7a1b      	ldrb	r3, [r3, #8]
 800942e:	461a      	mov	r2, r3
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	4413      	add	r3, r2
 8009434:	781a      	ldrb	r2, [r3, #0]
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8009436:	7f7b      	ldrb	r3, [r7, #29]
 8009438:	69b9      	ldr	r1, [r7, #24]
 800943a:	3320      	adds	r3, #32
 800943c:	005b      	lsls	r3, r3, #1
 800943e:	440b      	add	r3, r1
 8009440:	7a5b      	ldrb	r3, [r3, #9]
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 8009442:	4013      	ands	r3, r2
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00a      	beq.n	8009460 <USBH_HID_MouseDecode+0x160>
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800944a:	7f7b      	ldrb	r3, [r7, #29]
 800944c:	3b04      	subs	r3, #4
 800944e:	2201      	movs	r2, #1
 8009450:	fa02 f303 	lsl.w	r3, r2, r3
 8009454:	b25a      	sxtb	r2, r3
 8009456:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800945a:	4313      	orrs	r3, r2
 800945c:	b25b      	sxtb	r3, r3
 800945e:	77bb      	strb	r3, [r7, #30]
	  for(i=4;i<12;i++)
 8009460:	7f7b      	ldrb	r3, [r7, #29]
 8009462:	3301      	adds	r3, #1
 8009464:	777b      	strb	r3, [r7, #29]
 8009466:	7f7b      	ldrb	r3, [r7, #29]
 8009468:	2b0b      	cmp	r3, #11
 800946a:	d9da      	bls.n	8009422 <USBH_HID_MouseDecode+0x122>

	  //process mouse
	  if(HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE) {
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009472:	f003 0303 	and.w	r3, r3, #3
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b01      	cmp	r3, #1
 800947a:	d149      	bne.n	8009510 <USBH_HID_MouseDecode+0x210>
	  		// iprintf("mouse %d %d %x\n", (int16_t)a[0], (int16_t)a[1], btn);
	  		// limit mouse movement to +/- 128
	  		for(i=0;i<2;i++) {
 800947c:	2300      	movs	r3, #0
 800947e:	777b      	strb	r3, [r7, #29]
 8009480:	e022      	b.n	80094c8 <USBH_HID_MouseDecode+0x1c8>
	  		if((int16_t)a[i] >  127) a[i] =  127;
 8009482:	7f7b      	ldrb	r3, [r7, #29]
 8009484:	005b      	lsls	r3, r3, #1
 8009486:	3320      	adds	r3, #32
 8009488:	443b      	add	r3, r7
 800948a:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800948e:	2b7f      	cmp	r3, #127	; 0x7f
 8009490:	dd06      	ble.n	80094a0 <USBH_HID_MouseDecode+0x1a0>
 8009492:	7f7b      	ldrb	r3, [r7, #29]
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	3320      	adds	r3, #32
 8009498:	443b      	add	r3, r7
 800949a:	227f      	movs	r2, #127	; 0x7f
 800949c:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		if((int16_t)a[i] < -128) a[i] = -128;
 80094a0:	7f7b      	ldrb	r3, [r7, #29]
 80094a2:	005b      	lsls	r3, r3, #1
 80094a4:	3320      	adds	r3, #32
 80094a6:	443b      	add	r3, r7
 80094a8:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80094ac:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80094b0:	da07      	bge.n	80094c2 <USBH_HID_MouseDecode+0x1c2>
 80094b2:	7f7b      	ldrb	r3, [r7, #29]
 80094b4:	005b      	lsls	r3, r3, #1
 80094b6:	3320      	adds	r3, #32
 80094b8:	443b      	add	r3, r7
 80094ba:	f64f 7280 	movw	r2, #65408	; 0xff80
 80094be:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		for(i=0;i<2;i++) {
 80094c2:	7f7b      	ldrb	r3, [r7, #29]
 80094c4:	3301      	adds	r3, #1
 80094c6:	777b      	strb	r3, [r7, #29]
 80094c8:	7f7b      	ldrb	r3, [r7, #29]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d9d9      	bls.n	8009482 <USBH_HID_MouseDecode+0x182>
	  		}
	  		//btn
	  	  mouse_info.x = a[0];
 80094ce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80094d2:	4b15      	ldr	r3, [pc, #84]	; (8009528 <USBH_HID_MouseDecode+0x228>)
 80094d4:	801a      	strh	r2, [r3, #0]
	  	  mouse_info.y = a[1];
 80094d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80094da:	4b13      	ldr	r3, [pc, #76]	; (8009528 <USBH_HID_MouseDecode+0x228>)
 80094dc:	805a      	strh	r2, [r3, #2]
	  	  mouse_info.buttons[0] = btn&0x1;
 80094de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	b25a      	sxtb	r2, r3
 80094e8:	4b0f      	ldr	r3, [pc, #60]	; (8009528 <USBH_HID_MouseDecode+0x228>)
 80094ea:	711a      	strb	r2, [r3, #4]
	  	  mouse_info.buttons[1] = (btn>>1)&0x1;
 80094ec:	7ffb      	ldrb	r3, [r7, #31]
 80094ee:	085b      	lsrs	r3, r3, #1
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	b25b      	sxtb	r3, r3
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	b25a      	sxtb	r2, r3
 80094fa:	4b0b      	ldr	r3, [pc, #44]	; (8009528 <USBH_HID_MouseDecode+0x228>)
 80094fc:	715a      	strb	r2, [r3, #5]
	  	  mouse_info.buttons[2] = (btn>>2)&0x1;
 80094fe:	7ffb      	ldrb	r3, [r7, #31]
 8009500:	089b      	lsrs	r3, r3, #2
 8009502:	b2db      	uxtb	r3, r3
 8009504:	b25b      	sxtb	r3, r3
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	b25a      	sxtb	r2, r3
 800950c:	4b06      	ldr	r3, [pc, #24]	; (8009528 <USBH_HID_MouseDecode+0x228>)
 800950e:	719a      	strb	r2, [r3, #6]
	  	}
    return USBH_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	e000      	b.n	8009516 <USBH_HID_MouseDecode+0x216>
  }
  return   USBH_FAIL;
 8009514:	2302      	movs	r3, #2
}
 8009516:	4618      	mov	r0, r3
 8009518:	3720      	adds	r7, #32
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	2000041c 	.word	0x2000041c
 8009524:	2000041d 	.word	0x2000041d
 8009528:	20000414 	.word	0x20000414

0800952c <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800952c:	b480      	push	{r7}
 800952e:	b089      	sub	sp, #36	; 0x24
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	460b      	mov	r3, r1
 8009536:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8009538:	2300      	movs	r3, #0
 800953a:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800953c:	2300      	movs	r3, #0
 800953e:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	7a1b      	ldrb	r3, [r3, #8]
 800954a:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	7a5b      	ldrb	r3, [r3, #9]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d01a      	beq.n	800958a <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	7a5b      	ldrb	r3, [r3, #9]
 8009558:	78fa      	ldrb	r2, [r7, #3]
 800955a:	429a      	cmp	r2, r3
 800955c:	d301      	bcc.n	8009562 <HID_ReadItem+0x36>
    {
      return (0U);
 800955e:	2300      	movs	r3, #0
 8009560:	e076      	b.n	8009650 <HID_ReadItem+0x124>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	6852      	ldr	r2, [r2, #4]
 8009568:	fb02 f303 	mul.w	r3, r2, r3
 800956c:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800956e:	7cfb      	ldrb	r3, [r7, #19]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	4413      	add	r3, r2
 8009574:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	08db      	lsrs	r3, r3, #3
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	4413      	add	r3, r2
 800957e:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	b2db      	uxtb	r3, r3
 8009584:	f003 0307 	and.w	r3, r3, #7
 8009588:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 800958a:	2300      	movs	r3, #0
 800958c:	61bb      	str	r3, [r7, #24]
 800958e:	e00a      	b.n	80095a6 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	461a      	mov	r2, r3
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	00db      	lsls	r3, r3, #3
 800959a:	fa02 f303 	lsl.w	r3, r2, r3
 800959e:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	3301      	adds	r3, #1
 80095a4:	61bb      	str	r3, [r7, #24]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f003 0307 	and.w	r3, r3, #7
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d004      	beq.n	80095bc <HID_ReadItem+0x90>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	08db      	lsrs	r3, r3, #3
 80095b8:	3301      	adds	r3, #1
 80095ba:	e002      	b.n	80095c2 <HID_ReadItem+0x96>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	08db      	lsrs	r3, r3, #3
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d8e3      	bhi.n	8009590 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & ((1U << ri->size) - 1U);
 80095c8:	7cfb      	ldrb	r3, [r7, #19]
 80095ca:	69fa      	ldr	r2, [r7, #28]
 80095cc:	40da      	lsrs	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	2101      	movs	r1, #1
 80095d4:	fa01 f303 	lsl.w	r3, r1, r3
 80095d8:	3b01      	subs	r3, #1
 80095da:	4013      	ands	r3, r2
 80095dc:	61fb      	str	r3, [r7, #28]

  if (val < ri->logical_min || val > ri->logical_max)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	69fa      	ldr	r2, [r7, #28]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d304      	bcc.n	80095f2 <HID_ReadItem+0xc6>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	69fa      	ldr	r2, [r7, #28]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d901      	bls.n	80095f6 <HID_ReadItem+0xca>
  {
    return (0U);
 80095f2:	2300      	movs	r3, #0
 80095f4:	e02c      	b.n	8009650 <HID_ReadItem+0x124>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1U << (ri->size - 1U))))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	7a9b      	ldrb	r3, [r3, #10]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d01d      	beq.n	800963a <HID_ReadItem+0x10e>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	3b01      	subs	r3, #1
 8009604:	2201      	movs	r2, #1
 8009606:	409a      	lsls	r2, r3
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	4013      	ands	r3, r2
 800960c:	2b00      	cmp	r3, #0
 800960e:	d014      	beq.n	800963a <HID_ReadItem+0x10e>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	fa02 f303 	lsl.w	r3, r2, r3
 800961a:	425b      	negs	r3, r3
 800961c:	69fa      	ldr	r2, [r7, #28]
 800961e:	4313      	orrs	r3, r2
 8009620:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d101      	bne.n	800962e <HID_ReadItem+0x102>
    {
      return ((uint32_t)vs);
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	e010      	b.n	8009650 <HID_ReadItem+0x124>
    }
    return ((uint32_t)(vs * ri->resolution));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	fb02 f303 	mul.w	r3, r2, r3
 8009638:	e00a      	b.n	8009650 <HID_ReadItem+0x124>
  }
  else
  {
    if (ri->resolution == 1U)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d101      	bne.n	8009646 <HID_ReadItem+0x11a>
    {
      return (val);
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	e004      	b.n	8009650 <HID_ReadItem+0x124>
    }
    return (val * ri->resolution);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	69db      	ldr	r3, [r3, #28]
 800964a:	69fa      	ldr	r2, [r7, #28]
 800964c:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8009650:	4618      	mov	r0, r3
 8009652:	3724      	adds	r7, #36	; 0x24
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <report_is_usable>:
  uint8_t bType: 2;
  uint8_t bTag: 4;
} __attribute__((packed)) item_t;


int report_is_usable(uint16_t bit_count, uint8_t report_complete, hid_report_t *conf) {
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	4603      	mov	r3, r0
 8009664:	603a      	str	r2, [r7, #0]
 8009666:	80fb      	strh	r3, [r7, #6]
 8009668:	460b      	mov	r3, r1
 800966a:	717b      	strb	r3, [r7, #5]
// hidp_debugf("  - total bit count: %d (%d bytes, %d bits)",
//	      bit_count, bit_count/8, bit_count%8);

  conf->report_size = bit_count/8;
 800966c:	88fb      	ldrh	r3, [r7, #6]
 800966e:	08db      	lsrs	r3, r3, #3
 8009670:	b29b      	uxth	r3, r3
 8009672:	b2da      	uxtb	r2, r3
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	709a      	strb	r2, [r3, #2]

  // check if something useful was detected
  if( ((conf->type == REPORT_TYPE_JOYSTICK) && ((report_complete & JOYSTICK_COMPLETE) == JOYSTICK_COMPLETE)) ||
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	f003 0303 	and.w	r3, r3, #3
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b03      	cmp	r3, #3
 8009684:	d104      	bne.n	8009690 <report_is_usable+0x34>
 8009686:	797b      	ldrb	r3, [r7, #5]
 8009688:	f003 0307 	and.w	r3, r3, #7
 800968c:	2b07      	cmp	r3, #7
 800968e:	d012      	beq.n	80096b6 <report_is_usable+0x5a>
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	f003 0303 	and.w	r3, r3, #3
 8009698:	b2db      	uxtb	r3, r3
  if( ((conf->type == REPORT_TYPE_JOYSTICK) && ((report_complete & JOYSTICK_COMPLETE) == JOYSTICK_COMPLETE)) ||
 800969a:	2b01      	cmp	r3, #1
 800969c:	d104      	bne.n	80096a8 <report_is_usable+0x4c>
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 800969e:	797b      	ldrb	r3, [r7, #5]
 80096a0:	f003 030f 	and.w	r3, r3, #15
 80096a4:	2b0f      	cmp	r3, #15
 80096a6:	d006      	beq.n	80096b6 <report_is_usable+0x5a>
      ((conf->type == REPORT_TYPE_KEYBOARD))) {
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	f003 0303 	and.w	r3, r3, #3
 80096b0:	b2db      	uxtb	r3, r3
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d101      	bne.n	80096ba <report_is_usable+0x5e>
 //   hidp_debugf("  - report %d is usable", conf->report_id);
    return 1;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e000      	b.n	80096bc <report_is_usable+0x60>
  }

//  hidp_debugf("  - unusable report %d", conf->report_id);
  return 0;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <parse_report_descriptor>:



int parse_report_descriptor(uint8_t *rep, uint16_t rep_size,hid_report_t *conf) {
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b08e      	sub	sp, #56	; 0x38
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	460b      	mov	r3, r1
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	817b      	strh	r3, [r7, #10]
  int8_t app_collection = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int8_t phys_log_collection = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint8_t skip_collection = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  int8_t generic_desktop = -1;   // depth at which first gen_desk was found
 80096e8:	23ff      	movs	r3, #255	; 0xff
 80096ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  uint8_t collection_depth = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33


  //
  uint8_t report_size = 0, report_count = 0;
 80096f4:	2300      	movs	r3, #0
 80096f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80096fa:	2300      	movs	r3, #0
 80096fc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  uint16_t bit_count = 0, usage_count = 0;
 8009700:	2300      	movs	r3, #0
 8009702:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009704:	2300      	movs	r3, #0
 8009706:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t logical_minimum=0, logical_maximum=0;
 8009708:	2300      	movs	r3, #0
 800970a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800970c:	2300      	movs	r3, #0
 800970e:	853b      	strh	r3, [r7, #40]	; 0x28

  // mask used to check of all required components have been found, so
  // that e.g. both axes and the button of a joystick are ready to be used
  uint8_t report_complete = 0;
 8009710:	2300      	movs	r3, #0
 8009712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  // joystick/mouse components
  int8_t axis[2] = { -1, -1};
 8009716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800971a:	823b      	strh	r3, [r7, #16]
  uint8_t btns = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  int8_t hat = -1;
 8009722:	23ff      	movs	r3, #255	; 0xff
 8009724:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


  while(rep_size) {
 8009728:	e2d2      	b.n	8009cd0 <parse_report_descriptor+0x608>
    // extract short item
    uint8_t tag = ((item_t*)rep)->bTag;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009732:	b2db      	uxtb	r3, r3
 8009734:	777b      	strb	r3, [r7, #29]
    uint8_t type = ((item_t*)rep)->bType;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800973e:	b2db      	uxtb	r3, r3
 8009740:	773b      	strb	r3, [r7, #28]
    uint8_t size = ((item_t*)rep)->bSize;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800974a:	b2db      	uxtb	r3, r3
 800974c:	76fb      	strb	r3, [r7, #27]

    rep++;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3301      	adds	r3, #1
 8009752:	60fb      	str	r3, [r7, #12]
    rep_size--;   // one byte consumed
 8009754:	897b      	ldrh	r3, [r7, #10]
 8009756:	3b01      	subs	r3, #1
 8009758:	817b      	strh	r3, [r7, #10]



    uint32_t value = 0;
 800975a:	2300      	movs	r3, #0
 800975c:	623b      	str	r3, [r7, #32]
     if(size) {      // size 1/2/3
 800975e:	7efb      	ldrb	r3, [r7, #27]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d007      	beq.n	8009774 <parse_report_descriptor+0xac>
       value = *rep++;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	1c5a      	adds	r2, r3, #1
 8009768:	60fa      	str	r2, [r7, #12]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	623b      	str	r3, [r7, #32]
       rep_size--;
 800976e:	897b      	ldrh	r3, [r7, #10]
 8009770:	3b01      	subs	r3, #1
 8009772:	817b      	strh	r3, [r7, #10]
     }

     if(size > 1) {  // size 2/3
 8009774:	7efb      	ldrb	r3, [r7, #27]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d90b      	bls.n	8009792 <parse_report_descriptor+0xca>
       value = (value & 0xff) + ((uint32_t)(*rep++)<<8);
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	b2da      	uxtb	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	1c59      	adds	r1, r3, #1
 8009782:	60f9      	str	r1, [r7, #12]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	021b      	lsls	r3, r3, #8
 8009788:	4413      	add	r3, r2
 800978a:	623b      	str	r3, [r7, #32]
       rep_size--;
 800978c:	897b      	ldrh	r3, [r7, #10]
 800978e:	3b01      	subs	r3, #1
 8009790:	817b      	strh	r3, [r7, #10]
     }

     if(size > 2) {  // size 3
 8009792:	7efb      	ldrb	r3, [r7, #27]
 8009794:	2b02      	cmp	r3, #2
 8009796:	d915      	bls.n	80097c4 <parse_report_descriptor+0xfc>
       value &= 0xffff;
 8009798:	6a3b      	ldr	r3, [r7, #32]
 800979a:	b29b      	uxth	r3, r3
 800979c:	623b      	str	r3, [r7, #32]
       value |= ((uint32_t)(*rep++)<<16);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	1c5a      	adds	r2, r3, #1
 80097a2:	60fa      	str	r2, [r7, #12]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	041b      	lsls	r3, r3, #16
 80097a8:	6a3a      	ldr	r2, [r7, #32]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	623b      	str	r3, [r7, #32]
       value |= ((uint32_t)(*rep++)<<24);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	1c5a      	adds	r2, r3, #1
 80097b2:	60fa      	str	r2, [r7, #12]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	061b      	lsls	r3, r3, #24
 80097b8:	6a3a      	ldr	r2, [r7, #32]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	623b      	str	r3, [r7, #32]
       rep_size-=2;
 80097be:	897b      	ldrh	r3, [r7, #10]
 80097c0:	3b02      	subs	r3, #2
 80097c2:	817b      	strh	r3, [r7, #10]
     }


       // we are currently skipping an unknown/unsupported collection)
           if(skip_collection) {
 80097c4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d029      	beq.n	8009820 <parse_report_descriptor+0x158>
             if(!type) {  // main item
 80097cc:	7f3b      	ldrb	r3, [r7, #28]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f040 827e 	bne.w	8009cd0 <parse_report_descriptor+0x608>
       				// any new collection increases the depth of collections to skip
       				if(tag == 10) {
 80097d4:	7f7b      	ldrb	r3, [r7, #29]
 80097d6:	2b0a      	cmp	r3, #10
 80097d8:	d109      	bne.n	80097ee <parse_report_descriptor+0x126>
       					skip_collection++;
 80097da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80097de:	3301      	adds	r3, #1
 80097e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
       					collection_depth++;
 80097e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097e8:	3301      	adds	r3, #1
 80097ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
       				}

       				// any end collection decreases it
       				if(tag == 12) {
 80097ee:	7f7b      	ldrb	r3, [r7, #29]
 80097f0:	2b0c      	cmp	r3, #12
 80097f2:	f040 826d 	bne.w	8009cd0 <parse_report_descriptor+0x608>
       					skip_collection--;
 80097f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80097fa:	3b01      	subs	r3, #1
 80097fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
       					collection_depth--;
 8009800:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009804:	3b01      	subs	r3, #1
 8009806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

       					// leaving the depth the generic desktop was valid for
       					if(generic_desktop > collection_depth)
 800980a:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 800980e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009812:	429a      	cmp	r2, r3
 8009814:	f340 825c 	ble.w	8009cd0 <parse_report_descriptor+0x608>
       						generic_desktop = -1;
 8009818:	23ff      	movs	r3, #255	; 0xff
 800981a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800981e:	e257      	b.n	8009cd0 <parse_report_descriptor+0x608>
             }

           } else {


                 switch(type) {
 8009820:	7f3b      	ldrb	r3, [r7, #28]
 8009822:	2b02      	cmp	r3, #2
 8009824:	f000 81c9 	beq.w	8009bba <parse_report_descriptor+0x4f2>
 8009828:	2b02      	cmp	r3, #2
 800982a:	f300 8250 	bgt.w	8009cce <parse_report_descriptor+0x606>
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <parse_report_descriptor+0x172>
 8009832:	2b01      	cmp	r3, #1
 8009834:	f000 8170 	beq.w	8009b18 <parse_report_descriptor+0x450>
 8009838:	e249      	b.n	8009cce <parse_report_descriptor+0x606>
                 case 0:
           	// main item

           	switch(tag) {
 800983a:	7f7b      	ldrb	r3, [r7, #29]
 800983c:	3b08      	subs	r3, #8
 800983e:	2b04      	cmp	r3, #4
 8009840:	f200 8166 	bhi.w	8009b10 <parse_report_descriptor+0x448>
 8009844:	a201      	add	r2, pc, #4	; (adr r2, 800984c <parse_report_descriptor+0x184>)
 8009846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984a:	bf00      	nop
 800984c:	08009861 	.word	0x08009861
 8009850:	08009b15 	.word	0x08009b15
 8009854:	08009a43 	.word	0x08009a43
 8009858:	08009b15 	.word	0x08009b15
 800985c:	08009a9f 	.word	0x08009a9f
           	case 8:
           	  // handle found buttons
           	  if(btns) {
 8009860:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009864:	2b00      	cmp	r3, #0
 8009866:	d050      	beq.n	800990a <parse_report_descriptor+0x242>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) ||
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	f003 0303 	and.w	r3, r3, #3
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b03      	cmp	r3, #3
 8009874:	d006      	beq.n	8009884 <parse_report_descriptor+0x1bc>
           	       (conf->type == REPORT_TYPE_MOUSE)) {
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	f003 0303 	and.w	r3, r3, #3
 800987e:	b2db      	uxtb	r3, r3
           	    if((conf->type == REPORT_TYPE_JOYSTICK) ||
 8009880:	2b01      	cmp	r3, #1
 8009882:	d142      	bne.n	800990a <parse_report_descriptor+0x242>
           	      // scan for up to four buttons
           	      uint8_t b;
           	      for(b=0;b<12;b++) {
 8009884:	2300      	movs	r3, #0
 8009886:	77fb      	strb	r3, [r7, #31]
 8009888:	e02c      	b.n	80098e4 <parse_report_descriptor+0x21c>
           		if(report_count > b) {
 800988a:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800988e:	7ffb      	ldrb	r3, [r7, #31]
 8009890:	429a      	cmp	r2, r3
 8009892:	d91a      	bls.n	80098ca <parse_report_descriptor+0x202>
           		  uint16_t this_bit = bit_count+b;
 8009894:	7ffb      	ldrb	r3, [r7, #31]
 8009896:	b29a      	uxth	r2, r3
 8009898:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800989a:	4413      	add	r3, r2
 800989c:	833b      	strh	r3, [r7, #24]

           		  conf->joystick_mouse.button[b].byte_offset = this_bit/8;
 800989e:	8b3b      	ldrh	r3, [r7, #24]
 80098a0:	08db      	lsrs	r3, r3, #3
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	7ffa      	ldrb	r2, [r7, #31]
 80098a6:	b2d9      	uxtb	r1, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	320c      	adds	r2, #12
 80098ac:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
           		  conf->joystick_mouse.button[b].bitmask = 1 << (this_bit%8);
 80098b0:	8b3b      	ldrh	r3, [r7, #24]
 80098b2:	f003 0307 	and.w	r3, r3, #7
 80098b6:	2201      	movs	r2, #1
 80098b8:	409a      	lsls	r2, r3
 80098ba:	7ffb      	ldrb	r3, [r7, #31]
 80098bc:	b2d1      	uxtb	r1, r2
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	330c      	adds	r3, #12
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	4413      	add	r3, r2
 80098c6:	460a      	mov	r2, r1
 80098c8:	705a      	strb	r2, [r3, #1]
           		}
           					conf->joystick_mouse.button_count = report_count * report_size;
 80098ca:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80098ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80098d2:	fb12 f303 	smulbb	r3, r2, r3
 80098d6:	b2da      	uxtb	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
           	      for(b=0;b<12;b++) {
 80098de:	7ffb      	ldrb	r3, [r7, #31]
 80098e0:	3301      	adds	r3, #1
 80098e2:	77fb      	strb	r3, [r7, #31]
 80098e4:	7ffb      	ldrb	r3, [r7, #31]
 80098e6:	2b0b      	cmp	r3, #11
 80098e8:	d9cf      	bls.n	800988a <parse_report_descriptor+0x1c2>
           	      }

           	      // we found at least one button which is all we want to accept this as a valid
           	      // joystick
           	      report_complete |= JOY_MOUSE_REQ_BTN_0;
 80098ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098ee:	f043 0304 	orr.w	r3, r3, #4
 80098f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	      if(report_count > 1) report_complete |= JOY_MOUSE_REQ_BTN_1;
 80098f6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d905      	bls.n	800990a <parse_report_descriptor+0x242>
 80098fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009902:	f043 0308 	orr.w	r3, r3, #8
 8009906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	    }
           	  }

           	  // handle found axes
           	  uint8_t c;
           	  for(c=0;c<2;c++) {
 800990a:	2300      	movs	r3, #0
 800990c:	77bb      	strb	r3, [r7, #30]
 800990e:	e05c      	b.n	80099ca <parse_report_descriptor+0x302>
           	    if(axis[c] >= 0) {
 8009910:	7fbb      	ldrb	r3, [r7, #30]
 8009912:	3338      	adds	r3, #56	; 0x38
 8009914:	443b      	add	r3, r7
 8009916:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 800991a:	2b00      	cmp	r3, #0
 800991c:	db52      	blt.n	80099c4 <parse_report_descriptor+0x2fc>
           	      uint16_t cnt = bit_count + report_size * axis[c];
 800991e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009922:	b29a      	uxth	r2, r3
 8009924:	7fbb      	ldrb	r3, [r7, #30]
 8009926:	3338      	adds	r3, #56	; 0x38
 8009928:	443b      	add	r3, r7
 800992a:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 800992e:	b29b      	uxth	r3, r3
 8009930:	fb12 f303 	smulbb	r3, r2, r3
 8009934:	b29a      	uxth	r2, r3
 8009936:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009938:	4413      	add	r3, r2
 800993a:	82bb      	strh	r3, [r7, #20]

           	      if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	f003 0303 	and.w	r3, r3, #3
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b03      	cmp	r3, #3
 8009948:	d006      	beq.n	8009958 <parse_report_descriptor+0x290>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	f003 0303 	and.w	r3, r3, #3
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b01      	cmp	r3, #1
 8009956:	d135      	bne.n	80099c4 <parse_report_descriptor+0x2fc>
           		// save in joystick report
           		conf->joystick_mouse.axis[c].offset = cnt;
 8009958:	7fba      	ldrb	r2, [r7, #30]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	3201      	adds	r2, #1
 800995e:	8ab9      	ldrh	r1, [r7, #20]
 8009960:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
           		conf->joystick_mouse.axis[c].size = report_size;
 8009964:	7fbb      	ldrb	r3, [r7, #30]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	3301      	adds	r3, #1
 800996a:	00db      	lsls	r3, r3, #3
 800996c:	4413      	add	r3, r2
 800996e:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8009972:	709a      	strb	r2, [r3, #2]
           		conf->joystick_mouse.axis[c].logical.min = logical_minimum;
 8009974:	7fbb      	ldrb	r3, [r7, #30]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	3301      	adds	r3, #1
 800997a:	00db      	lsls	r3, r3, #3
 800997c:	4413      	add	r3, r2
 800997e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8009980:	809a      	strh	r2, [r3, #4]
           		conf->joystick_mouse.axis[c].logical.max = logical_maximum;
 8009982:	7fbb      	ldrb	r3, [r7, #30]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	3301      	adds	r3, #1
 8009988:	00db      	lsls	r3, r3, #3
 800998a:	4413      	add	r3, r2
 800998c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800998e:	80da      	strh	r2, [r3, #6]
           		conf->joystick_mouse.axis[c].size = report_size;
 8009990:	7fbb      	ldrb	r3, [r7, #30]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	3301      	adds	r3, #1
 8009996:	00db      	lsls	r3, r3, #3
 8009998:	4413      	add	r3, r2
 800999a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800999e:	709a      	strb	r2, [r3, #2]
           		if(c==0) report_complete |= JOY_MOUSE_REQ_AXIS_X;
 80099a0:	7fbb      	ldrb	r3, [r7, #30]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d105      	bne.n	80099b2 <parse_report_descriptor+0x2ea>
 80099a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099aa:	f043 0301 	orr.w	r3, r3, #1
 80099ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           		if(c==1) report_complete |= JOY_MOUSE_REQ_AXIS_Y;
 80099b2:	7fbb      	ldrb	r3, [r7, #30]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d105      	bne.n	80099c4 <parse_report_descriptor+0x2fc>
 80099b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099bc:	f043 0302 	orr.w	r3, r3, #2
 80099c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	  for(c=0;c<2;c++) {
 80099c4:	7fbb      	ldrb	r3, [r7, #30]
 80099c6:	3301      	adds	r3, #1
 80099c8:	77bb      	strb	r3, [r7, #30]
 80099ca:	7fbb      	ldrb	r3, [r7, #30]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d99f      	bls.n	8009910 <parse_report_descriptor+0x248>
           	      }
           	    }
           	  }

           	  // handle found hat
           	  if(hat >= 0) {
 80099d0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	db1a      	blt.n	8009a0e <parse_report_descriptor+0x346>
           	    uint16_t cnt = bit_count + report_size * hat;
 80099d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80099dc:	b29a      	uxth	r2, r3
 80099de:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	fb12 f303 	smulbb	r3, r2, r3
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099ec:	4413      	add	r3, r2
 80099ee:	82fb      	strh	r3, [r7, #22]
           	    if(conf->type == REPORT_TYPE_JOYSTICK) {
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	f003 0303 	and.w	r3, r3, #3
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	d107      	bne.n	8009a0e <parse_report_descriptor+0x346>
           	      conf->joystick_mouse.hat.offset = cnt;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	8afa      	ldrh	r2, [r7, #22]
 8009a02:	861a      	strh	r2, [r3, #48]	; 0x30
           	      conf->joystick_mouse.hat.size = report_size;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8009a0a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
           	    }
           	  }


           	  // reset for next inputs
           	  bit_count += report_count * report_size;
 8009a0e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	fb12 f303 	smulbb	r3, r2, r3
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009a22:	4413      	add	r3, r2
 8009a24:	85fb      	strh	r3, [r7, #46]	; 0x2e
           	  usage_count = 0;
 8009a26:	2300      	movs	r3, #0
 8009a28:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  btns = 0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
           	  axis[0] = axis[1] = -1;
 8009a30:	23ff      	movs	r3, #255	; 0xff
 8009a32:	747b      	strb	r3, [r7, #17]
 8009a34:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8009a38:	743b      	strb	r3, [r7, #16]
           	  hat = -1;
 8009a3a:	23ff      	movs	r3, #255	; 0xff
 8009a3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
           	  break;
 8009a40:	e069      	b.n	8009b16 <parse_report_descriptor+0x44e>

           	case 11:
           	  break;

           	case 10:
           	  collection_depth++;
 8009a42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a46:	3301      	adds	r3, #1
 8009a48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
           	  usage_count = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	85bb      	strh	r3, [r7, #44]	; 0x2c

           	  if(value == 1) {	   // app collection
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d107      	bne.n	8009a66 <parse_report_descriptor+0x39e>
           	    app_collection++;
 8009a56:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
           	  } else if(value == 2) {  // logical collection
           	    phys_log_collection++;
           	  } else {
           	    skip_collection++;
           	  }
           	  break;
 8009a64:	e057      	b.n	8009b16 <parse_report_descriptor+0x44e>
           	  } else if(value == 0) {  // physical collection
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d107      	bne.n	8009a7c <parse_report_descriptor+0x3b4>
           	    phys_log_collection++;
 8009a6c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	3301      	adds	r3, #1
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	  break;
 8009a7a:	e04c      	b.n	8009b16 <parse_report_descriptor+0x44e>
           	  } else if(value == 2) {  // logical collection
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	d107      	bne.n	8009a92 <parse_report_descriptor+0x3ca>
           	    phys_log_collection++;
 8009a82:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	3301      	adds	r3, #1
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	  break;
 8009a90:	e041      	b.n	8009b16 <parse_report_descriptor+0x44e>
           	    skip_collection++;
 8009a92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009a96:	3301      	adds	r3, #1
 8009a98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
           	  break;
 8009a9c:	e03b      	b.n	8009b16 <parse_report_descriptor+0x44e>

           	case 12:
           	  collection_depth--;
 8009a9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

           	  // leaving the depth the generic desktop was valid for
           	  if(generic_desktop > collection_depth)
 8009aa8:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 8009aac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	dd02      	ble.n	8009aba <parse_report_descriptor+0x3f2>
           	    generic_desktop = -1;
 8009ab4:	23ff      	movs	r3, #255	; 0xff
 8009ab6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

           	  if(phys_log_collection) {
 8009aba:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d007      	beq.n	8009ad2 <parse_report_descriptor+0x40a>

           	    phys_log_collection--;
 8009ac2:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	    }

           	  } else {
           	    return 0;
           	  }
           	  break;
 8009ad0:	e021      	b.n	8009b16 <parse_report_descriptor+0x44e>
           	  } else if(app_collection) {
 8009ad2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d018      	beq.n	8009b0c <parse_report_descriptor+0x444>
           	    app_collection--;
 8009ada:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
           	     if(report_is_usable(bit_count, report_complete, conf))
 8009ae8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8009aec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff fdb3 	bl	800965c <report_is_usable>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d001      	beq.n	8009b00 <parse_report_descriptor+0x438>
           	      return 1;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e0ec      	b.n	8009cda <parse_report_descriptor+0x612>
           	      bit_count = 0;
 8009b00:	2300      	movs	r3, #0
 8009b02:	85fb      	strh	r3, [r7, #46]	; 0x2e
           	      report_complete = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	  break;
 8009b0a:	e004      	b.n	8009b16 <parse_report_descriptor+0x44e>
           	    return 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	e0e4      	b.n	8009cda <parse_report_descriptor+0x612>

           	default:
           	  return 0;
 8009b10:	2300      	movs	r3, #0
 8009b12:	e0e2      	b.n	8009cda <parse_report_descriptor+0x612>
           	  break;
 8009b14:	bf00      	nop
           	  break;
           	}
           	break;
 8009b16:	e0db      	b.n	8009cd0 <parse_report_descriptor+0x608>

                 case 1:
           	// global item
           	switch(tag) {
 8009b18:	7f7b      	ldrb	r3, [r7, #29]
 8009b1a:	2b09      	cmp	r3, #9
 8009b1c:	d847      	bhi.n	8009bae <parse_report_descriptor+0x4e6>
 8009b1e:	a201      	add	r2, pc, #4	; (adr r2, 8009b24 <parse_report_descriptor+0x45c>)
 8009b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b24:	08009b4d 	.word	0x08009b4d
 8009b28:	08009b89 	.word	0x08009b89
 8009b2c:	08009b8f 	.word	0x08009b8f
 8009b30:	08009bb3 	.word	0x08009bb3
 8009b34:	08009bb3 	.word	0x08009bb3
 8009b38:	08009bb3 	.word	0x08009bb3
 8009b3c:	08009bb3 	.word	0x08009bb3
 8009b40:	08009b95 	.word	0x08009b95
 8009b44:	08009b9d 	.word	0x08009b9d
 8009b48:	08009ba7 	.word	0x08009ba7
           	case 0:

           	  if(value == USAGE_PAGE_KEYBOARD) {
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	2b07      	cmp	r3, #7
 8009b50:	d01a      	beq.n	8009b88 <parse_report_descriptor+0x4c0>
           	  } else if(value == USAGE_PAGE_GAMING) {
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	2b05      	cmp	r3, #5
 8009b56:	d017      	beq.n	8009b88 <parse_report_descriptor+0x4c0>
           	  } else if(value == USAGE_PAGE_LEDS) {
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	2b08      	cmp	r3, #8
 8009b5c:	d014      	beq.n	8009b88 <parse_report_descriptor+0x4c0>
           	  } else if(value == USAGE_PAGE_CONSUMER) {
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	2b0c      	cmp	r3, #12
 8009b62:	d011      	beq.n	8009b88 <parse_report_descriptor+0x4c0>
           	  } else if(value == USAGE_PAGE_BUTTON) {
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	2b09      	cmp	r3, #9
 8009b68:	d103      	bne.n	8009b72 <parse_report_descriptor+0x4aa>
           	    btns = 1;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b70:	e00a      	b.n	8009b88 <parse_report_descriptor+0x4c0>
           	  } else if(value == USAGE_PAGE_GENERIC_DESKTOP) {
 8009b72:	6a3b      	ldr	r3, [r7, #32]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d11e      	bne.n	8009bb6 <parse_report_descriptor+0x4ee>
           	    if(generic_desktop < 0)
 8009b78:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	da03      	bge.n	8009b88 <parse_report_descriptor+0x4c0>
           	      generic_desktop = collection_depth;
 8009b80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b84:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
           	  } else

           	  break;

           	case 1:
           	  logical_minimum = value;
 8009b88:	6a3b      	ldr	r3, [r7, #32]
 8009b8a:	857b      	strh	r3, [r7, #42]	; 0x2a
           	  break;
 8009b8c:	e014      	b.n	8009bb8 <parse_report_descriptor+0x4f0>

           	case 2:
           	  logical_maximum = value;
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	853b      	strh	r3, [r7, #40]	; 0x28
           	  break;
 8009b92:	e011      	b.n	8009bb8 <parse_report_descriptor+0x4f0>

           	case 6:
           	  break;

           	case 7:
           	  report_size = value;
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
           		break;
 8009b9a:	e00d      	b.n	8009bb8 <parse_report_descriptor+0x4f0>

           	case 8:
           	  conf->report_id = value;
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	705a      	strb	r2, [r3, #1]
           	  break;
 8009ba4:	e008      	b.n	8009bb8 <parse_report_descriptor+0x4f0>

           	case 9:
           		report_count = value;
 8009ba6:	6a3b      	ldr	r3, [r7, #32]
 8009ba8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
           	  break;
 8009bac:	e004      	b.n	8009bb8 <parse_report_descriptor+0x4f0>

           	default:
           	  return 0;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	e093      	b.n	8009cda <parse_report_descriptor+0x612>
           	  break;
 8009bb2:	bf00      	nop
 8009bb4:	e08c      	b.n	8009cd0 <parse_report_descriptor+0x608>
           	  break;
 8009bb6:	bf00      	nop
           	  break;
           	}
           	break;
 8009bb8:	e08a      	b.n	8009cd0 <parse_report_descriptor+0x608>

                 case 2:
           	// local item
           	switch(tag) {
 8009bba:	7f7b      	ldrb	r3, [r7, #29]
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d07e      	beq.n	8009cbe <parse_report_descriptor+0x5f6>
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	f300 8082 	bgt.w	8009cca <parse_report_descriptor+0x602>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <parse_report_descriptor+0x508>
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d06f      	beq.n	8009cae <parse_report_descriptor+0x5e6>
           	  usage_count += value;
           	  break;

           	default:

           	  break;
 8009bce:	e07c      	b.n	8009cca <parse_report_descriptor+0x602>
           	  if( !collection_depth && (value == USAGE_KEYBOARD)) {
 8009bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d109      	bne.n	8009bec <parse_report_descriptor+0x524>
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	2b06      	cmp	r3, #6
 8009bdc:	d106      	bne.n	8009bec <parse_report_descriptor+0x524>
           	    conf->type = REPORT_TYPE_KEYBOARD;
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	7813      	ldrb	r3, [r2, #0]
 8009be2:	2102      	movs	r1, #2
 8009be4:	f361 0301 	bfi	r3, r1, #0, #2
 8009be8:	7013      	strb	r3, [r2, #0]
 8009bea:	e05c      	b.n	8009ca6 <parse_report_descriptor+0x5de>
           	  } else if(!collection_depth && (value == USAGE_MOUSE)) {
 8009bec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d109      	bne.n	8009c08 <parse_report_descriptor+0x540>
 8009bf4:	6a3b      	ldr	r3, [r7, #32]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d106      	bne.n	8009c08 <parse_report_descriptor+0x540>
           	    conf->type = REPORT_TYPE_MOUSE;
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	7813      	ldrb	r3, [r2, #0]
 8009bfe:	2101      	movs	r1, #1
 8009c00:	f361 0301 	bfi	r3, r1, #0, #2
 8009c04:	7013      	strb	r3, [r2, #0]
 8009c06:	e04e      	b.n	8009ca6 <parse_report_descriptor+0x5de>
           	  } else if(!collection_depth &&
 8009c08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10b      	bne.n	8009c28 <parse_report_descriptor+0x560>
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	2b05      	cmp	r3, #5
 8009c14:	d002      	beq.n	8009c1c <parse_report_descriptor+0x554>
           		    ((value == USAGE_GAMEPAD) || (value == USAGE_JOYSTICK))) {
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	2b04      	cmp	r3, #4
 8009c1a:	d105      	bne.n	8009c28 <parse_report_descriptor+0x560>
           	    conf->type = REPORT_TYPE_JOYSTICK;
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	7813      	ldrb	r3, [r2, #0]
 8009c20:	f043 0303 	orr.w	r3, r3, #3
 8009c24:	7013      	strb	r3, [r2, #0]
 8009c26:	e03e      	b.n	8009ca6 <parse_report_descriptor+0x5de>
           	  } else if(value == USAGE_POINTER && app_collection) {
 8009c28:	6a3b      	ldr	r3, [r7, #32]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d103      	bne.n	8009c36 <parse_report_descriptor+0x56e>
 8009c2e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d137      	bne.n	8009ca6 <parse_report_descriptor+0x5de>
           	  } else if((value == USAGE_X || value == USAGE_Y) && app_collection) {
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	2b30      	cmp	r3, #48	; 0x30
 8009c3a:	d002      	beq.n	8009c42 <parse_report_descriptor+0x57a>
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	2b31      	cmp	r3, #49	; 0x31
 8009c40:	d11e      	bne.n	8009c80 <parse_report_descriptor+0x5b8>
 8009c42:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d01a      	beq.n	8009c80 <parse_report_descriptor+0x5b8>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	f003 0303 	and.w	r3, r3, #3
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b03      	cmp	r3, #3
 8009c56:	d006      	beq.n	8009c66 <parse_report_descriptor+0x59e>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	f003 0303 	and.w	r3, r3, #3
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d11e      	bne.n	8009ca4 <parse_report_descriptor+0x5dc>
           	      if(value == USAGE_X) {
 8009c66:	6a3b      	ldr	r3, [r7, #32]
 8009c68:	2b30      	cmp	r3, #48	; 0x30
 8009c6a:	d102      	bne.n	8009c72 <parse_report_descriptor+0x5aa>
           		axis[0] = usage_count;
 8009c6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c6e:	b25b      	sxtb	r3, r3
 8009c70:	743b      	strb	r3, [r7, #16]
           	      if(value == USAGE_Y) {
 8009c72:	6a3b      	ldr	r3, [r7, #32]
 8009c74:	2b31      	cmp	r3, #49	; 0x31
 8009c76:	d115      	bne.n	8009ca4 <parse_report_descriptor+0x5dc>
           		axis[1] = usage_count;
 8009c78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c7a:	b25b      	sxtb	r3, r3
 8009c7c:	747b      	strb	r3, [r7, #17]
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8009c7e:	e011      	b.n	8009ca4 <parse_report_descriptor+0x5dc>
           	  } else if((value == USAGE_HAT) && app_collection) {
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	2b39      	cmp	r3, #57	; 0x39
 8009c84:	d10f      	bne.n	8009ca6 <parse_report_descriptor+0x5de>
 8009c86:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00b      	beq.n	8009ca6 <parse_report_descriptor+0x5de>
           	    if(conf->type == REPORT_TYPE_JOYSTICK) {
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	f003 0303 	and.w	r3, r3, #3
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d104      	bne.n	8009ca6 <parse_report_descriptor+0x5de>
           	      hat = usage_count;
 8009c9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009ca2:	e000      	b.n	8009ca6 <parse_report_descriptor+0x5de>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8009ca4:	bf00      	nop
           	  usage_count++;
 8009ca6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009ca8:	3301      	adds	r3, #1
 8009caa:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8009cac:	e00e      	b.n	8009ccc <parse_report_descriptor+0x604>
           	  usage_count -= (value-1);
 8009cae:	6a3b      	ldr	r3, [r7, #32]
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009cb4:	1ad3      	subs	r3, r2, r3
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	3301      	adds	r3, #1
 8009cba:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8009cbc:	e006      	b.n	8009ccc <parse_report_descriptor+0x604>
           	  usage_count += value;
 8009cbe:	6a3b      	ldr	r3, [r7, #32]
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009cc4:	4413      	add	r3, r2
 8009cc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8009cc8:	e000      	b.n	8009ccc <parse_report_descriptor+0x604>
           	  break;
 8009cca:	bf00      	nop
           	}
           	break;
 8009ccc:	e000      	b.n	8009cd0 <parse_report_descriptor+0x608>

                 default:
           	// reserved

           	break;
 8009cce:	bf00      	nop
  while(rep_size) {
 8009cd0:	897b      	ldrh	r3, [r7, #10]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f47f ad29 	bne.w	800972a <parse_report_descriptor+0x62>
                 }
               }
             }

             // if we get here then no usable setup was found
             return 0;
 8009cd8:	2300      	movs	r3, #0
           }
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3738      	adds	r7, #56	; 0x38
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop

08009ce4 <USBH_HUB_InterfaceInit>:




static USBH_StatusTypeDef USBH_HUB_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009ce4:	b590      	push	{r4, r7, lr}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8009cec:	2301      	movs	r3, #1
 8009cee:	73fb      	strb	r3, [r7, #15]
	HUB_HandleTypeDef *HUB_Handle;
    uint8_t interface;


    interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x00U, 0x00U);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009cf6:	7919      	ldrb	r1, [r3, #4]
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f002 f9f2 	bl	800c0e6 <USBH_FindInterface>
 8009d02:	4603      	mov	r3, r0
 8009d04:	73bb      	strb	r3, [r7, #14]

    if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	2bff      	cmp	r3, #255	; 0xff
 8009d0a:	d002      	beq.n	8009d12 <USBH_HUB_InterfaceInit+0x2e>
 8009d0c:	7bbb      	ldrb	r3, [r7, #14]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d901      	bls.n	8009d16 <USBH_HUB_InterfaceInit+0x32>
    {
        USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
        return USBH_FAIL;
 8009d12:	2302      	movs	r3, #2
 8009d14:	e05e      	b.n	8009dd4 <USBH_HUB_InterfaceInit+0xf0>
    }

    status = USBH_SelectInterface(phost, interface);
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f002 f9c7 	bl	800c0ae <USBH_SelectInterface>
 8009d20:	4603      	mov	r3, r0
 8009d22:	73fb      	strb	r3, [r7, #15]

    if (status != USBH_OK)
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <USBH_HUB_InterfaceInit+0x4a>
    {
        return USBH_FAIL;
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	e052      	b.n	8009dd4 <USBH_HUB_InterfaceInit+0xf0>
    }


    phost->pActiveClass->pData[0] = (HUB_HandleTypeDef *)USBH_malloc(sizeof(HUB_HandleTypeDef));
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 4380 	ldr.w	r4, [r3, #896]	; 0x380
 8009d34:	f241 003c 	movw	r0, #4156	; 0x103c
 8009d38:	f004 f8aa 	bl	800de90 <malloc>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	6223      	str	r3, [r4, #32]
    HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d46:	6a1b      	ldr	r3, [r3, #32]
 8009d48:	60bb      	str	r3, [r7, #8]
    
    if (HUB_Handle == NULL)
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <USBH_HUB_InterfaceInit+0x70>
    {
        USBH_DbgLog("Cannot allocate memory for HID Handle");
        return USBH_FAIL;
 8009d50:	2302      	movs	r3, #2
 8009d52:	e03f      	b.n	8009dd4 <USBH_HUB_InterfaceInit+0xf0>
    }

      /* Initialize hub handler */
    USBH_memset(HUB_Handle, 0, sizeof(HUB_HandleTypeDef));
 8009d54:	f241 023c 	movw	r2, #4156	; 0x103c
 8009d58:	2100      	movs	r1, #0
 8009d5a:	68b8      	ldr	r0, [r7, #8]
 8009d5c:	f004 f8a8 	bl	800deb0 <memset>




  HUB_Handle->state     = HUB_INIT;
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	2200      	movs	r2, #0
 8009d64:	701a      	strb	r2, [r3, #0]
  HUB_Handle->ctl_state = HUB_REQ_INIT;
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	70da      	strb	r2, [r3, #3]
  HUB_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	211a      	movs	r1, #26
 8009d72:	fb01 f303 	mul.w	r3, r1, r3
 8009d76:	4413      	add	r3, r2
 8009d78:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009d7c:	781a      	ldrb	r2, [r3, #0]
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	729a      	strb	r2, [r3, #10]
  HUB_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009d82:	7bbb      	ldrb	r3, [r7, #14]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	211a      	movs	r1, #26
 8009d88:	fb01 f303 	mul.w	r3, r1, r3
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009d92:	881a      	ldrh	r2, [r3, #0]
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	811a      	strh	r2, [r3, #8]
  HUB_Handle->InEp      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009d98:	7bbb      	ldrb	r3, [r7, #14]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	211a      	movs	r1, #26
 8009d9e:	fb01 f303 	mul.w	r3, r1, r3
 8009da2:	4413      	add	r3, r2
 8009da4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009da8:	781a      	ldrb	r2, [r3, #0]
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	709a      	strb	r2, [r3, #2]
  HUB_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	211a      	movs	r1, #26
 8009db4:	fb01 f303 	mul.w	r3, r1, r3
 8009db8:	4413      	add	r3, r2
 8009dba:	f203 3352 	addw	r3, r3, #850	; 0x352
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	819a      	strh	r2, [r3, #12]
  HUB_Handle->portNumber= 1;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	return status;
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd90      	pop	{r4, r7, pc}

08009ddc <USBH_HUB_InterfaceDeInit>:

static USBH_StatusTypeDef USBH_HUB_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009dea:	6a1b      	ldr	r3, [r3, #32]
 8009dec:	60bb      	str	r3, [r7, #8]


  for (int i = 0; i<4; i++)
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	e04a      	b.n	8009e8a <USBH_HUB_InterfaceDeInit+0xae>
  {
    if(HUB_Handle->Port[i].MFC!=0) 
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8009dfc:	fb01 f303 	mul.w	r3, r1, r3
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d017      	beq.n	8009e3c <USBH_HUB_InterfaceDeInit+0x60>
    {
      free(HUB_Handle->Port[i].MFC);
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8009e14:	fb01 f303 	mul.w	r3, r1, r3
 8009e18:	4413      	add	r3, r2
 8009e1a:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4618      	mov	r0, r3
 8009e22:	f004 f83d 	bl	800dea0 <free>
      HUB_Handle->Port[i].MFC = 0;
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8009e2e:	fb01 f303 	mul.w	r3, r1, r3
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8009e38:	2200      	movs	r2, #0
 8009e3a:	601a      	str	r2, [r3, #0]
    }
    if(HUB_Handle->Port[i].Product!=0) 
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8009e44:	fb01 f303 	mul.w	r3, r1, r3
 8009e48:	4413      	add	r3, r2
 8009e4a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d017      	beq.n	8009e84 <USBH_HUB_InterfaceDeInit+0xa8>
    {
      free(HUB_Handle->Port[i].Product);
 8009e54:	68ba      	ldr	r2, [r7, #8]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8009e5c:	fb01 f303 	mul.w	r3, r1, r3
 8009e60:	4413      	add	r3, r2
 8009e62:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f004 f819 	bl	800dea0 <free>
      HUB_Handle->Port[i].Product = 0;
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8009e76:	fb01 f303 	mul.w	r3, r1, r3
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009e80:	2200      	movs	r2, #0
 8009e82:	601a      	str	r2, [r3, #0]
  for (int i = 0; i<4; i++)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	3301      	adds	r3, #1
 8009e88:	60fb      	str	r3, [r7, #12]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b03      	cmp	r3, #3
 8009e8e:	ddb1      	ble.n	8009df4 <USBH_HUB_InterfaceDeInit+0x18>
    }
  }

  if (phost->pActiveClass->pData[0])
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009e96:	6a1b      	ldr	r3, [r3, #32]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00b      	beq.n	8009eb4 <USBH_HUB_InterfaceDeInit+0xd8>
  {
    USBH_free(phost->pActiveClass->pData[0]);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f003 fffb 	bl	800dea0 <free>
    phost->pActiveClass->pData[0] = 0U;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	621a      	str	r2, [r3, #32]
  }


  USBH_memset(HUB_Handle, 0, sizeof(HUB_HandleTypeDef));
 8009eb4:	f241 023c 	movw	r2, #4156	; 0x103c
 8009eb8:	2100      	movs	r1, #0
 8009eba:	68b8      	ldr	r0, [r7, #8]
 8009ebc:	f003 fff8 	bl	800deb0 <memset>


  return USBH_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <USBH_HUB_ClassRequest>:
static USBH_StatusTypeDef USBH_HUB_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
    USBH_StatusTypeDef status = USBH_BUSY;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	73fb      	strb	r3, [r7, #15]
    HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009ede:	6a1b      	ldr	r3, [r3, #32]
 8009ee0:	60bb      	str	r3, [r7, #8]


   switch (HUB_Handle->ctl_state)
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	78db      	ldrb	r3, [r3, #3]
 8009ee6:	2b07      	cmp	r3, #7
 8009ee8:	f200 8088 	bhi.w	8009ffc <USBH_HUB_ClassRequest+0x130>
 8009eec:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <USBH_HUB_ClassRequest+0x28>)
 8009eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef2:	bf00      	nop
 8009ef4:	08009f15 	.word	0x08009f15
 8009ef8:	08009f29 	.word	0x08009f29
 8009efc:	08009f51 	.word	0x08009f51
 8009f00:	08009f69 	.word	0x08009f69
 8009f04:	08009f81 	.word	0x08009f81
 8009f08:	08009f99 	.word	0x08009f99
 8009f0c:	08009fb1 	.word	0x08009fb1
 8009f10:	08009fc3 	.word	0x08009fc3
   {
    case HUB_REQ_INIT:
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009f1a:	2102      	movs	r1, #2
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	4798      	blx	r3
    HUB_Handle->ctl_state = HUB_REQ_GET_DESCRIPTOR; 
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2201      	movs	r2, #1
 8009f24:	70da      	strb	r2, [r3, #3]
    break;
 8009f26:	e069      	b.n	8009ffc <USBH_HUB_ClassRequest+0x130>
    case HUB_REQ_GET_DESCRIPTOR:

        if (USBH_HUB_GetDescriptor(phost) == USBH_OK)
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 ffcf 	bl	800aecc <USBH_HUB_GetDescriptor>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d15a      	bne.n	8009fea <USBH_HUB_ClassRequest+0x11e>
        {
            USBH_HUB_ParseHubDescriptor(&HUB_Handle->HUB_Desc,phost->device.Data);
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	f103 0216 	add.w	r2, r3, #22
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f40:	4619      	mov	r1, r3
 8009f42:	4610      	mov	r0, r2
 8009f44:	f001 f9ae 	bl	800b2a4 <USBH_HUB_ParseHubDescriptor>
            HUB_Handle->ctl_state = HUB_REQ_SET_POWER_PORT1 ;
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	70da      	strb	r2, [r3, #3]
        }

      break;
 8009f4e:	e04c      	b.n	8009fea <USBH_HUB_ClassRequest+0x11e>

	  case HUB_REQ_SET_POWER_PORT1:

      if(USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_POWER,1) == USBH_OK)
 8009f50:	2201      	movs	r2, #1
 8009f52:	2108      	movs	r1, #8
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 f888 	bl	800b06a <USBH_HUB_SetPortFeature>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d146      	bne.n	8009fee <USBH_HUB_ClassRequest+0x122>
      {
        HUB_Handle->ctl_state = HUB_REQ_SET_POWER_PORT2 ;
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2203      	movs	r2, #3
 8009f64:	70da      	strb	r2, [r3, #3]
      }

      break;
 8009f66:	e042      	b.n	8009fee <USBH_HUB_ClassRequest+0x122>
  
	  case HUB_REQ_SET_POWER_PORT2:

      if(USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_POWER,2) == USBH_OK)
 8009f68:	2202      	movs	r2, #2
 8009f6a:	2108      	movs	r1, #8
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f001 f87c 	bl	800b06a <USBH_HUB_SetPortFeature>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d13c      	bne.n	8009ff2 <USBH_HUB_ClassRequest+0x126>
      {
        HUB_Handle->ctl_state = HUB_REQ_SET_POWER_PORT3 ;
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	2204      	movs	r2, #4
 8009f7c:	70da      	strb	r2, [r3, #3]
      }

      break;
 8009f7e:	e038      	b.n	8009ff2 <USBH_HUB_ClassRequest+0x126>

  	case HUB_REQ_SET_POWER_PORT3:

      if(USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_POWER,3) == USBH_OK)
 8009f80:	2203      	movs	r2, #3
 8009f82:	2108      	movs	r1, #8
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f001 f870 	bl	800b06a <USBH_HUB_SetPortFeature>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d132      	bne.n	8009ff6 <USBH_HUB_ClassRequest+0x12a>
      {
        HUB_Handle->ctl_state = HUB_REQ_SET_POWER_PORT4;
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	2205      	movs	r2, #5
 8009f94:	70da      	strb	r2, [r3, #3]
      }

    break;
 8009f96:	e02e      	b.n	8009ff6 <USBH_HUB_ClassRequest+0x12a>
  
  	case HUB_REQ_SET_POWER_PORT4:
      if(USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_POWER,4) == USBH_OK)
 8009f98:	2204      	movs	r2, #4
 8009f9a:	2108      	movs	r1, #8
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f001 f864 	bl	800b06a <USBH_HUB_SetPortFeature>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d128      	bne.n	8009ffa <USBH_HUB_ClassRequest+0x12e>
      {
        HUB_Handle->ctl_state = HUB_WAIT_PWRGOOD ;
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	2206      	movs	r2, #6
 8009fac:	70da      	strb	r2, [r3, #3]
      }
      break;
 8009fae:	e024      	b.n	8009ffa <USBH_HUB_ClassRequest+0x12e>

   	case HUB_WAIT_PWRGOOD:  
      HAL_Delay(HUB_Handle->HUB_Desc.bPwrOn2PwrGood);
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	7f1b      	ldrb	r3, [r3, #28]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7f7 fe07 	bl	8001bc8 <HAL_Delay>
      HUB_Handle->ctl_state = HUB_REQ_DONE;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2207      	movs	r2, #7
 8009fbe:	70da      	strb	r2, [r3, #3]
      break;
 8009fc0:	e01c      	b.n	8009ffc <USBH_HUB_ClassRequest+0x130>

    case HUB_REQ_DONE:
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	719a      	strb	r2, [r3, #6]
      HUB_Handle->current_Itf_number = 0;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
      HUB_Handle->current_port_number = 0;
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      status = USBH_OK;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8009fe8:	e008      	b.n	8009ffc <USBH_HUB_ClassRequest+0x130>
      break;
 8009fea:	bf00      	nop
 8009fec:	e006      	b.n	8009ffc <USBH_HUB_ClassRequest+0x130>
      break;
 8009fee:	bf00      	nop
 8009ff0:	e004      	b.n	8009ffc <USBH_HUB_ClassRequest+0x130>
      break;
 8009ff2:	bf00      	nop
 8009ff4:	e002      	b.n	8009ffc <USBH_HUB_ClassRequest+0x130>
    break;
 8009ff6:	bf00      	nop
 8009ff8:	e000      	b.n	8009ffc <USBH_HUB_ClassRequest+0x130>
      break;
 8009ffa:	bf00      	nop

  }

	return status;
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop

0800a008 <USBH_HUB_Process>:

static USBH_StatusTypeDef USBH_HUB_Process(USBH_HandleTypeDef *phost)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b088      	sub	sp, #32
 800a00c:	af04      	add	r7, sp, #16
 800a00e:	6078      	str	r0, [r7, #4]
    USBH_StatusTypeDef status = USBH_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	73fb      	strb	r3, [r7, #15]
    HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	60bb      	str	r3, [r7, #8]
    

    switch (HUB_Handle->state)
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	2b04      	cmp	r3, #4
 800a024:	f200 8100 	bhi.w	800a228 <USBH_HUB_Process+0x220>
 800a028:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <USBH_HUB_Process+0x28>)
 800a02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02e:	bf00      	nop
 800a030:	0800a045 	.word	0x0800a045
 800a034:	0800a0a3 	.word	0x0800a0a3
 800a038:	0800a0bd 	.word	0x0800a0bd
 800a03c:	0800a16d 	.word	0x0800a16d
 800a040:	0800a21b 	.word	0x0800a21b
    {
    case HUB_INIT:
            USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80,
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	7919      	ldrb	r1, [r3, #4]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 231c 	ldrb.w	r2, [r3, #796]	; 0x31c
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a054:	2040      	movs	r0, #64	; 0x40
 800a056:	9002      	str	r0, [sp, #8]
 800a058:	2000      	movs	r0, #0
 800a05a:	9001      	str	r0, [sp, #4]
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	4613      	mov	r3, r2
 800a060:	2280      	movs	r2, #128	; 0x80
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f003 fa1e 	bl	800d4a4 <USBH_OpenPipe>
            phost->device.address, phost->device.speed,
            USBH_EP_CONTROL, (uint16_t)0x40);

            USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	7959      	ldrb	r1, [r3, #5]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 231c 	ldrb.w	r2, [r3, #796]	; 0x31c
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a078:	2040      	movs	r0, #64	; 0x40
 800a07a:	9002      	str	r0, [sp, #8]
 800a07c:	2000      	movs	r0, #0
 800a07e:	9001      	str	r0, [sp, #4]
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	4613      	mov	r3, r2
 800a084:	2200      	movs	r2, #0
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f003 fa0c 	bl	800d4a4 <USBH_OpenPipe>
            phost->device.address, phost->device.speed,
            USBH_EP_CONTROL, (uint16_t)0x40);

            phost->Control.pipe_size = 0x40;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2240      	movs	r2, #64	; 0x40
 800a090:	719a      	strb	r2, [r3, #6]
            phost->Control.length = HUB_Handle->length;
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	891a      	ldrh	r2, [r3, #8]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	819a      	strh	r2, [r3, #12]

      HUB_Handle->state = HUB_UPDATE_PORTS_STATUS;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2201      	movs	r2, #1
 800a09e:	701a      	strb	r2, [r3, #0]
      break;
 800a0a0:	e0ca      	b.n	800a238 <USBH_HUB_Process+0x230>

    case HUB_UPDATE_PORTS_STATUS:
          status = USBH_HUB_UpdatePortsStatus(phost);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f918 	bl	800a2d8 <USBH_HUB_UpdatePortsStatus>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]
          if (status == USBH_OK)
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f040 80bd 	bne.w	800a22e <USBH_HUB_Process+0x226>
          {
            HUB_Handle->state = HUB_HANDLE_DISCONNECTED_PORTS;
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	701a      	strb	r2, [r3, #0]
          }


      break;
 800a0ba:	e0b8      	b.n	800a22e <USBH_HUB_Process+0x226>
    
    case HUB_HANDLE_DISCONNECTED_PORTS:

      if (HUB_Handle->Port[HUB_Handle->portNumber-1].Disconnected)
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a0ce:	fb01 f303 	mul.w	r3, r1, r3
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f203 132d 	addw	r3, r3, #301	; 0x12d
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d028      	beq.n	800a130 <USBH_HUB_Process+0x128>
      {
        // Handle Disconnection
        //DeInit HID, Free Pipes and clear Handles.
        status = USBH_HUB_DisconnectDevice(phost,&HUB_Handle->Port[HUB_Handle->portNumber-1]);
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800a0ee:	fb02 f303 	mul.w	r3, r2, r3
 800a0f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f913 	bl	800a328 <USBH_HUB_DisconnectDevice>
 800a102:	4603      	mov	r3, r0
 800a104:	73fb      	strb	r3, [r7, #15]
        if (status == USBH_OK)
 800a106:	7bfb      	ldrb	r3, [r7, #15]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f040 8092 	bne.w	800a232 <USBH_HUB_Process+0x22a>
        {
          HUB_Handle->Port[HUB_Handle->portNumber-1].Disconnected = 0;
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a114:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a118:	3b01      	subs	r3, #1
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a120:	fb01 f303 	mul.w	r3, r1, r3
 800a124:	4413      	add	r3, r2
 800a126:	f203 132d 	addw	r3, r3, #301	; 0x12d
 800a12a:	2200      	movs	r2, #0
 800a12c:	701a      	strb	r2, [r3, #0]
        {
            HUB_Handle->portNumber = 1;
            HUB_Handle->state = HUB_HANDLE_CONNECTED_PORTS;
        }
      }
      break;
 800a12e:	e080      	b.n	800a232 <USBH_HUB_Process+0x22a>
        if (HUB_Handle->portNumber<4)
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a136:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d80c      	bhi.n	800a158 <USBH_HUB_Process+0x150>
        HUB_Handle->portNumber++;
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a144:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a148:	3301      	adds	r3, #1
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a152:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      break;
 800a156:	e06c      	b.n	800a232 <USBH_HUB_Process+0x22a>
            HUB_Handle->portNumber = 1;
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            HUB_Handle->state = HUB_HANDLE_CONNECTED_PORTS;
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	2203      	movs	r2, #3
 800a168:	701a      	strb	r2, [r3, #0]
      break;
 800a16a:	e062      	b.n	800a232 <USBH_HUB_Process+0x22a>

    case HUB_HANDLE_CONNECTED_PORTS:

      if (HUB_Handle->Port[HUB_Handle->portNumber-1].Connected)
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a172:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a176:	3b01      	subs	r3, #1
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a17e:	fb01 f303 	mul.w	r3, r1, r3
 800a182:	4413      	add	r3, r2
 800a184:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d027      	beq.n	800a1de <USBH_HUB_Process+0x1d6>
      {
        // Handle Connection / Enumeration
        status = USBH_HUB_Device_Enum(phost,&HUB_Handle->Port[HUB_Handle->portNumber-1]);
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a194:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a198:	3b01      	subs	r3, #1
 800a19a:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800a19e:	fb02 f303 	mul.w	r3, r2, r3
 800a1a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f001 f8f9 	bl	800b3a4 <USBH_HUB_Device_Enum>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	73fb      	strb	r3, [r7, #15]
        if (status==USBH_OK)
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d13c      	bne.n	800a236 <USBH_HUB_Process+0x22e>
        {
          HUB_Handle->Port[HUB_Handle->portNumber-1].Connected = 0;
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a1ce:	fb01 f303 	mul.w	r3, r1, r3
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800a1d8:	2200      	movs	r2, #0
 800a1da:	701a      	strb	r2, [r3, #0]
        {
            HUB_Handle->portNumber = 1;
            HUB_Handle->state = HUB_PROCESS_PORTS;
        }
      }
    break;
 800a1dc:	e02b      	b.n	800a236 <USBH_HUB_Process+0x22e>
        if (HUB_Handle->portNumber<4)
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a1e8:	2b03      	cmp	r3, #3
 800a1ea:	d80c      	bhi.n	800a206 <USBH_HUB_Process+0x1fe>
          HUB_Handle->portNumber++;
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    break;
 800a204:	e017      	b.n	800a236 <USBH_HUB_Process+0x22e>
            HUB_Handle->portNumber = 1;
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a20c:	2201      	movs	r2, #1
 800a20e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            HUB_Handle->state = HUB_PROCESS_PORTS;
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	2204      	movs	r2, #4
 800a216:	701a      	strb	r2, [r3, #0]
    break;
 800a218:	e00d      	b.n	800a236 <USBH_HUB_Process+0x22e>


    case HUB_PROCESS_PORTS:
      //handle all ports and interfaces at once.
      USBH_HUB_Device_Process(phost);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f001 fda8 	bl	800bd70 <USBH_HUB_Device_Process>



      HUB_Handle->state = HUB_INIT;
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	2200      	movs	r2, #0
 800a224:	701a      	strb	r2, [r3, #0]
      break;
 800a226:	e007      	b.n	800a238 <USBH_HUB_Process+0x230>

    default:
        status = USBH_FAIL;
 800a228:	2302      	movs	r3, #2
 800a22a:	73fb      	strb	r3, [r7, #15]
      break;
 800a22c:	e004      	b.n	800a238 <USBH_HUB_Process+0x230>
      break;
 800a22e:	bf00      	nop
 800a230:	e002      	b.n	800a238 <USBH_HUB_Process+0x230>
      break;
 800a232:	bf00      	nop
 800a234:	e000      	b.n	800a238 <USBH_HUB_Process+0x230>
    break;
 800a236:	bf00      	nop
    } 
    


 	return status;
 800a238:	7bfb      	ldrb	r3, [r7, #15]

   }
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop

0800a244 <USBH_HUB_SOFProcess>:

static USBH_StatusTypeDef USBH_HUB_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
    USBH_StatusTypeDef status = USBH_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	77fb      	strb	r3, [r7, #31]
    HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a256:	6a1b      	ldr	r3, [r3, #32]
 800a258:	61bb      	str	r3, [r7, #24]
    uint8_t currentPort = HUB_Handle->current_port_number;
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a260:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a264:	75fb      	strb	r3, [r7, #23]
    uint8_t currentItf  = HUB_Handle->current_Itf_number;
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a26c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800a270:	75bb      	strb	r3, [r7, #22]

    HUB_Port_HandleTypeDef *port = (HUB_Port_HandleTypeDef *) &HUB_Handle->Port[currentPort];
 800a272:	7dfb      	ldrb	r3, [r7, #23]
 800a274:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800a278:	fb02 f303 	mul.w	r3, r2, r3
 800a27c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a280:	69ba      	ldr	r2, [r7, #24]
 800a282:	4413      	add	r3, r2
 800a284:	613b      	str	r3, [r7, #16]
    if (port->EnumState != HUB_ENUM_READY) return status;
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	799b      	ldrb	r3, [r3, #6]
 800a28a:	2b16      	cmp	r3, #22
 800a28c:	d001      	beq.n	800a292 <USBH_HUB_SOFProcess+0x4e>
 800a28e:	7ffb      	ldrb	r3, [r7, #31]
 800a290:	e01e      	b.n	800a2d0 <USBH_HUB_SOFProcess+0x8c>

    HUB_Port_Interface_HandleTypeDef *Itf = (HUB_Port_Interface_HandleTypeDef *) &port->Interface[currentItf];
 800a292:	7dbb      	ldrb	r3, [r7, #22]
 800a294:	226c      	movs	r2, #108	; 0x6c
 800a296:	fb02 f303 	mul.w	r3, r2, r3
 800a29a:	33e0      	adds	r3, #224	; 0xe0
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	4413      	add	r3, r2
 800a2a0:	3304      	adds	r3, #4
 800a2a2:	60fb      	str	r3, [r7, #12]

    if (Itf->state == HUB_DEVICE_POLL)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	791b      	ldrb	r3, [r3, #4]
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d110      	bne.n	800a2ce <USBH_HUB_SOFProcess+0x8a>
    {
        if(phost->Timer - Itf->timer > Itf->poll)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	8952      	ldrh	r2, [r2, #10]
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d906      	bls.n	800a2ce <USBH_HUB_SOFProcess+0x8a>
        {
          Itf->state = HUB_DEVICE_GET_DATA;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	711a      	strb	r2, [r3, #4]


          USBH_Next_Interface_Port(phost,port);
 800a2c6:	6939      	ldr	r1, [r7, #16]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f867 	bl	800a39c <USBH_Next_Interface_Port>


        }
    }

	  return status;
 800a2ce:	7ffb      	ldrb	r3, [r7, #31]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3720      	adds	r7, #32
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USBH_HUB_UpdatePortsStatus>:

static USBH_StatusTypeDef USBH_HUB_UpdatePortsStatus(USBH_HandleTypeDef *phost)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  static uint8_t PortNumber = 1;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	73fb      	strb	r3, [r7, #15]

    status = USBH_HUB_GetPortStatus(phost,PortNumber);
 800a2e4:	4b0f      	ldr	r3, [pc, #60]	; (800a324 <USBH_HUB_UpdatePortsStatus+0x4c>)
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fe17 	bl	800af1e <USBH_HUB_GetPortStatus>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	73fb      	strb	r3, [r7, #15]
    if ( status == USBH_OK)
 800a2f4:	7bfb      	ldrb	r3, [r7, #15]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d10f      	bne.n	800a31a <USBH_HUB_UpdatePortsStatus+0x42>
    {
      if (PortNumber<4) 
 800a2fa:	4b0a      	ldr	r3, [pc, #40]	; (800a324 <USBH_HUB_UpdatePortsStatus+0x4c>)
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	2b03      	cmp	r3, #3
 800a300:	d808      	bhi.n	800a314 <USBH_HUB_UpdatePortsStatus+0x3c>
      {
        PortNumber++;
 800a302:	4b08      	ldr	r3, [pc, #32]	; (800a324 <USBH_HUB_UpdatePortsStatus+0x4c>)
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	3301      	adds	r3, #1
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	4b06      	ldr	r3, [pc, #24]	; (800a324 <USBH_HUB_UpdatePortsStatus+0x4c>)
 800a30c:	701a      	strb	r2, [r3, #0]
        status = USBH_BUSY;
 800a30e:	2301      	movs	r3, #1
 800a310:	73fb      	strb	r3, [r7, #15]
 800a312:	e002      	b.n	800a31a <USBH_HUB_UpdatePortsStatus+0x42>
      }  
      else
      {
        PortNumber = 1;
 800a314:	4b03      	ldr	r3, [pc, #12]	; (800a324 <USBH_HUB_UpdatePortsStatus+0x4c>)
 800a316:	2201      	movs	r2, #1
 800a318:	701a      	strb	r2, [r3, #0]
      } 
      
    }
	return status;
 800a31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20000084 	.word	0x20000084

0800a328 <USBH_HUB_DisconnectDevice>:



static USBH_StatusTypeDef USBH_HUB_DisconnectDevice(USBH_HandleTypeDef *phost, HUB_Port_HandleTypeDef *Port)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
    USBH_StatusTypeDef status = USBH_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	73fb      	strb	r3, [r7, #15]

      free(Port->MFC);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f003 fdb0 	bl	800dea0 <free>
      Port->MFC = 0;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	2200      	movs	r2, #0
 800a344:	60da      	str	r2, [r3, #12]
      free(Port->Product);
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f003 fda8 	bl	800dea0 <free>
      Port->Product = 0;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	2200      	movs	r2, #0
 800a354:	611a      	str	r2, [r3, #16]
      if (Port->Interface[0].Pipe_in != 0 ) USBH_FreePipe(phost, Port->Interface[0].Pipe_in);
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d006      	beq.n	800a36e <USBH_HUB_DisconnectDevice+0x46>
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f003 f8ea 	bl	800d542 <USBH_FreePipe>
      if (Port->Interface[1].Pipe_in != 0 ) USBH_FreePipe(phost, Port->Interface[0].Pipe_in);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 800a374:	2b00      	cmp	r3, #0
 800a376:	d006      	beq.n	800a386 <USBH_HUB_DisconnectDevice+0x5e>
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 800a37e:	4619      	mov	r1, r3
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f003 f8de 	bl	800d542 <USBH_FreePipe>

      USBH_memset(Port, 0, sizeof(HUB_Port_HandleTypeDef));
 800a386:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800a38a:	2100      	movs	r1, #0
 800a38c:	6838      	ldr	r0, [r7, #0]
 800a38e:	f003 fd8f 	bl	800deb0 <memset>
      
  return status;
 800a392:	7bfb      	ldrb	r3, [r7, #15]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBH_Next_Interface_Port>:

void USBH_Next_Interface_Port(USBH_HandleTypeDef *phost,HUB_Port_HandleTypeDef *port)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
    HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a3ac:	6a1b      	ldr	r3, [r3, #32]
 800a3ae:	60fb      	str	r3, [r7, #12]

          //CHECK IF NEXT INTERFACE NEED TO BE HANDLED
          if(port->CfgDesc.bNumInterfaces>1)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d92e      	bls.n	800a418 <USBH_Next_Interface_Port+0x7c>
          {
             //NEXT INTERFACE
              if(HUB_Handle->current_Itf_number == 0)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3c0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d106      	bne.n	800a3d6 <USBH_Next_Interface_Port+0x3a>
              {
                HUB_Handle->current_Itf_number = 1;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
                else
                {
                  HUB_Handle->current_port_number++;
                }
          }
}
 800a3d4:	e03a      	b.n	800a44c <USBH_Next_Interface_Port+0xb0>
                HUB_Handle->current_Itf_number = 0;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
                if(HUB_Handle->current_port_number ==3)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a3ec:	2b03      	cmp	r3, #3
 800a3ee:	d106      	bne.n	800a3fe <USBH_Next_Interface_Port+0x62>
                  HUB_Handle->current_port_number = 0;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a3fc:	e026      	b.n	800a44c <USBH_Next_Interface_Port+0xb0>
                  HUB_Handle->current_port_number++;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a404:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a408:	3301      	adds	r3, #1
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a412:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a416:	e019      	b.n	800a44c <USBH_Next_Interface_Port+0xb0>
                if(HUB_Handle->current_port_number ==3)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a41e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a422:	2b03      	cmp	r3, #3
 800a424:	d106      	bne.n	800a434 <USBH_Next_Interface_Port+0x98>
                  HUB_Handle->current_port_number = 0;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a432:	e00b      	b.n	800a44c <USBH_Next_Interface_Port+0xb0>
                  HUB_Handle->current_port_number++;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a43a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a43e:	3301      	adds	r3, #1
 800a440:	b2da      	uxtb	r2, r3
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a448:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a44c:	bf00      	nop
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <USBH_HUB_GamepadInit>:
HID_gamepad_Info_TypeDef    hub_gamepad_info;

static USBH_StatusTypeDef USBH_HUB_GamepadDecode(HUB_Port_Interface_HandleTypeDef *Itf);

USBH_StatusTypeDef USBH_HUB_GamepadInit(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  uint8_t reportSize = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	73fb      	strb	r3, [r7, #15]
  reportSize = Itf->HIDDesc->RptDesc.report_size;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a468:	7b1b      	ldrb	r3, [r3, #12]
 800a46a:	73fb      	strb	r3, [r7, #15]



  Itf->pFIFObuf = (uint8_t*) malloc (HID_QUEUE_SIZE * reportSize); 
 800a46c:	7bfa      	ldrb	r2, [r7, #15]
 800a46e:	4613      	mov	r3, r2
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	4413      	add	r3, r2
 800a474:	005b      	lsls	r3, r3, #1
 800a476:	4618      	mov	r0, r3
 800a478:	f003 fd0a 	bl	800de90 <malloc>
 800a47c:	4603      	mov	r3, r0
 800a47e:	461a      	mov	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	665a      	str	r2, [r3, #100]	; 0x64
  hub_gamepad_report_data = Itf->pData;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	3318      	adds	r3, #24
 800a488:	4a0c      	ldr	r2, [pc, #48]	; (800a4bc <USBH_HUB_GamepadInit+0x64>)
 800a48a:	6013      	str	r3, [r2, #0]
  USBH_HID_FifoInit(&Itf->fifo, Itf->pFIFObuf, HID_QUEUE_SIZE * reportSize);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800a496:	7bfb      	ldrb	r3, [r7, #15]
 800a498:	b29b      	uxth	r3, r3
 800a49a:	461a      	mov	r2, r3
 800a49c:	0092      	lsls	r2, r2, #2
 800a49e:	4413      	add	r3, r2
 800a4a0:	005b      	lsls	r3, r3, #1
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	f7fe f991 	bl	80087cc <USBH_HID_FifoInit>

	Itf->DeviceType = HUB_GAMEPAD;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2203      	movs	r2, #3
 800a4ae:	705a      	strb	r2, [r3, #1]

  return USBH_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	2000042c 	.word	0x2000042c

0800a4c0 <USBH_HUB_GetGamepadInfo>:


HID_gamepad_Info_TypeDef *USBH_HUB_GetGamepadInfo(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
	//refresh value of joymap and return value
	if(USBH_HUB_GamepadDecode(Itf)== USBH_OK)
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f80d 	bl	800a4e8 <USBH_HUB_GamepadDecode>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <USBH_HUB_GetGamepadInfo+0x18>
	{
		return &hub_gamepad_info;
 800a4d4:	4b03      	ldr	r3, [pc, #12]	; (800a4e4 <USBH_HUB_GetGamepadInfo+0x24>)
 800a4d6:	e000      	b.n	800a4da <USBH_HUB_GetGamepadInfo+0x1a>
	}
	else
	{
		return NULL;
 800a4d8:	2300      	movs	r3, #0
	}
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	20000430 	.word	0x20000430

0800a4e8 <USBH_HUB_GamepadDecode>:



static USBH_StatusTypeDef USBH_HUB_GamepadDecode(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ea:	b097      	sub	sp, #92	; 0x5c
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]

	  if(Itf->length == 0U)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	88db      	ldrh	r3, [r3, #6]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <USBH_HUB_GamepadDecode+0x14>
	  {
	    return USBH_FAIL;
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	e259      	b.n	800a9b0 <USBH_HUB_GamepadDecode+0x4c8>
	  }

	  if(USBH_HID_FifoRead(&Itf->fifo, hub_gamepad_report_data, Itf->length) ==  Itf->length)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800a502:	4bcb      	ldr	r3, [pc, #812]	; (800a830 <USBH_HUB_GamepadDecode+0x348>)
 800a504:	6819      	ldr	r1, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	88db      	ldrh	r3, [r3, #6]
 800a50a:	461a      	mov	r2, r3
 800a50c:	f7fe f97a 	bl	8008804 <USBH_HID_FifoRead>
 800a510:	4603      	mov	r3, r0
 800a512:	461a      	mov	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	88db      	ldrh	r3, [r3, #6]
 800a518:	429a      	cmp	r2, r3
 800a51a:	f040 8248 	bne.w	800a9ae <USBH_HUB_GamepadDecode+0x4c6>
	    {


		uint8_t jmap = 0;
 800a51e:	2300      	movs	r3, #0
 800a520:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		uint8_t btn = 0;
 800a524:	2300      	movs	r3, #0
 800a526:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		uint8_t btn_extra = 0;
 800a52a:	2300      	movs	r3, #0
 800a52c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		int16_t a[2];
		uint8_t i;

		hid_report_t conf = Itf->HIDDesc->RptDesc;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a534:	f103 040a 	add.w	r4, r3, #10
 800a538:	f107 0608 	add.w	r6, r7, #8
 800a53c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800a540:	4635      	mov	r5, r6
 800a542:	4623      	mov	r3, r4
 800a544:	6818      	ldr	r0, [r3, #0]
 800a546:	6859      	ldr	r1, [r3, #4]
 800a548:	689a      	ldr	r2, [r3, #8]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a54e:	3410      	adds	r4, #16
 800a550:	3610      	adds	r6, #16
 800a552:	4564      	cmp	r4, ip
 800a554:	d1f4      	bne.n	800a540 <USBH_HUB_GamepadDecode+0x58>
 800a556:	4633      	mov	r3, r6
 800a558:	4622      	mov	r2, r4
 800a55a:	6810      	ldr	r0, [r2, #0]
 800a55c:	6018      	str	r0, [r3, #0]
 800a55e:	8892      	ldrh	r2, [r2, #4]
 800a560:	809a      	strh	r2, [r3, #4]

		// skip report id if present
		uint8_t *p = hub_gamepad_report_data+(conf.report_id?1:0);
 800a562:	4bb3      	ldr	r3, [pc, #716]	; (800a830 <USBH_HUB_GamepadDecode+0x348>)
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	7a7b      	ldrb	r3, [r7, #9]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <USBH_HUB_GamepadDecode+0x88>
 800a56c:	2301      	movs	r3, #1
 800a56e:	e000      	b.n	800a572 <USBH_HUB_GamepadDecode+0x8a>
 800a570:	2300      	movs	r3, #0
 800a572:	4413      	add	r3, r2
 800a574:	653b      	str	r3, [r7, #80]	; 0x50


		//process axis
		// two axes ...
				for(i=0;i<2;i++) {
 800a576:	2300      	movs	r3, #0
 800a578:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a57c:	e038      	b.n	800a5f0 <USBH_HUB_GamepadDecode+0x108>
					// if logical minimum is > logical maximum then logical minimum
					// is signed. This means that the value itself is also signed
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 800a57e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a582:	3301      	adds	r3, #1
 800a584:	00db      	lsls	r3, r3, #3
 800a586:	3358      	adds	r3, #88	; 0x58
 800a588:	443b      	add	r3, r7
 800a58a:	f833 2c4c 	ldrh.w	r2, [r3, #-76]
					conf.joystick_mouse.axis[i].logical.max;
 800a58e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a592:	3301      	adds	r3, #1
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	3358      	adds	r3, #88	; 0x58
 800a598:	443b      	add	r3, r7
 800a59a:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	bf8c      	ite	hi
 800a5a2:	2301      	movhi	r3, #1
 800a5a4:	2300      	movls	r3, #0
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	647b      	str	r3, [r7, #68]	; 0x44
					a[i] = collect_bits(p, conf.joystick_mouse.axis[i].offset,
 800a5aa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	00db      	lsls	r3, r3, #3
 800a5b2:	3358      	adds	r3, #88	; 0x58
 800a5b4:	443b      	add	r3, r7
 800a5b6:	f833 1c50 	ldrh.w	r1, [r3, #-80]
 800a5ba:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a5be:	3301      	adds	r3, #1
 800a5c0:	00db      	lsls	r3, r3, #3
 800a5c2:	3358      	adds	r3, #88	; 0x58
 800a5c4:	443b      	add	r3, r7
 800a5c6:	f813 2c4e 	ldrb.w	r2, [r3, #-78]
 800a5ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a5ce:	f7fe fd8f 	bl	80090f0 <collect_bits>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a5da:	b212      	sxth	r2, r2
 800a5dc:	005b      	lsls	r3, r3, #1
 800a5de:	3358      	adds	r3, #88	; 0x58
 800a5e0:	443b      	add	r3, r7
 800a5e2:	f823 2c18 	strh.w	r2, [r3, #-24]
				for(i=0;i<2;i++) {
 800a5e6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a5f0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d9c2      	bls.n	800a57e <USBH_HUB_GamepadDecode+0x96>
								conf.joystick_mouse.axis[i].size, is_signed);
				}

		//process 4 first buttons
		for(i=0;i<4;i++)
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a5fe:	e028      	b.n	800a652 <USBH_HUB_GamepadDecode+0x16a>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a600:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a604:	330c      	adds	r3, #12
 800a606:	005b      	lsls	r3, r3, #1
 800a608:	3358      	adds	r3, #88	; 0x58
 800a60a:	443b      	add	r3, r7
 800a60c:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800a610:	461a      	mov	r2, r3
 800a612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a614:	4413      	add	r3, r2
 800a616:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800a618:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a61c:	330c      	adds	r3, #12
 800a61e:	005b      	lsls	r3, r3, #1
 800a620:	3358      	adds	r3, #88	; 0x58
 800a622:	443b      	add	r3, r7
 800a624:	f813 3c4f 	ldrb.w	r3, [r3, #-79]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a628:	4013      	ands	r3, r2
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00b      	beq.n	800a648 <USBH_HUB_GamepadDecode+0x160>
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800a630:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a634:	2201      	movs	r2, #1
 800a636:	fa02 f303 	lsl.w	r3, r2, r3
 800a63a:	b25a      	sxtb	r2, r3
 800a63c:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800a640:	4313      	orrs	r3, r2
 800a642:	b25b      	sxtb	r3, r3
 800a644:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		for(i=0;i<4;i++)
 800a648:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a64c:	3301      	adds	r3, #1
 800a64e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a652:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a656:	2b03      	cmp	r3, #3
 800a658:	d9d2      	bls.n	800a600 <USBH_HUB_GamepadDecode+0x118>

		// ... and the eight extra buttons
		for(i=4;i<12;i++)
 800a65a:	2304      	movs	r3, #4
 800a65c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a660:	e029      	b.n	800a6b6 <USBH_HUB_GamepadDecode+0x1ce>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a662:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a666:	330c      	adds	r3, #12
 800a668:	005b      	lsls	r3, r3, #1
 800a66a:	3358      	adds	r3, #88	; 0x58
 800a66c:	443b      	add	r3, r7
 800a66e:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800a672:	461a      	mov	r2, r3
 800a674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a676:	4413      	add	r3, r2
 800a678:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800a67a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a67e:	330c      	adds	r3, #12
 800a680:	005b      	lsls	r3, r3, #1
 800a682:	3358      	adds	r3, #88	; 0x58
 800a684:	443b      	add	r3, r7
 800a686:	f813 3c4f 	ldrb.w	r3, [r3, #-79]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a68a:	4013      	ands	r3, r2
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00c      	beq.n	800a6ac <USBH_HUB_GamepadDecode+0x1c4>
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800a692:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a696:	3b04      	subs	r3, #4
 800a698:	2201      	movs	r2, #1
 800a69a:	fa02 f303 	lsl.w	r3, r2, r3
 800a69e:	b25a      	sxtb	r2, r3
 800a6a0:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	b25b      	sxtb	r3, r3
 800a6a8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		for(i=4;i<12;i++)
 800a6ac:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a6b6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a6ba:	2b0b      	cmp	r3, #11
 800a6bc:	d9d1      	bls.n	800a662 <USBH_HUB_GamepadDecode+0x17a>



	for(i=0;i<2;i++) {
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a6c4:	e132      	b.n	800a92c <USBH_HUB_GamepadDecode+0x444>

		int hrange = (conf.joystick_mouse.axis[i].logical.max - abs(conf.joystick_mouse.axis[i].logical.min)) / 2;
 800a6c6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	00db      	lsls	r3, r3, #3
 800a6ce:	3358      	adds	r3, #88	; 0x58
 800a6d0:	443b      	add	r3, r7
 800a6d2:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a6dc:	3301      	adds	r3, #1
 800a6de:	00db      	lsls	r3, r3, #3
 800a6e0:	3358      	adds	r3, #88	; 0x58
 800a6e2:	443b      	add	r3, r7
 800a6e4:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	da00      	bge.n	800a6f0 <USBH_HUB_GamepadDecode+0x208>
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	105b      	asrs	r3, r3, #1
 800a6f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		int dead = hrange/63;
 800a6f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6f6:	4a4f      	ldr	r2, [pc, #316]	; (800a834 <USBH_HUB_GamepadDecode+0x34c>)
 800a6f8:	fb82 1203 	smull	r1, r2, r2, r3
 800a6fc:	441a      	add	r2, r3
 800a6fe:	1152      	asrs	r2, r2, #5
 800a700:	17db      	asrs	r3, r3, #31
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	64bb      	str	r3, [r7, #72]	; 0x48

		if (a[i] < conf.joystick_mouse.axis[i].logical.min) a[i] = conf.joystick_mouse.axis[i].logical.min;
 800a706:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a70a:	005b      	lsls	r3, r3, #1
 800a70c:	3358      	adds	r3, #88	; 0x58
 800a70e:	443b      	add	r3, r7
 800a710:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a714:	461a      	mov	r2, r3
 800a716:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a71a:	3301      	adds	r3, #1
 800a71c:	00db      	lsls	r3, r3, #3
 800a71e:	3358      	adds	r3, #88	; 0x58
 800a720:	443b      	add	r3, r7
 800a722:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800a726:	429a      	cmp	r2, r3
 800a728:	da10      	bge.n	800a74c <USBH_HUB_GamepadDecode+0x264>
 800a72a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a72e:	3301      	adds	r3, #1
 800a730:	00db      	lsls	r3, r3, #3
 800a732:	3358      	adds	r3, #88	; 0x58
 800a734:	443b      	add	r3, r7
 800a736:	f833 2c4c 	ldrh.w	r2, [r3, #-76]
 800a73a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a73e:	b212      	sxth	r2, r2
 800a740:	005b      	lsls	r3, r3, #1
 800a742:	3358      	adds	r3, #88	; 0x58
 800a744:	443b      	add	r3, r7
 800a746:	f823 2c18 	strh.w	r2, [r3, #-24]
 800a74a:	e021      	b.n	800a790 <USBH_HUB_GamepadDecode+0x2a8>
		else if (a[i] > conf.joystick_mouse.axis[i].logical.max) a[i] = conf.joystick_mouse.axis[i].logical.max;
 800a74c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a750:	005b      	lsls	r3, r3, #1
 800a752:	3358      	adds	r3, #88	; 0x58
 800a754:	443b      	add	r3, r7
 800a756:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a75a:	461a      	mov	r2, r3
 800a75c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a760:	3301      	adds	r3, #1
 800a762:	00db      	lsls	r3, r3, #3
 800a764:	3358      	adds	r3, #88	; 0x58
 800a766:	443b      	add	r3, r7
 800a768:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	dd0f      	ble.n	800a790 <USBH_HUB_GamepadDecode+0x2a8>
 800a770:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a774:	3301      	adds	r3, #1
 800a776:	00db      	lsls	r3, r3, #3
 800a778:	3358      	adds	r3, #88	; 0x58
 800a77a:	443b      	add	r3, r7
 800a77c:	f833 2c4a 	ldrh.w	r2, [r3, #-74]
 800a780:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a784:	b212      	sxth	r2, r2
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	3358      	adds	r3, #88	; 0x58
 800a78a:	443b      	add	r3, r7
 800a78c:	f823 2c18 	strh.w	r2, [r3, #-24]

		a[i] = a[i] - (abs(conf.joystick_mouse.axis[i].logical.min) + conf.joystick_mouse.axis[i].logical.max) / 2;
 800a790:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a794:	005b      	lsls	r3, r3, #1
 800a796:	3358      	adds	r3, #88	; 0x58
 800a798:	443b      	add	r3, r7
 800a79a:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	00db      	lsls	r3, r3, #3
 800a7a8:	3358      	adds	r3, #88	; 0x58
 800a7aa:	443b      	add	r3, r7
 800a7ac:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	00db      	lsls	r3, r3, #3
 800a7ba:	3358      	adds	r3, #88	; 0x58
 800a7bc:	443b      	add	r3, r7
 800a7be:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 800a7c2:	440b      	add	r3, r1
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	da00      	bge.n	800a7ca <USBH_HUB_GamepadDecode+0x2e2>
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	105b      	asrs	r3, r3, #1
 800a7cc:	425b      	negs	r3, r3
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	4413      	add	r3, r2
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a7d8:	b212      	sxth	r2, r2
 800a7da:	005b      	lsls	r3, r3, #1
 800a7dc:	3358      	adds	r3, #88	; 0x58
 800a7de:	443b      	add	r3, r7
 800a7e0:	f823 2c18 	strh.w	r2, [r3, #-24]

		hrange -= dead;
 800a7e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (a[i] < -dead) a[i] += dead;
 800a7ec:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a7f0:	005b      	lsls	r3, r3, #1
 800a7f2:	3358      	adds	r3, #88	; 0x58
 800a7f4:	443b      	add	r3, r7
 800a7f6:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7fe:	425b      	negs	r3, r3
 800a800:	429a      	cmp	r2, r3
 800a802:	da19      	bge.n	800a838 <USBH_HUB_GamepadDecode+0x350>
 800a804:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a808:	005b      	lsls	r3, r3, #1
 800a80a:	3358      	adds	r3, #88	; 0x58
 800a80c:	443b      	add	r3, r7
 800a80e:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a812:	b29a      	uxth	r2, r3
 800a814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a816:	b29b      	uxth	r3, r3
 800a818:	4413      	add	r3, r2
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a820:	b212      	sxth	r2, r2
 800a822:	005b      	lsls	r3, r3, #1
 800a824:	3358      	adds	r3, #88	; 0x58
 800a826:	443b      	add	r3, r7
 800a828:	f823 2c18 	strh.w	r2, [r3, #-24]
 800a82c:	e02c      	b.n	800a888 <USBH_HUB_GamepadDecode+0x3a0>
 800a82e:	bf00      	nop
 800a830:	2000042c 	.word	0x2000042c
 800a834:	82082083 	.word	0x82082083
		else if (a[i] > dead) a[i] -= dead;
 800a838:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a83c:	005b      	lsls	r3, r3, #1
 800a83e:	3358      	adds	r3, #88	; 0x58
 800a840:	443b      	add	r3, r7
 800a842:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a846:	461a      	mov	r2, r3
 800a848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a84a:	4293      	cmp	r3, r2
 800a84c:	da14      	bge.n	800a878 <USBH_HUB_GamepadDecode+0x390>
 800a84e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	3358      	adds	r3, #88	; 0x58
 800a856:	443b      	add	r3, r7
 800a858:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a860:	b29b      	uxth	r3, r3
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	b29a      	uxth	r2, r3
 800a866:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a86a:	b212      	sxth	r2, r2
 800a86c:	005b      	lsls	r3, r3, #1
 800a86e:	3358      	adds	r3, #88	; 0x58
 800a870:	443b      	add	r3, r7
 800a872:	f823 2c18 	strh.w	r2, [r3, #-24]
 800a876:	e007      	b.n	800a888 <USBH_HUB_GamepadDecode+0x3a0>
		else a[i] = 0;
 800a878:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a87c:	005b      	lsls	r3, r3, #1
 800a87e:	3358      	adds	r3, #88	; 0x58
 800a880:	443b      	add	r3, r7
 800a882:	2200      	movs	r2, #0
 800a884:	f823 2c18 	strh.w	r2, [r3, #-24]

		a[i] = (a[i] * 127) / hrange;
 800a888:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a88c:	005b      	lsls	r3, r3, #1
 800a88e:	3358      	adds	r3, #88	; 0x58
 800a890:	443b      	add	r3, r7
 800a892:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a896:	461a      	mov	r2, r3
 800a898:	4613      	mov	r3, r2
 800a89a:	01db      	lsls	r3, r3, #7
 800a89c:	1a9a      	subs	r2, r3, r2
 800a89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8a0:	fb92 f2f3 	sdiv	r2, r2, r3
 800a8a4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a8a8:	b212      	sxth	r2, r2
 800a8aa:	005b      	lsls	r3, r3, #1
 800a8ac:	3358      	adds	r3, #88	; 0x58
 800a8ae:	443b      	add	r3, r7
 800a8b0:	f823 2c18 	strh.w	r2, [r3, #-24]

		if (a[i] < -127) a[i] = -127;
 800a8b4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a8b8:	005b      	lsls	r3, r3, #1
 800a8ba:	3358      	adds	r3, #88	; 0x58
 800a8bc:	443b      	add	r3, r7
 800a8be:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a8c2:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 800a8c6:	da09      	bge.n	800a8dc <USBH_HUB_GamepadDecode+0x3f4>
 800a8c8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a8cc:	005b      	lsls	r3, r3, #1
 800a8ce:	3358      	adds	r3, #88	; 0x58
 800a8d0:	443b      	add	r3, r7
 800a8d2:	f64f 7281 	movw	r2, #65409	; 0xff81
 800a8d6:	f823 2c18 	strh.w	r2, [r3, #-24]
 800a8da:	e010      	b.n	800a8fe <USBH_HUB_GamepadDecode+0x416>
		else if (a[i] > 127) a[i] = 127;
 800a8dc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a8e0:	005b      	lsls	r3, r3, #1
 800a8e2:	3358      	adds	r3, #88	; 0x58
 800a8e4:	443b      	add	r3, r7
 800a8e6:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a8ea:	2b7f      	cmp	r3, #127	; 0x7f
 800a8ec:	dd07      	ble.n	800a8fe <USBH_HUB_GamepadDecode+0x416>
 800a8ee:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a8f2:	005b      	lsls	r3, r3, #1
 800a8f4:	3358      	adds	r3, #88	; 0x58
 800a8f6:	443b      	add	r3, r7
 800a8f8:	227f      	movs	r2, #127	; 0x7f
 800a8fa:	f823 2c18 	strh.w	r2, [r3, #-24]

		a[i]=a[i]+127; // mist wants a value in the range [0..255]
 800a8fe:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a902:	005b      	lsls	r3, r3, #1
 800a904:	3358      	adds	r3, #88	; 0x58
 800a906:	443b      	add	r3, r7
 800a908:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	337f      	adds	r3, #127	; 0x7f
 800a910:	b29a      	uxth	r2, r3
 800a912:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a916:	b212      	sxth	r2, r2
 800a918:	005b      	lsls	r3, r3, #1
 800a91a:	3358      	adds	r3, #88	; 0x58
 800a91c:	443b      	add	r3, r7
 800a91e:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(i=0;i<2;i++) {
 800a922:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a926:	3301      	adds	r3, #1
 800a928:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a92c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a930:	2b01      	cmp	r3, #1
 800a932:	f67f aec8 	bls.w	800a6c6 <USBH_HUB_GamepadDecode+0x1de>
	}

				if(a[0] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_LEFT;
 800a936:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800a93a:	2b3f      	cmp	r3, #63	; 0x3f
 800a93c:	dc05      	bgt.n	800a94a <USBH_HUB_GamepadDecode+0x462>
 800a93e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a942:	f043 0302 	orr.w	r3, r3, #2
 800a946:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(a[0] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_RIGHT;
 800a94a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800a94e:	2bc0      	cmp	r3, #192	; 0xc0
 800a950:	dd05      	ble.n	800a95e <USBH_HUB_GamepadDecode+0x476>
 800a952:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a956:	f043 0301 	orr.w	r3, r3, #1
 800a95a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(a[1] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_UP;
 800a95e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800a962:	2b3f      	cmp	r3, #63	; 0x3f
 800a964:	dc05      	bgt.n	800a972 <USBH_HUB_GamepadDecode+0x48a>
 800a966:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a96a:	f043 0308 	orr.w	r3, r3, #8
 800a96e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(a[1] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_DOWN;
 800a972:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800a976:	2bc0      	cmp	r3, #192	; 0xc0
 800a978:	dd05      	ble.n	800a986 <USBH_HUB_GamepadDecode+0x49e>
 800a97a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a97e:	f043 0304 	orr.w	r3, r3, #4
 800a982:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				jmap |= btn << JOY_BTN_SHIFT;      // add buttons
 800a986:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800a98a:	011b      	lsls	r3, r3, #4
 800a98c:	b25a      	sxtb	r2, r3
 800a98e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a992:	4313      	orrs	r3, r2
 800a994:	b25b      	sxtb	r3, r3
 800a996:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

				hub_gamepad_info.gamepad_data = jmap;
 800a99a:	4a07      	ldr	r2, [pc, #28]	; (800a9b8 <USBH_HUB_GamepadDecode+0x4d0>)
 800a99c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9a0:	7013      	strb	r3, [r2, #0]
				hub_gamepad_info.gamepad_extraBtn = btn_extra;
 800a9a2:	4a05      	ldr	r2, [pc, #20]	; (800a9b8 <USBH_HUB_GamepadDecode+0x4d0>)
 800a9a4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800a9a8:	7053      	strb	r3, [r2, #1]

		  return USBH_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	e000      	b.n	800a9b0 <USBH_HUB_GamepadDecode+0x4c8>
	    }



	  return USBH_FAIL;
 800a9ae:	2302      	movs	r3, #2

}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	375c      	adds	r7, #92	; 0x5c
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b8:	20000430 	.word	0x20000430

0800a9bc <USBH_HUB_KeybdInit>:
  101,   /*max value device can report*/
  1      /*resolution*/
};

USBH_StatusTypeDef USBH_HUB_KeybdInit(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]

  uint32_t x;


    hub_keybd_info.lctrl = hub_keybd_info.lshift = 0U;
 800a9c4:	4b2a      	ldr	r3, [pc, #168]	; (800aa70 <USBH_HUB_KeybdInit+0xb4>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	709a      	strb	r2, [r3, #2]
 800a9ca:	4b29      	ldr	r3, [pc, #164]	; (800aa70 <USBH_HUB_KeybdInit+0xb4>)
 800a9cc:	789a      	ldrb	r2, [r3, #2]
 800a9ce:	4b28      	ldr	r3, [pc, #160]	; (800aa70 <USBH_HUB_KeybdInit+0xb4>)
 800a9d0:	705a      	strb	r2, [r3, #1]
    hub_keybd_info.lalt = hub_keybd_info.lgui = 0U;
 800a9d2:	4b27      	ldr	r3, [pc, #156]	; (800aa70 <USBH_HUB_KeybdInit+0xb4>)
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	711a      	strb	r2, [r3, #4]
 800a9d8:	4b25      	ldr	r3, [pc, #148]	; (800aa70 <USBH_HUB_KeybdInit+0xb4>)
 800a9da:	791a      	ldrb	r2, [r3, #4]
 800a9dc:	4b24      	ldr	r3, [pc, #144]	; (800aa70 <USBH_HUB_KeybdInit+0xb4>)
 800a9de:	70da      	strb	r2, [r3, #3]
    hub_keybd_info.rctrl = hub_keybd_info.rshift = 0U;
 800a9e0:	4b23      	ldr	r3, [pc, #140]	; (800aa70 <USBH_HUB_KeybdInit+0xb4>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	719a      	strb	r2, [r3, #6]
 800a9e6:	4b22      	ldr	r3, [pc, #136]	; (800aa70 <USBH_HUB_KeybdInit+0xb4>)
 800a9e8:	799a      	ldrb	r2, [r3, #6]
 800a9ea:	4b21      	ldr	r3, [pc, #132]	; (800aa70 <USBH_HUB_KeybdInit+0xb4>)
 800a9ec:	715a      	strb	r2, [r3, #5]
    hub_keybd_info.ralt = hub_keybd_info.rgui = 0U;
 800a9ee:	4b20      	ldr	r3, [pc, #128]	; (800aa70 <USBH_HUB_KeybdInit+0xb4>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	721a      	strb	r2, [r3, #8]
 800a9f4:	4b1e      	ldr	r3, [pc, #120]	; (800aa70 <USBH_HUB_KeybdInit+0xb4>)
 800a9f6:	7a1a      	ldrb	r2, [r3, #8]
 800a9f8:	4b1d      	ldr	r3, [pc, #116]	; (800aa70 <USBH_HUB_KeybdInit+0xb4>)
 800a9fa:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(hub_keybd_report_data) / sizeof(uint32_t)); x++)
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	60fb      	str	r3, [r7, #12]
 800aa00:	e00c      	b.n	800aa1c <USBH_HUB_KeybdInit+0x60>
  {
    hub_keybd_report_data[x] = 0U;
 800aa02:	4a1c      	ldr	r2, [pc, #112]	; (800aa74 <USBH_HUB_KeybdInit+0xb8>)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2100      	movs	r1, #0
 800aa08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    hub_keybd_rx_report_buf[x] = 0U;
 800aa0c:	4a1a      	ldr	r2, [pc, #104]	; (800aa78 <USBH_HUB_KeybdInit+0xbc>)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2100      	movs	r1, #0
 800aa12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(hub_keybd_report_data) / sizeof(uint32_t)); x++)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d9ef      	bls.n	800aa02 <USBH_HUB_KeybdInit+0x46>
  }

  if (Itf->length > (sizeof(hub_keybd_report_data)))
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	88db      	ldrh	r3, [r3, #6]
 800aa26:	2b08      	cmp	r3, #8
 800aa28:	d902      	bls.n	800aa30 <USBH_HUB_KeybdInit+0x74>
  {
    Itf->length = (sizeof(hub_keybd_report_data));
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2208      	movs	r2, #8
 800aa2e:	80da      	strh	r2, [r3, #6]
  }
  //HUB_Handle->pData = (uint8_t *)(void *)hub_keybd_rx_report_buf;

    Itf->pFIFObuf = malloc(HID_QUEUE_SIZE * Itf->length);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	88db      	ldrh	r3, [r3, #6]
 800aa34:	461a      	mov	r2, r3
 800aa36:	4613      	mov	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	005b      	lsls	r3, r3, #1
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f003 fa26 	bl	800de90 <malloc>
 800aa44:	4603      	mov	r3, r0
 800aa46:	461a      	mov	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	665a      	str	r2, [r3, #100]	; 0x64
    USBH_HID_FifoInit(&Itf->fifo, Itf->pFIFObuf, HID_QUEUE_SIZE * sizeof(hub_keybd_report_data));
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa56:	2250      	movs	r2, #80	; 0x50
 800aa58:	4619      	mov	r1, r3
 800aa5a:	f7fd feb7 	bl	80087cc <USBH_HID_FifoInit>
    Itf->DeviceType = HUB_KEYBOARD;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	705a      	strb	r2, [r3, #1]

  return USBH_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	20000434 	.word	0x20000434
 800aa74:	2000044c 	.word	0x2000044c
 800aa78:	20000444 	.word	0x20000444

0800aa7c <USBH_HUB_GetKeybdInfo>:


HID_KEYBD_Info_TypeDef *USBH_HUB_GetKeybdInfo(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  if (USBH_HUB_KeybdDecode(Itf) == USBH_OK)
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 f80d 	bl	800aaa4 <USBH_HUB_KeybdDecode>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d101      	bne.n	800aa94 <USBH_HUB_GetKeybdInfo+0x18>
  {
    return &hub_keybd_info;
 800aa90:	4b03      	ldr	r3, [pc, #12]	; (800aaa0 <USBH_HUB_GetKeybdInfo+0x24>)
 800aa92:	e000      	b.n	800aa96 <USBH_HUB_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800aa94:	2300      	movs	r3, #0
  }
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	20000434 	.word	0x20000434

0800aaa4 <USBH_HUB_KeybdDecode>:



USBH_StatusTypeDef USBH_HUB_KeybdDecode(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  uint8_t x;


  if (Itf->length == 0U)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	88db      	ldrh	r3, [r3, #6]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <USBH_HUB_KeybdDecode+0x14>
  {
    return USBH_FAIL;
 800aab4:	2302      	movs	r3, #2
 800aab6:	e072      	b.n	800ab9e <USBH_HUB_KeybdDecode+0xfa>
  }
  /*Fill report */

  if (USBH_HID_FifoRead(&Itf->fifo, &hub_keybd_report_data, Itf->length) ==  Itf->length)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	88db      	ldrh	r3, [r3, #6]
 800aac2:	461a      	mov	r2, r3
 800aac4:	4938      	ldr	r1, [pc, #224]	; (800aba8 <USBH_HUB_KeybdDecode+0x104>)
 800aac6:	f7fd fe9d 	bl	8008804 <USBH_HID_FifoRead>
 800aaca:	4603      	mov	r3, r0
 800aacc:	461a      	mov	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	88db      	ldrh	r3, [r3, #6]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d162      	bne.n	800ab9c <USBH_HUB_KeybdDecode+0xf8>
  {
	  if (hub_keybd_report_data[0] == 0x1010000 && hub_keybd_report_data[1]==0x1010101)
 800aad6:	4b34      	ldr	r3, [pc, #208]	; (800aba8 <USBH_HUB_KeybdDecode+0x104>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a34      	ldr	r2, [pc, #208]	; (800abac <USBH_HUB_KeybdDecode+0x108>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d106      	bne.n	800aaee <USBH_HUB_KeybdDecode+0x4a>
 800aae0:	4b31      	ldr	r3, [pc, #196]	; (800aba8 <USBH_HUB_KeybdDecode+0x104>)
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 800aae8:	d101      	bne.n	800aaee <USBH_HUB_KeybdDecode+0x4a>
  
	  {
		  return USBH_FAIL;
 800aaea:	2302      	movs	r3, #2
 800aaec:	e057      	b.n	800ab9e <USBH_HUB_KeybdDecode+0xfa>
	  }
	//  if keybd_re  5055
    hub_keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800aaee:	2100      	movs	r1, #0
 800aaf0:	482f      	ldr	r0, [pc, #188]	; (800abb0 <USBH_HUB_KeybdDecode+0x10c>)
 800aaf2:	f7fe fd1b 	bl	800952c <HID_ReadItem>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	b2da      	uxtb	r2, r3
 800aafa:	4b2e      	ldr	r3, [pc, #184]	; (800abb4 <USBH_HUB_KeybdDecode+0x110>)
 800aafc:	705a      	strb	r2, [r3, #1]
    hub_keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800aafe:	2100      	movs	r1, #0
 800ab00:	482d      	ldr	r0, [pc, #180]	; (800abb8 <USBH_HUB_KeybdDecode+0x114>)
 800ab02:	f7fe fd13 	bl	800952c <HID_ReadItem>
 800ab06:	4603      	mov	r3, r0
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	4b2a      	ldr	r3, [pc, #168]	; (800abb4 <USBH_HUB_KeybdDecode+0x110>)
 800ab0c:	709a      	strb	r2, [r3, #2]
    hub_keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800ab0e:	2100      	movs	r1, #0
 800ab10:	482a      	ldr	r0, [pc, #168]	; (800abbc <USBH_HUB_KeybdDecode+0x118>)
 800ab12:	f7fe fd0b 	bl	800952c <HID_ReadItem>
 800ab16:	4603      	mov	r3, r0
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	4b26      	ldr	r3, [pc, #152]	; (800abb4 <USBH_HUB_KeybdDecode+0x110>)
 800ab1c:	70da      	strb	r2, [r3, #3]
    hub_keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800ab1e:	2100      	movs	r1, #0
 800ab20:	4827      	ldr	r0, [pc, #156]	; (800abc0 <USBH_HUB_KeybdDecode+0x11c>)
 800ab22:	f7fe fd03 	bl	800952c <HID_ReadItem>
 800ab26:	4603      	mov	r3, r0
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	4b22      	ldr	r3, [pc, #136]	; (800abb4 <USBH_HUB_KeybdDecode+0x110>)
 800ab2c:	711a      	strb	r2, [r3, #4]
    hub_keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800ab2e:	2100      	movs	r1, #0
 800ab30:	4824      	ldr	r0, [pc, #144]	; (800abc4 <USBH_HUB_KeybdDecode+0x120>)
 800ab32:	f7fe fcfb 	bl	800952c <HID_ReadItem>
 800ab36:	4603      	mov	r3, r0
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	4b1e      	ldr	r3, [pc, #120]	; (800abb4 <USBH_HUB_KeybdDecode+0x110>)
 800ab3c:	715a      	strb	r2, [r3, #5]
    hub_keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800ab3e:	2100      	movs	r1, #0
 800ab40:	4821      	ldr	r0, [pc, #132]	; (800abc8 <USBH_HUB_KeybdDecode+0x124>)
 800ab42:	f7fe fcf3 	bl	800952c <HID_ReadItem>
 800ab46:	4603      	mov	r3, r0
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	4b1a      	ldr	r3, [pc, #104]	; (800abb4 <USBH_HUB_KeybdDecode+0x110>)
 800ab4c:	719a      	strb	r2, [r3, #6]
    hub_keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800ab4e:	2100      	movs	r1, #0
 800ab50:	481e      	ldr	r0, [pc, #120]	; (800abcc <USBH_HUB_KeybdDecode+0x128>)
 800ab52:	f7fe fceb 	bl	800952c <HID_ReadItem>
 800ab56:	4603      	mov	r3, r0
 800ab58:	b2da      	uxtb	r2, r3
 800ab5a:	4b16      	ldr	r3, [pc, #88]	; (800abb4 <USBH_HUB_KeybdDecode+0x110>)
 800ab5c:	71da      	strb	r2, [r3, #7]
    hub_keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800ab5e:	2100      	movs	r1, #0
 800ab60:	481b      	ldr	r0, [pc, #108]	; (800abd0 <USBH_HUB_KeybdDecode+0x12c>)
 800ab62:	f7fe fce3 	bl	800952c <HID_ReadItem>
 800ab66:	4603      	mov	r3, r0
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	4b12      	ldr	r3, [pc, #72]	; (800abb4 <USBH_HUB_KeybdDecode+0x110>)
 800ab6c:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(hub_keybd_info.keys); x++)
 800ab6e:	2300      	movs	r3, #0
 800ab70:	73fb      	strb	r3, [r7, #15]
 800ab72:	e00e      	b.n	800ab92 <USBH_HUB_KeybdDecode+0xee>
    {
      hub_keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
 800ab76:	4619      	mov	r1, r3
 800ab78:	4816      	ldr	r0, [pc, #88]	; (800abd4 <USBH_HUB_KeybdDecode+0x130>)
 800ab7a:	f7fe fcd7 	bl	800952c <HID_ReadItem>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
 800ab82:	b2d1      	uxtb	r1, r2
 800ab84:	4a0b      	ldr	r2, [pc, #44]	; (800abb4 <USBH_HUB_KeybdDecode+0x110>)
 800ab86:	4413      	add	r3, r2
 800ab88:	460a      	mov	r2, r1
 800ab8a:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(hub_keybd_info.keys); x++)
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	73fb      	strb	r3, [r7, #15]
 800ab92:	7bfb      	ldrb	r3, [r7, #15]
 800ab94:	2b05      	cmp	r3, #5
 800ab96:	d9ed      	bls.n	800ab74 <USBH_HUB_KeybdDecode+0xd0>
    }

    return USBH_OK;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	e000      	b.n	800ab9e <USBH_HUB_KeybdDecode+0xfa>
  }
  return   USBH_FAIL;
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	2000044c 	.word	0x2000044c
 800abac:	01010000 	.word	0x01010000
 800abb0:	0800e328 	.word	0x0800e328
 800abb4:	20000434 	.word	0x20000434
 800abb8:	0800e348 	.word	0x0800e348
 800abbc:	0800e368 	.word	0x0800e368
 800abc0:	0800e388 	.word	0x0800e388
 800abc4:	0800e3a8 	.word	0x0800e3a8
 800abc8:	0800e3c8 	.word	0x0800e3c8
 800abcc:	0800e3e8 	.word	0x0800e3e8
 800abd0:	0800e408 	.word	0x0800e408
 800abd4:	0800e428 	.word	0x0800e428

0800abd8 <USBH_HUB_MouseInit>:
uint8_t                 hub_mouse_report_data[8];
uint32_t                hub_mouse_rx_report_buf[2];


USBH_StatusTypeDef USBH_HUB_MouseInit(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hub_mouse_info.x = 0U;
 800abe0:	4b23      	ldr	r3, [pc, #140]	; (800ac70 <USBH_HUB_MouseInit+0x98>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	801a      	strh	r2, [r3, #0]
  hub_mouse_info.y = 0U;
 800abe6:	4b22      	ldr	r3, [pc, #136]	; (800ac70 <USBH_HUB_MouseInit+0x98>)
 800abe8:	2200      	movs	r2, #0
 800abea:	805a      	strh	r2, [r3, #2]
  hub_mouse_info.buttons[0] = 0U;
 800abec:	4b20      	ldr	r3, [pc, #128]	; (800ac70 <USBH_HUB_MouseInit+0x98>)
 800abee:	2200      	movs	r2, #0
 800abf0:	711a      	strb	r2, [r3, #4]
  hub_mouse_info.buttons[1] = 0U;
 800abf2:	4b1f      	ldr	r3, [pc, #124]	; (800ac70 <USBH_HUB_MouseInit+0x98>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	715a      	strb	r2, [r3, #5]
  hub_mouse_info.buttons[2] = 0U;
 800abf8:	4b1d      	ldr	r3, [pc, #116]	; (800ac70 <USBH_HUB_MouseInit+0x98>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	719a      	strb	r2, [r3, #6]

  for (i = 0U; i < (sizeof(hub_mouse_report_data) / sizeof(uint32_t)); i++)
 800abfe:	2300      	movs	r3, #0
 800ac00:	60fb      	str	r3, [r7, #12]
 800ac02:	e00c      	b.n	800ac1e <USBH_HUB_MouseInit+0x46>
  {
    hub_mouse_report_data[i] = 0U;
 800ac04:	4a1b      	ldr	r2, [pc, #108]	; (800ac74 <USBH_HUB_MouseInit+0x9c>)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	4413      	add	r3, r2
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	701a      	strb	r2, [r3, #0]
    hub_mouse_rx_report_buf[i] = 0U;
 800ac0e:	4a1a      	ldr	r2, [pc, #104]	; (800ac78 <USBH_HUB_MouseInit+0xa0>)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2100      	movs	r1, #0
 800ac14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(hub_mouse_report_data) / sizeof(uint32_t)); i++)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	60fb      	str	r3, [r7, #12]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d9ef      	bls.n	800ac04 <USBH_HUB_MouseInit+0x2c>
  }

 
  Itf->pFIFObuf = malloc(HID_QUEUE_SIZE * Itf->length);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	88db      	ldrh	r3, [r3, #6]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	4413      	add	r3, r2
 800ac30:	005b      	lsls	r3, r3, #1
 800ac32:	4618      	mov	r0, r3
 800ac34:	f003 f92c 	bl	800de90 <malloc>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	665a      	str	r2, [r3, #100]	; 0x64
  USBH_HID_FifoInit(&Itf->fifo, Itf->pFIFObuf, HID_QUEUE_SIZE * Itf->length);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	88db      	ldrh	r3, [r3, #6]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	0092      	lsls	r2, r2, #2
 800ac52:	4413      	add	r3, r2
 800ac54:	005b      	lsls	r3, r3, #1
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	461a      	mov	r2, r3
 800ac5a:	f7fd fdb7 	bl	80087cc <USBH_HID_FifoInit>
  Itf->DeviceType = HUB_MOUSE;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2202      	movs	r2, #2
 800ac62:	705a      	strb	r2, [r3, #1]

  return USBH_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	20000454 	.word	0x20000454
 800ac74:	2000045c 	.word	0x2000045c
 800ac78:	20000464 	.word	0x20000464

0800ac7c <USBH_HUB_GetMouseInfo>:


HID_MOUSE_Info_TypeDef *USBH_HUB_GetMouseInfo(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  if (USBH_HUB_MouseDecode(Itf) == USBH_OK)
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 f80d 	bl	800aca4 <USBH_HUB_MouseDecode>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d101      	bne.n	800ac94 <USBH_HUB_GetMouseInfo+0x18>
  {
    return &hub_mouse_info;
 800ac90:	4b03      	ldr	r3, [pc, #12]	; (800aca0 <USBH_HUB_GetMouseInfo+0x24>)
 800ac92:	e000      	b.n	800ac96 <USBH_HUB_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 800ac94:	2300      	movs	r3, #0
  }
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	20000454 	.word	0x20000454

0800aca4 <USBH_HUB_MouseDecode>:


USBH_StatusTypeDef USBH_HUB_MouseDecode(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]

  if (Itf->length == 0U)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	88db      	ldrh	r3, [r3, #6]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <USBH_HUB_MouseDecode+0x14>
  {
    return USBH_FAIL;
 800acb4:	2302      	movs	r3, #2
 800acb6:	e0fe      	b.n	800aeb6 <USBH_HUB_MouseDecode+0x212>
  }

  //Clear mouse_report_data

  memset(&hub_mouse_report_data,0,sizeof(hub_mouse_report_data));
 800acb8:	2208      	movs	r2, #8
 800acba:	2100      	movs	r1, #0
 800acbc:	4880      	ldr	r0, [pc, #512]	; (800aec0 <USBH_HUB_MouseDecode+0x21c>)
 800acbe:	f003 f8f7 	bl	800deb0 <memset>


  /*Fill report */
  if (USBH_HID_FifoRead(&Itf->fifo, &hub_mouse_report_data, Itf->length) !=0)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	88db      	ldrh	r3, [r3, #6]
 800accc:	461a      	mov	r2, r3
 800acce:	497c      	ldr	r1, [pc, #496]	; (800aec0 <USBH_HUB_MouseDecode+0x21c>)
 800acd0:	f7fd fd98 	bl	8008804 <USBH_HID_FifoRead>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 80ec 	beq.w	800aeb4 <USBH_HUB_MouseDecode+0x210>
  {

	  uint8_t btn = 0;
 800acdc:	2300      	movs	r3, #0
 800acde:	75fb      	strb	r3, [r7, #23]
	  uint8_t btn_extra = 0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	75bb      	strb	r3, [r7, #22]
	  uint8_t i;



	  // skip report id if present
	  uint8_t *p = hub_mouse_report_data + (Itf->HIDDesc->RptDesc.report_id?1:0);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ace8:	7adb      	ldrb	r3, [r3, #11]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d001      	beq.n	800acf2 <USBH_HUB_MouseDecode+0x4e>
 800acee:	4b75      	ldr	r3, [pc, #468]	; (800aec4 <USBH_HUB_MouseDecode+0x220>)
 800acf0:	e000      	b.n	800acf4 <USBH_HUB_MouseDecode+0x50>
 800acf2:	4b73      	ldr	r3, [pc, #460]	; (800aec0 <USBH_HUB_MouseDecode+0x21c>)
 800acf4:	613b      	str	r3, [r7, #16]


	  //process axis
	  // two axes ...
	  		for(i=0;i<2;i++) {
 800acf6:	2300      	movs	r3, #0
 800acf8:	757b      	strb	r3, [r7, #21]
 800acfa:	e031      	b.n	800ad60 <USBH_HUB_MouseDecode+0xbc>
	  			// if logical minimum is > logical maximum then logical minimum
	  			// is signed. This means that the value itself is also signed
	  			int is_signed = Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].logical.min >
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ad00:	7d7b      	ldrb	r3, [r7, #21]
 800ad02:	3302      	adds	r3, #2
 800ad04:	00db      	lsls	r3, r3, #3
 800ad06:	4413      	add	r3, r2
 800ad08:	88da      	ldrh	r2, [r3, #6]
	  				Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].logical.max;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800ad0e:	7d7b      	ldrb	r3, [r7, #21]
 800ad10:	3302      	adds	r3, #2
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	440b      	add	r3, r1
 800ad16:	891b      	ldrh	r3, [r3, #8]
	  			int is_signed = Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].logical.min >
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	bf8c      	ite	hi
 800ad1c:	2301      	movhi	r3, #1
 800ad1e:	2300      	movls	r3, #0
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	60fb      	str	r3, [r7, #12]
	  			a[i] = collect_bits(p, Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].offset,
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ad28:	7d7b      	ldrb	r3, [r7, #21]
 800ad2a:	3302      	adds	r3, #2
 800ad2c:	00db      	lsls	r3, r3, #3
 800ad2e:	4413      	add	r3, r2
 800ad30:	8859      	ldrh	r1, [r3, #2]
	  					Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].size, is_signed);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	  			a[i] = collect_bits(p, Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].offset,
 800ad36:	7d7b      	ldrb	r3, [r7, #21]
 800ad38:	3302      	adds	r3, #2
 800ad3a:	00db      	lsls	r3, r3, #3
 800ad3c:	4413      	add	r3, r2
 800ad3e:	791a      	ldrb	r2, [r3, #4]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6938      	ldr	r0, [r7, #16]
 800ad44:	f7fe f9d4 	bl	80090f0 <collect_bits>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	7d7b      	ldrb	r3, [r7, #21]
 800ad4e:	b212      	sxth	r2, r2
 800ad50:	005b      	lsls	r3, r3, #1
 800ad52:	3318      	adds	r3, #24
 800ad54:	443b      	add	r3, r7
 800ad56:	f823 2c10 	strh.w	r2, [r3, #-16]
	  		for(i=0;i<2;i++) {
 800ad5a:	7d7b      	ldrb	r3, [r7, #21]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	757b      	strb	r3, [r7, #21]
 800ad60:	7d7b      	ldrb	r3, [r7, #21]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d9ca      	bls.n	800acfc <USBH_HUB_MouseDecode+0x58>
	  		}

	  //process 4 first buttons
	  for(i=0;i<4;i++)
 800ad66:	2300      	movs	r3, #0
 800ad68:	757b      	strb	r3, [r7, #21]
 800ad6a:	e022      	b.n	800adb2 <USBH_HUB_MouseDecode+0x10e>
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ad70:	7d7b      	ldrb	r3, [r7, #21]
 800ad72:	3310      	adds	r3, #16
 800ad74:	005b      	lsls	r3, r3, #1
 800ad76:	4413      	add	r3, r2
 800ad78:	789b      	ldrb	r3, [r3, #2]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	4413      	add	r3, r2
 800ad80:	781a      	ldrb	r2, [r3, #0]
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800ad86:	7d7b      	ldrb	r3, [r7, #21]
 800ad88:	3310      	adds	r3, #16
 800ad8a:	005b      	lsls	r3, r3, #1
 800ad8c:	440b      	add	r3, r1
 800ad8e:	78db      	ldrb	r3, [r3, #3]
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800ad90:	4013      	ands	r3, r2
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d009      	beq.n	800adac <USBH_HUB_MouseDecode+0x108>
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800ad98:	7d7b      	ldrb	r3, [r7, #21]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	fa02 f303 	lsl.w	r3, r2, r3
 800ada0:	b25a      	sxtb	r2, r3
 800ada2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	b25b      	sxtb	r3, r3
 800adaa:	75fb      	strb	r3, [r7, #23]
	  for(i=0;i<4;i++)
 800adac:	7d7b      	ldrb	r3, [r7, #21]
 800adae:	3301      	adds	r3, #1
 800adb0:	757b      	strb	r3, [r7, #21]
 800adb2:	7d7b      	ldrb	r3, [r7, #21]
 800adb4:	2b03      	cmp	r3, #3
 800adb6:	d9d9      	bls.n	800ad6c <USBH_HUB_MouseDecode+0xc8>

	  // ... and the eight extra buttons
	  for(i=4;i<12;i++)
 800adb8:	2304      	movs	r3, #4
 800adba:	757b      	strb	r3, [r7, #21]
 800adbc:	e023      	b.n	800ae06 <USBH_HUB_MouseDecode+0x162>
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800adc2:	7d7b      	ldrb	r3, [r7, #21]
 800adc4:	3310      	adds	r3, #16
 800adc6:	005b      	lsls	r3, r3, #1
 800adc8:	4413      	add	r3, r2
 800adca:	789b      	ldrb	r3, [r3, #2]
 800adcc:	461a      	mov	r2, r3
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	4413      	add	r3, r2
 800add2:	781a      	ldrb	r2, [r3, #0]
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800add8:	7d7b      	ldrb	r3, [r7, #21]
 800adda:	3310      	adds	r3, #16
 800addc:	005b      	lsls	r3, r3, #1
 800adde:	440b      	add	r3, r1
 800ade0:	78db      	ldrb	r3, [r3, #3]
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800ade2:	4013      	ands	r3, r2
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00a      	beq.n	800ae00 <USBH_HUB_MouseDecode+0x15c>
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800adea:	7d7b      	ldrb	r3, [r7, #21]
 800adec:	3b04      	subs	r3, #4
 800adee:	2201      	movs	r2, #1
 800adf0:	fa02 f303 	lsl.w	r3, r2, r3
 800adf4:	b25a      	sxtb	r2, r3
 800adf6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	b25b      	sxtb	r3, r3
 800adfe:	75bb      	strb	r3, [r7, #22]
	  for(i=4;i<12;i++)
 800ae00:	7d7b      	ldrb	r3, [r7, #21]
 800ae02:	3301      	adds	r3, #1
 800ae04:	757b      	strb	r3, [r7, #21]
 800ae06:	7d7b      	ldrb	r3, [r7, #21]
 800ae08:	2b0b      	cmp	r3, #11
 800ae0a:	d9d8      	bls.n	800adbe <USBH_HUB_MouseDecode+0x11a>

	  //process mouse
	  if(Itf->HIDDesc->RptDesc.type == REPORT_TYPE_MOUSE) {
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae10:	7a9b      	ldrb	r3, [r3, #10]
 800ae12:	f003 0303 	and.w	r3, r3, #3
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d149      	bne.n	800aeb0 <USBH_HUB_MouseDecode+0x20c>
	  		// iprintf("mouse %d %d %x\n", (int16_t)a[0], (int16_t)a[1], btn);
	  		// limit mouse movement to +/- 128
	  		for(i=0;i<2;i++) {
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	757b      	strb	r3, [r7, #21]
 800ae20:	e022      	b.n	800ae68 <USBH_HUB_MouseDecode+0x1c4>
	  		if((int16_t)a[i] >  127) a[i] =  127;
 800ae22:	7d7b      	ldrb	r3, [r7, #21]
 800ae24:	005b      	lsls	r3, r3, #1
 800ae26:	3318      	adds	r3, #24
 800ae28:	443b      	add	r3, r7
 800ae2a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800ae2e:	2b7f      	cmp	r3, #127	; 0x7f
 800ae30:	dd06      	ble.n	800ae40 <USBH_HUB_MouseDecode+0x19c>
 800ae32:	7d7b      	ldrb	r3, [r7, #21]
 800ae34:	005b      	lsls	r3, r3, #1
 800ae36:	3318      	adds	r3, #24
 800ae38:	443b      	add	r3, r7
 800ae3a:	227f      	movs	r2, #127	; 0x7f
 800ae3c:	f823 2c10 	strh.w	r2, [r3, #-16]
	  		if((int16_t)a[i] < -128) a[i] = -128;
 800ae40:	7d7b      	ldrb	r3, [r7, #21]
 800ae42:	005b      	lsls	r3, r3, #1
 800ae44:	3318      	adds	r3, #24
 800ae46:	443b      	add	r3, r7
 800ae48:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800ae4c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800ae50:	da07      	bge.n	800ae62 <USBH_HUB_MouseDecode+0x1be>
 800ae52:	7d7b      	ldrb	r3, [r7, #21]
 800ae54:	005b      	lsls	r3, r3, #1
 800ae56:	3318      	adds	r3, #24
 800ae58:	443b      	add	r3, r7
 800ae5a:	f64f 7280 	movw	r2, #65408	; 0xff80
 800ae5e:	f823 2c10 	strh.w	r2, [r3, #-16]
	  		for(i=0;i<2;i++) {
 800ae62:	7d7b      	ldrb	r3, [r7, #21]
 800ae64:	3301      	adds	r3, #1
 800ae66:	757b      	strb	r3, [r7, #21]
 800ae68:	7d7b      	ldrb	r3, [r7, #21]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d9d9      	bls.n	800ae22 <USBH_HUB_MouseDecode+0x17e>
	  		}
	  		//btn
	  	  hub_mouse_info.x = a[0];
 800ae6e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ae72:	4b15      	ldr	r3, [pc, #84]	; (800aec8 <USBH_HUB_MouseDecode+0x224>)
 800ae74:	801a      	strh	r2, [r3, #0]
	  	  hub_mouse_info.y = a[1];
 800ae76:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800ae7a:	4b13      	ldr	r3, [pc, #76]	; (800aec8 <USBH_HUB_MouseDecode+0x224>)
 800ae7c:	805a      	strh	r2, [r3, #2]
	  	  hub_mouse_info.buttons[0] = btn&0x1;
 800ae7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	b25a      	sxtb	r2, r3
 800ae88:	4b0f      	ldr	r3, [pc, #60]	; (800aec8 <USBH_HUB_MouseDecode+0x224>)
 800ae8a:	711a      	strb	r2, [r3, #4]
	  	  hub_mouse_info.buttons[1] = (btn>>1)&0x1;
 800ae8c:	7dfb      	ldrb	r3, [r7, #23]
 800ae8e:	085b      	lsrs	r3, r3, #1
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	b25b      	sxtb	r3, r3
 800ae94:	f003 0301 	and.w	r3, r3, #1
 800ae98:	b25a      	sxtb	r2, r3
 800ae9a:	4b0b      	ldr	r3, [pc, #44]	; (800aec8 <USBH_HUB_MouseDecode+0x224>)
 800ae9c:	715a      	strb	r2, [r3, #5]
	  	  hub_mouse_info.buttons[2] = (btn>>2)&0x1;
 800ae9e:	7dfb      	ldrb	r3, [r7, #23]
 800aea0:	089b      	lsrs	r3, r3, #2
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	b25b      	sxtb	r3, r3
 800aea6:	f003 0301 	and.w	r3, r3, #1
 800aeaa:	b25a      	sxtb	r2, r3
 800aeac:	4b06      	ldr	r3, [pc, #24]	; (800aec8 <USBH_HUB_MouseDecode+0x224>)
 800aeae:	719a      	strb	r2, [r3, #6]
	  	}
    return USBH_OK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	e000      	b.n	800aeb6 <USBH_HUB_MouseDecode+0x212>
  }
  return   USBH_FAIL;
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	2000045c 	.word	0x2000045c
 800aec4:	2000045d 	.word	0x2000045d
 800aec8:	20000454 	.word	0x20000454

0800aecc <USBH_HUB_GetDescriptor>:
#include "usbh_hubctrl.h"



USBH_StatusTypeDef USBH_HUB_GetDescriptor(USBH_HandleTypeDef *phost)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  uint16_t lenght = sizeof(HUB_DescTypeDef);
 800aed4:	230a      	movs	r3, #10
 800aed6:	81fb      	strh	r3, [r7, #14]

  if (phost->RequestState == CMD_SEND)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	789b      	ldrb	r3, [r3, #2]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d111      	bne.n	800af04 <USBH_HUB_GetDescriptor+0x38>
  {
    phost->Control.setup.b.bmRequestType = 0b10100000;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	22a0      	movs	r2, #160	; 0xa0
 800aee4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;		
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2206      	movs	r2, #6
 800aeea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.bw.msb = 0;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	749a      	strb	r2, [r3, #18]
	  phost->Control.setup.b.wValue.bw.lsb = 0x29;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2229      	movs	r2, #41	; 0x29
 800aef6:	74da      	strb	r2, [r3, #19]
    phost->Control.setup.b.wIndex.w = 0;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = lenght;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	89fa      	ldrh	r2, [r7, #14]
 800af02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, phost->device.Data, lenght) ;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af0a:	89fa      	ldrh	r2, [r7, #14]
 800af0c:	4619      	mov	r1, r3
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f002 f89b 	bl	800d04a <USBH_CtlReq>
 800af14:	4603      	mov	r3, r0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <USBH_HUB_GetPortStatus>:
  USBH_HUB_ParseHUBStatus(HUB_Handle,phost->device.Data);
}


USBH_StatusTypeDef USBH_HUB_GetPortStatus(USBH_HandleTypeDef *phost, uint8_t PortNum)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b086      	sub	sp, #24
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	460b      	mov	r3, r1
 800af28:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800af30:	6a1b      	ldr	r3, [r3, #32]
 800af32:	617b      	str	r3, [r7, #20]

  
	phost->Control.setup.b.bmRequestType = 0b10100011;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	22a3      	movs	r2, #163	; 0xa3
 800af38:	741a      	strb	r2, [r3, #16]
	phost->Control.setup.b.bRequest  	 = USB_REQUEST_GET_STATUS;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.bw.msb = HUB_FEAT_SEL_PORT_CONN;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	749a      	strb	r2, [r3, #18]
	phost->Control.setup.b.wValue.bw.lsb = 0;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	74da      	strb	r2, [r3, #19]
	phost->Control.setup.b.wIndex.bw.msb = PortNum;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	78fa      	ldrb	r2, [r7, #3]
 800af50:	751a      	strb	r2, [r3, #20]
  phost->Control.setup.b.wIndex.bw.lsb = 0;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	755a      	strb	r2, [r3, #21]
	phost->Control.setup.b.wLength.w     =  4;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2204      	movs	r2, #4
 800af5c:	82da      	strh	r2, [r3, #22]
  
	
  if ((status = USBH_CtlReq(phost, HUB_Handle->buff, 4)) == USBH_OK)
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	3328      	adds	r3, #40	; 0x28
 800af62:	2204      	movs	r2, #4
 800af64:	4619      	mov	r1, r3
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f002 f86f 	bl	800d04a <USBH_CtlReq>
 800af6c:	4603      	mov	r3, r0
 800af6e:	74fb      	strb	r3, [r7, #19]
 800af70:	7cfb      	ldrb	r3, [r7, #19]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d174      	bne.n	800b060 <USBH_HUB_GetPortStatus+0x142>
  {
     USB_HUB_PORT_STATUS old_status = HUB_Handle->Port[PortNum-1].PortStatus;
 800af76:	78fb      	ldrb	r3, [r7, #3]
 800af78:	3b01      	subs	r3, #1
 800af7a:	697a      	ldr	r2, [r7, #20]
 800af7c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800af80:	fb01 f303 	mul.w	r3, r1, r3
 800af84:	4413      	add	r3, r2
 800af86:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	60fb      	str	r3, [r7, #12]
    USBH_HUB_ParsePortStatus(HUB_Handle,HUB_Handle->buff,&HUB_Handle->Port[PortNum-1]);
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800af94:	78fb      	ldrb	r3, [r7, #3]
 800af96:	3b01      	subs	r3, #1
 800af98:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800af9c:	fb02 f303 	mul.w	r3, r2, r3
 800afa0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800afa4:	697a      	ldr	r2, [r7, #20]
 800afa6:	4413      	add	r3, r2
 800afa8:	461a      	mov	r2, r3
 800afaa:	6978      	ldr	r0, [r7, #20]
 800afac:	f000 f9af 	bl	800b30e <USBH_HUB_ParsePortStatus>

    if (HUB_Handle->Port[PortNum-1].PortStatus.wPortStatus.val != old_status.wPortStatus.val)
 800afb0:	78fb      	ldrb	r3, [r7, #3]
 800afb2:	3b01      	subs	r3, #1
 800afb4:	697a      	ldr	r2, [r7, #20]
 800afb6:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800afba:	fb01 f303 	mul.w	r3, r1, r3
 800afbe:	4413      	add	r3, r2
 800afc0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800afc4:	881a      	ldrh	r2, [r3, #0]
 800afc6:	89bb      	ldrh	r3, [r7, #12]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d049      	beq.n	800b060 <USBH_HUB_GetPortStatus+0x142>
    {
      HUB_Handle->PortStatusChangeFlag = 1;
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if ((old_status.wPortStatus.PORT_CONNECTION == 1) && (HUB_Handle->Port[PortNum-1].PortStatus.wPortStatus.PORT_CONNECTION == 0))
 800afd8:	7b3b      	ldrb	r3, [r7, #12]
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d01b      	beq.n	800b01c <USBH_HUB_GetPortStatus+0xfe>
 800afe4:	78fb      	ldrb	r3, [r7, #3]
 800afe6:	3b01      	subs	r3, #1
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800afee:	fb01 f303 	mul.w	r3, r1, r3
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800affe:	b2db      	uxtb	r3, r3
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10b      	bne.n	800b01c <USBH_HUB_GetPortStatus+0xfe>
      {
        HUB_Handle->Port[PortNum-1].Disconnected = 1;
 800b004:	78fb      	ldrb	r3, [r7, #3]
 800b006:	3b01      	subs	r3, #1
 800b008:	697a      	ldr	r2, [r7, #20]
 800b00a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800b00e:	fb01 f303 	mul.w	r3, r1, r3
 800b012:	4413      	add	r3, r2
 800b014:	f203 132d 	addw	r3, r3, #301	; 0x12d
 800b018:	2201      	movs	r2, #1
 800b01a:	701a      	strb	r2, [r3, #0]
      }

      if ((old_status.wPortStatus.PORT_CONNECTION == 0) && (HUB_Handle->Port[PortNum-1].PortStatus.wPortStatus.PORT_CONNECTION == 1))
 800b01c:	7b3b      	ldrb	r3, [r7, #12]
 800b01e:	f003 0301 	and.w	r3, r3, #1
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b00      	cmp	r3, #0
 800b026:	d11b      	bne.n	800b060 <USBH_HUB_GetPortStatus+0x142>
 800b028:	78fb      	ldrb	r3, [r7, #3]
 800b02a:	3b01      	subs	r3, #1
 800b02c:	697a      	ldr	r2, [r7, #20]
 800b02e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800b032:	fb01 f303 	mul.w	r3, r1, r3
 800b036:	4413      	add	r3, r2
 800b038:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b01      	cmp	r3, #1
 800b046:	d10b      	bne.n	800b060 <USBH_HUB_GetPortStatus+0x142>
      {
        HUB_Handle->Port[PortNum-1].Connected = 1;
 800b048:	78fb      	ldrb	r3, [r7, #3]
 800b04a:	3b01      	subs	r3, #1
 800b04c:	697a      	ldr	r2, [r7, #20]
 800b04e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800b052:	fb01 f303 	mul.w	r3, r1, r3
 800b056:	4413      	add	r3, r2
 800b058:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800b05c:	2201      	movs	r2, #1
 800b05e:	701a      	strb	r2, [r3, #0]


    }
  }

  return status;
 800b060:	7cfb      	ldrb	r3, [r7, #19]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3718      	adds	r7, #24
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <USBH_HUB_SetPortFeature>:



USBH_StatusTypeDef USBH_HUB_SetPortFeature(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t PortNum)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b082      	sub	sp, #8
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	460b      	mov	r3, r1
 800b074:	70fb      	strb	r3, [r7, #3]
 800b076:	4613      	mov	r3, r2
 800b078:	70bb      	strb	r3, [r7, #2]

  if (phost->RequestState == CMD_SEND)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	789b      	ldrb	r3, [r3, #2]
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d114      	bne.n	800b0ac <USBH_HUB_SetPortFeature+0x42>
  {
    phost->Control.setup.b.bmRequestType = 0b00100011; 
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2223      	movs	r2, #35	; 0x23
 800b086:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQUEST_SET_FEATURE;		
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2203      	movs	r2, #3
 800b08c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.bw.msb = feature;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	78fa      	ldrb	r2, [r7, #3]
 800b092:	749a      	strb	r2, [r3, #18]
	  phost->Control.setup.b.wValue.bw.lsb = 0x0;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	74da      	strb	r2, [r3, #19]
    phost->Control.setup.b.wIndex.bw.msb = PortNum;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	78ba      	ldrb	r2, [r7, #2]
 800b09e:	751a      	strb	r2, [r3, #20]
    phost->Control.setup.b.wIndex.bw.lsb = 0x0;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	755a      	strb	r2, [r3, #21]
    phost->Control.setup.b.wLength.w = 0;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	82da      	strh	r2, [r3, #22]
  }    

   return USBH_CtlReq(phost, 0, 0);
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f001 ffca 	bl	800d04a <USBH_CtlReq>
 800b0b6:	4603      	mov	r3, r0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <USBH_HUB_Get_DevDesc>:
   return USBH_CtlReq(phost, 0, 0);
}


USBH_StatusTypeDef USBH_HUB_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length,HUB_Port_HandleTypeDef *Port)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b088      	sub	sp, #32
 800b0c4:	af02      	add	r7, sp, #8
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	607a      	str	r2, [r7, #4]
 800b0cc:	72fb      	strb	r3, [r7, #11]
      USBH_StatusTypeDef status;

   status = USBH_GetDescriptor(phost,USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,USB_DESC_DEVICE, 0U,Port->buff, (uint16_t)length);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b0d4:	7afa      	ldrb	r2, [r7, #11]
 800b0d6:	b292      	uxth	r2, r2
 800b0d8:	9201      	str	r2, [sp, #4]
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	2300      	movs	r3, #0
 800b0de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f001 fd2b 	bl	800cb40 <USBH_GetDescriptor>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	75fb      	strb	r3, [r7, #23]
  if (status == USBH_OK)                                  
 800b0ee:	7dfb      	ldrb	r3, [r7, #23]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10a      	bne.n	800b10a <USBH_HUB_Get_DevDesc+0x4a>
 { 
    /* Commands successfully sent and Response Received */
    USBH_HUB_ParseDevDesc(&Port->DevDesc, Port->buff, (uint16_t)length);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f103 0014 	add.w	r0, r3, #20
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b100:	7afa      	ldrb	r2, [r7, #11]
 800b102:	b292      	uxth	r2, r2
 800b104:	4619      	mov	r1, r3
 800b106:	f000 f85d 	bl	800b1c4 <USBH_HUB_ParseDevDesc>
 }


 return status;
 800b10a:	7dfb      	ldrb	r3, [r7, #23]

}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3718      	adds	r7, #24
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <USBH_HUB_Get_CfgDesc>:


USBH_StatusTypeDef USBH_HUB_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length, HUB_Port_HandleTypeDef *Port)

{
 800b114:	b580      	push	{r7, lr}
 800b116:	b088      	sub	sp, #32
 800b118:	af02      	add	r7, sp, #8
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	460b      	mov	r3, r1
 800b11e:	607a      	str	r2, [r7, #4]
 800b120:	817b      	strh	r3, [r7, #10]
  USBH_StatusTypeDef status;
        HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b128:	6a1b      	ldr	r3, [r3, #32]
 800b12a:	617b      	str	r3, [r7, #20]


  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
                                   USB_DESC_CONFIGURATION,0U,HUB_Handle->buff, length)) == USBH_OK)
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	3328      	adds	r3, #40	; 0x28
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b130:	897a      	ldrh	r2, [r7, #10]
 800b132:	9201      	str	r2, [sp, #4]
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	2300      	movs	r3, #0
 800b138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b13c:	2100      	movs	r1, #0
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f001 fcfe 	bl	800cb40 <USBH_GetDescriptor>
 800b144:	4603      	mov	r3, r0
 800b146:	74fb      	strb	r3, [r7, #19]
 800b148:	7cfb      	ldrb	r3, [r7, #19]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d108      	bne.n	800b160 <USBH_HUB_Get_CfgDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&Port->CfgDesc, HUB_Handle->buff, length);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	3328      	adds	r3, #40	; 0x28
 800b158:	897a      	ldrh	r2, [r7, #10]
 800b15a:	4619      	mov	r1, r3
 800b15c:	f001 fe29 	bl	800cdb2 <USBH_ParseCfgDesc>
  }

  return status;
 800b160:	7cfb      	ldrb	r3, [r7, #19]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3718      	adds	r7, #24
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBH_HUB_Get_StringDesc>:


USBH_StatusTypeDef USBH_HUB_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length, HUB_Port_HandleTypeDef *Port)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b088      	sub	sp, #32
 800b16e:	af02      	add	r7, sp, #8
 800b170:	60f8      	str	r0, [r7, #12]
 800b172:	607a      	str	r2, [r7, #4]
 800b174:	461a      	mov	r2, r3
 800b176:	460b      	mov	r3, r1
 800b178:	72fb      	strb	r3, [r7, #11]
 800b17a:	4613      	mov	r3, r2
 800b17c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b17e:	7afb      	ldrb	r3, [r7, #11]
 800b180:	b29b      	uxth	r3, r3
 800b182:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b186:	b299      	uxth	r1, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,0U,
                                   Port->buff, length)) == USBH_OK)
 800b188:	6a3b      	ldr	r3, [r7, #32]
 800b18a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
  if ((status = USBH_GetDescriptor(phost,
 800b18e:	893a      	ldrh	r2, [r7, #8]
 800b190:	9201      	str	r2, [sp, #4]
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	2300      	movs	r3, #0
 800b196:	460a      	mov	r2, r1
 800b198:	2100      	movs	r1, #0
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f001 fcd0 	bl	800cb40 <USBH_GetDescriptor>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	75fb      	strb	r3, [r7, #23]
 800b1a4:	7dfb      	ldrb	r3, [r7, #23]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d107      	bne.n	800b1ba <USBH_HUB_Get_StringDesc+0x50>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(Port->buff, buff, length);
 800b1aa:	6a3b      	ldr	r3, [r7, #32]
 800b1ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b1b0:	893a      	ldrh	r2, [r7, #8]
 800b1b2:	6879      	ldr	r1, [r7, #4]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f001 fefa 	bl	800cfae <USBH_ParseStringDesc>
  }

  return status;
 800b1ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3718      	adds	r7, #24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBH_HUB_ParseDevDesc>:



void  USBH_HUB_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	781a      	ldrb	r2, [r3, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	785a      	ldrb	r2, [r3, #1]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	3302      	adds	r3, #2
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	b29a      	uxth	r2, r3
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	3303      	adds	r3, #3
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	021b      	lsls	r3, r3, #8
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	791a      	ldrb	r2, [r3, #4]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	795a      	ldrb	r2, [r3, #5]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	799a      	ldrb	r2, [r3, #6]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	79da      	ldrb	r2, [r3, #7]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b21e:	88fb      	ldrh	r3, [r7, #6]
 800b220:	2b08      	cmp	r3, #8
 800b222:	d939      	bls.n	800b298 <USBH_HUB_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	3308      	adds	r3, #8
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	3309      	adds	r3, #9
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	b29b      	uxth	r3, r3
 800b234:	021b      	lsls	r3, r3, #8
 800b236:	b29b      	uxth	r3, r3
 800b238:	4313      	orrs	r3, r2
 800b23a:	b29a      	uxth	r2, r3
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	330a      	adds	r3, #10
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	b29a      	uxth	r2, r3
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	330b      	adds	r3, #11
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	b29b      	uxth	r3, r3
 800b250:	021b      	lsls	r3, r3, #8
 800b252:	b29b      	uxth	r3, r3
 800b254:	4313      	orrs	r3, r2
 800b256:	b29a      	uxth	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	330c      	adds	r3, #12
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	b29a      	uxth	r2, r3
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	330d      	adds	r3, #13
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	021b      	lsls	r3, r3, #8
 800b26e:	b29b      	uxth	r3, r3
 800b270:	4313      	orrs	r3, r2
 800b272:	b29a      	uxth	r2, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	7b9a      	ldrb	r2, [r3, #14]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	7bda      	ldrb	r2, [r3, #15]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	7c1a      	ldrb	r2, [r3, #16]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	7c5a      	ldrb	r2, [r3, #17]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	745a      	strb	r2, [r3, #17]
  }
}
 800b298:	bf00      	nop
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <USBH_HUB_ParseHubDescriptor>:



void  USBH_HUB_ParseHubDescriptor(HUB_DescTypeDef  *hub_descriptor,
                              uint8_t *buf)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  hub_descriptor->bDescLength         = *(uint8_t *)(buf + 0);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	781a      	ldrb	r2, [r3, #0]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	701a      	strb	r2, [r3, #0]
  hub_descriptor->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	785a      	ldrb	r2, [r3, #1]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	705a      	strb	r2, [r3, #1]
  hub_descriptor->bNbrPorts           = *(uint8_t *)(buf + 2);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	789a      	ldrb	r2, [r3, #2]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	709a      	strb	r2, [r3, #2]
  hub_descriptor->wHubCharacteristics = LE16(buf + 3);
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	3303      	adds	r3, #3
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	021b      	lsls	r3, r3, #8
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	809a      	strh	r2, [r3, #4]
  hub_descriptor->bPwrOn2PwrGood      = *(uint8_t *)(buf + 5);
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	795a      	ldrb	r2, [r3, #5]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	719a      	strb	r2, [r3, #6]
  hub_descriptor->bHubContrCurrent    = *(uint8_t *)(buf + 6);
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	799a      	ldrb	r2, [r3, #6]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	71da      	strb	r2, [r3, #7]
  hub_descriptor->DeviceRemovable     = *(uint8_t *)(buf + 7);
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	79da      	ldrb	r2, [r3, #7]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	721a      	strb	r2, [r3, #8]
  hub_descriptor->PortPwrCtrlMask     = *(uint8_t *)(buf + 8);
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	7a1a      	ldrb	r2, [r3, #8]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	725a      	strb	r2, [r3, #9]

}
 800b302:	bf00      	nop
 800b304:	370c      	adds	r7, #12
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <USBH_HUB_ParsePortStatus>:
  HUB_Handle->HubStatus[2]         = *(uint8_t *)(buf + 2);
  HUB_Handle->HubStatus[3]         = *(uint8_t *)(buf + 3);
}

 void  USBH_HUB_ParsePortStatus(HUB_HandleTypeDef *HUB_Handle,uint8_t *buf,HUB_Port_HandleTypeDef *Port)
{
 800b30e:	b480      	push	{r7}
 800b310:	b085      	sub	sp, #20
 800b312:	af00      	add	r7, sp, #0
 800b314:	60f8      	str	r0, [r7, #12]
 800b316:	60b9      	str	r1, [r7, #8]
 800b318:	607a      	str	r2, [r7, #4]
  Port->PortStatus= *(USB_HUB_PORT_STATUS *)(buf);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	6810      	ldr	r0, [r2, #0]
 800b320:	6018      	str	r0, [r3, #0]
}
 800b322:	bf00      	nop
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <USBH_HUB_GetHIDDescriptor>:


USBH_StatusTypeDef USBH_HUB_GetHIDDescriptor(USBH_HandleTypeDef *phost,
		uint16_t length, uint8_t iface_idx, uint8_t *buf) {
 800b32e:	b580      	push	{r7, lr}
 800b330:	b088      	sub	sp, #32
 800b332:	af02      	add	r7, sp, #8
 800b334:	60f8      	str	r0, [r7, #12]
 800b336:	607b      	str	r3, [r7, #4]
 800b338:	460b      	mov	r3, r1
 800b33a:	817b      	strh	r3, [r7, #10]
 800b33c:	4613      	mov	r3, r2
 800b33e:	727b      	strb	r3, [r7, #9]
	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID, iface_idx, phost->device.Data, length);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f503 738e 	add.w	r3, r3, #284	; 0x11c
	status = USBH_GetDescriptor(phost,
 800b346:	7a79      	ldrb	r1, [r7, #9]
 800b348:	897a      	ldrh	r2, [r7, #10]
 800b34a:	9201      	str	r2, [sp, #4]
 800b34c:	9300      	str	r3, [sp, #0]
 800b34e:	460b      	mov	r3, r1
 800b350:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 800b354:	2101      	movs	r1, #1
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f001 fbf2 	bl	800cb40 <USBH_GetDescriptor>
 800b35c:	4603      	mov	r3, r0
 800b35e:	75fb      	strb	r3, [r7, #23]

	return status;
 800b360:	7dfb      	ldrb	r3, [r7, #23]
}
 800b362:	4618      	mov	r0, r3
 800b364:	3718      	adds	r7, #24
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <USBH_HUB_GetHIDReportDescriptor>:


USBH_StatusTypeDef USBH_HUB_GetHIDReportDescriptor(USBH_HandleTypeDef *phost, uint16_t length, uint8_t iface_idx,uint8_t *buf)
  {
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b088      	sub	sp, #32
 800b36e:	af02      	add	r7, sp, #8
 800b370:	60f8      	str	r0, [r7, #12]
 800b372:	607b      	str	r3, [r7, #4]
 800b374:	460b      	mov	r3, r1
 800b376:	817b      	strh	r3, [r7, #10]
 800b378:	4613      	mov	r3, r2
 800b37a:	727b      	strb	r3, [r7, #9]

	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
 800b37c:	7a7a      	ldrb	r2, [r7, #9]
 800b37e:	897b      	ldrh	r3, [r7, #10]
 800b380:	9301      	str	r3, [sp, #4]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	4613      	mov	r3, r2
 800b388:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800b38c:	2101      	movs	r1, #1
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f001 fbd6 	bl	800cb40 <USBH_GetDescriptor>
 800b394:	4603      	mov	r3, r0
 800b396:	75fb      	strb	r3, [r7, #23]
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID_REPORT, iface_idx, buf, length);

	return status;
 800b398:	7dfb      	ldrb	r3, [r7, #23]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
	...

0800b3a4 <USBH_HUB_Device_Enum>:
#include "usbh_hub_keybd.h"
#include "usbh_hub_mouse.h"
#include "usbh_hub_gamepad.h"

USBH_StatusTypeDef USBH_HUB_Device_Enum(USBH_HandleTypeDef *phost, HUB_Port_HandleTypeDef *port)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b08a      	sub	sp, #40	; 0x28
 800b3a8:	af04      	add	r7, sp, #16
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
    USBH_StatusTypeDef status = USBH_BUSY;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	75fb      	strb	r3, [r7, #23]
    HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	613b      	str	r3, [r7, #16]

    uint8_t max_ep = 0U;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	73fb      	strb	r3, [r7, #15]
    uint8_t num = 0U;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	75bb      	strb	r3, [r7, #22]

    switch (port->EnumState)
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	799b      	ldrb	r3, [r3, #6]
 800b3c8:	2b16      	cmp	r3, #22
 800b3ca:	f200 84cc 	bhi.w	800bd66 <USBH_HUB_Device_Enum+0x9c2>
 800b3ce:	a201      	add	r2, pc, #4	; (adr r2, 800b3d4 <USBH_HUB_Device_Enum+0x30>)
 800b3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d4:	0800b431 	.word	0x0800b431
 800b3d8:	0800b4f5 	.word	0x0800b4f5
 800b3dc:	0800b527 	.word	0x0800b527
 800b3e0:	0800b597 	.word	0x0800b597
 800b3e4:	0800b673 	.word	0x0800b673
 800b3e8:	0800b607 	.word	0x0800b607
 800b3ec:	0800b699 	.word	0x0800b699
 800b3f0:	0800b6bb 	.word	0x0800b6bb
 800b3f4:	0800b6e1 	.word	0x0800b6e1
 800b3f8:	0800b70f 	.word	0x0800b70f
 800b3fc:	0800b7a5 	.word	0x0800b7a5
 800b400:	0800b7e7 	.word	0x0800b7e7
 800b404:	0800b845 	.word	0x0800b845
 800b408:	0800b881 	.word	0x0800b881
 800b40c:	0800b73d 	.word	0x0800b73d
 800b410:	0800b76b 	.word	0x0800b76b
 800b414:	0800b8c3 	.word	0x0800b8c3
 800b418:	0800b8eb 	.word	0x0800b8eb
 800b41c:	0800b97b 	.word	0x0800b97b
 800b420:	0800b9a3 	.word	0x0800b9a3
 800b424:	0800ba07 	.word	0x0800ba07
 800b428:	0800bb9b 	.word	0x0800bb9b
 800b42c:	0800bd17 	.word	0x0800bd17
   {
    case HUB_ENUM_INIT:
            USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80,
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	7919      	ldrb	r1, [r3, #4]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
            phost->device.address, phost->device.speed,
            USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	7992      	ldrb	r2, [r2, #6]
            USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80,
 800b444:	b292      	uxth	r2, r2
 800b446:	9202      	str	r2, [sp, #8]
 800b448:	2200      	movs	r2, #0
 800b44a:	9201      	str	r2, [sp, #4]
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	4603      	mov	r3, r0
 800b450:	2280      	movs	r2, #128	; 0x80
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f002 f826 	bl	800d4a4 <USBH_OpenPipe>

            USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	7959      	ldrb	r1, [r3, #5]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
            phost->device.address, phost->device.speed,
            USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	7992      	ldrb	r2, [r2, #6]
            USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b46c:	b292      	uxth	r2, r2
 800b46e:	9202      	str	r2, [sp, #8]
 800b470:	2200      	movs	r2, #0
 800b472:	9201      	str	r2, [sp, #4]
 800b474:	9300      	str	r3, [sp, #0]
 800b476:	4603      	mov	r3, r0
 800b478:	2200      	movs	r2, #0
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f002 f812 	bl	800d4a4 <USBH_OpenPipe>

            port->EnumTime = phost->Timer;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
            port->DevDescNum = 0;
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	2200      	movs	r2, #0
 800b490:	71da      	strb	r2, [r3, #7]

            port->MFC = (uint8_t *)malloc(0xFF);
 800b492:	20ff      	movs	r0, #255	; 0xff
 800b494:	f002 fcfc 	bl	800de90 <malloc>
 800b498:	4603      	mov	r3, r0
 800b49a:	461a      	mov	r2, r3
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	60da      	str	r2, [r3, #12]
            port->Product = (uint8_t *)malloc(0xFF);
 800b4a0:	20ff      	movs	r0, #255	; 0xff
 800b4a2:	f002 fcf5 	bl	800de90 <malloc>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	611a      	str	r2, [r3, #16]

            //No HS support
            if (port->PortStatus.wPortStatus.PORT_LOW_SPEED)
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	785b      	ldrb	r3, [r3, #1]
 800b4b2:	f003 0302 	and.w	r3, r3, #2
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d003      	beq.n	800b4c4 <USBH_HUB_Device_Enum+0x120>
            {
                port->speed = USBH_SPEED_LOW;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	725a      	strb	r2, [r3, #9]
 800b4c2:	e002      	b.n	800b4ca <USBH_HUB_Device_Enum+0x126>
            }
            else
            {
                port->speed = USBH_SPEED_FULL;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	725a      	strb	r2, [r3, #9]
            }
              port->address = HUB_Handle->portNumber+10;
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b4d4:	330a      	adds	r3, #10
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	721a      	strb	r2, [r3, #8]
              phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	719a      	strb	r2, [r3, #6]
              status = USBH_BUSY;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	75fb      	strb	r3, [r7, #23]
              port->EnumState = HUB_ENUM_RESET_PORT;
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	719a      	strb	r2, [r3, #6]
    break;
 800b4f0:	f000 bc39 	b.w	800bd66 <USBH_HUB_Device_Enum+0x9c2>

        case HUB_ENUM_RESET_PORT:
        status = USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_RESET,HUB_Handle->portNumber);
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b4fe:	461a      	mov	r2, r3
 800b500:	2104      	movs	r1, #4
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f7ff fdb1 	bl	800b06a <USBH_HUB_SetPortFeature>
 800b508:	4603      	mov	r3, r0
 800b50a:	75fb      	strb	r3, [r7, #23]
        if (status == USBH_OK)
 800b50c:	7dfb      	ldrb	r3, [r7, #23]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	f040 8404 	bne.w	800bd1c <USBH_HUB_Device_Enum+0x978>
        {
              HAL_Delay(100);
 800b514:	2064      	movs	r0, #100	; 0x64
 800b516:	f7f6 fb57 	bl	8001bc8 <HAL_Delay>
              status = USBH_BUSY;
 800b51a:	2301      	movs	r3, #1
 800b51c:	75fb      	strb	r3, [r7, #23]
              port->EnumState = HUB_ENUM_RESET_PORT2;              
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2202      	movs	r2, #2
 800b522:	719a      	strb	r2, [r3, #6]
        }

    break;
 800b524:	e3fa      	b.n	800bd1c <USBH_HUB_Device_Enum+0x978>

        case HUB_ENUM_RESET_PORT2:
        status = USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_RESET,HUB_Handle->portNumber);
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b52c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b530:	461a      	mov	r2, r3
 800b532:	2104      	movs	r1, #4
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f7ff fd98 	bl	800b06a <USBH_HUB_SetPortFeature>
 800b53a:	4603      	mov	r3, r0
 800b53c:	75fb      	strb	r3, [r7, #23]
        if (status == USBH_OK)
 800b53e:	7dfb      	ldrb	r3, [r7, #23]
 800b540:	2b00      	cmp	r3, #0
 800b542:	f040 83ed 	bne.w	800bd20 <USBH_HUB_Device_Enum+0x97c>
        {
            HAL_Delay(200);
 800b546:	20c8      	movs	r0, #200	; 0xc8
 800b548:	f7f6 fb3e 	bl	8001bc8 <HAL_Delay>

            USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, 0U, port->speed, USBH_EP_CONTROL, (uint16_t)0x40U);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	7919      	ldrb	r1, [r3, #4]
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	7a5b      	ldrb	r3, [r3, #9]
 800b554:	2240      	movs	r2, #64	; 0x40
 800b556:	9202      	str	r2, [sp, #8]
 800b558:	2200      	movs	r2, #0
 800b55a:	9201      	str	r2, [sp, #4]
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	2300      	movs	r3, #0
 800b560:	2280      	movs	r2, #128	; 0x80
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f001 ff9e 	bl	800d4a4 <USBH_OpenPipe>
            USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, 0U, port->speed, USBH_EP_CONTROL, (uint16_t)0x40U);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	7959      	ldrb	r1, [r3, #5]
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	7a5b      	ldrb	r3, [r3, #9]
 800b570:	2240      	movs	r2, #64	; 0x40
 800b572:	9202      	str	r2, [sp, #8]
 800b574:	2200      	movs	r2, #0
 800b576:	9201      	str	r2, [sp, #4]
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	2300      	movs	r3, #0
 800b57c:	2200      	movs	r2, #0
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f001 ff90 	bl	800d4a4 <USBH_OpenPipe>
            phost->Control.pipe_size = 0x40U;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2240      	movs	r2, #64	; 0x40
 800b588:	719a      	strb	r2, [r3, #6]
        
            status = USBH_BUSY;
 800b58a:	2301      	movs	r3, #1
 800b58c:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_DEV_DESC;             
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	2203      	movs	r2, #3
 800b592:	719a      	strb	r2, [r3, #6]
        }
    break;
 800b594:	e3c4      	b.n	800bd20 <USBH_HUB_Device_Enum+0x97c>
    
    case HUB_ENUM_GET_DEV_DESC:
    status = USBH_HUB_Get_DevDesc(phost, 8U,port);
 800b596:	683a      	ldr	r2, [r7, #0]
 800b598:	2108      	movs	r1, #8
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7ff fd90 	bl	800b0c0 <USBH_HUB_Get_DevDesc>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	75fb      	strb	r3, [r7, #23]
        if (status == USBH_OK)
 800b5a4:	7dfb      	ldrb	r3, [r7, #23]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f040 83bc 	bne.w	800bd24 <USBH_HUB_Device_Enum+0x980>
        {
        port->DevDescNum = 0;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	71da      	strb	r2, [r3, #7]
        phost->Control.pipe_size = port->DevDesc.bMaxPacketSize;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	7eda      	ldrb	r2, [r3, #27]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	719a      	strb	r2, [r3, #6]

                    USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	7919      	ldrb	r1, [r3, #4]
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	7a5b      	ldrb	r3, [r3, #9]
                    0U, port->speed,
                    USBH_EP_CONTROL, (uint16_t)port->DevDesc.bMaxPacketSize);
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	7ed2      	ldrb	r2, [r2, #27]
                    USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b5c6:	b292      	uxth	r2, r2
 800b5c8:	9202      	str	r2, [sp, #8]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	9201      	str	r2, [sp, #4]
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	2280      	movs	r2, #128	; 0x80
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f001 ff65 	bl	800d4a4 <USBH_OpenPipe>

                    USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	7959      	ldrb	r1, [r3, #5]
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	7a5b      	ldrb	r3, [r3, #9]
                    0U, port->speed,
                    USBH_EP_CONTROL, (uint16_t)port->DevDesc.bMaxPacketSize);
 800b5e2:	683a      	ldr	r2, [r7, #0]
 800b5e4:	7ed2      	ldrb	r2, [r2, #27]
                    USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b5e6:	b292      	uxth	r2, r2
 800b5e8:	9202      	str	r2, [sp, #8]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	9201      	str	r2, [sp, #4]
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f001 ff55 	bl	800d4a4 <USBH_OpenPipe>

            status = USBH_BUSY;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_SET_ADDR;
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2205      	movs	r2, #5
 800b602:	719a      	strb	r2, [r3, #6]
        } 
    break;
 800b604:	e38e      	b.n	800bd24 <USBH_HUB_Device_Enum+0x980>

    case HUB_ENUM_SET_ADDR:
           status = USBH_SetAddress(phost,port->address);
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	7a1b      	ldrb	r3, [r3, #8]
 800b60a:	4619      	mov	r1, r3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f001 fad1 	bl	800cbb4 <USBH_SetAddress>
 800b612:	4603      	mov	r3, r0
 800b614:	75fb      	strb	r3, [r7, #23]
           if (status == USBH_OK)
 800b616:	7dfb      	ldrb	r3, [r7, #23]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f040 8385 	bne.w	800bd28 <USBH_HUB_Device_Enum+0x984>
           {
                    USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	7919      	ldrb	r1, [r3, #4]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	7a18      	ldrb	r0, [r3, #8]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	7a5b      	ldrb	r3, [r3, #9]
                    port->address, port->speed,
                    USBH_EP_CONTROL, (uint16_t)port->DevDesc.bMaxPacketSize);
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	7ed2      	ldrb	r2, [r2, #27]
                    USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b62e:	b292      	uxth	r2, r2
 800b630:	9202      	str	r2, [sp, #8]
 800b632:	2200      	movs	r2, #0
 800b634:	9201      	str	r2, [sp, #4]
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	4603      	mov	r3, r0
 800b63a:	2280      	movs	r2, #128	; 0x80
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f001 ff31 	bl	800d4a4 <USBH_OpenPipe>

                    USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	7959      	ldrb	r1, [r3, #5]
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	7a18      	ldrb	r0, [r3, #8]
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	7a5b      	ldrb	r3, [r3, #9]
                    port->address, port->speed,
                    USBH_EP_CONTROL, (uint16_t)port->DevDesc.bMaxPacketSize);
 800b64e:	683a      	ldr	r2, [r7, #0]
 800b650:	7ed2      	ldrb	r2, [r2, #27]
                    USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b652:	b292      	uxth	r2, r2
 800b654:	9202      	str	r2, [sp, #8]
 800b656:	2200      	movs	r2, #0
 800b658:	9201      	str	r2, [sp, #4]
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	4603      	mov	r3, r0
 800b65e:	2200      	movs	r2, #0
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f001 ff1f 	bl	800d4a4 <USBH_OpenPipe>

            status = USBH_BUSY;
 800b666:	2301      	movs	r3, #1
 800b668:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_FULL_DEV_DESC; //HUB_ENUM_GET_CFG_DESC;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2204      	movs	r2, #4
 800b66e:	719a      	strb	r2, [r3, #6]
           }
    break;
 800b670:	e35a      	b.n	800bd28 <USBH_HUB_Device_Enum+0x984>

        case HUB_ENUM_GET_FULL_DEV_DESC:
       status = USBH_HUB_Get_DevDesc(phost, port->DevDesc.bLength,port);
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	7d1b      	ldrb	r3, [r3, #20]
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff fd20 	bl	800b0c0 <USBH_HUB_Get_DevDesc>
 800b680:	4603      	mov	r3, r0
 800b682:	75fb      	strb	r3, [r7, #23]
        if (status == USBH_OK)
 800b684:	7dfb      	ldrb	r3, [r7, #23]
 800b686:	2b00      	cmp	r3, #0
 800b688:	f040 8350 	bne.w	800bd2c <USBH_HUB_Device_Enum+0x988>
        {
            status = USBH_BUSY;
 800b68c:	2301      	movs	r3, #1
 800b68e:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_CFG_DESC;
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	2206      	movs	r2, #6
 800b694:	719a      	strb	r2, [r3, #6]
        }
        break;
 800b696:	e349      	b.n	800bd2c <USBH_HUB_Device_Enum+0x988>

    case HUB_ENUM_GET_CFG_DESC:
          status = USBH_HUB_Get_CfgDesc(phost,USB_CONFIGURATION_DESC_SIZE,port);
 800b698:	683a      	ldr	r2, [r7, #0]
 800b69a:	2109      	movs	r1, #9
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7ff fd39 	bl	800b114 <USBH_HUB_Get_CfgDesc>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	75fb      	strb	r3, [r7, #23]
          if (status == USBH_OK)
 800b6a6:	7dfb      	ldrb	r3, [r7, #23]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f040 8341 	bne.w	800bd30 <USBH_HUB_Device_Enum+0x98c>
          {
            status = USBH_BUSY;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_FULL_CFG_DESC;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	2207      	movs	r2, #7
 800b6b6:	719a      	strb	r2, [r3, #6]
          }
    break;
 800b6b8:	e33a      	b.n	800bd30 <USBH_HUB_Device_Enum+0x98c>

    case HUB_ENUM_GET_FULL_CFG_DESC:
          status = USBH_HUB_Get_CfgDesc(phost,port->CfgDesc.wTotalLength,port);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7ff fd26 	bl	800b114 <USBH_HUB_Get_CfgDesc>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	75fb      	strb	r3, [r7, #23]

          if (status == USBH_OK)
 800b6cc:	7dfb      	ldrb	r3, [r7, #23]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	f040 8330 	bne.w	800bd34 <USBH_HUB_Device_Enum+0x990>
          {
            status = USBH_BUSY;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_MFC_STRING_DESC;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	2208      	movs	r2, #8
 800b6dc:	719a      	strb	r2, [r3, #6]
          }

    break;
 800b6de:	e329      	b.n	800bd34 <USBH_HUB_Device_Enum+0x990>

    case HUB_ENUM_GET_MFC_STRING_DESC:
          status = USBH_HUB_Get_StringDesc(phost, port->DevDesc.iManufacturer,port->MFC, 0xFFU,port);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	68da      	ldr	r2, [r3, #12]
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	23ff      	movs	r3, #255	; 0xff
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f7ff fd3a 	bl	800b16a <USBH_HUB_Get_StringDesc>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	75fb      	strb	r3, [r7, #23]

          if (status == USBH_OK)
 800b6fa:	7dfb      	ldrb	r3, [r7, #23]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f040 831b 	bne.w	800bd38 <USBH_HUB_Device_Enum+0x994>
          {
            status = USBH_BUSY;
 800b702:	2301      	movs	r3, #1
 800b704:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_PRODUCT_STRING_DESC;
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	2209      	movs	r2, #9
 800b70a:	719a      	strb	r2, [r3, #6]
          }
    break;
 800b70c:	e314      	b.n	800bd38 <USBH_HUB_Device_Enum+0x994>

    case HUB_ENUM_GET_PRODUCT_STRING_DESC:
         status = USBH_HUB_Get_StringDesc(phost, port->DevDesc.iProduct,port->Product, 0xFFU,port);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	691a      	ldr	r2, [r3, #16]
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	9300      	str	r3, [sp, #0]
 800b71c:	23ff      	movs	r3, #255	; 0xff
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f7ff fd23 	bl	800b16a <USBH_HUB_Get_StringDesc>
 800b724:	4603      	mov	r3, r0
 800b726:	75fb      	strb	r3, [r7, #23]
          if (status == USBH_OK)
 800b728:	7dfb      	ldrb	r3, [r7, #23]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f040 8306 	bne.w	800bd3c <USBH_HUB_Device_Enum+0x998>
          {
            status = USBH_BUSY;
 800b730:	2301      	movs	r3, #1
 800b732:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_SET_CONFIGURATION;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	220e      	movs	r2, #14
 800b738:	719a      	strb	r2, [r3, #6]
          }
    break;
 800b73a:	e2ff      	b.n	800bd3c <USBH_HUB_Device_Enum+0x998>

    //ENABLE DEVICE
        case HUB_ENUM_SET_CONFIGURATION:
            status = USBH_SetCfg(phost, (uint16_t)port->CfgDesc.bConfigurationValue);
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b742:	b29b      	uxth	r3, r3
 800b744:	4619      	mov	r1, r3
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f001 fa58 	bl	800cbfc <USBH_SetCfg>
 800b74c:	4603      	mov	r3, r0
 800b74e:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK)
 800b750:	7dfb      	ldrb	r3, [r7, #23]
 800b752:	2b00      	cmp	r3, #0
 800b754:	f040 82f4 	bne.w	800bd40 <USBH_HUB_Device_Enum+0x99c>
            {
                HAL_Delay(5);
 800b758:	2005      	movs	r0, #5
 800b75a:	f7f6 fa35 	bl	8001bc8 <HAL_Delay>
                port->EnumState = HUB_ENUM_SET_WAKEUP_FEATURE;
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	220f      	movs	r2, #15
 800b762:	719a      	strb	r2, [r3, #6]
                status = USBH_BUSY;
 800b764:	2301      	movs	r3, #1
 800b766:	75fb      	strb	r3, [r7, #23]
            }
    break;
 800b768:	e2ea      	b.n	800bd40 <USBH_HUB_Device_Enum+0x99c>

      case HUB_ENUM_SET_WAKEUP_FEATURE:
      if ((port->CfgDesc.bmAttributes) & (1U << 5))
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b770:	f003 0320 	and.w	r3, r3, #32
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00f      	beq.n	800b798 <USBH_HUB_Device_Enum+0x3f4>
      {
            status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b778:	2101      	movs	r1, #1
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f001 fa61 	bl	800cc42 <USBH_SetFeature>
 800b780:	4603      	mov	r3, r0
 800b782:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK)
 800b784:	7dfb      	ldrb	r3, [r7, #23]
 800b786:	2b00      	cmp	r3, #0
 800b788:	f040 82dc 	bne.w	800bd44 <USBH_HUB_Device_Enum+0x9a0>
            {

                port->EnumState = HUB_ENUM_GET_HID_DESC;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	220a      	movs	r2, #10
 800b790:	719a      	strb	r2, [r3, #6]
                status = USBH_BUSY;
 800b792:	2301      	movs	r3, #1
 800b794:	75fb      	strb	r3, [r7, #23]
      else
      {
        port->EnumState = HUB_ENUM_GET_HID_DESC;
        status = USBH_BUSY;
      }
    break;
 800b796:	e2d5      	b.n	800bd44 <USBH_HUB_Device_Enum+0x9a0>
        port->EnumState = HUB_ENUM_GET_HID_DESC;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	220a      	movs	r2, #10
 800b79c:	719a      	strb	r2, [r3, #6]
        status = USBH_BUSY;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	75fb      	strb	r3, [r7, #23]
    break;
 800b7a2:	e2cf      	b.n	800bd44 <USBH_HUB_Device_Enum+0x9a0>

    case HUB_ENUM_GET_HID_DESC:
        status = USBH_HUB_GetHIDDescriptor(phost, USB_HID_DESC_SIZE, 0U,port->buff);
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	2109      	movs	r1, #9
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff fdbd 	bl	800b32e <USBH_HUB_GetHIDDescriptor>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	75fb      	strb	r3, [r7, #23]
                if (status == USBH_OK)
 800b7b8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f040 82c4 	bne.w	800bd48 <USBH_HUB_Device_Enum+0x9a4>
                {
			        USBH_HID_ParseHIDDesc(&port->HIDDesc[0], port->buff);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	f7fc ffc1 	bl	8008756 <USBH_HID_ParseHIDDesc>
                    status = USBH_BUSY;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	75fb      	strb	r3, [r7, #23]
                    port->EnumState = HUB_ENUM_GET_HID_REPORT_DESC;
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	220b      	movs	r2, #11
 800b7dc:	719a      	strb	r2, [r3, #6]
                    HAL_Delay(5);
 800b7de:	2005      	movs	r0, #5
 800b7e0:	f7f6 f9f2 	bl	8001bc8 <HAL_Delay>
                }
    break;
 800b7e4:	e2b0      	b.n	800bd48 <USBH_HUB_Device_Enum+0x9a4>

    case HUB_ENUM_GET_HID_REPORT_DESC:
        	status = USBH_HUB_GetHIDReportDescriptor(phost, port->HIDDesc[0].wItemLength, 0U,port->buff);
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	f8b3 106c 	ldrh.w	r1, [r3, #108]	; 0x6c
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7ff fdb8 	bl	800b36a <USBH_HUB_GetHIDReportDescriptor>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK)
 800b7fe:	7dfb      	ldrb	r3, [r7, #23]
 800b800:	2b00      	cmp	r3, #0
 800b802:	f040 82a3 	bne.w	800bd4c <USBH_HUB_Device_Enum+0x9a8>
            {
                HAL_Delay(5);
 800b806:	2005      	movs	r0, #5
 800b808:	f7f6 f9de 	bl	8001bc8 <HAL_Delay>
			    parse_report_descriptor(port->buff, port->HIDDesc[0].wItemLength, &port->HIDDesc[0].RptDesc);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	f503 70de 	add.w	r0, r3, #444	; 0x1bc
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	f8b3 106c 	ldrh.w	r1, [r3, #108]	; 0x6c
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	336e      	adds	r3, #110	; 0x6e
 800b81c:	461a      	mov	r2, r3
 800b81e:	f7fd ff53 	bl	80096c8 <parse_report_descriptor>
                if (port->CfgDesc.bNumInterfaces>1)
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d905      	bls.n	800b838 <USBH_HUB_Device_Enum+0x494>
                {
                    //read second interface HID Descriptor if exist
                    status = USBH_BUSY;
 800b82c:	2301      	movs	r3, #1
 800b82e:	75fb      	strb	r3, [r7, #23]
                    port->EnumState = HUB_ENUM_GET_HID_DESC_INTER2;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	220c      	movs	r2, #12
 800b834:	719a      	strb	r2, [r3, #6]
                {
			        port->EnumState = HUB_ENUM_SET_PROTOCOL;
                    status = USBH_BUSY;
                }
		    }
    break;
 800b836:	e289      	b.n	800bd4c <USBH_HUB_Device_Enum+0x9a8>
			        port->EnumState = HUB_ENUM_SET_PROTOCOL;
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	2210      	movs	r2, #16
 800b83c:	719a      	strb	r2, [r3, #6]
                    status = USBH_BUSY;
 800b83e:	2301      	movs	r3, #1
 800b840:	75fb      	strb	r3, [r7, #23]
    break;
 800b842:	e283      	b.n	800bd4c <USBH_HUB_Device_Enum+0x9a8>

    case HUB_ENUM_GET_HID_DESC_INTER2:

        status = USBH_HUB_GetHIDDescriptor(phost, USB_HID_DESC_SIZE, 1U,port->buff);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b84a:	2201      	movs	r2, #1
 800b84c:	2109      	movs	r1, #9
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f7ff fd6d 	bl	800b32e <USBH_HUB_GetHIDDescriptor>
 800b854:	4603      	mov	r3, r0
 800b856:	75fb      	strb	r3, [r7, #23]
                if (status == USBH_OK)
 800b858:	7dfb      	ldrb	r3, [r7, #23]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f040 8278 	bne.w	800bd50 <USBH_HUB_Device_Enum+0x9ac>
                {
			        USBH_HID_ParseHIDDesc(&port->HIDDesc[1], port->buff);
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b86c:	4619      	mov	r1, r3
 800b86e:	4610      	mov	r0, r2
 800b870:	f7fc ff71 	bl	8008756 <USBH_HID_ParseHIDDesc>
                    status = USBH_BUSY;
 800b874:	2301      	movs	r3, #1
 800b876:	75fb      	strb	r3, [r7, #23]
                    port->EnumState = HUB_ENUM_GET_HID_REPORT_DESC_INTER2;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	220d      	movs	r2, #13
 800b87c:	719a      	strb	r2, [r3, #6]
                }
    break;
 800b87e:	e267      	b.n	800bd50 <USBH_HUB_Device_Enum+0x9ac>

    case HUB_ENUM_GET_HID_REPORT_DESC_INTER2:
        	status = USBH_HUB_GetHIDReportDescriptor(phost, port->HIDDesc[1].wItemLength, 1U,port->buff);
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	f8b3 10ac 	ldrh.w	r1, [r3, #172]	; 0xac
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b88c:	2201      	movs	r2, #1
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f7ff fd6b 	bl	800b36a <USBH_HUB_GetHIDReportDescriptor>
 800b894:	4603      	mov	r3, r0
 800b896:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK)
 800b898:	7dfb      	ldrb	r3, [r7, #23]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f040 825a 	bne.w	800bd54 <USBH_HUB_Device_Enum+0x9b0>
            {
			    parse_report_descriptor(port->buff, port->HIDDesc[1].wItemLength, &port->HIDDesc[1].RptDesc);
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	f503 70de 	add.w	r0, r3, #444	; 0x1bc
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	f8b3 10ac 	ldrh.w	r1, [r3, #172]	; 0xac
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	33ae      	adds	r3, #174	; 0xae
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	f7fd ff09 	bl	80096c8 <parse_report_descriptor>
			    port->EnumState = HUB_ENUM_SET_PROTOCOL;
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	2210      	movs	r2, #16
 800b8ba:	719a      	strb	r2, [r3, #6]
                status = USBH_BUSY;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	75fb      	strb	r3, [r7, #23]
		    }
    break;
 800b8c0:	e248      	b.n	800bd54 <USBH_HUB_Device_Enum+0x9b0>

    case HUB_ENUM_SET_PROTOCOL:
            status = USBH_HID_SetProtocol(phost, 1U, 0U);
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	2101      	movs	r1, #1
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7fc ff23 	bl	8008712 <USBH_HID_SetProtocol>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK || status == USBH_NOT_SUPPORTED)
 800b8d0:	7dfb      	ldrb	r3, [r7, #23]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d003      	beq.n	800b8de <USBH_HUB_Device_Enum+0x53a>
 800b8d6:	7dfb      	ldrb	r3, [r7, #23]
 800b8d8:	2b03      	cmp	r3, #3
 800b8da:	f040 823d 	bne.w	800bd58 <USBH_HUB_Device_Enum+0x9b4>
            {
                port->EnumState = HUB_ENUM_SET_IDLE;
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2211      	movs	r2, #17
 800b8e2:	719a      	strb	r2, [r3, #6]
                status = USBH_BUSY;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	75fb      	strb	r3, [r7, #23]
            }
    break;
 800b8e8:	e236      	b.n	800bd58 <USBH_HUB_Device_Enum+0x9b4>

    case HUB_ENUM_SET_IDLE:
            if(port->CfgDesc.Itf_Desc[0].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[0].bInterfaceSubClass == 0x01 && (port->CfgDesc.Itf_Desc[0].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE || port->HIDDesc[0].RptDesc.type == REPORT_TYPE_KEYBOARD) )
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b8f0:	2b03      	cmp	r3, #3
 800b8f2:	d11a      	bne.n	800b92a <USBH_HUB_Device_Enum+0x586>
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d115      	bne.n	800b92a <USBH_HUB_Device_Enum+0x586>
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800b904:	2b01      	cmp	r3, #1
 800b906:	d007      	beq.n	800b918 <USBH_HUB_Device_Enum+0x574>
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800b90e:	f003 0303 	and.w	r3, r3, #3
 800b912:	b2db      	uxtb	r3, r3
 800b914:	2b02      	cmp	r3, #2
 800b916:	d108      	bne.n	800b92a <USBH_HUB_Device_Enum+0x586>
            {
			    status = USBH_HID_SetIdle(phost, 0U, 0U, 0U);
 800b918:	2300      	movs	r3, #0
 800b91a:	2200      	movs	r2, #0
 800b91c:	2100      	movs	r1, #0
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7fc fec9 	bl	80086b6 <USBH_HID_SetIdle>
 800b924:	4603      	mov	r3, r0
 800b926:	75fb      	strb	r3, [r7, #23]
 800b928:	e00f      	b.n	800b94a <USBH_HUB_Device_Enum+0x5a6>
            }
            else
            {
                if (port->CfgDesc.bNumInterfaces>1)
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b930:	2b01      	cmp	r3, #1
 800b932:	d905      	bls.n	800b940 <USBH_HUB_Device_Enum+0x59c>
                {
                    //read second interface HID Descriptor if exist
                    status = USBH_BUSY;
 800b934:	2301      	movs	r3, #1
 800b936:	75fb      	strb	r3, [r7, #23]
                    port->EnumState = HUB_ENUM_SET_PROTOCOL_INTER2;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	2212      	movs	r2, #18
 800b93c:	719a      	strb	r2, [r3, #6]
 800b93e:	e004      	b.n	800b94a <USBH_HUB_Device_Enum+0x5a6>
                }
                else
                {
			        port->EnumState = HUB_ENUM_INTERFACE_INIT;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2214      	movs	r2, #20
 800b944:	719a      	strb	r2, [r3, #6]
                    status = USBH_BUSY;
 800b946:	2301      	movs	r3, #1
 800b948:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (status == USBH_OK || status == USBH_NOT_SUPPORTED)
 800b94a:	7dfb      	ldrb	r3, [r7, #23]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d003      	beq.n	800b958 <USBH_HUB_Device_Enum+0x5b4>
 800b950:	7dfb      	ldrb	r3, [r7, #23]
 800b952:	2b03      	cmp	r3, #3
 800b954:	f040 8202 	bne.w	800bd5c <USBH_HUB_Device_Enum+0x9b8>
            {
                if (port->CfgDesc.bNumInterfaces>1)
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d905      	bls.n	800b96e <USBH_HUB_Device_Enum+0x5ca>
                {
                    //read second interface HID Descriptor if exist
                    status = USBH_BUSY;
 800b962:	2301      	movs	r3, #1
 800b964:	75fb      	strb	r3, [r7, #23]
                    port->EnumState = HUB_ENUM_SET_PROTOCOL_INTER2;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	2212      	movs	r2, #18
 800b96a:	719a      	strb	r2, [r3, #6]
                {
			        port->EnumState = HUB_ENUM_INTERFACE_INIT;
                    status = USBH_BUSY;
                }
            }
    break;
 800b96c:	e1f6      	b.n	800bd5c <USBH_HUB_Device_Enum+0x9b8>
			        port->EnumState = HUB_ENUM_INTERFACE_INIT;
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	2214      	movs	r2, #20
 800b972:	719a      	strb	r2, [r3, #6]
                    status = USBH_BUSY;
 800b974:	2301      	movs	r3, #1
 800b976:	75fb      	strb	r3, [r7, #23]
    break;
 800b978:	e1f0      	b.n	800bd5c <USBH_HUB_Device_Enum+0x9b8>

    case HUB_ENUM_SET_PROTOCOL_INTER2:
            status = USBH_HID_SetProtocol(phost, 1U, 1U);
 800b97a:	2201      	movs	r2, #1
 800b97c:	2101      	movs	r1, #1
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f7fc fec7 	bl	8008712 <USBH_HID_SetProtocol>
 800b984:	4603      	mov	r3, r0
 800b986:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK || status == USBH_NOT_SUPPORTED)
 800b988:	7dfb      	ldrb	r3, [r7, #23]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d003      	beq.n	800b996 <USBH_HUB_Device_Enum+0x5f2>
 800b98e:	7dfb      	ldrb	r3, [r7, #23]
 800b990:	2b03      	cmp	r3, #3
 800b992:	f040 81e5 	bne.w	800bd60 <USBH_HUB_Device_Enum+0x9bc>
            {
                port->EnumState = HUB_ENUM_SET_IDLE_INTER2;
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	2213      	movs	r2, #19
 800b99a:	719a      	strb	r2, [r3, #6]
                status = USBH_BUSY;
 800b99c:	2301      	movs	r3, #1
 800b99e:	75fb      	strb	r3, [r7, #23]
            }
    break;
 800b9a0:	e1de      	b.n	800bd60 <USBH_HUB_Device_Enum+0x9bc>

    case HUB_ENUM_SET_IDLE_INTER2:
            if(port->CfgDesc.Itf_Desc[1].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[1].bInterfaceSubClass == 0x01 && (port->CfgDesc.Itf_Desc[1].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE || port->HIDDesc[1].RptDesc.type == REPORT_TYPE_KEYBOARD))
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800b9a8:	2b03      	cmp	r3, #3
 800b9aa:	d11a      	bne.n	800b9e2 <USBH_HUB_Device_Enum+0x63e>
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d115      	bne.n	800b9e2 <USBH_HUB_Device_Enum+0x63e>
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d007      	beq.n	800b9d0 <USBH_HUB_Device_Enum+0x62c>
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800b9c6:	f003 0303 	and.w	r3, r3, #3
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	2b02      	cmp	r3, #2
 800b9ce:	d108      	bne.n	800b9e2 <USBH_HUB_Device_Enum+0x63e>
            {
			    status = USBH_HID_SetIdle(phost, 0U, 0U, 1U);
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f7fc fe6d 	bl	80086b6 <USBH_HID_SetIdle>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	75fb      	strb	r3, [r7, #23]
 800b9e0:	e004      	b.n	800b9ec <USBH_HUB_Device_Enum+0x648>
            }
            else
            {
               // status = USBH_HID_SetIdle(phost, 0U, 0U, 1U);
               		port->EnumState = HUB_ENUM_INTERFACE_INIT;
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2214      	movs	r2, #20
 800b9e6:	719a      	strb	r2, [r3, #6]
                    status = USBH_BUSY;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	75fb      	strb	r3, [r7, #23]
            }

            if (status == USBH_OK||status == USBH_NOT_SUPPORTED)
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <USBH_HUB_Device_Enum+0x656>
 800b9f2:	7dfb      	ldrb	r3, [r7, #23]
 800b9f4:	2b03      	cmp	r3, #3
 800b9f6:	f040 81b5 	bne.w	800bd64 <USBH_HUB_Device_Enum+0x9c0>
            {
                    port->EnumState = HUB_ENUM_INTERFACE_INIT;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2214      	movs	r2, #20
 800b9fe:	719a      	strb	r2, [r3, #6]
                    status = USBH_BUSY;
 800ba00:	2301      	movs	r3, #1
 800ba02:	75fb      	strb	r3, [r7, #23]
            }
    break;
 800ba04:	e1ae      	b.n	800bd64 <USBH_HUB_Device_Enum+0x9c0>

    case HUB_ENUM_INTERFACE_INIT:
        port->Interface[0].Id = 0;
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        port->Interface[0].length = port->HIDDesc[0].RptDesc.report_size;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
        port->Interface[0].poll   = port->CfgDesc.Itf_Desc[0].Ep_Desc[0].bInterval;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
        port->Interface[0].ep_addr = port->CfgDesc.Itf_Desc[0].Ep_Desc[0].bEndpointAddress;
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

        max_ep = port->CfgDesc.Itf_Desc[0].bNumEndpoints;
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba3c:	73fb      	strb	r3, [r7, #15]
        num = 0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	75bb      	strb	r3, [r7, #22]
        
        for (; num < max_ep; num++) {
 800ba42:	e014      	b.n	800ba6e <USBH_HUB_Device_Enum+0x6ca>
            
            if (port->CfgDesc.Itf_Desc[0].Ep_Desc[num].bEndpointAddress & 0x80U) 
 800ba44:	7dbb      	ldrb	r3, [r7, #22]
 800ba46:	683a      	ldr	r2, [r7, #0]
 800ba48:	3306      	adds	r3, #6
 800ba4a:	00db      	lsls	r3, r3, #3
 800ba4c:	4413      	add	r3, r2
 800ba4e:	7b1b      	ldrb	r3, [r3, #12]
 800ba50:	b25b      	sxtb	r3, r3
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	da08      	bge.n	800ba68 <USBH_HUB_Device_Enum+0x6c4>
            {
				port->Interface[0].InEp = port->CfgDesc.Itf_Desc[0].Ep_Desc[num].bEndpointAddress;
 800ba56:	7dbb      	ldrb	r3, [r7, #22]
 800ba58:	683a      	ldr	r2, [r7, #0]
 800ba5a:	3306      	adds	r3, #6
 800ba5c:	00db      	lsls	r3, r3, #3
 800ba5e:	4413      	add	r3, r2
 800ba60:	7b1a      	ldrb	r2, [r3, #12]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
        for (; num < max_ep; num++) {
 800ba68:	7dbb      	ldrb	r3, [r7, #22]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	75bb      	strb	r3, [r7, #22]
 800ba6e:	7dba      	ldrb	r2, [r7, #22]
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d3e6      	bcc.n	800ba44 <USBH_HUB_Device_Enum+0x6a0>
            } 
        }

        port->Interface[0].Pipe_in  = USBH_AllocPipe(phost,port->Interface[0].InEp);
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f001 fd3f 	bl	800d502 <USBH_AllocPipe>
 800ba84:	4603      	mov	r3, r0
 800ba86:	461a      	mov	r2, r3
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6

        if ((port->CfgDesc.Itf_Desc[0].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[0].bInterfaceSubClass == 0x01 && port->CfgDesc.Itf_Desc[0].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE ) || (port->HIDDesc[0].RptDesc.type == REPORT_TYPE_KEYBOARD))
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d109      	bne.n	800baac <USBH_HUB_Device_Enum+0x708>
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d104      	bne.n	800baac <USBH_HUB_Device_Enum+0x708>
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d007      	beq.n	800babc <USBH_HUB_Device_Enum+0x718>
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800bab2:	f003 0303 	and.w	r3, r3, #3
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	2b02      	cmp	r3, #2
 800baba:	d104      	bne.n	800bac6 <USBH_HUB_Device_Enum+0x722>
        {       
            USBH_HUB_KeybdInit(&port->Interface[0]);
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	33e4      	adds	r3, #228	; 0xe4
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fe ff7b 	bl	800a9bc <USBH_HUB_KeybdInit>
        }

        if ((port->CfgDesc.Itf_Desc[1].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[0].bInterfaceSubClass == 0x01 && port->CfgDesc.Itf_Desc[0].bInterfaceProtocol == HID_MOUSE_BOOT_CODE )|| (port->HIDDesc[0].RptDesc.type == REPORT_TYPE_MOUSE))
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800bacc:	2b03      	cmp	r3, #3
 800bace:	d109      	bne.n	800bae4 <USBH_HUB_Device_Enum+0x740>
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d104      	bne.n	800bae4 <USBH_HUB_Device_Enum+0x740>
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800bae0:	2b02      	cmp	r3, #2
 800bae2:	d007      	beq.n	800baf4 <USBH_HUB_Device_Enum+0x750>
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800baea:	f003 0303 	and.w	r3, r3, #3
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d11c      	bne.n	800bb2e <USBH_HUB_Device_Enum+0x78a>
        {       
            port->Interface[0].length = port->HIDDesc[0].RptDesc.report_size + (port->HIDDesc[0].RptDesc.report_id?1:0);
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	bf14      	ite	ne
 800bb06:	2301      	movne	r3, #1
 800bb08:	2300      	moveq	r3, #0
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	4413      	add	r3, r2
 800bb10:	b29a      	uxth	r2, r3
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
            port->Interface[0].HIDDesc = &port->HIDDesc[0];
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
            USBH_HUB_MouseInit(&port->Interface[0]);
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	33e4      	adds	r3, #228	; 0xe4
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7ff f855 	bl	800abd8 <USBH_HUB_MouseInit>
        }

        if (port->HIDDesc[0].RptDesc.type == REPORT_TYPE_JOYSTICK)
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800bb34:	f003 0303 	and.w	r3, r3, #3
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	d11c      	bne.n	800bb78 <USBH_HUB_Device_Enum+0x7d4>
        {       
            port->Interface[0].length = port->HIDDesc[0].RptDesc.report_size + (port->HIDDesc[0].RptDesc.report_id?1:0);
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	bf14      	ite	ne
 800bb50:	2301      	movne	r3, #1
 800bb52:	2300      	moveq	r3, #0
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	4413      	add	r3, r2
 800bb5a:	b29a      	uxth	r2, r3
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
            port->Interface[0].HIDDesc = &port->HIDDesc[0];
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
            USBH_HUB_GamepadInit(&port->Interface[0]);
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	33e4      	adds	r3, #228	; 0xe4
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe fc70 	bl	800a458 <USBH_HUB_GamepadInit>
        }

        if (port->CfgDesc.bNumInterfaces>1)
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d905      	bls.n	800bb8e <USBH_HUB_Device_Enum+0x7ea>
        {
            //read second interface HID Descriptor if exist
            status = USBH_BUSY;
 800bb82:	2301      	movs	r3, #1
 800bb84:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_INTERFACE_2_INIT;
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	2215      	movs	r2, #21
 800bb8a:	719a      	strb	r2, [r3, #6]
        } else
        {
		    port->EnumState = HUB_ENUM_READY;
            status = USBH_BUSY;
        }
    break;
 800bb8c:	e0eb      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
		    port->EnumState = HUB_ENUM_READY;
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2216      	movs	r2, #22
 800bb92:	719a      	strb	r2, [r3, #6]
            status = USBH_BUSY;
 800bb94:	2301      	movs	r3, #1
 800bb96:	75fb      	strb	r3, [r7, #23]
    break;
 800bb98:	e0e5      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>

    case HUB_ENUM_INTERFACE_2_INIT:
        port->Interface[1].Id = 1;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        port->Interface[1].length = port->HIDDesc[1].RptDesc.report_size;
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
        port->Interface[1].poll   = port->CfgDesc.Itf_Desc[1].Ep_Desc[0].bInterval;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800bbb6:	b29a      	uxth	r2, r3
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
        port->Interface[1].ep_addr = port->CfgDesc.Itf_Desc[1].Ep_Desc[0].bEndpointAddress;
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158

        max_ep = port->CfgDesc.Itf_Desc[1].bNumEndpoints;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bbd0:	73fb      	strb	r3, [r7, #15]
        num = 0;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	75bb      	strb	r3, [r7, #22]

        for (; num < max_ep; num++) {
 800bbd6:	e016      	b.n	800bc06 <USBH_HUB_Device_Enum+0x862>
            
        if (port->CfgDesc.Itf_Desc[1].Ep_Desc[num].bEndpointAddress & 0x80U) 
 800bbd8:	7dbb      	ldrb	r3, [r7, #22]
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	00db      	lsls	r3, r3, #3
 800bbe0:	4413      	add	r3, r2
 800bbe2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bbe6:	b25b      	sxtb	r3, r3
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	da09      	bge.n	800bc00 <USBH_HUB_Device_Enum+0x85c>
        {
	    	port->Interface[1].InEp = port->CfgDesc.Itf_Desc[1].Ep_Desc[num].bEndpointAddress;
 800bbec:	7dbb      	ldrb	r3, [r7, #22]
 800bbee:	683a      	ldr	r2, [r7, #0]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	00db      	lsls	r3, r3, #3
 800bbf4:	4413      	add	r3, r2
 800bbf6:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
        for (; num < max_ep; num++) {
 800bc00:	7dbb      	ldrb	r3, [r7, #22]
 800bc02:	3301      	adds	r3, #1
 800bc04:	75bb      	strb	r3, [r7, #22]
 800bc06:	7dba      	ldrb	r2, [r7, #22]
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d3e4      	bcc.n	800bbd8 <USBH_HUB_Device_Enum+0x834>
        } 
        }
            port->Interface[1].Pipe_in =  USBH_AllocPipe(phost,port->Interface[1].InEp);
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800bc14:	4619      	mov	r1, r3
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f001 fc73 	bl	800d502 <USBH_AllocPipe>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	461a      	mov	r2, r3
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152

        if ((port->CfgDesc.Itf_Desc[1].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[1].bInterfaceSubClass == 0x01 && port->CfgDesc.Itf_Desc[1].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE) || (port->HIDDesc[1].RptDesc.type == REPORT_TYPE_KEYBOARD))
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800bc2c:	2b03      	cmp	r3, #3
 800bc2e:	d109      	bne.n	800bc44 <USBH_HUB_Device_Enum+0x8a0>
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d104      	bne.n	800bc44 <USBH_HUB_Device_Enum+0x8a0>
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d007      	beq.n	800bc54 <USBH_HUB_Device_Enum+0x8b0>
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800bc4a:	f003 0303 	and.w	r3, r3, #3
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	d105      	bne.n	800bc60 <USBH_HUB_Device_Enum+0x8bc>
        {       
            USBH_HUB_KeybdInit(&port->Interface[1]);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe feae 	bl	800a9bc <USBH_HUB_KeybdInit>
        }

        if ((port->CfgDesc.Itf_Desc[1].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[1].bInterfaceSubClass == 0x01 && port->CfgDesc.Itf_Desc[1].bInterfaceProtocol == HID_MOUSE_BOOT_CODE ) || (port->HIDDesc[1].RptDesc.type == REPORT_TYPE_MOUSE))
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800bc66:	2b03      	cmp	r3, #3
 800bc68:	d109      	bne.n	800bc7e <USBH_HUB_Device_Enum+0x8da>
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d104      	bne.n	800bc7e <USBH_HUB_Device_Enum+0x8da>
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d007      	beq.n	800bc8e <USBH_HUB_Device_Enum+0x8ea>
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800bc84:	f003 0303 	and.w	r3, r3, #3
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d11d      	bne.n	800bcca <USBH_HUB_Device_Enum+0x926>
        {       
            port->Interface[1].length = port->HIDDesc[1].RptDesc.report_size + (port->HIDDesc[1].RptDesc.report_id?1:0);
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	bf14      	ite	ne
 800bca0:	2301      	movne	r3, #1
 800bca2:	2300      	moveq	r3, #0
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	4413      	add	r3, r2
 800bcaa:	b29a      	uxth	r2, r3
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
            port->Interface[1].HIDDesc = &port->HIDDesc[1];
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
            USBH_HUB_MouseInit(&port->Interface[1]);
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7fe ff87 	bl	800abd8 <USBH_HUB_MouseInit>
        }

        if (port->HIDDesc[1].RptDesc.type == REPORT_TYPE_JOYSTICK)
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800bcd0:	f003 0303 	and.w	r3, r3, #3
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	d117      	bne.n	800bd0a <USBH_HUB_Device_Enum+0x966>
        {       
            port->Interface[1].length = port->HIDDesc[1].RptDesc.report_size + (port->HIDDesc[1].RptDesc.report_id?1:0);
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	bf14      	ite	ne
 800bcec:	2301      	movne	r3, #1
 800bcee:	2300      	moveq	r3, #0
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	4413      	add	r3, r2
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
            USBH_HUB_GamepadInit(&port->Interface[1]);
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7fe fba7 	bl	800a458 <USBH_HUB_GamepadInit>
        }
    		port->EnumState = HUB_ENUM_READY;
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	2216      	movs	r2, #22
 800bd0e:	719a      	strb	r2, [r3, #6]
            status = USBH_BUSY;
 800bd10:	2301      	movs	r3, #1
 800bd12:	75fb      	strb	r3, [r7, #23]
    break;
 800bd14:	e027      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>

    case HUB_ENUM_READY:
        status = USBH_OK;
 800bd16:	2300      	movs	r3, #0
 800bd18:	75fb      	strb	r3, [r7, #23]
    break;
 800bd1a:	e024      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd1c:	bf00      	nop
 800bd1e:	e022      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd20:	bf00      	nop
 800bd22:	e020      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd24:	bf00      	nop
 800bd26:	e01e      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd28:	bf00      	nop
 800bd2a:	e01c      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
        break;
 800bd2c:	bf00      	nop
 800bd2e:	e01a      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd30:	bf00      	nop
 800bd32:	e018      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd34:	bf00      	nop
 800bd36:	e016      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd38:	bf00      	nop
 800bd3a:	e014      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd3c:	bf00      	nop
 800bd3e:	e012      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd40:	bf00      	nop
 800bd42:	e010      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd44:	bf00      	nop
 800bd46:	e00e      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd48:	bf00      	nop
 800bd4a:	e00c      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd4c:	bf00      	nop
 800bd4e:	e00a      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd50:	bf00      	nop
 800bd52:	e008      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd54:	bf00      	nop
 800bd56:	e006      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd58:	bf00      	nop
 800bd5a:	e004      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd5c:	bf00      	nop
 800bd5e:	e002      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd60:	bf00      	nop
 800bd62:	e000      	b.n	800bd66 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd64:	bf00      	nop

   }
    return status;
 800bd66:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3718      	adds	r7, #24
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <USBH_HUB_Device_Process>:


USBH_StatusTypeDef USBH_HUB_Device_Process(USBH_HandleTypeDef *phost)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b088      	sub	sp, #32
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
uint8_t XferSize;
USBH_StatusTypeDef status = USBH_BUSY;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	77fb      	strb	r3, [r7, #31]
HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bd82:	6a1b      	ldr	r3, [r3, #32]
 800bd84:	61bb      	str	r3, [r7, #24]
HUB_Port_Interface_HandleTypeDef *Itf; 


USBH_URBStateTypeDef URBStatus;

uint8_t interfaceNumber =  HUB_Handle->current_Itf_number ;
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd8c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800bd90:	75fb      	strb	r3, [r7, #23]
uint8_t portNumber = HUB_Handle->current_port_number ;
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bd9c:	75bb      	strb	r3, [r7, #22]

    port = (HUB_Port_HandleTypeDef *) &HUB_Handle->Port[portNumber];
 800bd9e:	7dbb      	ldrb	r3, [r7, #22]
 800bda0:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800bda4:	fb02 f303 	mul.w	r3, r2, r3
 800bda8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bdac:	69ba      	ldr	r2, [r7, #24]
 800bdae:	4413      	add	r3, r2
 800bdb0:	613b      	str	r3, [r7, #16]
    if (port->EnumState != HUB_ENUM_READY) 
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	799b      	ldrb	r3, [r3, #6]
 800bdb6:	2b16      	cmp	r3, #22
 800bdb8:	d01b      	beq.n	800bdf2 <USBH_HUB_Device_Process+0x82>
    {
        if(HUB_Handle->current_port_number == 3)
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdc0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bdc4:	2b03      	cmp	r3, #3
 800bdc6:	d106      	bne.n	800bdd6 <USBH_HUB_Device_Process+0x66>
        {
            HUB_Handle->current_port_number = 0;
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800bdd4:	e00b      	b.n	800bdee <USBH_HUB_Device_Process+0x7e>
        } 
        else
        {
            HUB_Handle->current_port_number++;
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bddc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bde0:	3301      	adds	r3, #1
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        }
     return status;
 800bdee:	7ffb      	ldrb	r3, [r7, #31]
 800bdf0:	e07d      	b.n	800beee <USBH_HUB_Device_Process+0x17e>
    }

    Itf = (HUB_Port_Interface_HandleTypeDef *) &port->Interface[interfaceNumber];
 800bdf2:	7dfb      	ldrb	r3, [r7, #23]
 800bdf4:	226c      	movs	r2, #108	; 0x6c
 800bdf6:	fb02 f303 	mul.w	r3, r2, r3
 800bdfa:	33e0      	adds	r3, #224	; 0xe0
 800bdfc:	693a      	ldr	r2, [r7, #16]
 800bdfe:	4413      	add	r3, r2
 800be00:	3304      	adds	r3, #4
 800be02:	60fb      	str	r3, [r7, #12]

    switch(Itf->state)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	791b      	ldrb	r3, [r3, #4]
 800be08:	2b02      	cmp	r3, #2
 800be0a:	d027      	beq.n	800be5c <USBH_HUB_Device_Process+0xec>
 800be0c:	2b02      	cmp	r3, #2
 800be0e:	dc6d      	bgt.n	800beec <USBH_HUB_Device_Process+0x17c>
 800be10:	2b00      	cmp	r3, #0
 800be12:	d002      	beq.n	800be1a <USBH_HUB_Device_Process+0xaa>
 800be14:	2b01      	cmp	r3, #1
 800be16:	d00a      	beq.n	800be2e <USBH_HUB_Device_Process+0xbe>
 800be18:	e068      	b.n	800beec <USBH_HUB_Device_Process+0x17c>
    {
        case HUB_DEVICE_INIT:
        USBH_HUB_SETUP_PIPES(phost,HUB_Handle,port,Itf);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	693a      	ldr	r2, [r7, #16]
 800be1e:	69b9      	ldr	r1, [r7, #24]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f868 	bl	800bef6 <USBH_HUB_SETUP_PIPES>
        Itf->state = HUB_DEVICE_GET_DATA;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2201      	movs	r2, #1
 800be2a:	711a      	strb	r2, [r3, #4]
        break;
 800be2c:	e05e      	b.n	800beec <USBH_HUB_Device_Process+0x17c>
        case HUB_DEVICE_GET_DATA:
                
                USBH_InterruptReceiveData(phost, Itf->pData, (uint8_t) Itf->length, Itf->Pipe_in);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f103 0118 	add.w	r1, r3, #24
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	88db      	ldrh	r3, [r3, #6]
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	789b      	ldrb	r3, [r3, #2]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f001 fb11 	bl	800d466 <USBH_InterruptReceiveData>
                Itf->timer = phost->Timer;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	60da      	str	r2, [r3, #12]
	            Itf->DataReady = 0U;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2200      	movs	r2, #0
 800be52:	741a      	strb	r2, [r3, #16]
                Itf->state = HUB_DEVICE_POLL;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2202      	movs	r2, #2
 800be58:	711a      	strb	r2, [r3, #4]
        break;
 800be5a:	e047      	b.n	800beec <USBH_HUB_Device_Process+0x17c>

        case HUB_DEVICE_POLL:
                    URBStatus = USBH_LL_GetURBState(phost, Itf->Pipe_in);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	789b      	ldrb	r3, [r3, #2]
 800be60:	4619      	mov	r1, r3
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f001 ff62 	bl	800dd2c <USBH_LL_GetURBState>
 800be68:	4603      	mov	r3, r0
 800be6a:	72fb      	strb	r3, [r7, #11]
                    if (URBStatus== USBH_URB_DONE)
 800be6c:	7afb      	ldrb	r3, [r7, #11]
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d124      	bne.n	800bebc <USBH_HUB_Device_Process+0x14c>
                    {
			            XferSize = USBH_LL_GetLastXferSize(phost, Itf->Pipe_in);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	789b      	ldrb	r3, [r3, #2]
 800be76:	4619      	mov	r1, r3
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f001 fec5 	bl	800dc08 <USBH_LL_GetLastXferSize>
 800be7e:	4603      	mov	r3, r0
 800be80:	72bb      	strb	r3, [r7, #10]

                        if (Itf->DataReady == 0U && XferSize != 0U) 
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	7c1b      	ldrb	r3, [r3, #16]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d118      	bne.n	800bebc <USBH_HUB_Device_Process+0x14c>
 800be8a:	7abb      	ldrb	r3, [r7, #10]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d015      	beq.n	800bebc <USBH_HUB_Device_Process+0x14c>
                        { 
                            USBH_HID_FifoWrite(&Itf->fifo, Itf->pData, Itf->length);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f103 0118 	add.w	r1, r3, #24
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	88db      	ldrh	r3, [r3, #6]
 800bea0:	461a      	mov	r2, r3
 800bea2:	f7fc fcf8 	bl	8008896 <USBH_HID_FifoWrite>
				            Itf->DataReady = 1U;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2201      	movs	r2, #1
 800beaa:	741a      	strb	r2, [r3, #16]
                            
                            Itf->state = HUB_DEVICE_GET_DATA;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2201      	movs	r2, #1
 800beb0:	711a      	strb	r2, [r3, #4]

                            USBH_Next_Interface_Port(phost,port);
 800beb2:	6939      	ldr	r1, [r7, #16]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7fe fa71 	bl	800a39c <USBH_Next_Interface_Port>

                            break;
 800beba:	e017      	b.n	800beec <USBH_HUB_Device_Process+0x17c>
                        }
			        }
                    if (URBStatus == USBH_URB_STALL)
 800bebc:	7afb      	ldrb	r3, [r7, #11]
 800bebe:	2b05      	cmp	r3, #5
 800bec0:	d10d      	bne.n	800bede <USBH_HUB_Device_Process+0x16e>
                    {
                           while (USBH_ClrFeature(phost, Itf->ep_addr) == USBH_OK);
 800bec2:	bf00      	nop
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	7a1b      	ldrb	r3, [r3, #8]
 800bec8:	4619      	mov	r1, r3
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fedd 	bl	800cc8a <USBH_ClrFeature>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d0f6      	beq.n	800bec4 <USBH_HUB_Device_Process+0x154>
                           Itf->state = HUB_DEVICE_GET_DATA;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2201      	movs	r2, #1
 800beda:	711a      	strb	r2, [r3, #4]
                           break;
 800bedc:	e006      	b.n	800beec <USBH_HUB_Device_Process+0x17c>
                    }

                    if (URBStatus == USBH_URB_ERROR)
 800bede:	7afb      	ldrb	r3, [r7, #11]
 800bee0:	2b04      	cmp	r3, #4
 800bee2:	d103      	bne.n	800beec <USBH_HUB_Device_Process+0x17c>
                    {
                        Itf->state = HUB_DEVICE_GET_DATA;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2201      	movs	r2, #1
 800bee8:	711a      	strb	r2, [r3, #4]
                        break;
 800beea:	bf00      	nop
                    }
    }

return status;
 800beec:	7ffb      	ldrb	r3, [r7, #31]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3720      	adds	r7, #32
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <USBH_HUB_SETUP_PIPES>:

void USBH_HUB_SETUP_PIPES(USBH_HandleTypeDef *phost,HUB_HandleTypeDef *HUB_Handle,HUB_Port_HandleTypeDef *port,HUB_Port_Interface_HandleTypeDef *Itf)
{
 800bef6:	b590      	push	{r4, r7, lr}
 800bef8:	b089      	sub	sp, #36	; 0x24
 800befa:	af04      	add	r7, sp, #16
 800befc:	60f8      	str	r0, [r7, #12]
 800befe:	60b9      	str	r1, [r7, #8]
 800bf00:	607a      	str	r2, [r7, #4]
 800bf02:	603b      	str	r3, [r7, #0]
	USBH_OpenPipe(phost, Itf->Pipe_in, Itf->InEp, port->address, port->speed, USB_EP_TYPE_INTR, Itf->length);
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	7899      	ldrb	r1, [r3, #2]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	78d8      	ldrb	r0, [r3, #3]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	7a1c      	ldrb	r4, [r3, #8]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	7a5b      	ldrb	r3, [r3, #9]
 800bf14:	683a      	ldr	r2, [r7, #0]
 800bf16:	88d2      	ldrh	r2, [r2, #6]
 800bf18:	9202      	str	r2, [sp, #8]
 800bf1a:	2203      	movs	r2, #3
 800bf1c:	9201      	str	r2, [sp, #4]
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	4623      	mov	r3, r4
 800bf22:	4602      	mov	r2, r0
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f001 fabd 	bl	800d4a4 <USBH_OpenPipe>
	USBH_LL_SetToggle(phost, Itf->Pipe_in, 0U);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	789b      	ldrb	r3, [r3, #2]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	4619      	mov	r1, r3
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f001 ff1b 	bl	800dd6e <USBH_LL_SetToggle>
 800bf38:	bf00      	nop
 800bf3a:	3714      	adds	r7, #20
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd90      	pop	{r4, r7, pc}

0800bf40 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d101      	bne.n	800bf58 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bf54:	2302      	movs	r3, #2
 800bf56:	e029      	b.n	800bfac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	79fa      	ldrb	r2, [r7, #7]
 800bf5c:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
  phost->ClassNumber = 0U;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f000 f81f 	bl	800bfb4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d003      	beq.n	800bfa4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f001 fd3f 	bl	800da28 <USBH_LL_Init>

  return USBH_OK;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3710      	adds	r7, #16
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	60fb      	str	r3, [r7, #12]
 800bfc4:	e008      	b.n	800bfd8 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	32e2      	adds	r2, #226	; 0xe2
 800bfcc:	2100      	movs	r1, #0
 800bfce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	60fb      	str	r3, [r7, #12]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2b0e      	cmp	r3, #14
 800bfdc:	d9f3      	bls.n	800bfc6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bfde:	2300      	movs	r3, #0
 800bfe0:	60fb      	str	r3, [r7, #12]
 800bfe2:	e009      	b.n	800bff8 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	4413      	add	r3, r2
 800bfea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bfee:	2200      	movs	r2, #0
 800bff0:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	3301      	adds	r3, #1
 800bff6:	60fb      	str	r3, [r7, #12]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bffe:	d3f1      	bcc.n	800bfe4 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  phost->Control.state = CTRL_SETUP;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2201      	movs	r2, #1
 800c01e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2240      	movs	r2, #64	; 0x40
 800c024:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2201      	movs	r2, #1
 800c038:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3714      	adds	r7, #20
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr

0800c05a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c05a:	b480      	push	{r7}
 800c05c:	b085      	sub	sp, #20
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c064:	2300      	movs	r3, #0
 800c066:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d016      	beq.n	800c09c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800c074:	2b01      	cmp	r3, #1
 800c076:	d80e      	bhi.n	800c096 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800c07e:	1c59      	adds	r1, r3, #1
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	f8c2 1384 	str.w	r1, [r2, #900]	; 0x384
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	33de      	adds	r3, #222	; 0xde
 800c08a:	6839      	ldr	r1, [r7, #0]
 800c08c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	73fb      	strb	r3, [r7, #15]
 800c094:	e004      	b.n	800c0a0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c096:	2302      	movs	r3, #2
 800c098:	73fb      	strb	r3, [r7, #15]
 800c09a:	e001      	b.n	800c0a0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c09c:	2302      	movs	r3, #2
 800c09e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b085      	sub	sp, #20
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c0c4:	78fa      	ldrb	r2, [r7, #3]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d204      	bcs.n	800c0d4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	78fa      	ldrb	r2, [r7, #3]
 800c0ce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c0d2:	e001      	b.n	800c0d8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3714      	adds	r7, #20
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c0e6:	b480      	push	{r7}
 800c0e8:	b087      	sub	sp, #28
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	4608      	mov	r0, r1
 800c0f0:	4611      	mov	r1, r2
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	70fb      	strb	r3, [r7, #3]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	70bb      	strb	r3, [r7, #2]
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c100:	2300      	movs	r3, #0
 800c102:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c104:	2300      	movs	r3, #0
 800c106:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c10e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c110:	e025      	b.n	800c15e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c112:	7dfb      	ldrb	r3, [r7, #23]
 800c114:	221a      	movs	r2, #26
 800c116:	fb02 f303 	mul.w	r3, r2, r3
 800c11a:	3308      	adds	r3, #8
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	4413      	add	r3, r2
 800c120:	3302      	adds	r3, #2
 800c122:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	795b      	ldrb	r3, [r3, #5]
 800c128:	78fa      	ldrb	r2, [r7, #3]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d002      	beq.n	800c134 <USBH_FindInterface+0x4e>
 800c12e:	78fb      	ldrb	r3, [r7, #3]
 800c130:	2bff      	cmp	r3, #255	; 0xff
 800c132:	d111      	bne.n	800c158 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c138:	78ba      	ldrb	r2, [r7, #2]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d002      	beq.n	800c144 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c13e:	78bb      	ldrb	r3, [r7, #2]
 800c140:	2bff      	cmp	r3, #255	; 0xff
 800c142:	d109      	bne.n	800c158 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c148:	787a      	ldrb	r2, [r7, #1]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d002      	beq.n	800c154 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c14e:	787b      	ldrb	r3, [r7, #1]
 800c150:	2bff      	cmp	r3, #255	; 0xff
 800c152:	d101      	bne.n	800c158 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c154:	7dfb      	ldrb	r3, [r7, #23]
 800c156:	e006      	b.n	800c166 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c158:	7dfb      	ldrb	r3, [r7, #23]
 800c15a:	3301      	adds	r3, #1
 800c15c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c15e:	7dfb      	ldrb	r3, [r7, #23]
 800c160:	2b01      	cmp	r3, #1
 800c162:	d9d6      	bls.n	800c112 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c164:	23ff      	movs	r3, #255	; 0xff
}
 800c166:	4618      	mov	r0, r3
 800c168:	371c      	adds	r7, #28
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr

0800c172 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c172:	b580      	push	{r7, lr}
 800c174:	b082      	sub	sp, #8
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f001 fccc 	bl	800db18 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c180:	2101      	movs	r1, #1
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f001 fde5 	bl	800dd52 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c188:	2300      	movs	r3, #0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
	...

0800c194 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b088      	sub	sp, #32
 800c198:	af04      	add	r7, sp, #16
 800c19a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c19c:	2302      	movs	r3, #2
 800c19e:	737b      	strb	r3, [r7, #13]
  uint8_t idx = 0U;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d102      	bne.n	800c1b6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2203      	movs	r2, #3
 800c1b4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	2b0b      	cmp	r3, #11
 800c1be:	f200 81b8 	bhi.w	800c532 <USBH_Process+0x39e>
 800c1c2:	a201      	add	r2, pc, #4	; (adr r2, 800c1c8 <USBH_Process+0x34>)
 800c1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c8:	0800c1f9 	.word	0x0800c1f9
 800c1cc:	0800c22b 	.word	0x0800c22b
 800c1d0:	0800c293 	.word	0x0800c293
 800c1d4:	0800c4cd 	.word	0x0800c4cd
 800c1d8:	0800c533 	.word	0x0800c533
 800c1dc:	0800c337 	.word	0x0800c337
 800c1e0:	0800c473 	.word	0x0800c473
 800c1e4:	0800c36d 	.word	0x0800c36d
 800c1e8:	0800c38d 	.word	0x0800c38d
 800c1ec:	0800c3ad 	.word	0x0800c3ad
 800c1f0:	0800c3db 	.word	0x0800c3db
 800c1f4:	0800c4b5 	.word	0x0800c4b5
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	2b00      	cmp	r3, #0
 800c202:	f000 8198 	beq.w	800c536 <USBH_Process+0x3a2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2201      	movs	r2, #1
 800c20a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c20c:	20c8      	movs	r0, #200	; 0xc8
 800c20e:	f001 fdde 	bl	800ddce <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f001 fcdd 	bl	800dbd2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c228:	e185      	b.n	800c536 <USBH_Process+0x3a2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c230:	2b01      	cmp	r3, #1
 800c232:	d107      	bne.n	800c244 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2202      	movs	r2, #2
 800c240:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c242:	e187      	b.n	800c554 <USBH_Process+0x3c0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800c24a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c24e:	d914      	bls.n	800c27a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c256:	3301      	adds	r3, #1
 800c258:	b2da      	uxtb	r2, r3
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c266:	2b03      	cmp	r3, #3
 800c268:	d903      	bls.n	800c272 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	220d      	movs	r2, #13
 800c26e:	701a      	strb	r2, [r3, #0]
      break;
 800c270:	e170      	b.n	800c554 <USBH_Process+0x3c0>
            phost->gState = HOST_IDLE;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	701a      	strb	r2, [r3, #0]
      break;
 800c278:	e16c      	b.n	800c554 <USBH_Process+0x3c0>
          phost->Timeout += 10U;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800c280:	f103 020a 	add.w	r2, r3, #10
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
          USBH_Delay(10U);
 800c28a:	200a      	movs	r0, #10
 800c28c:	f001 fd9f 	bl	800ddce <USBH_Delay>
      break;
 800c290:	e160      	b.n	800c554 <USBH_Process+0x3c0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d005      	beq.n	800c2a8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c2a2:	2104      	movs	r1, #4
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c2a8:	2064      	movs	r0, #100	; 0x64
 800c2aa:	f001 fd90 	bl	800ddce <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f001 fc68 	bl	800db84 <USBH_LL_GetSpeed>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2205      	movs	r2, #5
 800c2c2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f001 f91b 	bl	800d502 <USBH_AllocPipe>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c2d4:	2180      	movs	r1, #128	; 0x80
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f001 f913 	bl	800d502 <USBH_AllocPipe>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	461a      	mov	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	7919      	ldrb	r1, [r3, #4]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c2f8:	b292      	uxth	r2, r2
 800c2fa:	9202      	str	r2, [sp, #8]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	9201      	str	r2, [sp, #4]
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	4603      	mov	r3, r0
 800c304:	2280      	movs	r2, #128	; 0x80
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f001 f8cc 	bl	800d4a4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	7959      	ldrb	r1, [r3, #5]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c320:	b292      	uxth	r2, r2
 800c322:	9202      	str	r2, [sp, #8]
 800c324:	2200      	movs	r2, #0
 800c326:	9201      	str	r2, [sp, #4]
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	4603      	mov	r3, r0
 800c32c:	2200      	movs	r2, #0
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f001 f8b8 	bl	800d4a4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c334:	e10e      	b.n	800c554 <USBH_Process+0x3c0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 f912 	bl	800c560 <USBH_HandleEnum>
 800c33c:	4603      	mov	r3, r0
 800c33e:	737b      	strb	r3, [r7, #13]
      if (status == USBH_OK)
 800c340:	7b7b      	ldrb	r3, [r7, #13]
 800c342:	b2db      	uxtb	r3, r3
 800c344:	2b00      	cmp	r3, #0
 800c346:	f040 80f8 	bne.w	800c53a <USBH_Process+0x3a6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2200      	movs	r2, #0
 800c34e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d103      	bne.n	800c364 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2208      	movs	r2, #8
 800c360:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c362:	e0ea      	b.n	800c53a <USBH_Process+0x3a6>
          phost->gState = HOST_INPUT;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2207      	movs	r2, #7
 800c368:	701a      	strb	r2, [r3, #0]
      break;
 800c36a:	e0e6      	b.n	800c53a <USBH_Process+0x3a6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c372:	2b00      	cmp	r3, #0
 800c374:	f000 80e3 	beq.w	800c53e <USBH_Process+0x3aa>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c37e:	2101      	movs	r1, #1
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2208      	movs	r2, #8
 800c388:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c38a:	e0d8      	b.n	800c53e <USBH_Process+0x3aa>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c392:	b29b      	uxth	r3, r3
 800c394:	4619      	mov	r1, r3
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f000 fc30 	bl	800cbfc <USBH_SetCfg>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f040 80cf 	bne.w	800c542 <USBH_Process+0x3ae>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2209      	movs	r2, #9
 800c3a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c3aa:	e0ca      	b.n	800c542 <USBH_Process+0x3ae>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c3b2:	f003 0320 	and.w	r3, r3, #32
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00b      	beq.n	800c3d2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c3ba:	2101      	movs	r1, #1
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fc40 	bl	800cc42 <USBH_SetFeature>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f040 80be 	bne.w	800c546 <USBH_Process+0x3b2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	220a      	movs	r2, #10
 800c3ce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c3d0:	e0b9      	b.n	800c546 <USBH_Process+0x3b2>
        phost->gState = HOST_CHECK_CLASS;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	220a      	movs	r2, #10
 800c3d6:	701a      	strb	r2, [r3, #0]
      break;
 800c3d8:	e0b5      	b.n	800c546 <USBH_Process+0x3b2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f000 80b2 	beq.w	800c54a <USBH_Process+0x3b6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	73fb      	strb	r3, [r7, #15]
 800c3f2:	e016      	b.n	800c422 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c3f4:	7bfa      	ldrb	r2, [r7, #15]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	32de      	adds	r2, #222	; 0xde
 800c3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3fe:	791a      	ldrb	r2, [r3, #4]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c406:	429a      	cmp	r2, r3
 800c408:	d108      	bne.n	800c41c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c40a:	7bfa      	ldrb	r2, [r7, #15]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	32de      	adds	r2, #222	; 0xde
 800c410:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
            break;
 800c41a:	e005      	b.n	800c428 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
 800c41e:	3301      	adds	r3, #1
 800c420:	73fb      	strb	r3, [r7, #15]
 800c422:	7bfb      	ldrb	r3, [r7, #15]
 800c424:	2b01      	cmp	r3, #1
 800c426:	d9e5      	bls.n	800c3f4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d01b      	beq.n	800c46a <USBH_Process+0x2d6>
        {
         USBH_StatusTypeDef init_status = phost->pActiveClass->Init(phost);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	4798      	blx	r3
 800c43e:	4603      	mov	r3, r0
 800c440:	73bb      	strb	r3, [r7, #14]
          if (init_status == USBH_OK)
 800c442:	7bbb      	ldrb	r3, [r7, #14]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d109      	bne.n	800c45c <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2206      	movs	r2, #6
 800c44c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c454:	2103      	movs	r1, #3
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c45a:	e076      	b.n	800c54a <USBH_Process+0x3b6>
          else if (init_status!= USBH_BUSY)
 800c45c:	7bbb      	ldrb	r3, [r7, #14]
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d073      	beq.n	800c54a <USBH_Process+0x3b6>
            phost->gState = HOST_ABORT_STATE;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	220d      	movs	r2, #13
 800c466:	701a      	strb	r2, [r3, #0]
      break;
 800c468:	e06f      	b.n	800c54a <USBH_Process+0x3b6>
          phost->gState = HOST_ABORT_STATE;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	220d      	movs	r2, #13
 800c46e:	701a      	strb	r2, [r3, #0]
      break;
 800c470:	e06b      	b.n	800c54a <USBH_Process+0x3b6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d017      	beq.n	800c4ac <USBH_Process+0x318>
      {
        status = phost->pActiveClass->Requests(phost);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	4798      	blx	r3
 800c488:	4603      	mov	r3, r0
 800c48a:	737b      	strb	r3, [r7, #13]

        if (status == USBH_OK)
 800c48c:	7b7b      	ldrb	r3, [r7, #13]
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	2b00      	cmp	r3, #0
 800c492:	d103      	bne.n	800c49c <USBH_Process+0x308>
        {
          phost->gState = HOST_CLASS;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	220b      	movs	r2, #11
 800c498:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c49a:	e058      	b.n	800c54e <USBH_Process+0x3ba>
        else if (status == USBH_FAIL)
 800c49c:	7b7b      	ldrb	r3, [r7, #13]
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d154      	bne.n	800c54e <USBH_Process+0x3ba>
          phost->gState = HOST_ABORT_STATE;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	220d      	movs	r2, #13
 800c4a8:	701a      	strb	r2, [r3, #0]
      break;
 800c4aa:	e050      	b.n	800c54e <USBH_Process+0x3ba>
        phost->gState = HOST_ABORT_STATE;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	220d      	movs	r2, #13
 800c4b0:	701a      	strb	r2, [r3, #0]
      break;
 800c4b2:	e04c      	b.n	800c54e <USBH_Process+0x3ba>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d049      	beq.n	800c552 <USBH_Process+0x3be>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	4798      	blx	r3
      }
      break;
 800c4ca:	e042      	b.n	800c552 <USBH_Process+0x3be>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f7ff fd6d 	bl	800bfb4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d009      	beq.n	800c4f8 <USBH_Process+0x364>
      {
        phost->pActiveClass->DeInit(phost);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
      }

      if (phost->pUser != NULL)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d005      	beq.n	800c50e <USBH_Process+0x37a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c508:	2105      	movs	r1, #5
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c514:	b2db      	uxtb	r3, r3
 800c516:	2b01      	cmp	r3, #1
 800c518:	d107      	bne.n	800c52a <USBH_Process+0x396>
      {
        phost->device.is_ReEnumerated = 0U;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7ff fe25 	bl	800c172 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c528:	e014      	b.n	800c554 <USBH_Process+0x3c0>
        USBH_LL_Start(phost);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f001 faf4 	bl	800db18 <USBH_LL_Start>
      break;
 800c530:	e010      	b.n	800c554 <USBH_Process+0x3c0>

    case HOST_ABORT_STATE:
    default :
      break;
 800c532:	bf00      	nop
 800c534:	e00e      	b.n	800c554 <USBH_Process+0x3c0>
      break;
 800c536:	bf00      	nop
 800c538:	e00c      	b.n	800c554 <USBH_Process+0x3c0>
      break;
 800c53a:	bf00      	nop
 800c53c:	e00a      	b.n	800c554 <USBH_Process+0x3c0>
    break;
 800c53e:	bf00      	nop
 800c540:	e008      	b.n	800c554 <USBH_Process+0x3c0>
      break;
 800c542:	bf00      	nop
 800c544:	e006      	b.n	800c554 <USBH_Process+0x3c0>
      break;
 800c546:	bf00      	nop
 800c548:	e004      	b.n	800c554 <USBH_Process+0x3c0>
      break;
 800c54a:	bf00      	nop
 800c54c:	e002      	b.n	800c554 <USBH_Process+0x3c0>
      break;
 800c54e:	bf00      	nop
 800c550:	e000      	b.n	800c554 <USBH_Process+0x3c0>
      break;
 800c552:	bf00      	nop
  }
  return USBH_OK;
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop

0800c560 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b088      	sub	sp, #32
 800c564:	af04      	add	r7, sp, #16
 800c566:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c568:	2301      	movs	r3, #1
 800c56a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c56c:	2301      	movs	r3, #1
 800c56e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	785b      	ldrb	r3, [r3, #1]
 800c574:	2b07      	cmp	r3, #7
 800c576:	f200 81c1 	bhi.w	800c8fc <USBH_HandleEnum+0x39c>
 800c57a:	a201      	add	r2, pc, #4	; (adr r2, 800c580 <USBH_HandleEnum+0x20>)
 800c57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c580:	0800c5a1 	.word	0x0800c5a1
 800c584:	0800c65f 	.word	0x0800c65f
 800c588:	0800c6c9 	.word	0x0800c6c9
 800c58c:	0800c757 	.word	0x0800c757
 800c590:	0800c7c1 	.word	0x0800c7c1
 800c594:	0800c831 	.word	0x0800c831
 800c598:	0800c877 	.word	0x0800c877
 800c59c:	0800c8bd 	.word	0x0800c8bd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c5a0:	2108      	movs	r1, #8
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 fa50 	bl	800ca48 <USBH_Get_DevDesc>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c5ac:	7bbb      	ldrb	r3, [r7, #14]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d130      	bne.n	800c614 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	7919      	ldrb	r1, [r3, #4]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c5d6:	b292      	uxth	r2, r2
 800c5d8:	9202      	str	r2, [sp, #8]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	9201      	str	r2, [sp, #4]
 800c5de:	9300      	str	r3, [sp, #0]
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2280      	movs	r2, #128	; 0x80
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 ff5d 	bl	800d4a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	7959      	ldrb	r1, [r3, #5]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c5fe:	b292      	uxth	r2, r2
 800c600:	9202      	str	r2, [sp, #8]
 800c602:	2200      	movs	r2, #0
 800c604:	9201      	str	r2, [sp, #4]
 800c606:	9300      	str	r3, [sp, #0]
 800c608:	4603      	mov	r3, r0
 800c60a:	2200      	movs	r2, #0
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 ff49 	bl	800d4a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c612:	e175      	b.n	800c900 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c614:	7bbb      	ldrb	r3, [r7, #14]
 800c616:	2b03      	cmp	r3, #3
 800c618:	f040 8172 	bne.w	800c900 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c622:	3301      	adds	r3, #1
 800c624:	b2da      	uxtb	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c632:	2b03      	cmp	r3, #3
 800c634:	d903      	bls.n	800c63e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	220d      	movs	r2, #13
 800c63a:	701a      	strb	r2, [r3, #0]
      break;
 800c63c:	e160      	b.n	800c900 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	795b      	ldrb	r3, [r3, #5]
 800c642:	4619      	mov	r1, r3
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 ff7c 	bl	800d542 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	791b      	ldrb	r3, [r3, #4]
 800c64e:	4619      	mov	r1, r3
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 ff76 	bl	800d542 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2200      	movs	r2, #0
 800c65a:	701a      	strb	r2, [r3, #0]
      break;
 800c65c:	e150      	b.n	800c900 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c65e:	2112      	movs	r1, #18
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f9f1 	bl	800ca48 <USBH_Get_DevDesc>
 800c666:	4603      	mov	r3, r0
 800c668:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c66a:	7bbb      	ldrb	r3, [r7, #14]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d103      	bne.n	800c678 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2202      	movs	r2, #2
 800c674:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c676:	e145      	b.n	800c904 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c678:	7bbb      	ldrb	r3, [r7, #14]
 800c67a:	2b03      	cmp	r3, #3
 800c67c:	f040 8142 	bne.w	800c904 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c686:	3301      	adds	r3, #1
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c696:	2b03      	cmp	r3, #3
 800c698:	d903      	bls.n	800c6a2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	220d      	movs	r2, #13
 800c69e:	701a      	strb	r2, [r3, #0]
      break;
 800c6a0:	e130      	b.n	800c904 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	795b      	ldrb	r3, [r3, #5]
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 ff4a 	bl	800d542 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	791b      	ldrb	r3, [r3, #4]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 ff44 	bl	800d542 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	701a      	strb	r2, [r3, #0]
      break;
 800c6c6:	e11d      	b.n	800c904 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c6c8:	2101      	movs	r1, #1
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 fa72 	bl	800cbb4 <USBH_SetAddress>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c6d4:	7bbb      	ldrb	r3, [r7, #14]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d132      	bne.n	800c740 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c6da:	2002      	movs	r0, #2
 800c6dc:	f001 fb77 	bl	800ddce <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2203      	movs	r2, #3
 800c6ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	7919      	ldrb	r1, [r3, #4]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c702:	b292      	uxth	r2, r2
 800c704:	9202      	str	r2, [sp, #8]
 800c706:	2200      	movs	r2, #0
 800c708:	9201      	str	r2, [sp, #4]
 800c70a:	9300      	str	r3, [sp, #0]
 800c70c:	4603      	mov	r3, r0
 800c70e:	2280      	movs	r2, #128	; 0x80
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 fec7 	bl	800d4a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	7959      	ldrb	r1, [r3, #5]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c72a:	b292      	uxth	r2, r2
 800c72c:	9202      	str	r2, [sp, #8]
 800c72e:	2200      	movs	r2, #0
 800c730:	9201      	str	r2, [sp, #4]
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	4603      	mov	r3, r0
 800c736:	2200      	movs	r2, #0
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 feb3 	bl	800d4a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c73e:	e0e3      	b.n	800c908 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c740:	7bbb      	ldrb	r3, [r7, #14]
 800c742:	2b03      	cmp	r3, #3
 800c744:	f040 80e0 	bne.w	800c908 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	220d      	movs	r2, #13
 800c74c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	705a      	strb	r2, [r3, #1]
      break;
 800c754:	e0d8      	b.n	800c908 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c756:	2109      	movs	r1, #9
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 f99e 	bl	800ca9a <USBH_Get_CfgDesc>
 800c75e:	4603      	mov	r3, r0
 800c760:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c762:	7bbb      	ldrb	r3, [r7, #14]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d103      	bne.n	800c770 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2204      	movs	r2, #4
 800c76c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c76e:	e0cd      	b.n	800c90c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c770:	7bbb      	ldrb	r3, [r7, #14]
 800c772:	2b03      	cmp	r3, #3
 800c774:	f040 80ca 	bne.w	800c90c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c77e:	3301      	adds	r3, #1
 800c780:	b2da      	uxtb	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c78e:	2b03      	cmp	r3, #3
 800c790:	d903      	bls.n	800c79a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	220d      	movs	r2, #13
 800c796:	701a      	strb	r2, [r3, #0]
      break;
 800c798:	e0b8      	b.n	800c90c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	795b      	ldrb	r3, [r3, #5]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 fece 	bl	800d542 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	791b      	ldrb	r3, [r3, #4]
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fec8 	bl	800d542 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	701a      	strb	r2, [r3, #0]
      break;
 800c7be:	e0a5      	b.n	800c90c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f966 	bl	800ca9a <USBH_Get_CfgDesc>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c7d2:	7bbb      	ldrb	r3, [r7, #14]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d103      	bne.n	800c7e0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2205      	movs	r2, #5
 800c7dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c7de:	e097      	b.n	800c910 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c7e0:	7bbb      	ldrb	r3, [r7, #14]
 800c7e2:	2b03      	cmp	r3, #3
 800c7e4:	f040 8094 	bne.w	800c910 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	b2da      	uxtb	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c7fe:	2b03      	cmp	r3, #3
 800c800:	d903      	bls.n	800c80a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	220d      	movs	r2, #13
 800c806:	701a      	strb	r2, [r3, #0]
      break;
 800c808:	e082      	b.n	800c910 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	795b      	ldrb	r3, [r3, #5]
 800c80e:	4619      	mov	r1, r3
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 fe96 	bl	800d542 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	791b      	ldrb	r3, [r3, #4]
 800c81a:	4619      	mov	r1, r3
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fe90 	bl	800d542 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	701a      	strb	r2, [r3, #0]
      break;
 800c82e:	e06f      	b.n	800c910 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c836:	2b00      	cmp	r3, #0
 800c838:	d019      	beq.n	800c86e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c846:	23ff      	movs	r3, #255	; 0xff
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f000 f94c 	bl	800cae6 <USBH_Get_StringDesc>
 800c84e:	4603      	mov	r3, r0
 800c850:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c852:	7bbb      	ldrb	r3, [r7, #14]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d103      	bne.n	800c860 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2206      	movs	r2, #6
 800c85c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c85e:	e059      	b.n	800c914 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c860:	7bbb      	ldrb	r3, [r7, #14]
 800c862:	2b03      	cmp	r3, #3
 800c864:	d156      	bne.n	800c914 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2206      	movs	r2, #6
 800c86a:	705a      	strb	r2, [r3, #1]
      break;
 800c86c:	e052      	b.n	800c914 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2206      	movs	r2, #6
 800c872:	705a      	strb	r2, [r3, #1]
      break;
 800c874:	e04e      	b.n	800c914 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d019      	beq.n	800c8b4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c88c:	23ff      	movs	r3, #255	; 0xff
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f929 	bl	800cae6 <USBH_Get_StringDesc>
 800c894:	4603      	mov	r3, r0
 800c896:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c898:	7bbb      	ldrb	r3, [r7, #14]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d103      	bne.n	800c8a6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2207      	movs	r2, #7
 800c8a2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c8a4:	e038      	b.n	800c918 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8a6:	7bbb      	ldrb	r3, [r7, #14]
 800c8a8:	2b03      	cmp	r3, #3
 800c8aa:	d135      	bne.n	800c918 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2207      	movs	r2, #7
 800c8b0:	705a      	strb	r2, [r3, #1]
      break;
 800c8b2:	e031      	b.n	800c918 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2207      	movs	r2, #7
 800c8b8:	705a      	strb	r2, [r3, #1]
      break;
 800c8ba:	e02d      	b.n	800c918 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d017      	beq.n	800c8f6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c8d2:	23ff      	movs	r3, #255	; 0xff
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 f906 	bl	800cae6 <USBH_Get_StringDesc>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c8de:	7bbb      	ldrb	r3, [r7, #14]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d102      	bne.n	800c8ea <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c8e8:	e018      	b.n	800c91c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8ea:	7bbb      	ldrb	r3, [r7, #14]
 800c8ec:	2b03      	cmp	r3, #3
 800c8ee:	d115      	bne.n	800c91c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c8f4:	e012      	b.n	800c91c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	73fb      	strb	r3, [r7, #15]
      break;
 800c8fa:	e00f      	b.n	800c91c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c8fc:	bf00      	nop
 800c8fe:	e00e      	b.n	800c91e <USBH_HandleEnum+0x3be>
      break;
 800c900:	bf00      	nop
 800c902:	e00c      	b.n	800c91e <USBH_HandleEnum+0x3be>
      break;
 800c904:	bf00      	nop
 800c906:	e00a      	b.n	800c91e <USBH_HandleEnum+0x3be>
      break;
 800c908:	bf00      	nop
 800c90a:	e008      	b.n	800c91e <USBH_HandleEnum+0x3be>
      break;
 800c90c:	bf00      	nop
 800c90e:	e006      	b.n	800c91e <USBH_HandleEnum+0x3be>
      break;
 800c910:	bf00      	nop
 800c912:	e004      	b.n	800c91e <USBH_HandleEnum+0x3be>
      break;
 800c914:	bf00      	nop
 800c916:	e002      	b.n	800c91e <USBH_HandleEnum+0x3be>
      break;
 800c918:	bf00      	nop
 800c91a:	e000      	b.n	800c91e <USBH_HandleEnum+0x3be>
      break;
 800c91c:	bf00      	nop
  }
  return Status;
 800c91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c920:	4618      	mov	r0, r3
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	683a      	ldr	r2, [r7, #0]
 800c936:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
}
 800c93a:	bf00      	nop
 800c93c:	370c      	adds	r7, #12
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr

0800c946 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b082      	sub	sp, #8
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c954:	1c5a      	adds	r2, r3, #1
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
  USBH_HandleSof(phost);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f804 	bl	800c96a <USBH_HandleSof>
}
 800c962:	bf00      	nop
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b082      	sub	sp, #8
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	b2db      	uxtb	r3, r3
 800c978:	2b0b      	cmp	r3, #11
 800c97a:	d10a      	bne.n	800c992 <USBH_HandleSof+0x28>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c982:	2b00      	cmp	r3, #0
 800c984:	d005      	beq.n	800c992 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c98c:	699b      	ldr	r3, [r3, #24]
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	4798      	blx	r3
  }
}
 800c992:	bf00      	nop
 800c994:	3708      	adds	r7, #8
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c99a:	b480      	push	{r7}
 800c99c:	b083      	sub	sp, #12
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800c9aa:	bf00      	nop
}
 800c9ac:	370c      	adds	r7, #12
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr

0800c9b6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c9b6:	b480      	push	{r7}
 800c9b8:	b083      	sub	sp, #12
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c9c6:	bf00      	nop
}
 800c9c8:	370c      	adds	r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr

0800c9d2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	b083      	sub	sp, #12
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c9f2:	2300      	movs	r3, #0
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f001 f894 	bl	800db4e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	791b      	ldrb	r3, [r3, #4]
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 fd88 	bl	800d542 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	795b      	ldrb	r3, [r3, #5]
 800ca36:	4619      	mov	r1, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 fd82 	bl	800d542 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ca3e:	2300      	movs	r3, #0
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b086      	sub	sp, #24
 800ca4c:	af02      	add	r7, sp, #8
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	460b      	mov	r3, r1
 800ca52:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, 0U,phost->device.Data,
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ca5a:	78fa      	ldrb	r2, [r7, #3]
 800ca5c:	b292      	uxth	r2, r2
 800ca5e:	9201      	str	r2, [sp, #4]
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	2300      	movs	r3, #0
 800ca64:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca68:	2100      	movs	r1, #0
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 f868 	bl	800cb40 <USBH_GetDescriptor>
 800ca70:	4603      	mov	r3, r0
 800ca72:	73fb      	strb	r3, [r7, #15]
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d10a      	bne.n	800ca90 <USBH_Get_DevDesc+0x48>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ca86:	78fa      	ldrb	r2, [r7, #3]
 800ca88:	b292      	uxth	r2, r2
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	f000 f921 	bl	800ccd2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ca90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b086      	sub	sp, #24
 800ca9e:	af02      	add	r7, sp, #8
 800caa0:	6078      	str	r0, [r7, #4]
 800caa2:	460b      	mov	r3, r1
 800caa4:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	331c      	adds	r3, #28
 800caaa:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800caac:	887b      	ldrh	r3, [r7, #2]
 800caae:	9301      	str	r3, [sp, #4]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	9300      	str	r3, [sp, #0]
 800cab4:	2300      	movs	r3, #0
 800cab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800caba:	2100      	movs	r1, #0
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 f83f 	bl	800cb40 <USBH_GetDescriptor>
 800cac2:	4603      	mov	r3, r0
 800cac4:	72fb      	strb	r3, [r7, #11]
 800cac6:	7afb      	ldrb	r3, [r7, #11]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d107      	bne.n	800cadc <USBH_Get_CfgDesc+0x42>
                                   USB_DESC_CONFIGURATION,0U,pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cad2:	887a      	ldrh	r2, [r7, #2]
 800cad4:	68f9      	ldr	r1, [r7, #12]
 800cad6:	4618      	mov	r0, r3
 800cad8:	f000 f96b 	bl	800cdb2 <USBH_ParseCfgDesc>
  }

  return status;
 800cadc:	7afb      	ldrb	r3, [r7, #11]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b088      	sub	sp, #32
 800caea:	af02      	add	r7, sp, #8
 800caec:	60f8      	str	r0, [r7, #12]
 800caee:	607a      	str	r2, [r7, #4]
 800caf0:	461a      	mov	r2, r3
 800caf2:	460b      	mov	r3, r1
 800caf4:	72fb      	strb	r3, [r7, #11]
 800caf6:	4613      	mov	r3, r2
 800caf8:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800cafa:	7afb      	ldrb	r3, [r7, #11]
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800cb02:	b299      	uxth	r1, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,0U,
                                   phost->device.Data, length)) == USBH_OK)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800cb0a:	893a      	ldrh	r2, [r7, #8]
 800cb0c:	9201      	str	r2, [sp, #4]
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	2300      	movs	r3, #0
 800cb12:	460a      	mov	r2, r1
 800cb14:	2100      	movs	r1, #0
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f000 f812 	bl	800cb40 <USBH_GetDescriptor>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	75fb      	strb	r3, [r7, #23]
 800cb20:	7dfb      	ldrb	r3, [r7, #23]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d107      	bne.n	800cb36 <USBH_Get_StringDesc+0x50>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cb2c:	893a      	ldrh	r2, [r7, #8]
 800cb2e:	6879      	ldr	r1, [r7, #4]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f000 fa3c 	bl	800cfae <USBH_ParseStringDesc>
  }

  return status;
 800cb36:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3718      	adds	r7, #24
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <USBH_GetDescriptor>:
                                      uint8_t  req_type,
                                      uint16_t value_idx,
									  uint8_t iface_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	4608      	mov	r0, r1
 800cb4a:	4611      	mov	r1, r2
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	4603      	mov	r3, r0
 800cb50:	70fb      	strb	r3, [r7, #3]
 800cb52:	460b      	mov	r3, r1
 800cb54:	803b      	strh	r3, [r7, #0]
 800cb56:	4613      	mov	r3, r2
 800cb58:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	789b      	ldrb	r3, [r3, #2]
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d11d      	bne.n	800cb9e <USBH_GetDescriptor+0x5e>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cb62:	78fb      	ldrb	r3, [r7, #3]
 800cb64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb68:	b2da      	uxtb	r2, r3
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2206      	movs	r2, #6
 800cb72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	883a      	ldrh	r2, [r7, #0]
 800cb78:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cb7a:	883b      	ldrh	r3, [r7, #0]
 800cb7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cb80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb84:	d104      	bne.n	800cb90 <USBH_GetDescriptor+0x50>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f240 4209 	movw	r2, #1033	; 0x409
 800cb8c:	829a      	strh	r2, [r3, #20]
 800cb8e:	e003      	b.n	800cb98 <USBH_GetDescriptor+0x58>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = iface_idx;
 800cb90:	78bb      	ldrb	r3, [r7, #2]
 800cb92:	b29a      	uxth	r2, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	8aba      	ldrh	r2, [r7, #20]
 800cb9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cb9e:	8abb      	ldrh	r3, [r7, #20]
 800cba0:	461a      	mov	r2, r3
 800cba2:	6939      	ldr	r1, [r7, #16]
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 fa50 	bl	800d04a <USBH_CtlReq>
 800cbaa:	4603      	mov	r3, r0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	789b      	ldrb	r3, [r3, #2]
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d10f      	bne.n	800cbe8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2205      	movs	r2, #5
 800cbd2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cbd4:	78fb      	ldrb	r3, [r7, #3]
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cbe8:	2200      	movs	r2, #0
 800cbea:	2100      	movs	r1, #0
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 fa2c 	bl	800d04a <USBH_CtlReq>
 800cbf2:	4603      	mov	r3, r0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	460b      	mov	r3, r1
 800cc06:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	789b      	ldrb	r3, [r3, #2]
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d10e      	bne.n	800cc2e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2200      	movs	r2, #0
 800cc14:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2209      	movs	r2, #9
 800cc1a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	887a      	ldrh	r2, [r7, #2]
 800cc20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cc2e:	2200      	movs	r2, #0
 800cc30:	2100      	movs	r1, #0
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 fa09 	bl	800d04a <USBH_CtlReq>
 800cc38:	4603      	mov	r3, r0
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}

0800cc42 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b082      	sub	sp, #8
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	789b      	ldrb	r3, [r3, #2]
 800cc52:	2b01      	cmp	r3, #1
 800cc54:	d10f      	bne.n	800cc76 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2203      	movs	r2, #3
 800cc60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800cc62:	78fb      	ldrb	r3, [r7, #3]
 800cc64:	b29a      	uxth	r2, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cc76:	2200      	movs	r2, #0
 800cc78:	2100      	movs	r1, #0
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 f9e5 	bl	800d04a <USBH_CtlReq>
 800cc80:	4603      	mov	r3, r0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3708      	adds	r7, #8
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b082      	sub	sp, #8
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
 800cc92:	460b      	mov	r3, r1
 800cc94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	789b      	ldrb	r3, [r3, #2]
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d10f      	bne.n	800ccbe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2202      	movs	r2, #2
 800cca2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2200      	movs	r2, #0
 800ccae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ccb0:	78fb      	ldrb	r3, [r7, #3]
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 f9c1 	bl	800d04a <USBH_CtlReq>
 800ccc8:	4603      	mov	r3, r0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3708      	adds	r7, #8
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ccd2:	b480      	push	{r7}
 800ccd4:	b085      	sub	sp, #20
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	60f8      	str	r0, [r7, #12]
 800ccda:	60b9      	str	r1, [r7, #8]
 800ccdc:	4613      	mov	r3, r2
 800ccde:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	781a      	ldrb	r2, [r3, #0]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	785a      	ldrb	r2, [r3, #1]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	3302      	adds	r3, #2
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	3303      	adds	r3, #3
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	021b      	lsls	r3, r3, #8
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	4313      	orrs	r3, r2
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	791a      	ldrb	r2, [r3, #4]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	795a      	ldrb	r2, [r3, #5]
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	799a      	ldrb	r2, [r3, #6]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	79da      	ldrb	r2, [r3, #7]
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800cd2c:	88fb      	ldrh	r3, [r7, #6]
 800cd2e:	2b08      	cmp	r3, #8
 800cd30:	d939      	bls.n	800cda6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	3308      	adds	r3, #8
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	b29a      	uxth	r2, r3
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	3309      	adds	r3, #9
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	021b      	lsls	r3, r3, #8
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	4313      	orrs	r3, r2
 800cd48:	b29a      	uxth	r2, r3
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	330a      	adds	r3, #10
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	b29a      	uxth	r2, r3
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	330b      	adds	r3, #11
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	021b      	lsls	r3, r3, #8
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	4313      	orrs	r3, r2
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	330c      	adds	r3, #12
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	330d      	adds	r3, #13
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	021b      	lsls	r3, r3, #8
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	b29a      	uxth	r2, r3
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	7b9a      	ldrb	r2, [r3, #14]
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	7bda      	ldrb	r2, [r3, #15]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	7c1a      	ldrb	r2, [r3, #16]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	7c5a      	ldrb	r2, [r3, #17]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	745a      	strb	r2, [r3, #17]
  }
}
 800cda6:	bf00      	nop
 800cda8:	3714      	adds	r7, #20
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr

0800cdb2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b08a      	sub	sp, #40	; 0x28
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	60f8      	str	r0, [r7, #12]
 800cdba:	60b9      	str	r1, [r7, #8]
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	781a      	ldrb	r2, [r3, #0]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	785a      	ldrb	r2, [r3, #1]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	3302      	adds	r3, #2
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	3303      	adds	r3, #3
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	021b      	lsls	r3, r3, #8
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	791a      	ldrb	r2, [r3, #4]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	795a      	ldrb	r2, [r3, #5]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	799a      	ldrb	r2, [r3, #6]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	79da      	ldrb	r2, [r3, #7]
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	7a1a      	ldrb	r2, [r3, #8]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ce28:	88fb      	ldrh	r3, [r7, #6]
 800ce2a:	2b09      	cmp	r3, #9
 800ce2c:	d95f      	bls.n	800ceee <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ce2e:	2309      	movs	r3, #9
 800ce30:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ce32:	2300      	movs	r3, #0
 800ce34:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ce36:	e051      	b.n	800cedc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ce38:	f107 0316 	add.w	r3, r7, #22
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce40:	f000 f8e8 	bl	800d014 <USBH_GetNextDesc>
 800ce44:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ce46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce48:	785b      	ldrb	r3, [r3, #1]
 800ce4a:	2b04      	cmp	r3, #4
 800ce4c:	d146      	bne.n	800cedc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ce4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce52:	221a      	movs	r2, #26
 800ce54:	fb02 f303 	mul.w	r3, r2, r3
 800ce58:	3308      	adds	r3, #8
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	3302      	adds	r3, #2
 800ce60:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ce62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce64:	69f8      	ldr	r0, [r7, #28]
 800ce66:	f000 f846 	bl	800cef6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ce70:	2300      	movs	r3, #0
 800ce72:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ce74:	e022      	b.n	800cebc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ce76:	f107 0316 	add.w	r3, r7, #22
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce7e:	f000 f8c9 	bl	800d014 <USBH_GetNextDesc>
 800ce82:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ce84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce86:	785b      	ldrb	r3, [r3, #1]
 800ce88:	2b05      	cmp	r3, #5
 800ce8a:	d117      	bne.n	800cebc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ce8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce90:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ce94:	3201      	adds	r2, #1
 800ce96:	00d2      	lsls	r2, r2, #3
 800ce98:	211a      	movs	r1, #26
 800ce9a:	fb01 f303 	mul.w	r3, r1, r3
 800ce9e:	4413      	add	r3, r2
 800cea0:	3308      	adds	r3, #8
 800cea2:	68fa      	ldr	r2, [r7, #12]
 800cea4:	4413      	add	r3, r2
 800cea6:	3304      	adds	r3, #4
 800cea8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ceaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ceac:	69b8      	ldr	r0, [r7, #24]
 800ceae:	f000 f851 	bl	800cf54 <USBH_ParseEPDesc>
            ep_ix++;
 800ceb2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	791b      	ldrb	r3, [r3, #4]
 800cec0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d204      	bcs.n	800ced2 <USBH_ParseCfgDesc+0x120>
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	885a      	ldrh	r2, [r3, #2]
 800cecc:	8afb      	ldrh	r3, [r7, #22]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d8d1      	bhi.n	800ce76 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ced2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ced6:	3301      	adds	r3, #1
 800ced8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cedc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d804      	bhi.n	800ceee <USBH_ParseCfgDesc+0x13c>
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	885a      	ldrh	r2, [r3, #2]
 800cee8:	8afb      	ldrh	r3, [r7, #22]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d8a4      	bhi.n	800ce38 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ceee:	bf00      	nop
 800cef0:	3728      	adds	r7, #40	; 0x28
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800cef6:	b480      	push	{r7}
 800cef8:	b083      	sub	sp, #12
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	781a      	ldrb	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	785a      	ldrb	r2, [r3, #1]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	789a      	ldrb	r2, [r3, #2]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	78da      	ldrb	r2, [r3, #3]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	791a      	ldrb	r2, [r3, #4]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	795a      	ldrb	r2, [r3, #5]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	799a      	ldrb	r2, [r3, #6]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	79da      	ldrb	r2, [r3, #7]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	7a1a      	ldrb	r2, [r3, #8]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	721a      	strb	r2, [r3, #8]
}
 800cf48:	bf00      	nop
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	781a      	ldrb	r2, [r3, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	785a      	ldrb	r2, [r3, #1]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	789a      	ldrb	r2, [r3, #2]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	78da      	ldrb	r2, [r3, #3]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	3304      	adds	r3, #4
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	b29a      	uxth	r2, r3
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	3305      	adds	r3, #5
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	021b      	lsls	r3, r3, #8
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	4313      	orrs	r3, r2
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	799a      	ldrb	r2, [r3, #6]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	719a      	strb	r2, [r3, #6]
}
 800cfa2:	bf00      	nop
 800cfa4:	370c      	adds	r7, #12
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr

0800cfae <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cfae:	b480      	push	{r7}
 800cfb0:	b087      	sub	sp, #28
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	60f8      	str	r0, [r7, #12]
 800cfb6:	60b9      	str	r1, [r7, #8]
 800cfb8:	4613      	mov	r3, r2
 800cfba:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	2b03      	cmp	r3, #3
 800cfc4:	d120      	bne.n	800d008 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	1e9a      	subs	r2, r3, #2
 800cfcc:	88fb      	ldrh	r3, [r7, #6]
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	bf28      	it	cs
 800cfd2:	4613      	movcs	r3, r2
 800cfd4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	3302      	adds	r3, #2
 800cfda:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cfdc:	2300      	movs	r3, #0
 800cfde:	82fb      	strh	r3, [r7, #22]
 800cfe0:	e00b      	b.n	800cffa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cfe2:	8afb      	ldrh	r3, [r7, #22]
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	781a      	ldrb	r2, [r3, #0]
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	3301      	adds	r3, #1
 800cff2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cff4:	8afb      	ldrh	r3, [r7, #22]
 800cff6:	3302      	adds	r3, #2
 800cff8:	82fb      	strh	r3, [r7, #22]
 800cffa:	8afa      	ldrh	r2, [r7, #22]
 800cffc:	8abb      	ldrh	r3, [r7, #20]
 800cffe:	429a      	cmp	r2, r3
 800d000:	d3ef      	bcc.n	800cfe2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	2200      	movs	r2, #0
 800d006:	701a      	strb	r2, [r3, #0]
  }
}
 800d008:	bf00      	nop
 800d00a:	371c      	adds	r7, #28
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d014:	b480      	push	{r7}
 800d016:	b085      	sub	sp, #20
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	881a      	ldrh	r2, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	b29b      	uxth	r3, r3
 800d028:	4413      	add	r3, r2
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	4413      	add	r3, r2
 800d03a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d03c:	68fb      	ldr	r3, [r7, #12]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3714      	adds	r7, #20
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr

0800d04a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b086      	sub	sp, #24
 800d04e:	af00      	add	r7, sp, #0
 800d050:	60f8      	str	r0, [r7, #12]
 800d052:	60b9      	str	r1, [r7, #8]
 800d054:	4613      	mov	r3, r2
 800d056:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d058:	2301      	movs	r3, #1
 800d05a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	789b      	ldrb	r3, [r3, #2]
 800d060:	2b01      	cmp	r3, #1
 800d062:	d002      	beq.n	800d06a <USBH_CtlReq+0x20>
 800d064:	2b02      	cmp	r3, #2
 800d066:	d00f      	beq.n	800d088 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d068:	e027      	b.n	800d0ba <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	88fa      	ldrh	r2, [r7, #6]
 800d074:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2201      	movs	r2, #1
 800d07a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2202      	movs	r2, #2
 800d080:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d082:	2301      	movs	r3, #1
 800d084:	75fb      	strb	r3, [r7, #23]
      break;
 800d086:	e018      	b.n	800d0ba <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f000 f81b 	bl	800d0c4 <USBH_HandleControl>
 800d08e:	4603      	mov	r3, r0
 800d090:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d092:	7dfb      	ldrb	r3, [r7, #23]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d002      	beq.n	800d09e <USBH_CtlReq+0x54>
 800d098:	7dfb      	ldrb	r3, [r7, #23]
 800d09a:	2b03      	cmp	r3, #3
 800d09c:	d106      	bne.n	800d0ac <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	761a      	strb	r2, [r3, #24]
      break;
 800d0aa:	e005      	b.n	800d0b8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d0ac:	7dfb      	ldrb	r3, [r7, #23]
 800d0ae:	2b02      	cmp	r3, #2
 800d0b0:	d102      	bne.n	800d0b8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	709a      	strb	r2, [r3, #2]
      break;
 800d0b8:	bf00      	nop
  }
  return status;
 800d0ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3718      	adds	r7, #24
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af02      	add	r7, sp, #8
 800d0ca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	7e1b      	ldrb	r3, [r3, #24]
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	2b0a      	cmp	r3, #10
 800d0dc:	f200 8156 	bhi.w	800d38c <USBH_HandleControl+0x2c8>
 800d0e0:	a201      	add	r2, pc, #4	; (adr r2, 800d0e8 <USBH_HandleControl+0x24>)
 800d0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e6:	bf00      	nop
 800d0e8:	0800d115 	.word	0x0800d115
 800d0ec:	0800d12f 	.word	0x0800d12f
 800d0f0:	0800d199 	.word	0x0800d199
 800d0f4:	0800d1bf 	.word	0x0800d1bf
 800d0f8:	0800d1f7 	.word	0x0800d1f7
 800d0fc:	0800d221 	.word	0x0800d221
 800d100:	0800d273 	.word	0x0800d273
 800d104:	0800d295 	.word	0x0800d295
 800d108:	0800d2d1 	.word	0x0800d2d1
 800d10c:	0800d2f7 	.word	0x0800d2f7
 800d110:	0800d335 	.word	0x0800d335
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f103 0110 	add.w	r1, r3, #16
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	795b      	ldrb	r3, [r3, #5]
 800d11e:	461a      	mov	r2, r3
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f000 f943 	bl	800d3ac <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2202      	movs	r2, #2
 800d12a:	761a      	strb	r2, [r3, #24]
      break;
 800d12c:	e139      	b.n	800d3a2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	795b      	ldrb	r3, [r3, #5]
 800d132:	4619      	mov	r1, r3
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 fdf9 	bl	800dd2c <USBH_LL_GetURBState>
 800d13a:	4603      	mov	r3, r0
 800d13c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d13e:	7bbb      	ldrb	r3, [r7, #14]
 800d140:	2b01      	cmp	r3, #1
 800d142:	d11e      	bne.n	800d182 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	7c1b      	ldrb	r3, [r3, #16]
 800d148:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d14c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	8adb      	ldrh	r3, [r3, #22]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d00a      	beq.n	800d16c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d156:	7b7b      	ldrb	r3, [r7, #13]
 800d158:	2b80      	cmp	r3, #128	; 0x80
 800d15a:	d103      	bne.n	800d164 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2203      	movs	r2, #3
 800d160:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d162:	e115      	b.n	800d390 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2205      	movs	r2, #5
 800d168:	761a      	strb	r2, [r3, #24]
      break;
 800d16a:	e111      	b.n	800d390 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d16c:	7b7b      	ldrb	r3, [r7, #13]
 800d16e:	2b80      	cmp	r3, #128	; 0x80
 800d170:	d103      	bne.n	800d17a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2209      	movs	r2, #9
 800d176:	761a      	strb	r2, [r3, #24]
      break;
 800d178:	e10a      	b.n	800d390 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2207      	movs	r2, #7
 800d17e:	761a      	strb	r2, [r3, #24]
      break;
 800d180:	e106      	b.n	800d390 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d182:	7bbb      	ldrb	r3, [r7, #14]
 800d184:	2b04      	cmp	r3, #4
 800d186:	d003      	beq.n	800d190 <USBH_HandleControl+0xcc>
 800d188:	7bbb      	ldrb	r3, [r7, #14]
 800d18a:	2b02      	cmp	r3, #2
 800d18c:	f040 8100 	bne.w	800d390 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	220b      	movs	r2, #11
 800d194:	761a      	strb	r2, [r3, #24]
      break;
 800d196:	e0fb      	b.n	800d390 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6899      	ldr	r1, [r3, #8]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	899a      	ldrh	r2, [r3, #12]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	791b      	ldrb	r3, [r3, #4]
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 f93a 	bl	800d42a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2204      	movs	r2, #4
 800d1ba:	761a      	strb	r2, [r3, #24]
      break;
 800d1bc:	e0f1      	b.n	800d3a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	791b      	ldrb	r3, [r3, #4]
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 fdb1 	bl	800dd2c <USBH_LL_GetURBState>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d1ce:	7bbb      	ldrb	r3, [r7, #14]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d102      	bne.n	800d1da <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2209      	movs	r2, #9
 800d1d8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d1da:	7bbb      	ldrb	r3, [r7, #14]
 800d1dc:	2b05      	cmp	r3, #5
 800d1de:	d102      	bne.n	800d1e6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d1e0:	2303      	movs	r3, #3
 800d1e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d1e4:	e0d6      	b.n	800d394 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d1e6:	7bbb      	ldrb	r3, [r7, #14]
 800d1e8:	2b04      	cmp	r3, #4
 800d1ea:	f040 80d3 	bne.w	800d394 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	220b      	movs	r2, #11
 800d1f2:	761a      	strb	r2, [r3, #24]
      break;
 800d1f4:	e0ce      	b.n	800d394 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6899      	ldr	r1, [r3, #8]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	899a      	ldrh	r2, [r3, #12]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	795b      	ldrb	r3, [r3, #5]
 800d202:	2001      	movs	r0, #1
 800d204:	9000      	str	r0, [sp, #0]
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f8ea 	bl	800d3e0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d212:	b29a      	uxth	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2206      	movs	r2, #6
 800d21c:	761a      	strb	r2, [r3, #24]
      break;
 800d21e:	e0c0      	b.n	800d3a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	795b      	ldrb	r3, [r3, #5]
 800d224:	4619      	mov	r1, r3
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 fd80 	bl	800dd2c <USBH_LL_GetURBState>
 800d22c:	4603      	mov	r3, r0
 800d22e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d230:	7bbb      	ldrb	r3, [r7, #14]
 800d232:	2b01      	cmp	r3, #1
 800d234:	d103      	bne.n	800d23e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2207      	movs	r2, #7
 800d23a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d23c:	e0ac      	b.n	800d398 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d23e:	7bbb      	ldrb	r3, [r7, #14]
 800d240:	2b05      	cmp	r3, #5
 800d242:	d105      	bne.n	800d250 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	220c      	movs	r2, #12
 800d248:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d24a:	2303      	movs	r3, #3
 800d24c:	73fb      	strb	r3, [r7, #15]
      break;
 800d24e:	e0a3      	b.n	800d398 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d250:	7bbb      	ldrb	r3, [r7, #14]
 800d252:	2b02      	cmp	r3, #2
 800d254:	d103      	bne.n	800d25e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2205      	movs	r2, #5
 800d25a:	761a      	strb	r2, [r3, #24]
      break;
 800d25c:	e09c      	b.n	800d398 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d25e:	7bbb      	ldrb	r3, [r7, #14]
 800d260:	2b04      	cmp	r3, #4
 800d262:	f040 8099 	bne.w	800d398 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	220b      	movs	r2, #11
 800d26a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d26c:	2302      	movs	r3, #2
 800d26e:	73fb      	strb	r3, [r7, #15]
      break;
 800d270:	e092      	b.n	800d398 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	791b      	ldrb	r3, [r3, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	2100      	movs	r1, #0
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f8d5 	bl	800d42a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d286:	b29a      	uxth	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2208      	movs	r2, #8
 800d290:	761a      	strb	r2, [r3, #24]

      break;
 800d292:	e086      	b.n	800d3a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	791b      	ldrb	r3, [r3, #4]
 800d298:	4619      	mov	r1, r3
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 fd46 	bl	800dd2c <USBH_LL_GetURBState>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d2a4:	7bbb      	ldrb	r3, [r7, #14]
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	d105      	bne.n	800d2b6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	220d      	movs	r2, #13
 800d2ae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d2b4:	e072      	b.n	800d39c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d2b6:	7bbb      	ldrb	r3, [r7, #14]
 800d2b8:	2b04      	cmp	r3, #4
 800d2ba:	d103      	bne.n	800d2c4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	220b      	movs	r2, #11
 800d2c0:	761a      	strb	r2, [r3, #24]
      break;
 800d2c2:	e06b      	b.n	800d39c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d2c4:	7bbb      	ldrb	r3, [r7, #14]
 800d2c6:	2b05      	cmp	r3, #5
 800d2c8:	d168      	bne.n	800d39c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d2ca:	2303      	movs	r3, #3
 800d2cc:	73fb      	strb	r3, [r7, #15]
      break;
 800d2ce:	e065      	b.n	800d39c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	795b      	ldrb	r3, [r3, #5]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	9200      	str	r2, [sp, #0]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	2100      	movs	r1, #0
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 f87f 	bl	800d3e0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d2e8:	b29a      	uxth	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	220a      	movs	r2, #10
 800d2f2:	761a      	strb	r2, [r3, #24]
      break;
 800d2f4:	e055      	b.n	800d3a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	795b      	ldrb	r3, [r3, #5]
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 fd15 	bl	800dd2c <USBH_LL_GetURBState>
 800d302:	4603      	mov	r3, r0
 800d304:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d306:	7bbb      	ldrb	r3, [r7, #14]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d105      	bne.n	800d318 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d30c:	2300      	movs	r3, #0
 800d30e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	220d      	movs	r2, #13
 800d314:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d316:	e043      	b.n	800d3a0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d318:	7bbb      	ldrb	r3, [r7, #14]
 800d31a:	2b02      	cmp	r3, #2
 800d31c:	d103      	bne.n	800d326 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2209      	movs	r2, #9
 800d322:	761a      	strb	r2, [r3, #24]
      break;
 800d324:	e03c      	b.n	800d3a0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d326:	7bbb      	ldrb	r3, [r7, #14]
 800d328:	2b04      	cmp	r3, #4
 800d32a:	d139      	bne.n	800d3a0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	220b      	movs	r2, #11
 800d330:	761a      	strb	r2, [r3, #24]
      break;
 800d332:	e035      	b.n	800d3a0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	7e5b      	ldrb	r3, [r3, #25]
 800d338:	3301      	adds	r3, #1
 800d33a:	b2da      	uxtb	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	765a      	strb	r2, [r3, #25]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	7e5b      	ldrb	r3, [r3, #25]
 800d344:	2b02      	cmp	r3, #2
 800d346:	d806      	bhi.n	800d356 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2201      	movs	r2, #1
 800d34c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2201      	movs	r2, #1
 800d352:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d354:	e025      	b.n	800d3a2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d35c:	2106      	movs	r1, #6
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2200      	movs	r2, #0
 800d366:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	795b      	ldrb	r3, [r3, #5]
 800d36c:	4619      	mov	r1, r3
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 f8e7 	bl	800d542 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	791b      	ldrb	r3, [r3, #4]
 800d378:	4619      	mov	r1, r3
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 f8e1 	bl	800d542 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d386:	2302      	movs	r3, #2
 800d388:	73fb      	strb	r3, [r7, #15]
      break;
 800d38a:	e00a      	b.n	800d3a2 <USBH_HandleControl+0x2de>

    default:
      break;
 800d38c:	bf00      	nop
 800d38e:	e008      	b.n	800d3a2 <USBH_HandleControl+0x2de>
      break;
 800d390:	bf00      	nop
 800d392:	e006      	b.n	800d3a2 <USBH_HandleControl+0x2de>
      break;
 800d394:	bf00      	nop
 800d396:	e004      	b.n	800d3a2 <USBH_HandleControl+0x2de>
      break;
 800d398:	bf00      	nop
 800d39a:	e002      	b.n	800d3a2 <USBH_HandleControl+0x2de>
      break;
 800d39c:	bf00      	nop
 800d39e:	e000      	b.n	800d3a2 <USBH_HandleControl+0x2de>
      break;
 800d3a0:	bf00      	nop
  }

  return status;
 800d3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3710      	adds	r7, #16
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b088      	sub	sp, #32
 800d3b0:	af04      	add	r7, sp, #16
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d3ba:	79f9      	ldrb	r1, [r7, #7]
 800d3bc:	2300      	movs	r3, #0
 800d3be:	9303      	str	r3, [sp, #12]
 800d3c0:	2308      	movs	r3, #8
 800d3c2:	9302      	str	r3, [sp, #8]
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	9301      	str	r3, [sp, #4]
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	9300      	str	r3, [sp, #0]
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	68f8      	ldr	r0, [r7, #12]
 800d3d2:	f000 fc7a 	bl	800dcca <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b088      	sub	sp, #32
 800d3e4:	af04      	add	r7, sp, #16
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	4611      	mov	r1, r2
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	80fb      	strh	r3, [r7, #6]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d400:	2300      	movs	r3, #0
 800d402:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d404:	7979      	ldrb	r1, [r7, #5]
 800d406:	7e3b      	ldrb	r3, [r7, #24]
 800d408:	9303      	str	r3, [sp, #12]
 800d40a:	88fb      	ldrh	r3, [r7, #6]
 800d40c:	9302      	str	r3, [sp, #8]
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	9301      	str	r3, [sp, #4]
 800d412:	2301      	movs	r3, #1
 800d414:	9300      	str	r3, [sp, #0]
 800d416:	2300      	movs	r3, #0
 800d418:	2200      	movs	r2, #0
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f000 fc55 	bl	800dcca <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d420:	2300      	movs	r3, #0
}
 800d422:	4618      	mov	r0, r3
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b088      	sub	sp, #32
 800d42e:	af04      	add	r7, sp, #16
 800d430:	60f8      	str	r0, [r7, #12]
 800d432:	60b9      	str	r1, [r7, #8]
 800d434:	4611      	mov	r1, r2
 800d436:	461a      	mov	r2, r3
 800d438:	460b      	mov	r3, r1
 800d43a:	80fb      	strh	r3, [r7, #6]
 800d43c:	4613      	mov	r3, r2
 800d43e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d440:	7979      	ldrb	r1, [r7, #5]
 800d442:	2300      	movs	r3, #0
 800d444:	9303      	str	r3, [sp, #12]
 800d446:	88fb      	ldrh	r3, [r7, #6]
 800d448:	9302      	str	r3, [sp, #8]
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	9301      	str	r3, [sp, #4]
 800d44e:	2301      	movs	r3, #1
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	2300      	movs	r3, #0
 800d454:	2201      	movs	r2, #1
 800d456:	68f8      	ldr	r0, [r7, #12]
 800d458:	f000 fc37 	bl	800dcca <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d45c:	2300      	movs	r3, #0

}
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800d466:	b580      	push	{r7, lr}
 800d468:	b088      	sub	sp, #32
 800d46a:	af04      	add	r7, sp, #16
 800d46c:	60f8      	str	r0, [r7, #12]
 800d46e:	60b9      	str	r1, [r7, #8]
 800d470:	4611      	mov	r1, r2
 800d472:	461a      	mov	r2, r3
 800d474:	460b      	mov	r3, r1
 800d476:	71fb      	strb	r3, [r7, #7]
 800d478:	4613      	mov	r3, r2
 800d47a:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d47c:	79fb      	ldrb	r3, [r7, #7]
 800d47e:	b29b      	uxth	r3, r3
 800d480:	79b9      	ldrb	r1, [r7, #6]
 800d482:	2200      	movs	r2, #0
 800d484:	9203      	str	r2, [sp, #12]
 800d486:	9302      	str	r3, [sp, #8]
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	9301      	str	r3, [sp, #4]
 800d48c:	2301      	movs	r3, #1
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	2303      	movs	r3, #3
 800d492:	2201      	movs	r2, #1
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	f000 fc18 	bl	800dcca <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800d49a:	2300      	movs	r3, #0
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b086      	sub	sp, #24
 800d4a8:	af04      	add	r7, sp, #16
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	4608      	mov	r0, r1
 800d4ae:	4611      	mov	r1, r2
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	70fb      	strb	r3, [r7, #3]
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	70bb      	strb	r3, [r7, #2]
 800d4ba:	4613      	mov	r3, r2
 800d4bc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d4be:	7878      	ldrb	r0, [r7, #1]
 800d4c0:	78ba      	ldrb	r2, [r7, #2]
 800d4c2:	78f9      	ldrb	r1, [r7, #3]
 800d4c4:	8b3b      	ldrh	r3, [r7, #24]
 800d4c6:	9302      	str	r3, [sp, #8]
 800d4c8:	7d3b      	ldrb	r3, [r7, #20]
 800d4ca:	9301      	str	r3, [sp, #4]
 800d4cc:	7c3b      	ldrb	r3, [r7, #16]
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 fbab 	bl	800dc2e <USBH_LL_OpenPipe>

  return USBH_OK;
 800d4d8:	2300      	movs	r3, #0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}

0800d4e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b082      	sub	sp, #8
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d4ee:	78fb      	ldrb	r3, [r7, #3]
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 fbca 	bl	800dc8c <USBH_LL_ClosePipe>

  return USBH_OK;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3708      	adds	r7, #8
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d502:	b580      	push	{r7, lr}
 800d504:	b084      	sub	sp, #16
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
 800d50a:	460b      	mov	r3, r1
 800d50c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 f833 	bl	800d57a <USBH_GetFreePipe>
 800d514:	4603      	mov	r3, r0
 800d516:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d518:	89fb      	ldrh	r3, [r7, #14]
 800d51a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d51e:	4293      	cmp	r3, r2
 800d520:	d009      	beq.n	800d536 <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d522:	78fb      	ldrb	r3, [r7, #3]
 800d524:	89fa      	ldrh	r2, [r7, #14]
 800d526:	f002 020f 	and.w	r2, r2, #15
 800d52a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	32e2      	adds	r2, #226	; 0xe2
 800d532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800d536:	89fb      	ldrh	r3, [r7, #14]
 800d538:	b2db      	uxtb	r3, r3
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d542:	b480      	push	{r7}
 800d544:	b083      	sub	sp, #12
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
 800d54a:	460b      	mov	r3, r1
 800d54c:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d54e:	78fb      	ldrb	r3, [r7, #3]
 800d550:	2b0a      	cmp	r3, #10
 800d552:	d80b      	bhi.n	800d56c <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d554:	78fa      	ldrb	r2, [r7, #3]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	32e2      	adds	r2, #226	; 0xe2
 800d55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d55e:	78fa      	ldrb	r2, [r7, #3]
 800d560:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	32e2      	adds	r2, #226	; 0xe2
 800d568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	370c      	adds	r7, #12
 800d572:	46bd      	mov	sp, r7
 800d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d578:	4770      	bx	lr

0800d57a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d57a:	b480      	push	{r7}
 800d57c:	b085      	sub	sp, #20
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d582:	2300      	movs	r3, #0
 800d584:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d586:	2300      	movs	r3, #0
 800d588:	73fb      	strb	r3, [r7, #15]
 800d58a:	e00e      	b.n	800d5aa <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d58c:	7bfa      	ldrb	r2, [r7, #15]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	32e2      	adds	r2, #226	; 0xe2
 800d592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d102      	bne.n	800d5a4 <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800d59e:	7bfb      	ldrb	r3, [r7, #15]
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	e007      	b.n	800d5b4 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800d5a4:	7bfb      	ldrb	r3, [r7, #15]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	73fb      	strb	r3, [r7, #15]
 800d5aa:	7bfb      	ldrb	r3, [r7, #15]
 800d5ac:	2b0a      	cmp	r3, #10
 800d5ae:	d9ed      	bls.n	800d58c <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d5b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3714      	adds	r7, #20
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <LL_GPIO_SetOutputPin>:
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b083      	sub	sp, #12
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	683a      	ldr	r2, [r7, #0]
 800d5ce:	619a      	str	r2, [r3, #24]
}
 800d5d0:	bf00      	nop
 800d5d2:	370c      	adds	r7, #12
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <LL_GPIO_ResetOutputPin>:
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	041a      	lsls	r2, r3, #16
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	619a      	str	r2, [r3, #24]
}
 800d5ee:	bf00      	nop
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr
	...

0800d5fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess1, HOST_HS) != USBH_OK)
 800d600:	2200      	movs	r2, #0
 800d602:	492a      	ldr	r1, [pc, #168]	; (800d6ac <MX_USB_HOST_Init+0xb0>)
 800d604:	482a      	ldr	r0, [pc, #168]	; (800d6b0 <MX_USB_HOST_Init+0xb4>)
 800d606:	f7fe fc9b 	bl	800bf40 <USBH_Init>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d001      	beq.n	800d614 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d610:	f7f3 fc94 	bl	8000f3c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_HID_CLASSHS) != USBH_OK)
 800d614:	4927      	ldr	r1, [pc, #156]	; (800d6b4 <MX_USB_HOST_Init+0xb8>)
 800d616:	4826      	ldr	r0, [pc, #152]	; (800d6b0 <MX_USB_HOST_Init+0xb4>)
 800d618:	f7fe fd1f 	bl	800c05a <USBH_RegisterClass>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d001      	beq.n	800d626 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d622:	f7f3 fc8b 	bl	8000f3c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800d626:	4822      	ldr	r0, [pc, #136]	; (800d6b0 <MX_USB_HOST_Init+0xb4>)
 800d628:	f7fe fda3 	bl	800c172 <USBH_Start>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d001      	beq.n	800d636 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d632:	f7f3 fc83 	bl	8000f3c <Error_Handler>
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess2, HOST_FS) != USBH_OK)
 800d636:	2201      	movs	r2, #1
 800d638:	491f      	ldr	r1, [pc, #124]	; (800d6b8 <MX_USB_HOST_Init+0xbc>)
 800d63a:	4820      	ldr	r0, [pc, #128]	; (800d6bc <MX_USB_HOST_Init+0xc0>)
 800d63c:	f7fe fc80 	bl	800bf40 <USBH_Init>
 800d640:	4603      	mov	r3, r0
 800d642:	2b00      	cmp	r3, #0
 800d644:	d001      	beq.n	800d64a <MX_USB_HOST_Init+0x4e>
  {
    Error_Handler();
 800d646:	f7f3 fc79 	bl	8000f3c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800d64a:	491d      	ldr	r1, [pc, #116]	; (800d6c0 <MX_USB_HOST_Init+0xc4>)
 800d64c:	481b      	ldr	r0, [pc, #108]	; (800d6bc <MX_USB_HOST_Init+0xc0>)
 800d64e:	f7fe fd04 	bl	800c05a <USBH_RegisterClass>
 800d652:	4603      	mov	r3, r0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d001      	beq.n	800d65c <MX_USB_HOST_Init+0x60>
  {
    Error_Handler();
 800d658:	f7f3 fc70 	bl	8000f3c <Error_Handler>
  }

  if (USBH_RegisterClass(&hUsbHostFS, USBH_HUB_CLASS) != USBH_OK)
 800d65c:	4919      	ldr	r1, [pc, #100]	; (800d6c4 <MX_USB_HOST_Init+0xc8>)
 800d65e:	4817      	ldr	r0, [pc, #92]	; (800d6bc <MX_USB_HOST_Init+0xc0>)
 800d660:	f7fe fcfb 	bl	800c05a <USBH_RegisterClass>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d001      	beq.n	800d66e <MX_USB_HOST_Init+0x72>
{
  Error_Handler();
 800d66a:	f7f3 fc67 	bl	8000f3c <Error_Handler>
}

  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d66e:	4813      	ldr	r0, [pc, #76]	; (800d6bc <MX_USB_HOST_Init+0xc0>)
 800d670:	f7fe fd7f 	bl	800c172 <USBH_Start>
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d001      	beq.n	800d67e <MX_USB_HOST_Init+0x82>
  {
    Error_Handler();
 800d67a:	f7f3 fc5f 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  hUsbHostHS.pActiveClass->pData[0] = NULL;
 800d67e:	4b0c      	ldr	r3, [pc, #48]	; (800d6b0 <MX_USB_HOST_Init+0xb4>)
 800d680:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d684:	2200      	movs	r2, #0
 800d686:	621a      	str	r2, [r3, #32]
  hUsbHostHS.pActiveClass->pData[1] = NULL;
 800d688:	4b09      	ldr	r3, [pc, #36]	; (800d6b0 <MX_USB_HOST_Init+0xb4>)
 800d68a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d68e:	2200      	movs	r2, #0
 800d690:	625a      	str	r2, [r3, #36]	; 0x24
  hUsbHostFS.pActiveClass->pData[0] = NULL;
 800d692:	4b0a      	ldr	r3, [pc, #40]	; (800d6bc <MX_USB_HOST_Init+0xc0>)
 800d694:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d698:	2200      	movs	r2, #0
 800d69a:	621a      	str	r2, [r3, #32]
  hUsbHostFS.pActiveClass->pData[1] = NULL;
 800d69c:	4b07      	ldr	r3, [pc, #28]	; (800d6bc <MX_USB_HOST_Init+0xc0>)
 800d69e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	625a      	str	r2, [r3, #36]	; 0x24


  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d6a6:	bf00      	nop
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	0800d6e5 	.word	0x0800d6e5
 800d6b0:	2000046c 	.word	0x2000046c
 800d6b4:	20000034 	.word	0x20000034
 800d6b8:	0800d755 	.word	0x0800d755
 800d6bc:	20000848 	.word	0x20000848
 800d6c0:	2000000c 	.word	0x2000000c
 800d6c4:	2000005c 	.word	0x2000005c

0800d6c8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800d6cc:	4803      	ldr	r0, [pc, #12]	; (800d6dc <MX_USB_HOST_Process+0x14>)
 800d6ce:	f7fe fd61 	bl	800c194 <USBH_Process>
  USBH_Process(&hUsbHostFS);
 800d6d2:	4803      	ldr	r0, [pc, #12]	; (800d6e0 <MX_USB_HOST_Process+0x18>)
 800d6d4:	f7fe fd5e 	bl	800c194 <USBH_Process>
}
 800d6d8:	bf00      	nop
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	2000046c 	.word	0x2000046c
 800d6e0:	20000848 	.word	0x20000848

0800d6e4 <USBH_UserProcess1>:
/*
 * user callback definition
 */
static void USBH_UserProcess1  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_2 */
  switch(id)
 800d6f0:	78fb      	ldrb	r3, [r7, #3]
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	2b04      	cmp	r3, #4
 800d6f6:	d823      	bhi.n	800d740 <USBH_UserProcess1+0x5c>
 800d6f8:	a201      	add	r2, pc, #4	; (adr r2, 800d700 <USBH_UserProcess1+0x1c>)
 800d6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6fe:	bf00      	nop
 800d700:	0800d741 	.word	0x0800d741
 800d704:	0800d727 	.word	0x0800d727
 800d708:	0800d741 	.word	0x0800d741
 800d70c:	0800d739 	.word	0x0800d739
 800d710:	0800d715 	.word	0x0800d715
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d714:	4b0d      	ldr	r3, [pc, #52]	; (800d74c <USBH_UserProcess1+0x68>)
 800d716:	2203      	movs	r2, #3
 800d718:	701a      	strb	r2, [r3, #0]
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 800d71a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d71e:	480c      	ldr	r0, [pc, #48]	; (800d750 <USBH_UserProcess1+0x6c>)
 800d720:	f7ff ff4e 	bl	800d5c0 <LL_GPIO_SetOutputPin>
  break;
 800d724:	e00d      	b.n	800d742 <USBH_UserProcess1+0x5e>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d726:	4b09      	ldr	r3, [pc, #36]	; (800d74c <USBH_UserProcess1+0x68>)
 800d728:	2202      	movs	r2, #2
 800d72a:	701a      	strb	r2, [r3, #0]
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_13);
 800d72c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d730:	4807      	ldr	r0, [pc, #28]	; (800d750 <USBH_UserProcess1+0x6c>)
 800d732:	f7ff ff53 	bl	800d5dc <LL_GPIO_ResetOutputPin>
  break;
 800d736:	e004      	b.n	800d742 <USBH_UserProcess1+0x5e>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d738:	4b04      	ldr	r3, [pc, #16]	; (800d74c <USBH_UserProcess1+0x68>)
 800d73a:	2201      	movs	r2, #1
 800d73c:	701a      	strb	r2, [r3, #0]
  break;
 800d73e:	e000      	b.n	800d742 <USBH_UserProcess1+0x5e>

  default:
  break;
 800d740:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_2 */
}
 800d742:	bf00      	nop
 800d744:	3708      	adds	r7, #8
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	20000c24 	.word	0x20000c24
 800d750:	40020400 	.word	0x40020400

0800d754 <USBH_UserProcess2>:

static void USBH_UserProcess2  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	460b      	mov	r3, r1
 800d75e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_21 */
  switch(id)
 800d760:	78fb      	ldrb	r3, [r7, #3]
 800d762:	3b01      	subs	r3, #1
 800d764:	2b04      	cmp	r3, #4
 800d766:	d823      	bhi.n	800d7b0 <USBH_UserProcess2+0x5c>
 800d768:	a201      	add	r2, pc, #4	; (adr r2, 800d770 <USBH_UserProcess2+0x1c>)
 800d76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d76e:	bf00      	nop
 800d770:	0800d7b1 	.word	0x0800d7b1
 800d774:	0800d797 	.word	0x0800d797
 800d778:	0800d7b1 	.word	0x0800d7b1
 800d77c:	0800d7a9 	.word	0x0800d7a9
 800d780:	0800d785 	.word	0x0800d785
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d784:	4b0d      	ldr	r3, [pc, #52]	; (800d7bc <USBH_UserProcess2+0x68>)
 800d786:	2203      	movs	r2, #3
 800d788:	701a      	strb	r2, [r3, #0]
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 800d78a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d78e:	480c      	ldr	r0, [pc, #48]	; (800d7c0 <USBH_UserProcess2+0x6c>)
 800d790:	f7ff ff16 	bl	800d5c0 <LL_GPIO_SetOutputPin>
  break;
 800d794:	e00d      	b.n	800d7b2 <USBH_UserProcess2+0x5e>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d796:	4b09      	ldr	r3, [pc, #36]	; (800d7bc <USBH_UserProcess2+0x68>)
 800d798:	2202      	movs	r2, #2
 800d79a:	701a      	strb	r2, [r3, #0]
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_13);
 800d79c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d7a0:	4807      	ldr	r0, [pc, #28]	; (800d7c0 <USBH_UserProcess2+0x6c>)
 800d7a2:	f7ff ff1b 	bl	800d5dc <LL_GPIO_ResetOutputPin>


  break;
 800d7a6:	e004      	b.n	800d7b2 <USBH_UserProcess2+0x5e>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d7a8:	4b04      	ldr	r3, [pc, #16]	; (800d7bc <USBH_UserProcess2+0x68>)
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	701a      	strb	r2, [r3, #0]
  break;
 800d7ae:	e000      	b.n	800d7b2 <USBH_UserProcess2+0x5e>

  default:
  break;
 800d7b0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_21 */
}
 800d7b2:	bf00      	nop
 800d7b4:	3708      	adds	r7, #8
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	20000c24 	.word	0x20000c24
 800d7c0:	40020400 	.word	0x40020400

0800d7c4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b0ae      	sub	sp, #184	; 0xb8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	601a      	str	r2, [r3, #0]
 800d7d4:	605a      	str	r2, [r3, #4]
 800d7d6:	609a      	str	r2, [r3, #8]
 800d7d8:	60da      	str	r2, [r3, #12]
 800d7da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d7dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7e0:	2280      	movs	r2, #128	; 0x80
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f000 fb63 	bl	800deb0 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d7f2:	d152      	bne.n	800d89a <HAL_HCD_MspInit+0xd6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d7f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d7f8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d804:	4618      	mov	r0, r3
 800d806:	f7f7 f9ef 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 800d80a:	4603      	mov	r3, r0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d001      	beq.n	800d814 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 800d810:	f7f3 fb94 	bl	8000f3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d814:	4b56      	ldr	r3, [pc, #344]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d818:	4a55      	ldr	r2, [pc, #340]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d81a:	f043 0301 	orr.w	r3, r3, #1
 800d81e:	6313      	str	r3, [r2, #48]	; 0x30
 800d820:	4b53      	ldr	r3, [pc, #332]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d824:	f003 0301 	and.w	r3, r3, #1
 800d828:	623b      	str	r3, [r7, #32]
 800d82a:	6a3b      	ldr	r3, [r7, #32]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d82c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d830:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d834:	2302      	movs	r3, #2
 800d836:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d83a:	2300      	movs	r3, #0
 800d83c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d840:	2303      	movs	r3, #3
 800d842:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d846:	230a      	movs	r3, #10
 800d848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d84c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d850:	4619      	mov	r1, r3
 800d852:	4848      	ldr	r0, [pc, #288]	; (800d974 <HAL_HCD_MspInit+0x1b0>)
 800d854:	f7f4 fd9e 	bl	8002394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d858:	4b45      	ldr	r3, [pc, #276]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d85c:	4a44      	ldr	r2, [pc, #272]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d85e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d862:	6353      	str	r3, [r2, #52]	; 0x34
 800d864:	4b42      	ldr	r3, [pc, #264]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d86c:	61fb      	str	r3, [r7, #28]
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	4b3f      	ldr	r3, [pc, #252]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d874:	4a3e      	ldr	r2, [pc, #248]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d87a:	6453      	str	r3, [r2, #68]	; 0x44
 800d87c:	4b3c      	ldr	r3, [pc, #240]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d87e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d884:	61bb      	str	r3, [r7, #24]
 800d886:	69bb      	ldr	r3, [r7, #24]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 1);
 800d888:	2201      	movs	r2, #1
 800d88a:	2101      	movs	r1, #1
 800d88c:	2043      	movs	r0, #67	; 0x43
 800d88e:	f7f4 fa77 	bl	8001d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d892:	2043      	movs	r0, #67	; 0x43
 800d894:	f7f4 fa90 	bl	8001db8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d898:	e066      	b.n	800d968 <HAL_HCD_MspInit+0x1a4>
  else if(hcdHandle->Instance==USB_OTG_HS)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4a36      	ldr	r2, [pc, #216]	; (800d978 <HAL_HCD_MspInit+0x1b4>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d161      	bne.n	800d968 <HAL_HCD_MspInit+0x1a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d8a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d8a8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d8b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7f7 f997 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d001      	beq.n	800d8c4 <HAL_HCD_MspInit+0x100>
      Error_Handler();
 800d8c0:	f7f3 fb3c 	bl	8000f3c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d8c4:	4b2a      	ldr	r3, [pc, #168]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8c8:	4a29      	ldr	r2, [pc, #164]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d8ca:	f043 0302 	orr.w	r3, r3, #2
 800d8ce:	6313      	str	r3, [r2, #48]	; 0x30
 800d8d0:	4b27      	ldr	r3, [pc, #156]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8d4:	f003 0302 	and.w	r3, r3, #2
 800d8d8:	617b      	str	r3, [r7, #20]
 800d8da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800d8dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800d8e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8e4:	2302      	movs	r3, #2
 800d8e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8f0:	2303      	movs	r3, #3
 800d8f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d8f6:	230c      	movs	r3, #12
 800d8f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d8fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d900:	4619      	mov	r1, r3
 800d902:	481e      	ldr	r0, [pc, #120]	; (800d97c <HAL_HCD_MspInit+0x1b8>)
 800d904:	f7f4 fd46 	bl	8002394 <HAL_GPIO_Init>
    __HAL_RCC_OTGPHYC_CLK_ENABLE();
 800d908:	4b19      	ldr	r3, [pc, #100]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d90a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d90c:	4a18      	ldr	r2, [pc, #96]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d90e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d912:	6453      	str	r3, [r2, #68]	; 0x44
 800d914:	4b16      	ldr	r3, [pc, #88]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d91c:	613b      	str	r3, [r7, #16]
 800d91e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d920:	4b13      	ldr	r3, [pc, #76]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d924:	4a12      	ldr	r2, [pc, #72]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d926:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d92a:	6313      	str	r3, [r2, #48]	; 0x30
 800d92c:	4b10      	ldr	r3, [pc, #64]	; (800d970 <HAL_HCD_MspInit+0x1ac>)
 800d92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d934:	60fb      	str	r3, [r7, #12]
 800d936:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 1, 0);
 800d938:	2200      	movs	r2, #0
 800d93a:	2101      	movs	r1, #1
 800d93c:	204a      	movs	r0, #74	; 0x4a
 800d93e:	f7f4 fa1f 	bl	8001d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800d942:	204a      	movs	r0, #74	; 0x4a
 800d944:	f7f4 fa38 	bl	8001db8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 1, 0);
 800d948:	2200      	movs	r2, #0
 800d94a:	2101      	movs	r1, #1
 800d94c:	204b      	movs	r0, #75	; 0x4b
 800d94e:	f7f4 fa17 	bl	8001d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800d952:	204b      	movs	r0, #75	; 0x4b
 800d954:	f7f4 fa30 	bl	8001db8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 0);
 800d958:	2200      	movs	r2, #0
 800d95a:	2101      	movs	r1, #1
 800d95c:	204d      	movs	r0, #77	; 0x4d
 800d95e:	f7f4 fa0f 	bl	8001d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d962:	204d      	movs	r0, #77	; 0x4d
 800d964:	f7f4 fa28 	bl	8001db8 <HAL_NVIC_EnableIRQ>
}
 800d968:	bf00      	nop
 800d96a:	37b8      	adds	r7, #184	; 0xb8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	40023800 	.word	0x40023800
 800d974:	40020000 	.word	0x40020000
 800d978:	40040000 	.word	0x40040000
 800d97c:	40020400 	.word	0x40020400

0800d980 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d98e:	4618      	mov	r0, r3
 800d990:	f7fe ffd9 	bl	800c946 <USBH_LL_IncTimer>
}
 800d994:	bf00      	nop
 800d996:	3708      	adds	r7, #8
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7ff f811 	bl	800c9d2 <USBH_LL_Connect>
}
 800d9b0:	bf00      	nop
 800d9b2:	3708      	adds	r7, #8
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7ff f81a 	bl	800ca00 <USBH_LL_Disconnect>
}
 800d9cc:	bf00      	nop
 800d9ce:	3708      	adds	r7, #8
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	460b      	mov	r3, r1
 800d9de:	70fb      	strb	r3, [r7, #3]
 800d9e0:	4613      	mov	r3, r2
 800d9e2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d9e4:	bf00      	nop
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7fe ffcb 	bl	800c99a <USBH_LL_PortEnabled>
}
 800da04:	bf00      	nop
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fe ffcb 	bl	800c9b6 <USBH_LL_PortDisabled>
}
 800da20:	bf00      	nop
 800da22:	3708      	adds	r7, #8
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800da36:	2b01      	cmp	r3, #1
 800da38:	d12d      	bne.n	800da96 <USBH_LL_Init+0x6e>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800da3a:	4a34      	ldr	r2, [pc, #208]	; (800db0c <USBH_LL_Init+0xe4>)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	4a31      	ldr	r2, [pc, #196]	; (800db0c <USBH_LL_Init+0xe4>)
 800da46:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800da4a:	4b30      	ldr	r3, [pc, #192]	; (800db0c <USBH_LL_Init+0xe4>)
 800da4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800da50:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800da52:	4b2e      	ldr	r3, [pc, #184]	; (800db0c <USBH_LL_Init+0xe4>)
 800da54:	220c      	movs	r2, #12
 800da56:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = USB_OTG_SPEED_FULL;
 800da58:	4b2c      	ldr	r3, [pc, #176]	; (800db0c <USBH_LL_Init+0xe4>)
 800da5a:	2203      	movs	r2, #3
 800da5c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800da5e:	4b2b      	ldr	r3, [pc, #172]	; (800db0c <USBH_LL_Init+0xe4>)
 800da60:	2200      	movs	r2, #0
 800da62:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800da64:	4b29      	ldr	r3, [pc, #164]	; (800db0c <USBH_LL_Init+0xe4>)
 800da66:	2202      	movs	r2, #2
 800da68:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800da6a:	4b28      	ldr	r3, [pc, #160]	; (800db0c <USBH_LL_Init+0xe4>)
 800da6c:	2200      	movs	r2, #0
 800da6e:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800da70:	4b26      	ldr	r3, [pc, #152]	; (800db0c <USBH_LL_Init+0xe4>)
 800da72:	2200      	movs	r2, #0
 800da74:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800da76:	4825      	ldr	r0, [pc, #148]	; (800db0c <USBH_LL_Init+0xe4>)
 800da78:	f7f4 fe28 	bl	80026cc <HAL_HCD_Init>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d001      	beq.n	800da86 <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 800da82:	f7f3 fa5b 	bl	8000f3c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800da86:	4821      	ldr	r0, [pc, #132]	; (800db0c <USBH_LL_Init+0xe4>)
 800da88:	f7f5 fa0b 	bl	8002ea2 <HAL_HCD_GetCurrentFrame>
 800da8c:	4603      	mov	r3, r0
 800da8e:	4619      	mov	r1, r3
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f7fe ff49 	bl	800c928 <USBH_LL_SetTimer>
  }
  if (phost->id == HOST_HS) {
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d12f      	bne.n	800db00 <USBH_LL_Init+0xd8>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800daa0:	4a1b      	ldr	r2, [pc, #108]	; (800db10 <USBH_LL_Init+0xe8>)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	4a19      	ldr	r2, [pc, #100]	; (800db10 <USBH_LL_Init+0xe8>)
 800daac:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800dab0:	4b17      	ldr	r3, [pc, #92]	; (800db10 <USBH_LL_Init+0xe8>)
 800dab2:	4a18      	ldr	r2, [pc, #96]	; (800db14 <USBH_LL_Init+0xec>)
 800dab4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 800dab6:	4b16      	ldr	r3, [pc, #88]	; (800db10 <USBH_LL_Init+0xe8>)
 800dab8:	2210      	movs	r2, #16
 800daba:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800dabc:	4b14      	ldr	r3, [pc, #80]	; (800db10 <USBH_LL_Init+0xe8>)
 800dabe:	2200      	movs	r2, #0
 800dac0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800dac2:	4b13      	ldr	r3, [pc, #76]	; (800db10 <USBH_LL_Init+0xe8>)
 800dac4:	2202      	movs	r2, #2
 800dac6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800dac8:	4b11      	ldr	r3, [pc, #68]	; (800db10 <USBH_LL_Init+0xe8>)
 800daca:	2200      	movs	r2, #0
 800dacc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800dace:	4b10      	ldr	r3, [pc, #64]	; (800db10 <USBH_LL_Init+0xe8>)
 800dad0:	2200      	movs	r2, #0
 800dad2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800dad4:	4b0e      	ldr	r3, [pc, #56]	; (800db10 <USBH_LL_Init+0xe8>)
 800dad6:	2200      	movs	r2, #0
 800dad8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 800dada:	4b0d      	ldr	r3, [pc, #52]	; (800db10 <USBH_LL_Init+0xe8>)
 800dadc:	2201      	movs	r2, #1
 800dade:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800dae0:	480b      	ldr	r0, [pc, #44]	; (800db10 <USBH_LL_Init+0xe8>)
 800dae2:	f7f4 fdf3 	bl	80026cc <HAL_HCD_Init>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <USBH_LL_Init+0xc8>
  {
    Error_Handler( );
 800daec:	f7f3 fa26 	bl	8000f3c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800daf0:	4807      	ldr	r0, [pc, #28]	; (800db10 <USBH_LL_Init+0xe8>)
 800daf2:	f7f5 f9d6 	bl	8002ea2 <HAL_HCD_GetCurrentFrame>
 800daf6:	4603      	mov	r3, r0
 800daf8:	4619      	mov	r1, r3
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f7fe ff14 	bl	800c928 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800db00:	2300      	movs	r3, #0
}
 800db02:	4618      	mov	r0, r3
 800db04:	3708      	adds	r7, #8
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	20000c28 	.word	0x20000c28
 800db10:	20000f2c 	.word	0x20000f2c
 800db14:	40040000 	.word	0x40040000

0800db18 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db20:	2300      	movs	r3, #0
 800db22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db24:	2300      	movs	r3, #0
 800db26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db2e:	4618      	mov	r0, r3
 800db30:	f7f5 f941 	bl	8002db6 <HAL_HCD_Start>
 800db34:	4603      	mov	r3, r0
 800db36:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800db38:	7bfb      	ldrb	r3, [r7, #15]
 800db3a:	4618      	mov	r0, r3
 800db3c:	f000 f952 	bl	800dde4 <USBH_Get_USB_Status>
 800db40:	4603      	mov	r3, r0
 800db42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db44:	7bbb      	ldrb	r3, [r7, #14]
}
 800db46:	4618      	mov	r0, r3
 800db48:	3710      	adds	r7, #16
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b084      	sub	sp, #16
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db56:	2300      	movs	r3, #0
 800db58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db5a:	2300      	movs	r3, #0
 800db5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db64:	4618      	mov	r0, r3
 800db66:	f7f5 f949 	bl	8002dfc <HAL_HCD_Stop>
 800db6a:	4603      	mov	r3, r0
 800db6c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800db6e:	7bfb      	ldrb	r3, [r7, #15]
 800db70:	4618      	mov	r0, r3
 800db72:	f000 f937 	bl	800dde4 <USBH_Get_USB_Status>
 800db76:	4603      	mov	r3, r0
 800db78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800db8c:	2301      	movs	r3, #1
 800db8e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db96:	4618      	mov	r0, r3
 800db98:	f7f5 f991 	bl	8002ebe <HAL_HCD_GetCurrentSpeed>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b02      	cmp	r3, #2
 800dba0:	d00c      	beq.n	800dbbc <USBH_LL_GetSpeed+0x38>
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	d80d      	bhi.n	800dbc2 <USBH_LL_GetSpeed+0x3e>
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d002      	beq.n	800dbb0 <USBH_LL_GetSpeed+0x2c>
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d003      	beq.n	800dbb6 <USBH_LL_GetSpeed+0x32>
 800dbae:	e008      	b.n	800dbc2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	73fb      	strb	r3, [r7, #15]
    break;
 800dbb4:	e008      	b.n	800dbc8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	73fb      	strb	r3, [r7, #15]
    break;
 800dbba:	e005      	b.n	800dbc8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dbbc:	2302      	movs	r3, #2
 800dbbe:	73fb      	strb	r3, [r7, #15]
    break;
 800dbc0:	e002      	b.n	800dbc8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	73fb      	strb	r3, [r7, #15]
    break;
 800dbc6:	bf00      	nop
  }
  return  speed;
 800dbc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b084      	sub	sp, #16
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7f5 f924 	bl	8002e36 <HAL_HCD_ResetPort>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dbf2:	7bfb      	ldrb	r3, [r7, #15]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f000 f8f5 	bl	800dde4 <USBH_Get_USB_Status>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	460b      	mov	r3, r1
 800dc12:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc1a:	78fa      	ldrb	r2, [r7, #3]
 800dc1c:	4611      	mov	r1, r2
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7f5 f92b 	bl	8002e7a <HAL_HCD_HC_GetXferCount>
 800dc24:	4603      	mov	r3, r0
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3708      	adds	r7, #8
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dc2e:	b590      	push	{r4, r7, lr}
 800dc30:	b089      	sub	sp, #36	; 0x24
 800dc32:	af04      	add	r7, sp, #16
 800dc34:	6078      	str	r0, [r7, #4]
 800dc36:	4608      	mov	r0, r1
 800dc38:	4611      	mov	r1, r2
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	70fb      	strb	r3, [r7, #3]
 800dc40:	460b      	mov	r3, r1
 800dc42:	70bb      	strb	r3, [r7, #2]
 800dc44:	4613      	mov	r3, r2
 800dc46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800dc56:	787c      	ldrb	r4, [r7, #1]
 800dc58:	78ba      	ldrb	r2, [r7, #2]
 800dc5a:	78f9      	ldrb	r1, [r7, #3]
 800dc5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dc5e:	9302      	str	r3, [sp, #8]
 800dc60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dc64:	9301      	str	r3, [sp, #4]
 800dc66:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	4623      	mov	r3, r4
 800dc6e:	f7f4 fd8f 	bl	8002790 <HAL_HCD_HC_Init>
 800dc72:	4603      	mov	r3, r0
 800dc74:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dc76:	7bfb      	ldrb	r3, [r7, #15]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f000 f8b3 	bl	800dde4 <USBH_Get_USB_Status>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc82:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3714      	adds	r7, #20
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd90      	pop	{r4, r7, pc}

0800dc8c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	460b      	mov	r3, r1
 800dc96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dca6:	78fa      	ldrb	r2, [r7, #3]
 800dca8:	4611      	mov	r1, r2
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7f4 fdff 	bl	80028ae <HAL_HCD_HC_Halt>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dcb4:	7bfb      	ldrb	r3, [r7, #15]
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f000 f894 	bl	800dde4 <USBH_Get_USB_Status>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}

0800dcca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dcca:	b590      	push	{r4, r7, lr}
 800dccc:	b089      	sub	sp, #36	; 0x24
 800dcce:	af04      	add	r7, sp, #16
 800dcd0:	6078      	str	r0, [r7, #4]
 800dcd2:	4608      	mov	r0, r1
 800dcd4:	4611      	mov	r1, r2
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	4603      	mov	r3, r0
 800dcda:	70fb      	strb	r3, [r7, #3]
 800dcdc:	460b      	mov	r3, r1
 800dcde:	70bb      	strb	r3, [r7, #2]
 800dce0:	4613      	mov	r3, r2
 800dce2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dce4:	2300      	movs	r3, #0
 800dce6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dce8:	2300      	movs	r3, #0
 800dcea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800dcf2:	787c      	ldrb	r4, [r7, #1]
 800dcf4:	78ba      	ldrb	r2, [r7, #2]
 800dcf6:	78f9      	ldrb	r1, [r7, #3]
 800dcf8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dcfc:	9303      	str	r3, [sp, #12]
 800dcfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd00:	9302      	str	r3, [sp, #8]
 800dd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd04:	9301      	str	r3, [sp, #4]
 800dd06:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd0a:	9300      	str	r3, [sp, #0]
 800dd0c:	4623      	mov	r3, r4
 800dd0e:	f7f4 fdf1 	bl	80028f4 <HAL_HCD_HC_SubmitRequest>
 800dd12:	4603      	mov	r3, r0
 800dd14:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800dd16:	7bfb      	ldrb	r3, [r7, #15]
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f000 f863 	bl	800dde4 <USBH_Get_USB_Status>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd22:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3714      	adds	r7, #20
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd90      	pop	{r4, r7, pc}

0800dd2c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b082      	sub	sp, #8
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	460b      	mov	r3, r1
 800dd36:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd3e:	78fa      	ldrb	r2, [r7, #3]
 800dd40:	4611      	mov	r1, r2
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7f5 f885 	bl	8002e52 <HAL_HCD_HC_GetURBState>
 800dd48:	4603      	mov	r3, r0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b082      	sub	sp, #8
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 800dd5e:	20c8      	movs	r0, #200	; 0xc8
 800dd60:	f7f3 ff32 	bl	8001bc8 <HAL_Delay>
  return USBH_OK;
 800dd64:	2300      	movs	r3, #0
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3708      	adds	r7, #8
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800dd6e:	b480      	push	{r7}
 800dd70:	b085      	sub	sp, #20
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
 800dd76:	460b      	mov	r3, r1
 800dd78:	70fb      	strb	r3, [r7, #3]
 800dd7a:	4613      	mov	r3, r2
 800dd7c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd84:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800dd86:	78fb      	ldrb	r3, [r7, #3]
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	212c      	movs	r1, #44	; 0x2c
 800dd8c:	fb01 f303 	mul.w	r3, r1, r3
 800dd90:	4413      	add	r3, r2
 800dd92:	333b      	adds	r3, #59	; 0x3b
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d009      	beq.n	800ddae <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800dd9a:	78fb      	ldrb	r3, [r7, #3]
 800dd9c:	68fa      	ldr	r2, [r7, #12]
 800dd9e:	212c      	movs	r1, #44	; 0x2c
 800dda0:	fb01 f303 	mul.w	r3, r1, r3
 800dda4:	4413      	add	r3, r2
 800dda6:	3354      	adds	r3, #84	; 0x54
 800dda8:	78ba      	ldrb	r2, [r7, #2]
 800ddaa:	701a      	strb	r2, [r3, #0]
 800ddac:	e008      	b.n	800ddc0 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ddae:	78fb      	ldrb	r3, [r7, #3]
 800ddb0:	68fa      	ldr	r2, [r7, #12]
 800ddb2:	212c      	movs	r1, #44	; 0x2c
 800ddb4:	fb01 f303 	mul.w	r3, r1, r3
 800ddb8:	4413      	add	r3, r2
 800ddba:	3355      	adds	r3, #85	; 0x55
 800ddbc:	78ba      	ldrb	r2, [r7, #2]
 800ddbe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ddc0:	2300      	movs	r3, #0
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3714      	adds	r7, #20
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr

0800ddce <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b082      	sub	sp, #8
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7f3 fef6 	bl	8001bc8 <HAL_Delay>
}
 800dddc:	bf00      	nop
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	4603      	mov	r3, r0
 800ddec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ddf2:	79fb      	ldrb	r3, [r7, #7]
 800ddf4:	2b03      	cmp	r3, #3
 800ddf6:	d817      	bhi.n	800de28 <USBH_Get_USB_Status+0x44>
 800ddf8:	a201      	add	r2, pc, #4	; (adr r2, 800de00 <USBH_Get_USB_Status+0x1c>)
 800ddfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddfe:	bf00      	nop
 800de00:	0800de11 	.word	0x0800de11
 800de04:	0800de17 	.word	0x0800de17
 800de08:	0800de1d 	.word	0x0800de1d
 800de0c:	0800de23 	.word	0x0800de23
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800de10:	2300      	movs	r3, #0
 800de12:	73fb      	strb	r3, [r7, #15]
    break;
 800de14:	e00b      	b.n	800de2e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800de16:	2302      	movs	r3, #2
 800de18:	73fb      	strb	r3, [r7, #15]
    break;
 800de1a:	e008      	b.n	800de2e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800de1c:	2301      	movs	r3, #1
 800de1e:	73fb      	strb	r3, [r7, #15]
    break;
 800de20:	e005      	b.n	800de2e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800de22:	2302      	movs	r3, #2
 800de24:	73fb      	strb	r3, [r7, #15]
    break;
 800de26:	e002      	b.n	800de2e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800de28:	2302      	movs	r3, #2
 800de2a:	73fb      	strb	r3, [r7, #15]
    break;
 800de2c:	bf00      	nop
  }
  return usb_status;
 800de2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3714      	adds	r7, #20
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <__errno>:
 800de3c:	4b01      	ldr	r3, [pc, #4]	; (800de44 <__errno+0x8>)
 800de3e:	6818      	ldr	r0, [r3, #0]
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop
 800de44:	20000088 	.word	0x20000088

0800de48 <__libc_init_array>:
 800de48:	b570      	push	{r4, r5, r6, lr}
 800de4a:	4d0d      	ldr	r5, [pc, #52]	; (800de80 <__libc_init_array+0x38>)
 800de4c:	4c0d      	ldr	r4, [pc, #52]	; (800de84 <__libc_init_array+0x3c>)
 800de4e:	1b64      	subs	r4, r4, r5
 800de50:	10a4      	asrs	r4, r4, #2
 800de52:	2600      	movs	r6, #0
 800de54:	42a6      	cmp	r6, r4
 800de56:	d109      	bne.n	800de6c <__libc_init_array+0x24>
 800de58:	4d0b      	ldr	r5, [pc, #44]	; (800de88 <__libc_init_array+0x40>)
 800de5a:	4c0c      	ldr	r4, [pc, #48]	; (800de8c <__libc_init_array+0x44>)
 800de5c:	f000 f92e 	bl	800e0bc <_init>
 800de60:	1b64      	subs	r4, r4, r5
 800de62:	10a4      	asrs	r4, r4, #2
 800de64:	2600      	movs	r6, #0
 800de66:	42a6      	cmp	r6, r4
 800de68:	d105      	bne.n	800de76 <__libc_init_array+0x2e>
 800de6a:	bd70      	pop	{r4, r5, r6, pc}
 800de6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800de70:	4798      	blx	r3
 800de72:	3601      	adds	r6, #1
 800de74:	e7ee      	b.n	800de54 <__libc_init_array+0xc>
 800de76:	f855 3b04 	ldr.w	r3, [r5], #4
 800de7a:	4798      	blx	r3
 800de7c:	3601      	adds	r6, #1
 800de7e:	e7f2      	b.n	800de66 <__libc_init_array+0x1e>
 800de80:	0800e450 	.word	0x0800e450
 800de84:	0800e450 	.word	0x0800e450
 800de88:	0800e450 	.word	0x0800e450
 800de8c:	0800e454 	.word	0x0800e454

0800de90 <malloc>:
 800de90:	4b02      	ldr	r3, [pc, #8]	; (800de9c <malloc+0xc>)
 800de92:	4601      	mov	r1, r0
 800de94:	6818      	ldr	r0, [r3, #0]
 800de96:	f000 b87f 	b.w	800df98 <_malloc_r>
 800de9a:	bf00      	nop
 800de9c:	20000088 	.word	0x20000088

0800dea0 <free>:
 800dea0:	4b02      	ldr	r3, [pc, #8]	; (800deac <free+0xc>)
 800dea2:	4601      	mov	r1, r0
 800dea4:	6818      	ldr	r0, [r3, #0]
 800dea6:	f000 b80b 	b.w	800dec0 <_free_r>
 800deaa:	bf00      	nop
 800deac:	20000088 	.word	0x20000088

0800deb0 <memset>:
 800deb0:	4402      	add	r2, r0
 800deb2:	4603      	mov	r3, r0
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d100      	bne.n	800deba <memset+0xa>
 800deb8:	4770      	bx	lr
 800deba:	f803 1b01 	strb.w	r1, [r3], #1
 800debe:	e7f9      	b.n	800deb4 <memset+0x4>

0800dec0 <_free_r>:
 800dec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dec2:	2900      	cmp	r1, #0
 800dec4:	d044      	beq.n	800df50 <_free_r+0x90>
 800dec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deca:	9001      	str	r0, [sp, #4]
 800decc:	2b00      	cmp	r3, #0
 800dece:	f1a1 0404 	sub.w	r4, r1, #4
 800ded2:	bfb8      	it	lt
 800ded4:	18e4      	addlt	r4, r4, r3
 800ded6:	f000 f8e3 	bl	800e0a0 <__malloc_lock>
 800deda:	4a1e      	ldr	r2, [pc, #120]	; (800df54 <_free_r+0x94>)
 800dedc:	9801      	ldr	r0, [sp, #4]
 800dede:	6813      	ldr	r3, [r2, #0]
 800dee0:	b933      	cbnz	r3, 800def0 <_free_r+0x30>
 800dee2:	6063      	str	r3, [r4, #4]
 800dee4:	6014      	str	r4, [r2, #0]
 800dee6:	b003      	add	sp, #12
 800dee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800deec:	f000 b8de 	b.w	800e0ac <__malloc_unlock>
 800def0:	42a3      	cmp	r3, r4
 800def2:	d908      	bls.n	800df06 <_free_r+0x46>
 800def4:	6825      	ldr	r5, [r4, #0]
 800def6:	1961      	adds	r1, r4, r5
 800def8:	428b      	cmp	r3, r1
 800defa:	bf01      	itttt	eq
 800defc:	6819      	ldreq	r1, [r3, #0]
 800defe:	685b      	ldreq	r3, [r3, #4]
 800df00:	1949      	addeq	r1, r1, r5
 800df02:	6021      	streq	r1, [r4, #0]
 800df04:	e7ed      	b.n	800dee2 <_free_r+0x22>
 800df06:	461a      	mov	r2, r3
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	b10b      	cbz	r3, 800df10 <_free_r+0x50>
 800df0c:	42a3      	cmp	r3, r4
 800df0e:	d9fa      	bls.n	800df06 <_free_r+0x46>
 800df10:	6811      	ldr	r1, [r2, #0]
 800df12:	1855      	adds	r5, r2, r1
 800df14:	42a5      	cmp	r5, r4
 800df16:	d10b      	bne.n	800df30 <_free_r+0x70>
 800df18:	6824      	ldr	r4, [r4, #0]
 800df1a:	4421      	add	r1, r4
 800df1c:	1854      	adds	r4, r2, r1
 800df1e:	42a3      	cmp	r3, r4
 800df20:	6011      	str	r1, [r2, #0]
 800df22:	d1e0      	bne.n	800dee6 <_free_r+0x26>
 800df24:	681c      	ldr	r4, [r3, #0]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	6053      	str	r3, [r2, #4]
 800df2a:	4421      	add	r1, r4
 800df2c:	6011      	str	r1, [r2, #0]
 800df2e:	e7da      	b.n	800dee6 <_free_r+0x26>
 800df30:	d902      	bls.n	800df38 <_free_r+0x78>
 800df32:	230c      	movs	r3, #12
 800df34:	6003      	str	r3, [r0, #0]
 800df36:	e7d6      	b.n	800dee6 <_free_r+0x26>
 800df38:	6825      	ldr	r5, [r4, #0]
 800df3a:	1961      	adds	r1, r4, r5
 800df3c:	428b      	cmp	r3, r1
 800df3e:	bf04      	itt	eq
 800df40:	6819      	ldreq	r1, [r3, #0]
 800df42:	685b      	ldreq	r3, [r3, #4]
 800df44:	6063      	str	r3, [r4, #4]
 800df46:	bf04      	itt	eq
 800df48:	1949      	addeq	r1, r1, r5
 800df4a:	6021      	streq	r1, [r4, #0]
 800df4c:	6054      	str	r4, [r2, #4]
 800df4e:	e7ca      	b.n	800dee6 <_free_r+0x26>
 800df50:	b003      	add	sp, #12
 800df52:	bd30      	pop	{r4, r5, pc}
 800df54:	20001230 	.word	0x20001230

0800df58 <sbrk_aligned>:
 800df58:	b570      	push	{r4, r5, r6, lr}
 800df5a:	4e0e      	ldr	r6, [pc, #56]	; (800df94 <sbrk_aligned+0x3c>)
 800df5c:	460c      	mov	r4, r1
 800df5e:	6831      	ldr	r1, [r6, #0]
 800df60:	4605      	mov	r5, r0
 800df62:	b911      	cbnz	r1, 800df6a <sbrk_aligned+0x12>
 800df64:	f000 f88c 	bl	800e080 <_sbrk_r>
 800df68:	6030      	str	r0, [r6, #0]
 800df6a:	4621      	mov	r1, r4
 800df6c:	4628      	mov	r0, r5
 800df6e:	f000 f887 	bl	800e080 <_sbrk_r>
 800df72:	1c43      	adds	r3, r0, #1
 800df74:	d00a      	beq.n	800df8c <sbrk_aligned+0x34>
 800df76:	1cc4      	adds	r4, r0, #3
 800df78:	f024 0403 	bic.w	r4, r4, #3
 800df7c:	42a0      	cmp	r0, r4
 800df7e:	d007      	beq.n	800df90 <sbrk_aligned+0x38>
 800df80:	1a21      	subs	r1, r4, r0
 800df82:	4628      	mov	r0, r5
 800df84:	f000 f87c 	bl	800e080 <_sbrk_r>
 800df88:	3001      	adds	r0, #1
 800df8a:	d101      	bne.n	800df90 <sbrk_aligned+0x38>
 800df8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800df90:	4620      	mov	r0, r4
 800df92:	bd70      	pop	{r4, r5, r6, pc}
 800df94:	20001234 	.word	0x20001234

0800df98 <_malloc_r>:
 800df98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df9c:	1ccd      	adds	r5, r1, #3
 800df9e:	f025 0503 	bic.w	r5, r5, #3
 800dfa2:	3508      	adds	r5, #8
 800dfa4:	2d0c      	cmp	r5, #12
 800dfa6:	bf38      	it	cc
 800dfa8:	250c      	movcc	r5, #12
 800dfaa:	2d00      	cmp	r5, #0
 800dfac:	4607      	mov	r7, r0
 800dfae:	db01      	blt.n	800dfb4 <_malloc_r+0x1c>
 800dfb0:	42a9      	cmp	r1, r5
 800dfb2:	d905      	bls.n	800dfc0 <_malloc_r+0x28>
 800dfb4:	230c      	movs	r3, #12
 800dfb6:	603b      	str	r3, [r7, #0]
 800dfb8:	2600      	movs	r6, #0
 800dfba:	4630      	mov	r0, r6
 800dfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfc0:	4e2e      	ldr	r6, [pc, #184]	; (800e07c <_malloc_r+0xe4>)
 800dfc2:	f000 f86d 	bl	800e0a0 <__malloc_lock>
 800dfc6:	6833      	ldr	r3, [r6, #0]
 800dfc8:	461c      	mov	r4, r3
 800dfca:	bb34      	cbnz	r4, 800e01a <_malloc_r+0x82>
 800dfcc:	4629      	mov	r1, r5
 800dfce:	4638      	mov	r0, r7
 800dfd0:	f7ff ffc2 	bl	800df58 <sbrk_aligned>
 800dfd4:	1c43      	adds	r3, r0, #1
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	d14d      	bne.n	800e076 <_malloc_r+0xde>
 800dfda:	6834      	ldr	r4, [r6, #0]
 800dfdc:	4626      	mov	r6, r4
 800dfde:	2e00      	cmp	r6, #0
 800dfe0:	d140      	bne.n	800e064 <_malloc_r+0xcc>
 800dfe2:	6823      	ldr	r3, [r4, #0]
 800dfe4:	4631      	mov	r1, r6
 800dfe6:	4638      	mov	r0, r7
 800dfe8:	eb04 0803 	add.w	r8, r4, r3
 800dfec:	f000 f848 	bl	800e080 <_sbrk_r>
 800dff0:	4580      	cmp	r8, r0
 800dff2:	d13a      	bne.n	800e06a <_malloc_r+0xd2>
 800dff4:	6821      	ldr	r1, [r4, #0]
 800dff6:	3503      	adds	r5, #3
 800dff8:	1a6d      	subs	r5, r5, r1
 800dffa:	f025 0503 	bic.w	r5, r5, #3
 800dffe:	3508      	adds	r5, #8
 800e000:	2d0c      	cmp	r5, #12
 800e002:	bf38      	it	cc
 800e004:	250c      	movcc	r5, #12
 800e006:	4629      	mov	r1, r5
 800e008:	4638      	mov	r0, r7
 800e00a:	f7ff ffa5 	bl	800df58 <sbrk_aligned>
 800e00e:	3001      	adds	r0, #1
 800e010:	d02b      	beq.n	800e06a <_malloc_r+0xd2>
 800e012:	6823      	ldr	r3, [r4, #0]
 800e014:	442b      	add	r3, r5
 800e016:	6023      	str	r3, [r4, #0]
 800e018:	e00e      	b.n	800e038 <_malloc_r+0xa0>
 800e01a:	6822      	ldr	r2, [r4, #0]
 800e01c:	1b52      	subs	r2, r2, r5
 800e01e:	d41e      	bmi.n	800e05e <_malloc_r+0xc6>
 800e020:	2a0b      	cmp	r2, #11
 800e022:	d916      	bls.n	800e052 <_malloc_r+0xba>
 800e024:	1961      	adds	r1, r4, r5
 800e026:	42a3      	cmp	r3, r4
 800e028:	6025      	str	r5, [r4, #0]
 800e02a:	bf18      	it	ne
 800e02c:	6059      	strne	r1, [r3, #4]
 800e02e:	6863      	ldr	r3, [r4, #4]
 800e030:	bf08      	it	eq
 800e032:	6031      	streq	r1, [r6, #0]
 800e034:	5162      	str	r2, [r4, r5]
 800e036:	604b      	str	r3, [r1, #4]
 800e038:	4638      	mov	r0, r7
 800e03a:	f104 060b 	add.w	r6, r4, #11
 800e03e:	f000 f835 	bl	800e0ac <__malloc_unlock>
 800e042:	f026 0607 	bic.w	r6, r6, #7
 800e046:	1d23      	adds	r3, r4, #4
 800e048:	1af2      	subs	r2, r6, r3
 800e04a:	d0b6      	beq.n	800dfba <_malloc_r+0x22>
 800e04c:	1b9b      	subs	r3, r3, r6
 800e04e:	50a3      	str	r3, [r4, r2]
 800e050:	e7b3      	b.n	800dfba <_malloc_r+0x22>
 800e052:	6862      	ldr	r2, [r4, #4]
 800e054:	42a3      	cmp	r3, r4
 800e056:	bf0c      	ite	eq
 800e058:	6032      	streq	r2, [r6, #0]
 800e05a:	605a      	strne	r2, [r3, #4]
 800e05c:	e7ec      	b.n	800e038 <_malloc_r+0xa0>
 800e05e:	4623      	mov	r3, r4
 800e060:	6864      	ldr	r4, [r4, #4]
 800e062:	e7b2      	b.n	800dfca <_malloc_r+0x32>
 800e064:	4634      	mov	r4, r6
 800e066:	6876      	ldr	r6, [r6, #4]
 800e068:	e7b9      	b.n	800dfde <_malloc_r+0x46>
 800e06a:	230c      	movs	r3, #12
 800e06c:	603b      	str	r3, [r7, #0]
 800e06e:	4638      	mov	r0, r7
 800e070:	f000 f81c 	bl	800e0ac <__malloc_unlock>
 800e074:	e7a1      	b.n	800dfba <_malloc_r+0x22>
 800e076:	6025      	str	r5, [r4, #0]
 800e078:	e7de      	b.n	800e038 <_malloc_r+0xa0>
 800e07a:	bf00      	nop
 800e07c:	20001230 	.word	0x20001230

0800e080 <_sbrk_r>:
 800e080:	b538      	push	{r3, r4, r5, lr}
 800e082:	4d06      	ldr	r5, [pc, #24]	; (800e09c <_sbrk_r+0x1c>)
 800e084:	2300      	movs	r3, #0
 800e086:	4604      	mov	r4, r0
 800e088:	4608      	mov	r0, r1
 800e08a:	602b      	str	r3, [r5, #0]
 800e08c:	f7f3 fa1e 	bl	80014cc <_sbrk>
 800e090:	1c43      	adds	r3, r0, #1
 800e092:	d102      	bne.n	800e09a <_sbrk_r+0x1a>
 800e094:	682b      	ldr	r3, [r5, #0]
 800e096:	b103      	cbz	r3, 800e09a <_sbrk_r+0x1a>
 800e098:	6023      	str	r3, [r4, #0]
 800e09a:	bd38      	pop	{r3, r4, r5, pc}
 800e09c:	20001238 	.word	0x20001238

0800e0a0 <__malloc_lock>:
 800e0a0:	4801      	ldr	r0, [pc, #4]	; (800e0a8 <__malloc_lock+0x8>)
 800e0a2:	f000 b809 	b.w	800e0b8 <__retarget_lock_acquire_recursive>
 800e0a6:	bf00      	nop
 800e0a8:	2000123c 	.word	0x2000123c

0800e0ac <__malloc_unlock>:
 800e0ac:	4801      	ldr	r0, [pc, #4]	; (800e0b4 <__malloc_unlock+0x8>)
 800e0ae:	f000 b804 	b.w	800e0ba <__retarget_lock_release_recursive>
 800e0b2:	bf00      	nop
 800e0b4:	2000123c 	.word	0x2000123c

0800e0b8 <__retarget_lock_acquire_recursive>:
 800e0b8:	4770      	bx	lr

0800e0ba <__retarget_lock_release_recursive>:
 800e0ba:	4770      	bx	lr

0800e0bc <_init>:
 800e0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0be:	bf00      	nop
 800e0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0c2:	bc08      	pop	{r3}
 800e0c4:	469e      	mov	lr, r3
 800e0c6:	4770      	bx	lr

0800e0c8 <_fini>:
 800e0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ca:	bf00      	nop
 800e0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0ce:	bc08      	pop	{r3}
 800e0d0:	469e      	mov	lr, r3
 800e0d2:	4770      	bx	lr
