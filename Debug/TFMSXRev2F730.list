
TFMSXRev2F730.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ded8  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  0800e0b8  0800e0b8  0001e0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e428  0800e428  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e428  0800e428  0001e428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e430  0800e430  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e430  0800e430  0001e430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e434  0800e434  0001e434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800e438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd4  200000ec  0800e524  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  200010c0  0800e524  000210c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e341  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000721b  00000000  00000000  0004e45d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c68  00000000  00000000  00055678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001998  00000000  00000000  000572e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eaf8  00000000  00000000  00058c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d288  00000000  00000000  00087770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f673c  00000000  00000000  000b49f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ab134  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000740c  00000000  00000000  001ab184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000ec 	.word	0x200000ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e0a0 	.word	0x0800e0a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f0 	.word	0x200000f0
 800021c:	0800e0a0 	.word	0x0800e0a0

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800052a:	463b      	mov	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_DAC_Init+0x4c>)
 8000534:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <MX_DAC_Init+0x50>)
 8000536:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <MX_DAC_Init+0x4c>)
 800053a:	f001 fc5b 	bl	8001df4 <HAL_DAC_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000544:	f000 fcf8 	bl	8000f38 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000548:	2300      	movs	r3, #0
 800054a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	4619      	mov	r1, r3
 8000556:	4806      	ldr	r0, [pc, #24]	; (8000570 <MX_DAC_Init+0x4c>)
 8000558:	f001 fcd2 	bl	8001f00 <HAL_DAC_ConfigChannel>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000562:	f000 fce9 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000108 	.word	0x20000108
 8000574:	40007400 	.word	0x40007400

08000578 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a19      	ldr	r2, [pc, #100]	; (80005fc <HAL_DAC_MspInit+0x84>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d12b      	bne.n	80005f2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <HAL_DAC_MspInit+0x88>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059e:	4a18      	ldr	r2, [pc, #96]	; (8000600 <HAL_DAC_MspInit+0x88>)
 80005a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80005a4:	6413      	str	r3, [r2, #64]	; 0x40
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_DAC_MspInit+0x88>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <HAL_DAC_MspInit+0x88>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <HAL_DAC_MspInit+0x88>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <HAL_DAC_MspInit+0x88>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005ca:	2310      	movs	r3, #16
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ce:	2303      	movs	r3, #3
 80005d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <HAL_DAC_MspInit+0x8c>)
 80005de:	f001 fee9 	bl	80023b4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2102      	movs	r1, #2
 80005e6:	2036      	movs	r0, #54	; 0x36
 80005e8:	f001 fbda 	bl	8001da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005ec:	2036      	movs	r0, #54	; 0x36
 80005ee:	f001 fbf3 	bl	8001dd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	; 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40007400 	.word	0x40007400
 8000600:	40023800 	.word	0x40023800
 8000604:	40020000 	.word	0x40020000

08000608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <__NVIC_GetPriorityGrouping+0x18>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	0a1b      	lsrs	r3, r3, #8
 8000612:	f003 0307 	and.w	r3, r3, #7
}
 8000616:	4618      	mov	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	db0a      	blt.n	800064e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	b2da      	uxtb	r2, r3
 800063c:	490c      	ldr	r1, [pc, #48]	; (8000670 <__NVIC_SetPriority+0x4c>)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	0112      	lsls	r2, r2, #4
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	440b      	add	r3, r1
 8000648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800064c:	e00a      	b.n	8000664 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4908      	ldr	r1, [pc, #32]	; (8000674 <__NVIC_SetPriority+0x50>)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f003 030f 	and.w	r3, r3, #15
 800065a:	3b04      	subs	r3, #4
 800065c:	0112      	lsls	r2, r2, #4
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	440b      	add	r3, r1
 8000662:	761a      	strb	r2, [r3, #24]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000e100 	.word	0xe000e100
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000678:	b480      	push	{r7}
 800067a:	b089      	sub	sp, #36	; 0x24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	f1c3 0307 	rsb	r3, r3, #7
 8000692:	2b04      	cmp	r3, #4
 8000694:	bf28      	it	cs
 8000696:	2304      	movcs	r3, #4
 8000698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	3304      	adds	r3, #4
 800069e:	2b06      	cmp	r3, #6
 80006a0:	d902      	bls.n	80006a8 <NVIC_EncodePriority+0x30>
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3b03      	subs	r3, #3
 80006a6:	e000      	b.n	80006aa <NVIC_EncodePriority+0x32>
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	43da      	mvns	r2, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	401a      	ands	r2, r3
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	43d9      	mvns	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	4313      	orrs	r3, r2
         );
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3724      	adds	r7, #36	; 0x24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
	...

080006e0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <LL_SYSCFG_SetEXTISource+0x58>)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	3302      	adds	r3, #2
 80006f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	0c1b      	lsrs	r3, r3, #16
 80006fa:	43db      	mvns	r3, r3
 80006fc:	ea02 0103 	and.w	r1, r2, r3
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	0c1b      	lsrs	r3, r3, #16
 8000704:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	fa93 f3a3 	rbit	r3, r3
 800070c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	fab3 f383 	clz	r3, r3
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	fa03 f202 	lsl.w	r2, r3, r2
 800071e:	4806      	ldr	r0, [pc, #24]	; (8000738 <LL_SYSCFG_SetEXTISource+0x58>)
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	430a      	orrs	r2, r1
 8000726:	3302      	adds	r3, #2
 8000728:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	40013800 	.word	0x40013800

0800073c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	fa93 f3a3 	rbit	r3, r3
 8000756:	613b      	str	r3, [r7, #16]
  return result;
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	fab3 f383 	clz	r3, r3
 800075e:	b2db      	uxtb	r3, r3
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	2103      	movs	r1, #3
 8000764:	fa01 f303 	lsl.w	r3, r1, r3
 8000768:	43db      	mvns	r3, r3
 800076a:	401a      	ands	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	fa93 f3a3 	rbit	r3, r3
 8000776:	61bb      	str	r3, [r7, #24]
  return result;
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	fab3 f383 	clz	r3, r3
 800077e:	b2db      	uxtb	r3, r3
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	fa01 f303 	lsl.w	r3, r1, r3
 8000788:	431a      	orrs	r2, r3
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	601a      	str	r2, [r3, #0]
}
 800078e:	bf00      	nop
 8000790:	3724      	adds	r7, #36	; 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800079a:	b480      	push	{r7}
 800079c:	b089      	sub	sp, #36	; 0x24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	60f8      	str	r0, [r7, #12]
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	68da      	ldr	r2, [r3, #12]
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	fa93 f3a3 	rbit	r3, r3
 80007b4:	613b      	str	r3, [r7, #16]
  return result;
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	fab3 f383 	clz	r3, r3
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	2103      	movs	r1, #3
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	401a      	ands	r2, r3
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	fa93 f3a3 	rbit	r3, r3
 80007d4:	61bb      	str	r3, [r7, #24]
  return result;
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	fab3 f383 	clz	r3, r3
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	6879      	ldr	r1, [r7, #4]
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	431a      	orrs	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	60da      	str	r2, [r3, #12]
}
 80007ec:	bf00      	nop
 80007ee:	3724      	adds	r7, #36	; 0x24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	683a      	ldr	r2, [r7, #0]
 8000806:	619a      	str	r2, [r3, #24]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	041a      	lsls	r2, r3, #16
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	619a      	str	r2, [r3, #24]
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800083e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000840:	4907      	ldr	r1, [pc, #28]	; (8000860 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4313      	orrs	r3, r2
 8000846:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800084a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4013      	ands	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000852:	68fb      	ldr	r3, [r7, #12]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	40023800 	.word	0x40023800

08000864 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800086a:	f107 0318 	add.w	r3, r7, #24
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
 8000882:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000884:	2004      	movs	r0, #4
 8000886:	f7ff ffd5 	bl	8000834 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800088a:	2080      	movs	r0, #128	; 0x80
 800088c:	f7ff ffd2 	bl	8000834 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff ffcf 	bl	8000834 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000896:	2002      	movs	r0, #2
 8000898:	f7ff ffcc 	bl	8000834 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800089c:	2008      	movs	r0, #8
 800089e:	f7ff ffc9 	bl	8000834 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80008a2:	2101      	movs	r1, #1
 80008a4:	48bb      	ldr	r0, [pc, #748]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008a6:	f7ff ffb5 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 80008aa:	2102      	movs	r1, #2
 80008ac:	48b9      	ldr	r0, [pc, #740]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008ae:	f7ff ffb1 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_2);
 80008b2:	2104      	movs	r1, #4
 80008b4:	48b7      	ldr	r0, [pc, #732]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008b6:	f7ff ffad 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 80008ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008be:	48b5      	ldr	r0, [pc, #724]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008c0:	f7ff ff9a 	bl	80007f8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80008c4:	2108      	movs	r1, #8
 80008c6:	48b3      	ldr	r0, [pc, #716]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008c8:	f7ff ffa4 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 80008cc:	2110      	movs	r1, #16
 80008ce:	48b1      	ldr	r0, [pc, #708]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008d0:	f7ff ffa0 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80008d4:	2120      	movs	r1, #32
 80008d6:	48af      	ldr	r0, [pc, #700]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008d8:	f7ff ff9c 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	48ad      	ldr	r0, [pc, #692]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008e0:	f7ff ff98 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_7);
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	48ab      	ldr	r0, [pc, #684]	; (8000b94 <MX_GPIO_Init+0x330>)
 80008e8:	f7ff ff94 	bl	8000814 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80008ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	48a6      	ldr	r0, [pc, #664]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000900:	f006 f9b2 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000904:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000908:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000912:	463b      	mov	r3, r7
 8000914:	4619      	mov	r1, r3
 8000916:	48a0      	ldr	r0, [pc, #640]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000918:	f006 f9a6 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800091c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000920:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	463b      	mov	r3, r7
 800092c:	4619      	mov	r1, r3
 800092e:	489a      	ldr	r0, [pc, #616]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000930:	f006 f99a 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000934:	2302      	movs	r3, #2
 8000936:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000940:	463b      	mov	r3, r7
 8000942:	4619      	mov	r1, r3
 8000944:	4894      	ldr	r0, [pc, #592]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000946:	f006 f98f 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800094a:	2304      	movs	r3, #4
 800094c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	463b      	mov	r3, r7
 8000958:	4619      	mov	r1, r3
 800095a:	488f      	ldr	r0, [pc, #572]	; (8000b98 <MX_GPIO_Init+0x334>)
 800095c:	f006 f984 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000960:	2301      	movs	r3, #1
 8000962:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	488a      	ldr	r0, [pc, #552]	; (8000b9c <MX_GPIO_Init+0x338>)
 8000972:	f006 f979 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000976:	2302      	movs	r3, #2
 8000978:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	463b      	mov	r3, r7
 8000984:	4619      	mov	r1, r3
 8000986:	4885      	ldr	r0, [pc, #532]	; (8000b9c <MX_GPIO_Init+0x338>)
 8000988:	f006 f96e 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800098c:	2304      	movs	r3, #4
 800098e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	487f      	ldr	r0, [pc, #508]	; (8000b9c <MX_GPIO_Init+0x338>)
 800099e:	f006 f963 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80009a2:	2308      	movs	r3, #8
 80009a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	487a      	ldr	r0, [pc, #488]	; (8000b9c <MX_GPIO_Init+0x338>)
 80009b4:	f006 f958 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80009b8:	2320      	movs	r3, #32
 80009ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4874      	ldr	r0, [pc, #464]	; (8000b9c <MX_GPIO_Init+0x338>)
 80009ca:	f006 f94d 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80009ce:	2340      	movs	r3, #64	; 0x40
 80009d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	463b      	mov	r3, r7
 80009dc:	4619      	mov	r1, r3
 80009de:	486f      	ldr	r0, [pc, #444]	; (8000b9c <MX_GPIO_Init+0x338>)
 80009e0:	f006 f942 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	463b      	mov	r3, r7
 80009f2:	4619      	mov	r1, r3
 80009f4:	4869      	ldr	r0, [pc, #420]	; (8000b9c <MX_GPIO_Init+0x338>)
 80009f6:	f006 f937 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80009fa:	2301      	movs	r3, #1
 80009fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009fe:	2301      	movs	r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4619      	mov	r1, r3
 8000a12:	4860      	ldr	r0, [pc, #384]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000a14:	f006 f928 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4858      	ldr	r0, [pc, #352]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000a32:	f006 f919 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000a36:	2304      	movs	r3, #4
 8000a38:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4851      	ldr	r0, [pc, #324]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000a50:	f006 f90a 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a58:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	484b      	ldr	r0, [pc, #300]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000a68:	f006 f8fe 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000a6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4845      	ldr	r0, [pc, #276]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000a80:	f006 f8f2 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a88:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	483d      	ldr	r0, [pc, #244]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000aa0:	f006 f8e2 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000aa4:	2340      	movs	r3, #64	; 0x40
 8000aa6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4838      	ldr	r0, [pc, #224]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000ab6:	f006 f8d7 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4833      	ldr	r0, [pc, #204]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000acc:	f006 f8cc 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	482d      	ldr	r0, [pc, #180]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000ae4:	f006 f8c0 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	463b      	mov	r3, r7
 8000af8:	4619      	mov	r1, r3
 8000afa:	4827      	ldr	r0, [pc, #156]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000afc:	f006 f8b4 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4619      	mov	r1, r3
 8000b12:	4821      	ldr	r0, [pc, #132]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000b14:	f006 f8a8 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000b18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b1c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b26:	463b      	mov	r3, r7
 8000b28:	4619      	mov	r1, r3
 8000b2a:	481b      	ldr	r0, [pc, #108]	; (8000b98 <MX_GPIO_Init+0x334>)
 8000b2c:	f006 f89c 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b30:	2308      	movs	r3, #8
 8000b32:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b34:	2301      	movs	r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	4812      	ldr	r0, [pc, #72]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000b4a:	f006 f88d 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b52:	2301      	movs	r3, #1
 8000b54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	463b      	mov	r3, r7
 8000b64:	4619      	mov	r1, r3
 8000b66:	480b      	ldr	r0, [pc, #44]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000b68:	f006 f87e 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000b6c:	2320      	movs	r3, #32
 8000b6e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b70:	2301      	movs	r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	463b      	mov	r3, r7
 8000b82:	4619      	mov	r1, r3
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <MX_GPIO_Init+0x330>)
 8000b86:	f006 f86f 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	e005      	b.n	8000ba0 <MX_GPIO_Init+0x33c>
 8000b94:	40020400 	.word	0x40020400
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	463b      	mov	r3, r7
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4842      	ldr	r0, [pc, #264]	; (8000cbc <MX_GPIO_Init+0x458>)
 8000bb2:	f006 f859 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4619      	mov	r1, r3
 8000bce:	483b      	ldr	r0, [pc, #236]	; (8000cbc <MX_GPIO_Init+0x458>)
 8000bd0:	f006 f84a 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	463b      	mov	r3, r7
 8000be4:	4619      	mov	r1, r3
 8000be6:	4835      	ldr	r0, [pc, #212]	; (8000cbc <MX_GPIO_Init+0x458>)
 8000be8:	f006 f83e 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	482f      	ldr	r0, [pc, #188]	; (8000cbc <MX_GPIO_Init+0x458>)
 8000c00:	f006 f832 	bl	8006c68 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE0);
 8000c04:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f7ff fd69 	bl	80006e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE3);
 8000c0e:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000c12:	2002      	movs	r0, #2
 8000c14:	f7ff fd64 	bl	80006e0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000c24:	2301      	movs	r3, #1
 8000c26:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f005 fe95 	bl	800695c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000c32:	2308      	movs	r3, #8
 8000c34:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c36:	2301      	movs	r3, #1
 8000c38:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c42:	f107 0318 	add.w	r3, r7, #24
 8000c46:	4618      	mov	r0, r3
 8000c48:	f005 fe88 	bl	800695c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_0, LL_GPIO_PULL_NO);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2101      	movs	r1, #1
 8000c50:	481b      	ldr	r0, [pc, #108]	; (8000cc0 <MX_GPIO_Init+0x45c>)
 8000c52:	f7ff fda2 	bl	800079a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_3, LL_GPIO_PULL_NO);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2108      	movs	r1, #8
 8000c5a:	4819      	ldr	r0, [pc, #100]	; (8000cc0 <MX_GPIO_Init+0x45c>)
 8000c5c:	f7ff fd9d 	bl	800079a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_0, LL_GPIO_MODE_INPUT);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2101      	movs	r1, #1
 8000c64:	4816      	ldr	r0, [pc, #88]	; (8000cc0 <MX_GPIO_Init+0x45c>)
 8000c66:	f7ff fd69 	bl	800073c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	4814      	ldr	r0, [pc, #80]	; (8000cc0 <MX_GPIO_Init+0x45c>)
 8000c70:	f7ff fd64 	bl	800073c <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c74:	f7ff fcc8 	bl	8000608 <__NVIC_GetPriorityGrouping>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fcfa 	bl	8000678 <NVIC_EncodePriority>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4619      	mov	r1, r3
 8000c88:	2006      	movs	r0, #6
 8000c8a:	f7ff fccb 	bl	8000624 <__NVIC_SetPriority>
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c8e:	f7ff fcbb 	bl	8000608 <__NVIC_GetPriorityGrouping>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fced 	bl	8000678 <NVIC_EncodePriority>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	2009      	movs	r0, #9
 8000ca4:	f7ff fcbe 	bl	8000624 <__NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ca8:	2006      	movs	r0, #6
 8000caa:	f001 f895 	bl	8001dd8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cae:	2009      	movs	r0, #9
 8000cb0:	f001 f892 	bl	8001dd8 <HAL_NVIC_EnableIRQ>

}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40020400 	.word	0x40020400
 8000cc0:	40020800 	.word	0x40020800

08000cc4 <LL_GPIO_SetOutputPin>:
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	619a      	str	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <LL_GPIO_ResetOutputPin>:
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	041a      	lsls	r2, r3, #16
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	619a      	str	r2, [r3, #24]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <ProcessJoystick>:
#include "joystick.h"

HID_gamepad_Info_TypeDef* joymap;

void ProcessJoystick() {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

			
			SetupJoystick();
 8000d06:	f000 fdd1 	bl	80018ac <SetupJoystick>
			HID_gamepad_Info_TypeDef *joymap = (HID_gamepad_Info_TypeDef *)USBH_Get_Device_Data(HUB_GAMEPAD);
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	f000 fcda 	bl	80016c4 <USBH_Get_Device_Data>
 8000d10:	6078      	str	r0, [r7, #4]


			if (joymap == NULL) return;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d06e      	beq.n	8000df6 <ProcessJoystick+0xf6>
			if ((joymap->gamepad_data & 0x1)) LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_10); else LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10); //RIGHT - PC7
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <ProcessJoystick+0x30>
 8000d24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d28:	4835      	ldr	r0, [pc, #212]	; (8000e00 <ProcessJoystick+0x100>)
 8000d2a:	f7ff ffcb 	bl	8000cc4 <LL_GPIO_SetOutputPin>
 8000d2e:	e004      	b.n	8000d3a <ProcessJoystick+0x3a>
 8000d30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d34:	4832      	ldr	r0, [pc, #200]	; (8000e00 <ProcessJoystick+0x100>)
 8000d36:	f7ff ffd3 	bl	8000ce0 <LL_GPIO_ResetOutputPin>
			if ((joymap->gamepad_data >> 1 & 0x1)) LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7); else LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7); //LEFT - PC10
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	085b      	lsrs	r3, r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d004      	beq.n	8000d54 <ProcessJoystick+0x54>
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	482c      	ldr	r0, [pc, #176]	; (8000e00 <ProcessJoystick+0x100>)
 8000d4e:	f7ff ffb9 	bl	8000cc4 <LL_GPIO_SetOutputPin>
 8000d52:	e003      	b.n	8000d5c <ProcessJoystick+0x5c>
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	482a      	ldr	r0, [pc, #168]	; (8000e00 <ProcessJoystick+0x100>)
 8000d58:	f7ff ffc2 	bl	8000ce0 <LL_GPIO_ResetOutputPin>
			if ((joymap->gamepad_data >> 2 & 0x1)) LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13); else LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13); //BACK - PC11
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	089b      	lsrs	r3, r3, #2
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d005      	beq.n	8000d78 <ProcessJoystick+0x78>
 8000d6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d70:	4823      	ldr	r0, [pc, #140]	; (8000e00 <ProcessJoystick+0x100>)
 8000d72:	f7ff ffa7 	bl	8000cc4 <LL_GPIO_SetOutputPin>
 8000d76:	e004      	b.n	8000d82 <ProcessJoystick+0x82>
 8000d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7c:	4820      	ldr	r0, [pc, #128]	; (8000e00 <ProcessJoystick+0x100>)
 8000d7e:	f7ff ffaf 	bl	8000ce0 <LL_GPIO_ResetOutputPin>
			if ((joymap->gamepad_data >> 3 & 0x1)) LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_11); else LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_11); //FORWARD - PC13
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	08db      	lsrs	r3, r3, #3
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d005      	beq.n	8000d9e <ProcessJoystick+0x9e>
 8000d92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d96:	481a      	ldr	r0, [pc, #104]	; (8000e00 <ProcessJoystick+0x100>)
 8000d98:	f7ff ff94 	bl	8000cc4 <LL_GPIO_SetOutputPin>
 8000d9c:	e004      	b.n	8000da8 <ProcessJoystick+0xa8>
 8000d9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da2:	4817      	ldr	r0, [pc, #92]	; (8000e00 <ProcessJoystick+0x100>)
 8000da4:	f7ff ff9c 	bl	8000ce0 <LL_GPIO_ResetOutputPin>
			if ((joymap->gamepad_data >> 4 & 0x1)) LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_15); else LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_15); //TR1 - PC15
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d005      	beq.n	8000dc4 <ProcessJoystick+0xc4>
 8000db8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dbc:	4810      	ldr	r0, [pc, #64]	; (8000e00 <ProcessJoystick+0x100>)
 8000dbe:	f7ff ff8f 	bl	8000ce0 <LL_GPIO_ResetOutputPin>
 8000dc2:	e004      	b.n	8000dce <ProcessJoystick+0xce>
 8000dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <ProcessJoystick+0x100>)
 8000dca:	f7ff ff7b 	bl	8000cc4 <LL_GPIO_SetOutputPin>
			if ((joymap->gamepad_data >> 5 & 0x1)) LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_14); else LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_14); //TR2 - PC14
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <ProcessJoystick+0xea>
 8000dde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de2:	4807      	ldr	r0, [pc, #28]	; (8000e00 <ProcessJoystick+0x100>)
 8000de4:	f7ff ff7c 	bl	8000ce0 <LL_GPIO_ResetOutputPin>
 8000de8:	e006      	b.n	8000df8 <ProcessJoystick+0xf8>
 8000dea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dee:	4804      	ldr	r0, [pc, #16]	; (8000e00 <ProcessJoystick+0x100>)
 8000df0:	f7ff ff68 	bl	8000cc4 <LL_GPIO_SetOutputPin>
 8000df4:	e000      	b.n	8000df8 <ProcessJoystick+0xf8>
			if (joymap == NULL) return;
 8000df6:	bf00      	nop


		//		HAL_GPIO_WritePin(MB_GPIO_Port, RB_Pin, !(joymap->gamepad_data >> 5 & 0x1));
		//		HAL_GPIO_WritePin(RB_GPIO_Port, MB_Pin, !(joymap->gamepad_data >> 6 & 0x1));
	
}
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40020800 	.word	0x40020800

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e08:	f000 fec1 	bl	8001b8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0c:	f000 f812 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e10:	f7ff fd28 	bl	8000864 <MX_GPIO_Init>
  MX_UART5_Init();
 8000e14:	f000 fb9c 	bl	8001550 <MX_UART5_Init>
  MX_USB_HOST_Init();
 8000e18:	f00c fbf6 	bl	800d608 <MX_USB_HOST_Init>
  MX_DAC_Init();
 8000e1c:	f7ff fb82 	bl	8000524 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  InitMSXKeyboard();
 8000e20:	f000 f8dc 	bl	8000fdc <InitMSXKeyboard>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e24:	f00c fc42 	bl	800d6ac <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
     ProcessMSXKeyboard();
 8000e28:	f000 f930 	bl	800108c <ProcessMSXKeyboard>
     ProcessJoystick();
 8000e2c:	f7ff ff68 	bl	8000d00 <ProcessJoystick>
    MX_USB_HOST_Process();
 8000e30:	e7f8      	b.n	8000e24 <main+0x20>
	...

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b094      	sub	sp, #80	; 0x50
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	2230      	movs	r2, #48	; 0x30
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f00d f826 	bl	800de94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e58:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <SystemClock_Config+0xd8>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	4a2b      	ldr	r2, [pc, #172]	; (8000f0c <SystemClock_Config+0xd8>)
 8000e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e62:	6413      	str	r3, [r2, #64]	; 0x40
 8000e64:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <SystemClock_Config+0xd8>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <SystemClock_Config+0xdc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a26      	ldr	r2, [pc, #152]	; (8000f10 <SystemClock_Config+0xdc>)
 8000e76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <SystemClock_Config+0xdc>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e92:	2302      	movs	r3, #2
 8000e94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e9c:	2319      	movs	r3, #25
 8000e9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000ea0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000ea4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000eaa:	2309      	movs	r3, #9
 8000eac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 f9be 	bl	8004234 <HAL_RCC_OscConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ebe:	f000 f83b 	bl	8000f38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ec2:	f003 f967 	bl	8004194 <HAL_PWREx_EnableOverDrive>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ecc:	f000 f834 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000edc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ee0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2107      	movs	r1, #7
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f003 fc46 	bl	8004780 <HAL_RCC_ClockConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000efa:	f000 f81d 	bl	8000f38 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000efe:	f003 fd2b 	bl	8004958 <HAL_RCC_EnableCSS>
}
 8000f02:	bf00      	nop
 8000f04:	3750      	adds	r7, #80	; 0x50
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40007000 	.word	0x40007000

08000f14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d101      	bne.n	8000f2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f26:	f000 fe3f 	bl	8001ba8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40002000 	.word	0x40002000

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <Error_Handler+0x8>

08000f42 <LL_GPIO_ReadInputPort>:
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	691b      	ldr	r3, [r3, #16]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <LL_GPIO_WriteOutputPort>:
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, PortValue);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	615a      	str	r2, [r3, #20]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_GPIO_ReadOutputPort>:
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	695b      	ldr	r3, [r3, #20]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_22
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000f9a:	695a      	ldr	r2, [r3, #20]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	bf0c      	ite	eq
 8000fa6:	2301      	moveq	r3, #1
 8000fa8:	2300      	movne	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40013c00 	.word	0x40013c00

08000fbc <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_22
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6153      	str	r3, [r2, #20]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40013c00 	.word	0x40013c00

08000fdc <InitMSXKeyboard>:
uint32_t MSX_Matrix_temp[11];

HID_KEYBD_Info_TypeDef *kb_data;

void InitMSXKeyboard()
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

	//Reset matrix state etc
	memset(&MSX_Matrix_data, 0, sizeof(MSX_Matrix_data));
 8000fe0:	222c      	movs	r2, #44	; 0x2c
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <InitMSXKeyboard+0x1c>)
 8000fe6:	f00c ff55 	bl	800de94 <memset>
	memset(&MSX_Matrix_temp, 0, sizeof(MSX_Matrix_data));
 8000fea:	222c      	movs	r2, #44	; 0x2c
 8000fec:	2100      	movs	r1, #0
 8000fee:	4803      	ldr	r0, [pc, #12]	; (8000ffc <InitMSXKeyboard+0x20>)
 8000ff0:	f00c ff50 	bl	800de94 <memset>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000011c 	.word	0x2000011c
 8000ffc:	20000148 	.word	0x20000148

08001000 <ProcessMSXKey>:

void ProcessMSXKey(uint8_t usbkey)
{
 8001000:	b490      	push	{r4, r7}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx=0; idx < MSX_KEYS_SIZE; idx++)
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e02f      	b.n	8001070 <ProcessMSXKey+0x70>
	{
		if (msxkeymap[idx][0]==usbkey)
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	491c      	ldr	r1, [pc, #112]	; (8001084 <ProcessMSXKey+0x84>)
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	440b      	add	r3, r1
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	79fa      	ldrb	r2, [r7, #7]
 8001020:	429a      	cmp	r2, r3
 8001022:	d122      	bne.n	800106a <ProcessMSXKey+0x6a>
		{
			MSX_Matrix_temp[msxkeymap[idx][1]] |= msxkeymap[idx][2];
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	4917      	ldr	r1, [pc, #92]	; (8001084 <ProcessMSXKey+0x84>)
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	440b      	add	r3, r1
 8001030:	3301      	adds	r3, #1
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <ProcessMSXKey+0x88>)
 8001038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	4811      	ldr	r0, [pc, #68]	; (8001084 <ProcessMSXKey+0x84>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	4403      	add	r3, r0
 8001048:	3302      	adds	r3, #2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461c      	mov	r4, r3
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <ProcessMSXKey+0x84>)
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	4403      	add	r3, r0
 800105a:	3301      	adds	r3, #1
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	ea41 0304 	orr.w	r3, r1, r4
 8001064:	4a08      	ldr	r2, [pc, #32]	; (8001088 <ProcessMSXKey+0x88>)
 8001066:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	for (uint8_t idx=0; idx < MSX_KEYS_SIZE; idx++)
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	3301      	adds	r3, #1
 800106e:	73fb      	strb	r3, [r7, #15]
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2b59      	cmp	r3, #89	; 0x59
 8001074:	d9cc      	bls.n	8001010 <ProcessMSXKey+0x10>
		}
	}

}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bc90      	pop	{r4, r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	0800e0c0 	.word	0x0800e0c0
 8001088:	20000148 	.word	0x20000148

0800108c <ProcessMSXKeyboard>:

void ProcessMSXKeyboard(){
 800108c:	b5b0      	push	{r4, r5, r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0

	HID_KEYBD_Info_TypeDef *kb_data = (HID_KEYBD_Info_TypeDef *)USBH_Get_Device_Data(HUB_KEYBOARD);
 8001092:	2001      	movs	r0, #1
 8001094:	f000 fb16 	bl	80016c4 <USBH_Get_Device_Data>
 8001098:	6038      	str	r0, [r7, #0]


	//keyboard hasn't return any data, so there was no change in state.
	if (kb_data==NULL) return;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d059      	beq.n	8001154 <ProcessMSXKeyboard+0xc8>


	//reset temp array to zero
	memset(&MSX_Matrix_temp, 0, sizeof(MSX_Matrix_temp));
 80010a0:	222c      	movs	r2, #44	; 0x2c
 80010a2:	2100      	movs	r1, #0
 80010a4:	482d      	ldr	r0, [pc, #180]	; (800115c <ProcessMSXKeyboard+0xd0>)
 80010a6:	f00c fef5 	bl	800de94 <memset>

	//process special keys
	if (kb_data->lctrl || kb_data->rctrl)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	785b      	ldrb	r3, [r3, #1]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d103      	bne.n	80010ba <ProcessMSXKeyboard+0x2e>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	795b      	ldrb	r3, [r3, #5]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <ProcessMSXKeyboard+0x3a>
	{
		//{KEY_LEFTCONTROL,								KB_ROW_6,		B_BIT_1},
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_1;
 80010ba:	4b28      	ldr	r3, [pc, #160]	; (800115c <ProcessMSXKeyboard+0xd0>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	4a26      	ldr	r2, [pc, #152]	; (800115c <ProcessMSXKeyboard+0xd0>)
 80010c4:	6193      	str	r3, [r2, #24]
	}


	if (kb_data->lshift|| kb_data->rshift)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	789b      	ldrb	r3, [r3, #2]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d103      	bne.n	80010d6 <ProcessMSXKeyboard+0x4a>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	799b      	ldrb	r3, [r3, #6]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d005      	beq.n	80010e2 <ProcessMSXKeyboard+0x56>
	{
		//		{KEY_LEFTSHIFT,							KB_ROW_6,		KB_BIT_0},
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_0;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <ProcessMSXKeyboard+0xd0>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	4a1f      	ldr	r2, [pc, #124]	; (800115c <ProcessMSXKeyboard+0xd0>)
 80010e0:	6193      	str	r3, [r2, #24]
	}

	if (kb_data->lgui)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	791b      	ldrb	r3, [r3, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d005      	beq.n	80010f6 <ProcessMSXKeyboard+0x6a>
	{
			//	{KEY_LEFT_GUI,							KB_ROW_6,		KB_BIT_4},
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_4;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <ProcessMSXKeyboard+0xd0>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	f043 0310 	orr.w	r3, r3, #16
 80010f2:	4a1a      	ldr	r2, [pc, #104]	; (800115c <ProcessMSXKeyboard+0xd0>)
 80010f4:	6193      	str	r3, [r2, #24]
	}

	if (kb_data->rgui)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	7a1b      	ldrb	r3, [r3, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <ProcessMSXKeyboard+0x7e>
	{
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_2;
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <ProcessMSXKeyboard+0xd0>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <ProcessMSXKeyboard+0xd0>)
 8001108:	6193      	str	r3, [r2, #24]
			//{KEY_RIGHT_GUI,							KB_ROW_6,		KB_BIT_2},
	}

	//Interate over all keys - max 6 pressed keys at once
	for (int i = 0; i < 6; i++)
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	e011      	b.n	8001134 <ProcessMSXKeyboard+0xa8>
	{
		if(kb_data->keys[i]!=0x00) ProcessMSXKey(kb_data->keys[i]);
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	3309      	adds	r3, #9
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d007      	beq.n	800112e <ProcessMSXKeyboard+0xa2>
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	3309      	adds	r3, #9
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff69 	bl	8001000 <ProcessMSXKey>
	for (int i = 0; i < 6; i++)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3301      	adds	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b05      	cmp	r3, #5
 8001138:	ddea      	ble.n	8001110 <ProcessMSXKeyboard+0x84>
	}

	memcpy(MSX_Matrix_data,MSX_Matrix_temp,sizeof(MSX_Matrix_data));
 800113a:	4a09      	ldr	r2, [pc, #36]	; (8001160 <ProcessMSXKeyboard+0xd4>)
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <ProcessMSXKeyboard+0xd0>)
 800113e:	4614      	mov	r4, r2
 8001140:	461d      	mov	r5, r3
 8001142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800114e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001152:	e000      	b.n	8001156 <ProcessMSXKeyboard+0xca>
	if (kb_data==NULL) return;
 8001154:	bf00      	nop
}
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bdb0      	pop	{r4, r5, r7, pc}
 800115c:	20000148 	.word	0x20000148
 8001160:	2000011c 	.word	0x2000011c

08001164 <ProcessIRQ>:

void ProcessIRQ()
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
	uint8_t row = LL_GPIO_ReadInputPort(GPIOA)&0xF;
 800116a:	4813      	ldr	r0, [pc, #76]	; (80011b8 <ProcessIRQ+0x54>)
 800116c:	f7ff fee9 	bl	8000f42 <LL_GPIO_ReadInputPort>
 8001170:	4603      	mov	r3, r0
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	71fb      	strb	r3, [r7, #7]
	uint16_t value = ~MSX_Matrix_data[row] & 0x00FF;
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <ProcessIRQ+0x58>)
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	b29b      	uxth	r3, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	b29b      	uxth	r3, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	80bb      	strh	r3, [r7, #4]
	uint16_t PortValue = LL_GPIO_ReadOutputPort(GPIOB)& 0xFF00;
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <ProcessIRQ+0x5c>)
 800118e:	f7ff fef2 	bl	8000f76 <LL_GPIO_ReadOutputPort>
 8001192:	4603      	mov	r3, r0
 8001194:	b29b      	uxth	r3, r3
 8001196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800119a:	807b      	strh	r3, [r7, #2]
	value = value | PortValue;
 800119c:	88ba      	ldrh	r2, [r7, #4]
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	80bb      	strh	r3, [r7, #4]
	LL_GPIO_WriteOutputPort(GPIOB, value);
 80011a4:	88bb      	ldrh	r3, [r7, #4]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <ProcessIRQ+0x5c>)
 80011aa:	f7ff fed6 	bl	8000f5a <LL_GPIO_WriteOutputPort>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020000 	.word	0x40020000
 80011bc:	2000011c 	.word	0x2000011c
 80011c0:	40020400 	.word	0x40020400

080011c4 <EXTI0_IRQHandler>:

//System IRQ handler. It reset flag and executes ProcessIRQ
void EXTI0_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff fee1 	bl	8000f90 <LL_EXTI_IsActiveFlag_0_31>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d004      	beq.n	80011de <EXTI0_IRQHandler+0x1a>
  {

    ProcessIRQ();
 80011d4:	f7ff ffc6 	bl	8001164 <ProcessIRQ>
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80011d8:	2001      	movs	r0, #1
 80011da:	f7ff feef 	bl	8000fbc <LL_EXTI_ClearFlag_0_31>
  }

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b30      	ldr	r3, [pc, #192]	; (80012ac <HAL_MspInit+0xc8>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a2f      	ldr	r2, [pc, #188]	; (80012ac <HAL_MspInit+0xc8>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <HAL_MspInit+0xc8>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <HAL_MspInit+0xc8>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a29      	ldr	r2, [pc, #164]	; (80012ac <HAL_MspInit+0xc8>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b27      	ldr	r3, [pc, #156]	; (80012ac <HAL_MspInit+0xc8>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2101      	movs	r1, #1
 800121e:	f06f 000b 	mvn.w	r0, #11
 8001222:	f000 fdbd 	bl	8001da0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2101      	movs	r1, #1
 800122a:	f06f 000a 	mvn.w	r0, #10
 800122e:	f000 fdb7 	bl	8001da0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2101      	movs	r1, #1
 8001236:	f06f 0009 	mvn.w	r0, #9
 800123a:	f000 fdb1 	bl	8001da0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2101      	movs	r1, #1
 8001242:	f06f 0004 	mvn.w	r0, #4
 8001246:	f000 fdab 	bl	8001da0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2101      	movs	r1, #1
 800124e:	f06f 0003 	mvn.w	r0, #3
 8001252:	f000 fda5 	bl	8001da0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2101      	movs	r1, #1
 800125a:	f06f 0001 	mvn.w	r0, #1
 800125e:	f000 fd9f 	bl	8001da0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2001      	movs	r0, #1
 8001268:	f000 fd9a 	bl	8001da0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800126c:	2001      	movs	r0, #1
 800126e:	f000 fdb3 	bl	8001dd8 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2004      	movs	r0, #4
 8001278:	f000 fd92 	bl	8001da0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800127c:	2004      	movs	r0, #4
 800127e:	f000 fdab 	bl	8001dd8 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2005      	movs	r0, #5
 8001288:	f000 fd8a 	bl	8001da0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800128c:	2005      	movs	r0, #5
 800128e:	f000 fda3 	bl	8001dd8 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2051      	movs	r0, #81	; 0x51
 8001298:	f000 fd82 	bl	8001da0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800129c:	2051      	movs	r0, #81	; 0x51
 800129e:	f000 fd9b 	bl	8001dd8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	; 0x38
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80012c0:	4b33      	ldr	r3, [pc, #204]	; (8001390 <HAL_InitTick+0xe0>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	4a32      	ldr	r2, [pc, #200]	; (8001390 <HAL_InitTick+0xe0>)
 80012c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ca:	6413      	str	r3, [r2, #64]	; 0x40
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <HAL_InitTick+0xe0>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012d8:	f107 0210 	add.w	r2, r7, #16
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 fc42 	bl	8004b6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d103      	bne.n	80012fa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012f2:	f003 fc13 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 80012f6:	6378      	str	r0, [r7, #52]	; 0x34
 80012f8:	e004      	b.n	8001304 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012fa:	f003 fc0f 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 80012fe:	4603      	mov	r3, r0
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001306:	4a23      	ldr	r2, [pc, #140]	; (8001394 <HAL_InitTick+0xe4>)
 8001308:	fba2 2303 	umull	r2, r3, r2, r3
 800130c:	0c9b      	lsrs	r3, r3, #18
 800130e:	3b01      	subs	r3, #1
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <HAL_InitTick+0xe8>)
 8001314:	4a21      	ldr	r2, [pc, #132]	; (800139c <HAL_InitTick+0xec>)
 8001316:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_InitTick+0xe8>)
 800131a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800131e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001320:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <HAL_InitTick+0xe8>)
 8001322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001324:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_InitTick+0xe8>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HAL_InitTick+0xe8>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_InitTick+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001338:	4817      	ldr	r0, [pc, #92]	; (8001398 <HAL_InitTick+0xe8>)
 800133a:	f003 ffaf 	bl	800529c <HAL_TIM_Base_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001344:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001348:	2b00      	cmp	r3, #0
 800134a:	d11b      	bne.n	8001384 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800134c:	4812      	ldr	r0, [pc, #72]	; (8001398 <HAL_InitTick+0xe8>)
 800134e:	f004 f807 	bl	8005360 <HAL_TIM_Base_Start_IT>
 8001352:	4603      	mov	r3, r0
 8001354:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001358:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800135c:	2b00      	cmp	r3, #0
 800135e:	d111      	bne.n	8001384 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001360:	202d      	movs	r0, #45	; 0x2d
 8001362:	f000 fd39 	bl	8001dd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d808      	bhi.n	800137e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	202d      	movs	r0, #45	; 0x2d
 8001372:	f000 fd15 	bl	8001da0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <HAL_InitTick+0xf0>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	e002      	b.n	8001384 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001384:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001388:	4618      	mov	r0, r3
 800138a:	3738      	adds	r7, #56	; 0x38
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	431bde83 	.word	0x431bde83
 8001398:	20000174 	.word	0x20000174
 800139c:	40002000 	.word	0x40002000
 80013a0:	20000004 	.word	0x20000004

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80013a8:	f003 fc12 	bl	8004bd0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x8>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001402:	f002 fead 	bl	8004160 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}

0800140a <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800140e:	f000 fe63 	bl	80020d8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}

08001416 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800142a:	f004 f811 	bl	8005450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000174 	.word	0x20000174

08001438 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <UART5_IRQHandler+0x10>)
 800143e:	f004 fa5b 	bl	80058f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200001c4 	.word	0x200001c4

0800144c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <TIM6_DAC_IRQHandler+0x10>)
 8001452:	f000 fcf1 	bl	8001e38 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000108 	.word	0x20000108

08001460 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <OTG_FS_IRQHandler+0x10>)
 8001466:	f001 fbab 	bl	8002bc0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000aa8 	.word	0x20000aa8

08001474 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 800147a:	f001 fba1 	bl	8002bc0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000dac 	.word	0x20000dac

08001488 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 800148e:	f001 fb97 	bl	8002bc0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000dac 	.word	0x20000dac

0800149c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <OTG_HS_IRQHandler+0x10>)
 80014a2:	f001 fb8d 	bl	8002bc0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000dac 	.word	0x20000dac

080014b0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c8:	4a14      	ldr	r2, [pc, #80]	; (800151c <_sbrk+0x5c>)
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <_sbrk+0x60>)
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <_sbrk+0x64>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <_sbrk+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d207      	bcs.n	8001500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f0:	f00c fc96 	bl	800de20 <__errno>
 80014f4:	4603      	mov	r3, r0
 80014f6:	220c      	movs	r2, #12
 80014f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014fe:	e009      	b.n	8001514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <_sbrk+0x64>)
 8001510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20040000 	.word	0x20040000
 8001520:	00002000 	.word	0x00002000
 8001524:	200001c0 	.word	0x200001c0
 8001528:	200010c0 	.word	0x200010c0

0800152c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <SystemInit+0x20>)
 8001532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <SystemInit+0x20>)
 8001538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800153c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_UART5_Init+0x58>)
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <MX_UART5_Init+0x5c>)
 8001558:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_UART5_Init+0x58>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_UART5_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_UART5_Init+0x58>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_UART5_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_UART5_Init+0x58>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_UART5_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_UART5_Init+0x58>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_UART5_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_UART5_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_UART5_Init+0x58>)
 8001594:	f004 f962 	bl	800585c <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800159e:	f7ff fccb 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200001c4 	.word	0x200001c4
 80015ac:	40005000 	.word	0x40005000

080015b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b0aa      	sub	sp, #168	; 0xa8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f00c fc5f 	bl	800de94 <memset>
  if(uartHandle->Instance==UART5)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a36      	ldr	r2, [pc, #216]	; (80016b4 <HAL_UART_MspInit+0x104>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d165      	bne.n	80016ac <HAL_UART_MspInit+0xfc>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80015e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 fb0a 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015fa:	f7ff fc9d 	bl	8000f38 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80015fe:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <HAL_UART_MspInit+0x108>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a2d      	ldr	r2, [pc, #180]	; (80016b8 <HAL_UART_MspInit+0x108>)
 8001604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <HAL_UART_MspInit+0x108>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <HAL_UART_MspInit+0x108>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a27      	ldr	r2, [pc, #156]	; (80016b8 <HAL_UART_MspInit+0x108>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <HAL_UART_MspInit+0x108>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800162e:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <HAL_UART_MspInit+0x108>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a21      	ldr	r2, [pc, #132]	; (80016b8 <HAL_UART_MspInit+0x108>)
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <HAL_UART_MspInit+0x108>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001660:	2308      	movs	r3, #8
 8001662:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001666:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800166a:	4619      	mov	r1, r3
 800166c:	4813      	ldr	r0, [pc, #76]	; (80016bc <HAL_UART_MspInit+0x10c>)
 800166e:	f000 fea1 	bl	80023b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001672:	2304      	movs	r3, #4
 8001674:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800168a:	2308      	movs	r3, #8
 800168c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001690:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001694:	4619      	mov	r1, r3
 8001696:	480a      	ldr	r0, [pc, #40]	; (80016c0 <HAL_UART_MspInit+0x110>)
 8001698:	f000 fe8c 	bl	80023b4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800169c:	2200      	movs	r2, #0
 800169e:	2100      	movs	r1, #0
 80016a0:	2035      	movs	r0, #53	; 0x35
 80016a2:	f000 fb7d 	bl	8001da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80016a6:	2035      	movs	r0, #53	; 0x35
 80016a8:	f000 fb96 	bl	8001dd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80016ac:	bf00      	nop
 80016ae:	37a8      	adds	r7, #168	; 0xa8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40005000 	.word	0x40005000
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020800 	.word	0x40020800
 80016c0:	40020c00 	.word	0x40020c00

080016c4 <USBH_Get_Device_Data>:
#include "utils.h"
#include "usbh_hub.h"

uint8_t *USBH_Get_Device_Data(HUB_DEVICETypeDef deviceType)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
	USBH_HandleTypeDef *phost = &hUsbHostFS;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <USBH_Get_Device_Data+0x4c>)
 80016d0:	60fb      	str	r3, [r7, #12]
	USBH_HandleTypeDef *phostHS = &hUsbHostHS;
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <USBH_Get_Device_Data+0x50>)
 80016d4:	60bb      	str	r3, [r7, #8]

	if(phost->gState == HOST_CLASS)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b0b      	cmp	r3, #11
 80016de:	d106      	bne.n	80016ee <USBH_Get_Device_Data+0x2a>
	{
		return USBH_Get_Device_Data_Host(phost,deviceType);
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	4619      	mov	r1, r3
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f000 f817 	bl	8001718 <USBH_Get_Device_Data_Host>
 80016ea:	4603      	mov	r3, r0
 80016ec:	e00c      	b.n	8001708 <USBH_Get_Device_Data+0x44>
	}

	if(phostHS->gState == HOST_CLASS)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b0b      	cmp	r3, #11
 80016f6:	d106      	bne.n	8001706 <USBH_Get_Device_Data+0x42>
	{
		return USBH_Get_Device_Data_Host(phostHS,deviceType);
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	4619      	mov	r1, r3
 80016fc:	68b8      	ldr	r0, [r7, #8]
 80016fe:	f000 f80b 	bl	8001718 <USBH_Get_Device_Data_Host>
 8001702:	4603      	mov	r3, r0
 8001704:	e000      	b.n	8001708 <USBH_Get_Device_Data+0x44>
	}

	return NULL;
 8001706:	2300      	movs	r3, #0


}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200006c8 	.word	0x200006c8
 8001714:	200002ec 	.word	0x200002ec

08001718 <USBH_Get_Device_Data_Host>:

uint8_t *USBH_Get_Device_Data_Host(USBH_HandleTypeDef *phost,HUB_DEVICETypeDef deviceType)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]

  //handle device when connected to Hub
  if (phost->device.DevDesc.bDeviceClass == 9 && Appli_state == APPLICATION_READY)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
 800172a:	2b09      	cmp	r3, #9
 800172c:	d172      	bne.n	8001814 <USBH_Get_Device_Data_Host+0xfc>
 800172e:	4b5e      	ldr	r3, [pc, #376]	; (80018a8 <USBH_Get_Device_Data_Host+0x190>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d16e      	bne.n	8001814 <USBH_Get_Device_Data_Host+0xfc>
  {
    HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	613b      	str	r3, [r7, #16]

    for (int port = 0; port <4; port++)
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	e062      	b.n	800180c <USBH_Get_Device_Data_Host+0xf4>
    {
      for (int interface = 0; interface <2; interface ++)
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
 800174a:	e059      	b.n	8001800 <USBH_Get_Device_Data_Host+0xe8>
      {
        if (HUB_Handle->Port[port].Interface[interface].DeviceType == deviceType)
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	69b9      	ldr	r1, [r7, #24]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	206c      	movs	r0, #108	; 0x6c
 8001754:	fb00 f101 	mul.w	r1, r0, r1
 8001758:	f44f 7071 	mov.w	r0, #964	; 0x3c4
 800175c:	fb00 f303 	mul.w	r3, r0, r3
 8001760:	440b      	add	r3, r1
 8001762:	4413      	add	r3, r2
 8001764:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	429a      	cmp	r2, r3
 800176e:	d144      	bne.n	80017fa <USBH_Get_Device_Data_Host+0xe2>
        {
            if (deviceType == HUB_KEYBOARD) return (uint8_t *)USBH_HUB_GetKeybdInfo(&HUB_Handle->Port[port].Interface[interface]);
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d113      	bne.n	800179e <USBH_Get_Device_Data_Host+0x86>
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	226c      	movs	r2, #108	; 0x6c
 800177a:	fb03 f202 	mul.w	r2, r3, r2
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8001784:	fb01 f303 	mul.w	r3, r1, r3
 8001788:	4413      	add	r3, r2
 800178a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4413      	add	r3, r2
 8001792:	3304      	adds	r3, #4
 8001794:	4618      	mov	r0, r3
 8001796:	f009 f977 	bl	800aa88 <USBH_HUB_GetKeybdInfo>
 800179a:	4603      	mov	r3, r0
 800179c:	e080      	b.n	80018a0 <USBH_Get_Device_Data_Host+0x188>
            if (deviceType == HUB_MOUSE)    return (uint8_t *)USBH_HUB_GetMouseInfo(&HUB_Handle->Port[port].Interface[interface]);
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d113      	bne.n	80017cc <USBH_Get_Device_Data_Host+0xb4>
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	226c      	movs	r2, #108	; 0x6c
 80017a8:	fb03 f202 	mul.w	r2, r3, r2
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 80017b2:	fb01 f303 	mul.w	r3, r1, r3
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4413      	add	r3, r2
 80017c0:	3304      	adds	r3, #4
 80017c2:	4618      	mov	r0, r3
 80017c4:	f009 fa60 	bl	800ac88 <USBH_HUB_GetMouseInfo>
 80017c8:	4603      	mov	r3, r0
 80017ca:	e069      	b.n	80018a0 <USBH_Get_Device_Data_Host+0x188>
            if (deviceType == HUB_GAMEPAD)  return (uint8_t *)USBH_HUB_GetGamepadInfo(&HUB_Handle->Port[port].Interface[interface]);
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d113      	bne.n	80017fa <USBH_Get_Device_Data_Host+0xe2>
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	226c      	movs	r2, #108	; 0x6c
 80017d6:	fb03 f202 	mul.w	r2, r3, r2
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4413      	add	r3, r2
 80017ee:	3304      	adds	r3, #4
 80017f0:	4618      	mov	r0, r3
 80017f2:	f008 fe6b 	bl	800a4cc <USBH_HUB_GetGamepadInfo>
 80017f6:	4603      	mov	r3, r0
 80017f8:	e052      	b.n	80018a0 <USBH_Get_Device_Data_Host+0x188>
      for (int interface = 0; interface <2; interface ++)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	3301      	adds	r3, #1
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b01      	cmp	r3, #1
 8001804:	dda2      	ble.n	800174c <USBH_Get_Device_Data_Host+0x34>
    for (int port = 0; port <4; port++)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3301      	adds	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	2b03      	cmp	r3, #3
 8001810:	dd99      	ble.n	8001746 <USBH_Get_Device_Data_Host+0x2e>
  {
 8001812:	e044      	b.n	800189e <USBH_Get_Device_Data_Host+0x186>


    }
    
  }
  else if (Appli_state == APPLICATION_READY)
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <USBH_Get_Device_Data_Host+0x190>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d140      	bne.n	800189e <USBH_Get_Device_Data_Host+0x186>
  {
      for (int interface = 0; interface <2; interface ++)
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e03a      	b.n	8001898 <USBH_Get_Device_Data_Host+0x180>
      {
        HID_HandleTypeDef *HID_Handle  = (HID_HandleTypeDef *) phost->pActiveClass->pData[interface]; 
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	3208      	adds	r2, #8
 800182c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001830:	60fb      	str	r3, [r7, #12]
        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <USBH_Get_Device_Data_Host+0x13a>
        {
          if (deviceType == HUB_KEYBOARD)
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d104      	bne.n	8001852 <USBH_Get_Device_Data_Host+0x13a>
          {
            return (uint8_t *)USBH_HID_GetKeybdInfo(phost);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f007 fb9f 	bl	8008f8c <USBH_HID_GetKeybdInfo>
 800184e:	4603      	mov	r3, r0
 8001850:	e026      	b.n	80018a0 <USBH_Get_Device_Data_Host+0x188>
          }

        }

        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b01      	cmp	r3, #1
 8001860:	d107      	bne.n	8001872 <USBH_Get_Device_Data_Host+0x15a>
        {
          if (deviceType == HUB_MOUSE)
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d104      	bne.n	8001872 <USBH_Get_Device_Data_Host+0x15a>
          {
            return (uint8_t *)USBH_HID_GetMouseInfo(phost);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f007 fd3b 	bl	80092e4 <USBH_HID_GetMouseInfo>
 800186e:	4603      	mov	r3, r0
 8001870:	e016      	b.n	80018a0 <USBH_Get_Device_Data_Host+0x188>
          }

        }

        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_JOYSTICK)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b03      	cmp	r3, #3
 8001880:	d107      	bne.n	8001892 <USBH_Get_Device_Data_Host+0x17a>
        {

          if (deviceType == HUB_GAMEPAD)
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d104      	bne.n	8001892 <USBH_Get_Device_Data_Host+0x17a>
          {
            return (uint8_t *)USBH_HID_GetGamepadInfo(phost);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f007 f8a5 	bl	80089d8 <USBH_HID_GetGamepadInfo>
 800188e:	4603      	mov	r3, r0
 8001890:	e006      	b.n	80018a0 <USBH_Get_Device_Data_Host+0x188>
      for (int interface = 0; interface <2; interface ++)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b01      	cmp	r3, #1
 800189c:	ddc1      	ble.n	8001822 <USBH_Get_Device_Data_Host+0x10a>

      }

  }

return NULL;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3720      	adds	r7, #32
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000aa4 	.word	0x20000aa4

080018ac <SetupJoystick>:



void SetupJoystick()
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
	USBH_HandleTypeDef *phost = &hUsbHostFS;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <SetupJoystick+0x38>)
 80018b4:	607b      	str	r3, [r7, #4]
		USBH_HandleTypeDef *phostHS = &hUsbHostHS;
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <SetupJoystick+0x3c>)
 80018b8:	603b      	str	r3, [r7, #0]

		if(phost->gState == HOST_CLASS)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b0b      	cmp	r3, #11
 80018c2:	d102      	bne.n	80018ca <SetupJoystick+0x1e>
		{
			SetupJoystick_Host(phost);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f811 	bl	80018ec <SetupJoystick_Host>
		}

		if(phostHS->gState == HOST_CLASS)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b0b      	cmp	r3, #11
 80018d2:	d102      	bne.n	80018da <SetupJoystick+0x2e>
		{
			SetupJoystick_Host(phostHS);
 80018d4:	6838      	ldr	r0, [r7, #0]
 80018d6:	f000 f809 	bl	80018ec <SetupJoystick_Host>
		}

}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200006c8 	.word	0x200006c8
 80018e8:	200002ec 	.word	0x200002ec

080018ec <SetupJoystick_Host>:



void SetupJoystick_Host(USBH_HandleTypeDef *phost)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  
  //handle device when connected to Hub
  if (phost->device.DevDesc.bDeviceClass == 9 && Appli_state == APPLICATION_READY)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
 80018fa:	2b09      	cmp	r3, #9
 80018fc:	d12f      	bne.n	800195e <SetupJoystick_Host+0x72>
 80018fe:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <SetupJoystick_Host+0xbc>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d12b      	bne.n	800195e <SetupJoystick_Host+0x72>
  {
    HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	613b      	str	r3, [r7, #16]

    for (int port = 0; port <4; port++)
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
 8001914:	e01f      	b.n	8001956 <SetupJoystick_Host+0x6a>
    {
      for (int interface = 0; interface <2; interface ++)
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	e016      	b.n	800194a <SetupJoystick_Host+0x5e>
      {
        if (HUB_Handle->Port[port].Interface[interface].DeviceType == HUB_GAMEPAD)
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	69b9      	ldr	r1, [r7, #24]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	206c      	movs	r0, #108	; 0x6c
 8001924:	fb00 f101 	mul.w	r1, r0, r1
 8001928:	f44f 7071 	mov.w	r0, #964	; 0x3c4
 800192c:	fb00 f303 	mul.w	r3, r0, r3
 8001930:	440b      	add	r3, r1
 8001932:	4413      	add	r3, r2
 8001934:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d102      	bne.n	8001944 <SetupJoystick_Host+0x58>
        {
            //TURN ON PINS and return;
            SetPinsOn();
 800193e:	f000 f835 	bl	80019ac <SetPinsOn>
            return;
 8001942:	e02e      	b.n	80019a2 <SetupJoystick_Host+0xb6>
      for (int interface = 0; interface <2; interface ++)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	3301      	adds	r3, #1
 8001948:	61bb      	str	r3, [r7, #24]
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	2b01      	cmp	r3, #1
 800194e:	dde5      	ble.n	800191c <SetupJoystick_Host+0x30>
    for (int port = 0; port <4; port++)
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	3301      	adds	r3, #1
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	2b03      	cmp	r3, #3
 800195a:	dddc      	ble.n	8001916 <SetupJoystick_Host+0x2a>
  {
 800195c:	e01f      	b.n	800199e <SetupJoystick_Host+0xb2>


    }
    
  }
  else if (Appli_state == APPLICATION_READY)
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <SetupJoystick_Host+0xbc>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d11b      	bne.n	800199e <SetupJoystick_Host+0xb2>
  {
      for (int interface = 0; interface <2; interface ++)
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	e015      	b.n	8001998 <SetupJoystick_Host+0xac>
      {
        HID_HandleTypeDef *HID_Handle  = (HID_HandleTypeDef *) phost->pActiveClass->pData[interface]; 
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	3208      	adds	r2, #8
 8001976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197a:	60fb      	str	r3, [r7, #12]


        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_JOYSTICK)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b03      	cmp	r3, #3
 800198a:	d102      	bne.n	8001992 <SetupJoystick_Host+0xa6>
        {

            //TURN ON PINS and return
            SetPinsOn();
 800198c:	f000 f80e 	bl	80019ac <SetPinsOn>
            return;
 8001990:	e007      	b.n	80019a2 <SetupJoystick_Host+0xb6>
      for (int interface = 0; interface <2; interface ++)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	2b01      	cmp	r3, #1
 800199c:	dde6      	ble.n	800196c <SetupJoystick_Host+0x80>
      }

  }

  //If we are here, no joystick detected change pins back to Input
  SetPinsOff();
 800199e:	f000 f875 	bl	8001a8c <SetPinsOff>


}
 80019a2:	3720      	adds	r7, #32
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000aa4 	.word	0x20000aa4

080019ac <SetPinsOn>:


void SetPinsOn()
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	463b      	mov	r3, r7
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	615a      	str	r2, [r3, #20]
    /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019c6:	2301      	movs	r3, #1
 80019c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d6:	463b      	mov	r3, r7
 80019d8:	4619      	mov	r1, r3
 80019da:	482b      	ldr	r0, [pc, #172]	; (8001a88 <SetPinsOn+0xdc>)
 80019dc:	f005 f944 	bl	8006c68 <LL_GPIO_Init>

    /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80019e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019e6:	2301      	movs	r3, #1
 80019e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f6:	463b      	mov	r3, r7
 80019f8:	4619      	mov	r1, r3
 80019fa:	4823      	ldr	r0, [pc, #140]	; (8001a88 <SetPinsOn+0xdc>)
 80019fc:	f005 f934 	bl	8006c68 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a06:	2301      	movs	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a16:	463b      	mov	r3, r7
 8001a18:	4619      	mov	r1, r3
 8001a1a:	481b      	ldr	r0, [pc, #108]	; (8001a88 <SetPinsOn+0xdc>)
 8001a1c:	f005 f924 	bl	8006c68 <LL_GPIO_Init>
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8001a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a24:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a26:	2301      	movs	r3, #1
 8001a28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a36:	463b      	mov	r3, r7
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4813      	ldr	r0, [pc, #76]	; (8001a88 <SetPinsOn+0xdc>)
 8001a3c:	f005 f914 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8001a40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a44:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a46:	2301      	movs	r3, #1
 8001a48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a56:	463b      	mov	r3, r7
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480b      	ldr	r0, [pc, #44]	; (8001a88 <SetPinsOn+0xdc>)
 8001a5c:	f005 f904 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a64:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a66:	2301      	movs	r3, #1
 8001a68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a76:	463b      	mov	r3, r7
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4803      	ldr	r0, [pc, #12]	; (8001a88 <SetPinsOn+0xdc>)
 8001a7c:	f005 f8f4 	bl	8006c68 <LL_GPIO_Init>


}
 8001a80:	bf00      	nop
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40020800 	.word	0x40020800

08001a8c <SetPinsOff>:


void SetPinsOff()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	463b      	mov	r3, r7
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
 8001aa0:	615a      	str	r2, [r3, #20]
    /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aae:	463b      	mov	r3, r7
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4821      	ldr	r0, [pc, #132]	; (8001b38 <SetPinsOff+0xac>)
 8001ab4:	f005 f8d8 	bl	8006c68 <LL_GPIO_Init>

    /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001abc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4619      	mov	r1, r3
 8001aca:	481b      	ldr	r0, [pc, #108]	; (8001b38 <SetPinsOff+0xac>)
 8001acc:	f005 f8cc 	bl	8006c68 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ad4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ade:	463b      	mov	r3, r7
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4815      	ldr	r0, [pc, #84]	; (8001b38 <SetPinsOff+0xac>)
 8001ae4:	f005 f8c0 	bl	8006c68 <LL_GPIO_Init>
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8001ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af6:	463b      	mov	r3, r7
 8001af8:	4619      	mov	r1, r3
 8001afa:	480f      	ldr	r0, [pc, #60]	; (8001b38 <SetPinsOff+0xac>)
 8001afc:	f005 f8b4 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8001b00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0e:	463b      	mov	r3, r7
 8001b10:	4619      	mov	r1, r3
 8001b12:	4809      	ldr	r0, [pc, #36]	; (8001b38 <SetPinsOff+0xac>)
 8001b14:	f005 f8a8 	bl	8006c68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001b18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b1c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b26:	463b      	mov	r3, r7
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4803      	ldr	r0, [pc, #12]	; (8001b38 <SetPinsOff+0xac>)
 8001b2c:	f005 f89c 	bl	8006c68 <LL_GPIO_Init>


}
 8001b30:	bf00      	nop
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40020800 	.word	0x40020800

08001b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b40:	480d      	ldr	r0, [pc, #52]	; (8001b78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b42:	490e      	ldr	r1, [pc, #56]	; (8001b7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b44:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b58:	4c0b      	ldr	r4, [pc, #44]	; (8001b88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b66:	f7ff fce1 	bl	800152c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f00c f95f 	bl	800de2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6e:	f7ff f949 	bl	8000e04 <main>
  bx  lr    
 8001b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b74:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b7c:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001b80:	0800e438 	.word	0x0800e438
  ldr r2, =_sbss
 8001b84:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8001b88:	200010c0 	.word	0x200010c0

08001b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b8c:	e7fe      	b.n	8001b8c <ADC_IRQHandler>

08001b8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b92:	2003      	movs	r0, #3
 8001b94:	f000 f8f9 	bl	8001d8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b98:	200f      	movs	r0, #15
 8001b9a:	f7ff fb89 	bl	80012b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9e:	f7ff fb21 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_IncTick+0x20>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_IncTick+0x24>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <HAL_IncTick+0x24>)
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	2000024c 	.word	0x2000024c

08001bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <HAL_GetTick+0x14>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	2000024c 	.word	0x2000024c

08001be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff ffee 	bl	8001bd0 <HAL_GetTick>
 8001bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c00:	d005      	beq.n	8001c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_Delay+0x44>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c0e:	bf00      	nop
 8001c10:	f7ff ffde 	bl	8001bd0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d8f7      	bhi.n	8001c10 <HAL_Delay+0x28>
  {
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008

08001c30 <__NVIC_SetPriorityGrouping>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <__NVIC_SetPriorityGrouping+0x40>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <__NVIC_SetPriorityGrouping+0x40>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00
 8001c74:	05fa0000 	.word	0x05fa0000

08001c78 <__NVIC_GetPriorityGrouping>:
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_EnableIRQ>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db0b      	blt.n	8001cbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4907      	ldr	r1, [pc, #28]	; (8001ccc <__NVIC_EnableIRQ+0x38>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e100 	.word	0xe000e100

08001cd0 <__NVIC_SetPriority>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db0a      	blt.n	8001cfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <__NVIC_SetPriority+0x4c>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cf8:	e00a      	b.n	8001d10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4908      	ldr	r1, [pc, #32]	; (8001d20 <__NVIC_SetPriority+0x50>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3b04      	subs	r3, #4
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	761a      	strb	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <NVIC_EncodePriority>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	bf28      	it	cs
 8001d42:	2304      	movcs	r3, #4
 8001d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d902      	bls.n	8001d54 <NVIC_EncodePriority+0x30>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3b03      	subs	r3, #3
 8001d52:	e000      	b.n	8001d56 <NVIC_EncodePriority+0x32>
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	401a      	ands	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	4313      	orrs	r3, r2
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ff4c 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db2:	f7ff ff61 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001db6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	68b9      	ldr	r1, [r7, #8]
 8001dbc:	6978      	ldr	r0, [r7, #20]
 8001dbe:	f7ff ffb1 	bl	8001d24 <NVIC_EncodePriority>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff80 	bl	8001cd0 <__NVIC_SetPriority>
}
 8001dd0:	bf00      	nop
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff54 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e014      	b.n	8001e30 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	791b      	ldrb	r3, [r3, #4]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d105      	bne.n	8001e1c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe fbae 	bl	8000578 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e4e:	d120      	bne.n	8001e92 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e5e:	d118      	bne.n	8001e92 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2204      	movs	r2, #4
 8001e64:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e8a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f82d 	bl	8001eec <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ea0:	d120      	bne.n	8001ee4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eb0:	d118      	bne.n	8001ee4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f043 0202 	orr.w	r2, r3, #2
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ecc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001edc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f85d 	bl	8001f9e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	795b      	ldrb	r3, [r3, #5]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_DAC_ConfigChannel+0x18>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e03c      	b.n	8001f92 <HAL_DAC_ConfigChannel+0x92>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2202      	movs	r2, #2
 8001f22:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6819      	ldr	r1, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	22c0      	movs	r2, #192	; 0xc0
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	400a      	ands	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2201      	movs	r2, #1
 8001f88:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	371c      	adds	r7, #28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff fe06 	bl	8001bd0 <HAL_GetTick>
 8001fc4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d008      	beq.n	8001fe4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2280      	movs	r2, #128	; 0x80
 8001fd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e052      	b.n	800208a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0216 	bic.w	r2, r2, #22
 8001ff2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002002:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	2b00      	cmp	r3, #0
 800200a:	d103      	bne.n	8002014 <HAL_DMA_Abort+0x62>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0208 	bic.w	r2, r2, #8
 8002022:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002034:	e013      	b.n	800205e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002036:	f7ff fdcb 	bl	8001bd0 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b05      	cmp	r3, #5
 8002042:	d90c      	bls.n	800205e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2203      	movs	r2, #3
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e015      	b.n	800208a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1e4      	bne.n	8002036 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	223f      	movs	r2, #63	; 0x3f
 8002072:	409a      	lsls	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d004      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e00c      	b.n	80020ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2205      	movs	r2, #5
 80020b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
 80020e2:	4b56      	ldr	r3, [pc, #344]	; (800223c <HAL_FLASH_IRQHandler+0x164>)
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	4a55      	ldr	r2, [pc, #340]	; (800223c <HAL_FLASH_IRQHandler+0x164>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
 80020ee:	4b53      	ldr	r3, [pc, #332]	; (800223c <HAL_FLASH_IRQHandler+0x164>)
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	4a52      	ldr	r2, [pc, #328]	; (800223c <HAL_FLASH_IRQHandler+0x164>)
 80020f4:	f023 0302 	bic.w	r3, r3, #2
 80020f8:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
 80020fa:	4b50      	ldr	r3, [pc, #320]	; (800223c <HAL_FLASH_IRQHandler+0x164>)
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	4a4f      	ldr	r2, [pc, #316]	; (800223c <HAL_FLASH_IRQHandler+0x164>)
 8002100:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002104:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
 8002106:	4b4d      	ldr	r3, [pc, #308]	; (800223c <HAL_FLASH_IRQHandler+0x164>)
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	4a4c      	ldr	r2, [pc, #304]	; (800223c <HAL_FLASH_IRQHandler+0x164>)
 800210c:	f023 0304 	bic.w	r3, r3, #4
 8002110:	6113      	str	r3, [r2, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002112:	4b4a      	ldr	r3, [pc, #296]	; (800223c <HAL_FLASH_IRQHandler+0x164>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d048      	beq.n	80021b0 <HAL_FLASH_IRQHandler+0xd8>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800211e:	4b47      	ldr	r3, [pc, #284]	; (800223c <HAL_FLASH_IRQHandler+0x164>)
 8002120:	2201      	movs	r2, #1
 8002122:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
 8002124:	4b46      	ldr	r3, [pc, #280]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b03      	cmp	r3, #3
 800212c:	d037      	beq.n	800219e <HAL_FLASH_IRQHandler+0xc6>
 800212e:	2b03      	cmp	r3, #3
 8002130:	dc40      	bgt.n	80021b4 <HAL_FLASH_IRQHandler+0xdc>
 8002132:	2b01      	cmp	r3, #1
 8002134:	d002      	beq.n	800213c <HAL_FLASH_IRQHandler+0x64>
 8002136:	2b02      	cmp	r3, #2
 8002138:	d02a      	beq.n	8002190 <HAL_FLASH_IRQHandler+0xb8>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
 800213a:	e03b      	b.n	80021b4 <HAL_FLASH_IRQHandler+0xdc>
        pFlash.NbSectorsToErase--;
 800213c:	4b40      	ldr	r3, [pc, #256]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	3b01      	subs	r3, #1
 8002142:	4a3f      	ldr	r2, [pc, #252]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 8002144:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
 8002146:	4b3e      	ldr	r3, [pc, #248]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d013      	beq.n	8002176 <HAL_FLASH_IRQHandler+0x9e>
          temp = pFlash.Sector;
 800214e:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f875 	bl	8002244 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	3301      	adds	r3, #1
 8002160:	4a37      	ldr	r2, [pc, #220]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 8002162:	60d3      	str	r3, [r2, #12]
 8002164:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 8002166:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 8002168:	7a1b      	ldrb	r3, [r3, #8]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8d4 	bl	800231c <FLASH_Erase_Sector>
        break;
 8002174:	e01f      	b.n	80021b6 <HAL_FLASH_IRQHandler+0xde>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	4a30      	ldr	r2, [pc, #192]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f85e 	bl	8002244 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
        break;
 800218e:	e012      	b.n	80021b6 <HAL_FLASH_IRQHandler+0xde>
        HAL_FLASH_EndOfOperationCallback(0);
 8002190:	2000      	movs	r0, #0
 8002192:	f000 f857 	bl	8002244 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002196:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
        break;
 800219c:	e00b      	b.n	80021b6 <HAL_FLASH_IRQHandler+0xde>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800219e:	4b28      	ldr	r3, [pc, #160]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f84e 	bl	8002244 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
        break;
 80021ae:	e002      	b.n	80021b6 <HAL_FLASH_IRQHandler+0xde>
    }
  }
 80021b0:	bf00      	nop
 80021b2:	e000      	b.n	80021b6 <HAL_FLASH_IRQHandler+0xde>
        break;
 80021b4:	bf00      	nop
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80021b6:	4b21      	ldr	r3, [pc, #132]	; (800223c <HAL_FLASH_IRQHandler+0x164>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d023      	beq.n	800220a <HAL_FLASH_IRQHandler+0x132>
  {
    switch (pFlash.ProcedureOnGoing)
 80021c2:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d011      	beq.n	80021f0 <HAL_FLASH_IRQHandler+0x118>
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	dc13      	bgt.n	80021f8 <HAL_FLASH_IRQHandler+0x120>
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d002      	beq.n	80021da <HAL_FLASH_IRQHandler+0x102>
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d008      	beq.n	80021ea <HAL_FLASH_IRQHandler+0x112>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
 80021d8:	e00e      	b.n	80021f8 <HAL_FLASH_IRQHandler+0x120>
        temp = pFlash.Sector;
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 80021e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021e6:	60da      	str	r2, [r3, #12]
        break;
 80021e8:	e007      	b.n	80021fa <HAL_FLASH_IRQHandler+0x122>
        temp = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
        break;
 80021ee:	e004      	b.n	80021fa <HAL_FLASH_IRQHandler+0x122>
        temp = pFlash.Address;
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	607b      	str	r3, [r7, #4]
        break;
 80021f6:	e000      	b.n	80021fa <HAL_FLASH_IRQHandler+0x122>
      break;
 80021f8:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
 80021fa:	f000 f837 	bl	800226c <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f82a 	bl	8002258 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002204:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10e      	bne.n	8002232 <HAL_FLASH_IRQHandler+0x15a>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_FLASH_IRQHandler+0x164>)
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	4a08      	ldr	r2, [pc, #32]	; (800223c <HAL_FLASH_IRQHandler+0x164>)
 800221a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800221e:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_FLASH_IRQHandler+0x164>)
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	4a05      	ldr	r2, [pc, #20]	; (800223c <HAL_FLASH_IRQHandler+0x164>)
 8002226:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800222a:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <HAL_FLASH_IRQHandler+0x168>)
 800222e:	2200      	movs	r2, #0
 8002230:	751a      	strb	r2, [r3, #20]
  }
  
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40023c00 	.word	0x40023c00
 8002240:	20000250 	.word	0x20000250

08002244 <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
  */ 
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002270:	4b28      	ldr	r3, [pc, #160]	; (8002314 <FLASH_SetErrorCode+0xa8>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800227c:	4b26      	ldr	r3, [pc, #152]	; (8002318 <FLASH_SetErrorCode+0xac>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f043 0320 	orr.w	r3, r3, #32
 8002284:	4a24      	ldr	r2, [pc, #144]	; (8002318 <FLASH_SetErrorCode+0xac>)
 8002286:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <FLASH_SetErrorCode+0xa8>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <FLASH_SetErrorCode+0xac>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f043 0310 	orr.w	r3, r3, #16
 800229c:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <FLASH_SetErrorCode+0xac>)
 800229e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80022a0:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <FLASH_SetErrorCode+0xa8>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80022ac:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <FLASH_SetErrorCode+0xac>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	4a18      	ldr	r2, [pc, #96]	; (8002318 <FLASH_SetErrorCode+0xac>)
 80022b6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80022b8:	4b16      	ldr	r3, [pc, #88]	; (8002314 <FLASH_SetErrorCode+0xa8>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <FLASH_SetErrorCode+0xac>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	4a12      	ldr	r2, [pc, #72]	; (8002318 <FLASH_SetErrorCode+0xac>)
 80022ce:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 80022d0:	4b10      	ldr	r3, [pc, #64]	; (8002314 <FLASH_SetErrorCode+0xa8>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <FLASH_SetErrorCode+0xac>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <FLASH_SetErrorCode+0xac>)
 80022e6:	6193      	str	r3, [r2, #24]
  }
  
#if defined (FLASH_OPTCR2_PCROP)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <FLASH_SetErrorCode+0xa8>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <FLASH_SetErrorCode+0x94>
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <FLASH_SetErrorCode+0xac>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022fc:	4a06      	ldr	r2, [pc, #24]	; (8002318 <FLASH_SetErrorCode+0xac>)
 80022fe:	6193      	str	r3, [r2, #24]
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <FLASH_SetErrorCode+0xa8>)
 8002302:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8002306:	60da      	str	r2, [r3, #12]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40023c00 	.word	0x40023c00
 8002318:	20000250 	.word	0x20000250

0800231c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	e010      	b.n	800235a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d103      	bne.n	8002346 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800233e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	e009      	b.n	800235a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d103      	bne.n	8002354 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800234c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	e002      	b.n	800235a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002354:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002358:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <FLASH_Erase_Sector+0x94>)
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <FLASH_Erase_Sector+0x94>)
 8002360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002364:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <FLASH_Erase_Sector+0x94>)
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	4911      	ldr	r1, [pc, #68]	; (80023b0 <FLASH_Erase_Sector+0x94>)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 8002372:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <FLASH_Erase_Sector+0x94>)
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <FLASH_Erase_Sector+0x94>)
 8002378:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800237c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <FLASH_Erase_Sector+0x94>)
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4313      	orrs	r3, r2
 8002388:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <FLASH_Erase_Sector+0x94>)
 800238a:	f043 0302 	orr.w	r3, r3, #2
 800238e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <FLASH_Erase_Sector+0x94>)
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <FLASH_Erase_Sector+0x94>)
 8002396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800239c:	f3bf 8f4f 	dsb	sy
}
 80023a0:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40023c00 	.word	0x40023c00

080023b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e169      	b.n	80026a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023d4:	2201      	movs	r2, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	f040 8158 	bne.w	80026a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d005      	beq.n	800240a <HAL_GPIO_Init+0x56>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d130      	bne.n	800246c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	2203      	movs	r2, #3
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 0201 	and.w	r2, r3, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b03      	cmp	r3, #3
 8002476:	d017      	beq.n	80024a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d123      	bne.n	80024fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	08da      	lsrs	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3208      	adds	r2, #8
 80024bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	220f      	movs	r2, #15
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	08da      	lsrs	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3208      	adds	r2, #8
 80024f6:	69b9      	ldr	r1, [r7, #24]
 80024f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0203 	and.w	r2, r3, #3
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80b2 	beq.w	80026a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	4b60      	ldr	r3, [pc, #384]	; (80026c0 <HAL_GPIO_Init+0x30c>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	4a5f      	ldr	r2, [pc, #380]	; (80026c0 <HAL_GPIO_Init+0x30c>)
 8002544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002548:	6453      	str	r3, [r2, #68]	; 0x44
 800254a:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <HAL_GPIO_Init+0x30c>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002556:	4a5b      	ldr	r2, [pc, #364]	; (80026c4 <HAL_GPIO_Init+0x310>)
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	3302      	adds	r3, #2
 800255e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	220f      	movs	r2, #15
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a52      	ldr	r2, [pc, #328]	; (80026c8 <HAL_GPIO_Init+0x314>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d02b      	beq.n	80025da <HAL_GPIO_Init+0x226>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a51      	ldr	r2, [pc, #324]	; (80026cc <HAL_GPIO_Init+0x318>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d025      	beq.n	80025d6 <HAL_GPIO_Init+0x222>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a50      	ldr	r2, [pc, #320]	; (80026d0 <HAL_GPIO_Init+0x31c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01f      	beq.n	80025d2 <HAL_GPIO_Init+0x21e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4f      	ldr	r2, [pc, #316]	; (80026d4 <HAL_GPIO_Init+0x320>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d019      	beq.n	80025ce <HAL_GPIO_Init+0x21a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4e      	ldr	r2, [pc, #312]	; (80026d8 <HAL_GPIO_Init+0x324>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d013      	beq.n	80025ca <HAL_GPIO_Init+0x216>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4d      	ldr	r2, [pc, #308]	; (80026dc <HAL_GPIO_Init+0x328>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00d      	beq.n	80025c6 <HAL_GPIO_Init+0x212>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4c      	ldr	r2, [pc, #304]	; (80026e0 <HAL_GPIO_Init+0x32c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d007      	beq.n	80025c2 <HAL_GPIO_Init+0x20e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4b      	ldr	r2, [pc, #300]	; (80026e4 <HAL_GPIO_Init+0x330>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_GPIO_Init+0x20a>
 80025ba:	2307      	movs	r3, #7
 80025bc:	e00e      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025be:	2308      	movs	r3, #8
 80025c0:	e00c      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025c2:	2306      	movs	r3, #6
 80025c4:	e00a      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025c6:	2305      	movs	r3, #5
 80025c8:	e008      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025ca:	2304      	movs	r3, #4
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025ce:	2303      	movs	r3, #3
 80025d0:	e004      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025da:	2300      	movs	r3, #0
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	f002 0203 	and.w	r2, r2, #3
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	4093      	lsls	r3, r2
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025ec:	4935      	ldr	r1, [pc, #212]	; (80026c4 <HAL_GPIO_Init+0x310>)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fa:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <HAL_GPIO_Init+0x334>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261e:	4a32      	ldr	r2, [pc, #200]	; (80026e8 <HAL_GPIO_Init+0x334>)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002624:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <HAL_GPIO_Init+0x334>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002648:	4a27      	ldr	r2, [pc, #156]	; (80026e8 <HAL_GPIO_Init+0x334>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800264e:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <HAL_GPIO_Init+0x334>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002672:	4a1d      	ldr	r2, [pc, #116]	; (80026e8 <HAL_GPIO_Init+0x334>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_GPIO_Init+0x334>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800269c:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <HAL_GPIO_Init+0x334>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3301      	adds	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b0f      	cmp	r3, #15
 80026ac:	f67f ae92 	bls.w	80023d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40013800 	.word	0x40013800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020400 	.word	0x40020400
 80026d0:	40020800 	.word	0x40020800
 80026d4:	40020c00 	.word	0x40020c00
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40021400 	.word	0x40021400
 80026e0:	40021800 	.word	0x40021800
 80026e4:	40021c00 	.word	0x40021c00
 80026e8:	40013c00 	.word	0x40013c00

080026ec <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80026ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ee:	b08f      	sub	sp, #60	; 0x3c
 80026f0:	af0a      	add	r7, sp, #40	; 0x28
 80026f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e054      	b.n	80027a8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d106      	bne.n	800271e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f00b f845 	bl	800d7a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2203      	movs	r2, #3
 8002722:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f004 fbae 	bl	8006e9e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	687e      	ldr	r6, [r7, #4]
 800274a:	466d      	mov	r5, sp
 800274c:	f106 0410 	add.w	r4, r6, #16
 8002750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002758:	e894 0003 	ldmia.w	r4, {r0, r1}
 800275c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002760:	1d33      	adds	r3, r6, #4
 8002762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002764:	6838      	ldr	r0, [r7, #0]
 8002766:	f004 faf3 	bl	8006d50 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2101      	movs	r1, #1
 8002770:	4618      	mov	r0, r3
 8002772:	f004 fba5 	bl	8006ec0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	687e      	ldr	r6, [r7, #4]
 800277e:	466d      	mov	r5, sp
 8002780:	f106 0410 	add.w	r4, r6, #16
 8002784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800278a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800278c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002790:	e885 0003 	stmia.w	r5, {r0, r1}
 8002794:	1d33      	adds	r3, r6, #4
 8002796:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002798:	6838      	ldr	r0, [r7, #0]
 800279a:	f004 fd85 	bl	80072a8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027b0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80027b0:	b590      	push	{r4, r7, lr}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af04      	add	r7, sp, #16
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	4608      	mov	r0, r1
 80027ba:	4611      	mov	r1, r2
 80027bc:	461a      	mov	r2, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	70fb      	strb	r3, [r7, #3]
 80027c2:	460b      	mov	r3, r1
 80027c4:	70bb      	strb	r3, [r7, #2]
 80027c6:	4613      	mov	r3, r2
 80027c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_HCD_HC_Init+0x28>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e076      	b.n	80028c6 <HAL_HCD_HC_Init+0x116>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	333d      	adds	r3, #61	; 0x3d
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3338      	adds	r3, #56	; 0x38
 8002800:	787a      	ldrb	r2, [r7, #1]
 8002802:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	212c      	movs	r1, #44	; 0x2c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	3340      	adds	r3, #64	; 0x40
 8002812:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002814:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	212c      	movs	r1, #44	; 0x2c
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	3339      	adds	r3, #57	; 0x39
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	333f      	adds	r3, #63	; 0x3f
 8002836:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800283a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	78ba      	ldrb	r2, [r7, #2]
 8002840:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002844:	b2d0      	uxtb	r0, r2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	333a      	adds	r3, #58	; 0x3a
 8002852:	4602      	mov	r2, r0
 8002854:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002856:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800285a:	2b00      	cmp	r3, #0
 800285c:	da09      	bge.n	8002872 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	212c      	movs	r1, #44	; 0x2c
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	333b      	adds	r3, #59	; 0x3b
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e008      	b.n	8002884 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	333b      	adds	r3, #59	; 0x3b
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	212c      	movs	r1, #44	; 0x2c
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	4413      	add	r3, r2
 8002890:	333c      	adds	r3, #60	; 0x3c
 8002892:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002896:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	787c      	ldrb	r4, [r7, #1]
 800289e:	78ba      	ldrb	r2, [r7, #2]
 80028a0:	78f9      	ldrb	r1, [r7, #3]
 80028a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80028a4:	9302      	str	r3, [sp, #8]
 80028a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	4623      	mov	r3, r4
 80028b4:	f004 fe72 	bl	800759c <USB_HC_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd90      	pop	{r4, r7, pc}

080028ce <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_HCD_HC_Halt+0x1e>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e00f      	b.n	800290c <HAL_HCD_HC_Halt+0x3e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f005 f8c2 	bl	8007a86 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800290a:	7bfb      	ldrb	r3, [r7, #15]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	4608      	mov	r0, r1
 800291e:	4611      	mov	r1, r2
 8002920:	461a      	mov	r2, r3
 8002922:	4603      	mov	r3, r0
 8002924:	70fb      	strb	r3, [r7, #3]
 8002926:	460b      	mov	r3, r1
 8002928:	70bb      	strb	r3, [r7, #2]
 800292a:	4613      	mov	r3, r2
 800292c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	333b      	adds	r3, #59	; 0x3b
 800293c:	78ba      	ldrb	r2, [r7, #2]
 800293e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	333f      	adds	r3, #63	; 0x3f
 800294e:	787a      	ldrb	r2, [r7, #1]
 8002950:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002952:	7c3b      	ldrb	r3, [r7, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d112      	bne.n	800297e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	3342      	adds	r3, #66	; 0x42
 8002966:	2203      	movs	r2, #3
 8002968:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	333d      	adds	r3, #61	; 0x3d
 8002978:	7f3a      	ldrb	r2, [r7, #28]
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	e008      	b.n	8002990 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	212c      	movs	r1, #44	; 0x2c
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	4413      	add	r3, r2
 800298a:	3342      	adds	r3, #66	; 0x42
 800298c:	2202      	movs	r2, #2
 800298e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002990:	787b      	ldrb	r3, [r7, #1]
 8002992:	2b03      	cmp	r3, #3
 8002994:	f200 80c6 	bhi.w	8002b24 <HAL_HCD_HC_SubmitRequest+0x210>
 8002998:	a201      	add	r2, pc, #4	; (adr r2, 80029a0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299e:	bf00      	nop
 80029a0:	080029b1 	.word	0x080029b1
 80029a4:	08002b11 	.word	0x08002b11
 80029a8:	08002a15 	.word	0x08002a15
 80029ac:	08002a93 	.word	0x08002a93
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80029b0:	7c3b      	ldrb	r3, [r7, #16]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	f040 80b8 	bne.w	8002b28 <HAL_HCD_HC_SubmitRequest+0x214>
 80029b8:	78bb      	ldrb	r3, [r7, #2]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 80b4 	bne.w	8002b28 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80029c0:	8b3b      	ldrh	r3, [r7, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d108      	bne.n	80029d8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	212c      	movs	r1, #44	; 0x2c
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	3355      	adds	r3, #85	; 0x55
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	3355      	adds	r3, #85	; 0x55
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3342      	adds	r3, #66	; 0x42
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029fe:	e093      	b.n	8002b28 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3342      	adds	r3, #66	; 0x42
 8002a0e:	2202      	movs	r2, #2
 8002a10:	701a      	strb	r2, [r3, #0]
      break;
 8002a12:	e089      	b.n	8002b28 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002a14:	78bb      	ldrb	r3, [r7, #2]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d11d      	bne.n	8002a56 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	3355      	adds	r3, #85	; 0x55
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3342      	adds	r3, #66	; 0x42
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002a40:	e073      	b.n	8002b2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3342      	adds	r3, #66	; 0x42
 8002a50:	2202      	movs	r2, #2
 8002a52:	701a      	strb	r2, [r3, #0]
      break;
 8002a54:	e069      	b.n	8002b2a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a56:	78fb      	ldrb	r3, [r7, #3]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	3354      	adds	r3, #84	; 0x54
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	3342      	adds	r3, #66	; 0x42
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
      break;
 8002a7c:	e055      	b.n	8002b2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	3342      	adds	r3, #66	; 0x42
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	701a      	strb	r2, [r3, #0]
      break;
 8002a90:	e04b      	b.n	8002b2a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002a92:	78bb      	ldrb	r3, [r7, #2]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d11d      	bne.n	8002ad4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3355      	adds	r3, #85	; 0x55
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3342      	adds	r3, #66	; 0x42
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002abe:	e034      	b.n	8002b2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3342      	adds	r3, #66	; 0x42
 8002ace:	2202      	movs	r2, #2
 8002ad0:	701a      	strb	r2, [r3, #0]
      break;
 8002ad2:	e02a      	b.n	8002b2a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	212c      	movs	r1, #44	; 0x2c
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	3354      	adds	r3, #84	; 0x54
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	3342      	adds	r3, #66	; 0x42
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
      break;
 8002afa:	e016      	b.n	8002b2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	3342      	adds	r3, #66	; 0x42
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	701a      	strb	r2, [r3, #0]
      break;
 8002b0e:	e00c      	b.n	8002b2a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3342      	adds	r3, #66	; 0x42
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
      break;
 8002b22:	e002      	b.n	8002b2a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002b24:	bf00      	nop
 8002b26:	e000      	b.n	8002b2a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002b28:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	3344      	adds	r3, #68	; 0x44
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	8b3a      	ldrh	r2, [r7, #24]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	202c      	movs	r0, #44	; 0x2c
 8002b44:	fb00 f303 	mul.w	r3, r0, r3
 8002b48:	440b      	add	r3, r1
 8002b4a:	334c      	adds	r3, #76	; 0x4c
 8002b4c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	3360      	adds	r3, #96	; 0x60
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3350      	adds	r3, #80	; 0x50
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3339      	adds	r3, #57	; 0x39
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3361      	adds	r3, #97	; 0x61
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	222c      	movs	r2, #44	; 0x2c
 8002b9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ba2:	3338      	adds	r3, #56	; 0x38
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	18d1      	adds	r1, r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f004 fe16 	bl	80077e0 <USB_HC_StartXfer>
 8002bb4:	4603      	mov	r3, r0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop

08002bc0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f004 faec 	bl	80071b4 <USB_GetMode>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	f040 80f6 	bne.w	8002dd0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f004 faaf 	bl	800714c <USB_ReadInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80ec 	beq.w	8002dce <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f004 faa6 	bl	800714c <USB_ReadInterrupts>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c0a:	d104      	bne.n	8002c16 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f004 fa96 	bl	800714c <USB_ReadInterrupts>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c2a:	d104      	bne.n	8002c36 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f004 fa86 	bl	800714c <USB_ReadInterrupts>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c4a:	d104      	bne.n	8002c56 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 fa76 	bl	800714c <USB_ReadInterrupts>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d103      	bne.n	8002c72 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f004 fa68 	bl	800714c <USB_ReadInterrupts>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c86:	d11c      	bne.n	8002cc2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c90:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10f      	bne.n	8002cc2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ca2:	2110      	movs	r1, #16
 8002ca4:	6938      	ldr	r0, [r7, #16]
 8002ca6:	f004 f957 	bl	8006f58 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002caa:	6938      	ldr	r0, [r7, #16]
 8002cac:	f004 f988 	bl	8006fc0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f004 fbaa 	bl	8007410 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f00a fe6d 	bl	800d99c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f004 fa40 	bl	800714c <USB_ReadInterrupts>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd6:	d102      	bne.n	8002cde <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f001 f9ce 	bl	800407a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f004 fa32 	bl	800714c <USB_ReadInterrupts>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d106      	bne.n	8002d00 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f00a fe36 	bl	800d964 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2208      	movs	r2, #8
 8002cfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f004 fa21 	bl	800714c <USB_ReadInterrupts>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d101      	bne.n	8002d18 <HAL_HCD_IRQHandler+0x158>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <HAL_HCD_IRQHandler+0x15a>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d012      	beq.n	8002d44 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699a      	ldr	r2, [r3, #24]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0210 	bic.w	r2, r2, #16
 8002d2c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f001 f8d1 	bl	8003ed6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0210 	orr.w	r2, r2, #16
 8002d42:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f004 f9ff 	bl	800714c <USB_ReadInterrupts>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d58:	d13a      	bne.n	8002dd0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 fe80 	bl	8007a64 <USB_HC_ReadInterrupt>
 8002d64:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	e025      	b.n	8002db8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d018      	beq.n	8002db2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d96:	d106      	bne.n	8002da6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f8ab 	bl	8002efa <HCD_HC_IN_IRQHandler>
 8002da4:	e005      	b.n	8002db2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	4619      	mov	r1, r3
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fcc6 	bl	800373e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	3301      	adds	r3, #1
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d3d4      	bcc.n	8002d6c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dca:	615a      	str	r2, [r3, #20]
 8002dcc:	e000      	b.n	8002dd0 <HAL_HCD_IRQHandler+0x210>
      return;
 8002dce:	bf00      	nop
    }
  }
}
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_HCD_Start+0x16>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e013      	b.n	8002e14 <HAL_HCD_Start+0x3e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2101      	movs	r1, #1
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f004 fb6c 	bl	80074d8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f004 f839 	bl	8006e7c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_HCD_Stop+0x16>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e00d      	b.n	8002e4e <HAL_HCD_Stop+0x32>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f004 ff5a 	bl	8007cf8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f004 fb0e 	bl	8007484 <USB_ResetPort>
 8002e68:	4603      	mov	r3, r0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3360      	adds	r3, #96	; 0x60
 8002e8c:	781b      	ldrb	r3, [r3, #0]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	212c      	movs	r1, #44	; 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3350      	adds	r3, #80	; 0x50
 8002eb4:	681b      	ldr	r3, [r3, #0]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f004 fb52 	bl	8007578 <USB_GetCurrentFrame>
 8002ed4:	4603      	mov	r3, r0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f004 fb2d 	bl	800754a <USB_GetHostSpeed>
 8002ef0:	4603      	mov	r3, r0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f004 f927 	bl	8007172 <USB_ReadChInterrupts>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d11a      	bne.n	8002f64 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	212c      	movs	r1, #44	; 0x2c
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3361      	adds	r3, #97	; 0x61
 8002f4e:	2207      	movs	r2, #7
 8002f50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f004 fd92 	bl	8007a86 <USB_HC_Halt>
 8002f62:	e0a2      	b.n	80030aa <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f004 f8ff 	bl	8007172 <USB_ReadChInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7e:	d11b      	bne.n	8002fb8 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f92:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3361      	adds	r3, #97	; 0x61
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f004 fd68 	bl	8007a86 <USB_HC_Halt>
 8002fb6:	e078      	b.n	80030aa <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f004 f8d5 	bl	8007172 <USB_ReadChInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d11a      	bne.n	8003008 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2308      	movs	r3, #8
 8002fe2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	3361      	adds	r3, #97	; 0x61
 8002ff2:	2206      	movs	r2, #6
 8002ff4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f004 fd40 	bl	8007a86 <USB_HC_Halt>
 8003006:	e050      	b.n	80030aa <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f004 f8ad 	bl	8007172 <USB_ReadChInterrupts>
 8003018:	4603      	mov	r3, r0
 800301a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003022:	d11b      	bne.n	800305c <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003030:	461a      	mov	r2, r3
 8003032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003036:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	212c      	movs	r1, #44	; 0x2c
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	4413      	add	r3, r2
 8003044:	3361      	adds	r3, #97	; 0x61
 8003046:	2209      	movs	r2, #9
 8003048:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f004 fd16 	bl	8007a86 <USB_HC_Halt>
 800305a:	e026      	b.n	80030aa <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f004 f883 	bl	8007172 <USB_ReadChInterrupts>
 800306c:	4603      	mov	r3, r0
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b80      	cmp	r3, #128	; 0x80
 8003074:	d119      	bne.n	80030aa <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4413      	add	r3, r2
 800307e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003082:	461a      	mov	r2, r3
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3361      	adds	r3, #97	; 0x61
 8003096:	2207      	movs	r2, #7
 8003098:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f004 fcee 	bl	8007a86 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f004 f85c 	bl	8007172 <USB_ReadChInterrupts>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c4:	d112      	bne.n	80030ec <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f004 fcd8 	bl	8007a86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e2:	461a      	mov	r2, r3
 80030e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030e8:	6093      	str	r3, [r2, #8]
 80030ea:	e325      	b.n	8003738 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f004 f83b 	bl	8007172 <USB_ReadChInterrupts>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b01      	cmp	r3, #1
 8003104:	f040 80e8 	bne.w	80032d8 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4413      	add	r3, r2
 8003110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003114:	461a      	mov	r2, r3
 8003116:	2320      	movs	r3, #32
 8003118:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d019      	beq.n	8003156 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	212c      	movs	r1, #44	; 0x2c
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	3348      	adds	r3, #72	; 0x48
 8003130:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	0159      	lsls	r1, r3, #5
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	440b      	add	r3, r1
 800313a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003144:	1ad2      	subs	r2, r2, r3
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	202c      	movs	r0, #44	; 0x2c
 800314c:	fb00 f303 	mul.w	r3, r0, r3
 8003150:	440b      	add	r3, r1
 8003152:	3350      	adds	r3, #80	; 0x50
 8003154:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	3361      	adds	r3, #97	; 0x61
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	335c      	adds	r3, #92	; 0x5c
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003186:	461a      	mov	r2, r3
 8003188:	2301      	movs	r3, #1
 800318a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	333f      	adds	r3, #63	; 0x3f
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	333f      	adds	r3, #63	; 0x3f
 80031ae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d111      	bne.n	80031d8 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f004 fc61 	bl	8007a86 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d0:	461a      	mov	r2, r3
 80031d2:	2310      	movs	r3, #16
 80031d4:	6093      	str	r3, [r2, #8]
 80031d6:	e03a      	b.n	800324e <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	212c      	movs	r1, #44	; 0x2c
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	333f      	adds	r3, #63	; 0x3f
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d009      	beq.n	8003200 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	333f      	adds	r3, #63	; 0x3f
 80031fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d126      	bne.n	800324e <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	0151      	lsls	r1, r2, #5
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	440a      	add	r2, r1
 8003216:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800321a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800321e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	3360      	adds	r3, #96	; 0x60
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	b2d9      	uxtb	r1, r3
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	202c      	movs	r0, #44	; 0x2c
 800323c:	fb00 f303 	mul.w	r3, r0, r3
 8003240:	4413      	add	r3, r2
 8003242:	3360      	adds	r3, #96	; 0x60
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f00a fbb5 	bl	800d9b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d12b      	bne.n	80032ae <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3348      	adds	r3, #72	; 0x48
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	202c      	movs	r0, #44	; 0x2c
 800326c:	fb00 f202 	mul.w	r2, r0, r2
 8003270:	440a      	add	r2, r1
 8003272:	3240      	adds	r2, #64	; 0x40
 8003274:	8812      	ldrh	r2, [r2, #0]
 8003276:	fbb3 f3f2 	udiv	r3, r3, r2
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 825a 	beq.w	8003738 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3354      	adds	r3, #84	; 0x54
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	f083 0301 	eor.w	r3, r3, #1
 8003298:	b2d8      	uxtb	r0, r3
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3354      	adds	r3, #84	; 0x54
 80032a8:	4602      	mov	r2, r0
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e244      	b.n	8003738 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	212c      	movs	r1, #44	; 0x2c
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	3354      	adds	r3, #84	; 0x54
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	f083 0301 	eor.w	r3, r3, #1
 80032c2:	b2d8      	uxtb	r0, r3
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	212c      	movs	r1, #44	; 0x2c
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	3354      	adds	r3, #84	; 0x54
 80032d2:	4602      	mov	r2, r0
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	e22f      	b.n	8003738 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	4611      	mov	r1, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f003 ff45 	bl	8007172 <USB_ReadChInterrupts>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	d109      	bne.n	8003306 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fe:	461a      	mov	r2, r3
 8003300:	2320      	movs	r3, #32
 8003302:	6093      	str	r3, [r2, #8]
 8003304:	e218      	b.n	8003738 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f003 ff2e 	bl	8007172 <USB_ReadChInterrupts>
 8003316:	4603      	mov	r3, r0
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b02      	cmp	r3, #2
 800331e:	f040 816b 	bne.w	80035f8 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4413      	add	r3, r2
 800332a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332e:	461a      	mov	r2, r3
 8003330:	2302      	movs	r3, #2
 8003332:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	212c      	movs	r1, #44	; 0x2c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3361      	adds	r3, #97	; 0x61
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d112      	bne.n	800336e <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	212c      	movs	r1, #44	; 0x2c
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	4413      	add	r3, r2
 8003354:	3361      	adds	r3, #97	; 0x61
 8003356:	2202      	movs	r2, #2
 8003358:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	212c      	movs	r1, #44	; 0x2c
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	4413      	add	r3, r2
 8003366:	3360      	adds	r3, #96	; 0x60
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e135      	b.n	80035da <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	3361      	adds	r3, #97	; 0x61
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b06      	cmp	r3, #6
 8003380:	d112      	bne.n	80033a8 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	3361      	adds	r3, #97	; 0x61
 8003390:	2202      	movs	r2, #2
 8003392:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	212c      	movs	r1, #44	; 0x2c
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	4413      	add	r3, r2
 80033a0:	3360      	adds	r3, #96	; 0x60
 80033a2:	2205      	movs	r2, #5
 80033a4:	701a      	strb	r2, [r3, #0]
 80033a6:	e118      	b.n	80035da <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	212c      	movs	r1, #44	; 0x2c
 80033ae:	fb01 f303 	mul.w	r3, r1, r3
 80033b2:	4413      	add	r3, r2
 80033b4:	3361      	adds	r3, #97	; 0x61
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b07      	cmp	r3, #7
 80033ba:	d009      	beq.n	80033d0 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	212c      	movs	r1, #44	; 0x2c
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	3361      	adds	r3, #97	; 0x61
 80033ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	d159      	bne.n	8003484 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	3361      	adds	r3, #97	; 0x61
 80033de:	2202      	movs	r2, #2
 80033e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	212c      	movs	r1, #44	; 0x2c
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	335c      	adds	r3, #92	; 0x5c
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	202c      	movs	r0, #44	; 0x2c
 80033fa:	fb00 f303 	mul.w	r3, r0, r3
 80033fe:	440b      	add	r3, r1
 8003400:	335c      	adds	r3, #92	; 0x5c
 8003402:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	212c      	movs	r1, #44	; 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	335c      	adds	r3, #92	; 0x5c
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d912      	bls.n	800343e <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	212c      	movs	r1, #44	; 0x2c
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	335c      	adds	r3, #92	; 0x5c
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3360      	adds	r3, #96	; 0x60
 8003438:	2204      	movs	r2, #4
 800343a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800343c:	e0cd      	b.n	80035da <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	3360      	adds	r3, #96	; 0x60
 800344c:	2202      	movs	r2, #2
 800344e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003466:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800346e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347c:	461a      	mov	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003482:	e0aa      	b.n	80035da <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	212c      	movs	r1, #44	; 0x2c
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	4413      	add	r3, r2
 8003490:	3361      	adds	r3, #97	; 0x61
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b05      	cmp	r3, #5
 8003496:	d109      	bne.n	80034ac <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	212c      	movs	r1, #44	; 0x2c
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	3361      	adds	r3, #97	; 0x61
 80034a6:	2202      	movs	r2, #2
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e096      	b.n	80035da <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	212c      	movs	r1, #44	; 0x2c
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	3361      	adds	r3, #97	; 0x61
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d109      	bne.n	80034d4 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	212c      	movs	r1, #44	; 0x2c
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	4413      	add	r3, r2
 80034cc:	3361      	adds	r3, #97	; 0x61
 80034ce:	2202      	movs	r2, #2
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e082      	b.n	80035da <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	3361      	adds	r3, #97	; 0x61
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d13f      	bne.n	8003568 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	3361      	adds	r3, #97	; 0x61
 80034f6:	2202      	movs	r2, #2
 80034f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	212c      	movs	r1, #44	; 0x2c
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
 8003506:	3360      	adds	r3, #96	; 0x60
 8003508:	2202      	movs	r2, #2
 800350a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	333f      	adds	r3, #63	; 0x3f
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d009      	beq.n	8003534 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	212c      	movs	r1, #44	; 0x2c
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	333f      	adds	r3, #63	; 0x3f
 800352e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003530:	2b02      	cmp	r3, #2
 8003532:	d152      	bne.n	80035da <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800354a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003552:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	4413      	add	r3, r2
 800355c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003560:	461a      	mov	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e038      	b.n	80035da <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	212c      	movs	r1, #44	; 0x2c
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	4413      	add	r3, r2
 8003574:	3361      	adds	r3, #97	; 0x61
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d123      	bne.n	80035c4 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	212c      	movs	r1, #44	; 0x2c
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	4413      	add	r3, r2
 8003588:	3361      	adds	r3, #97	; 0x61
 800358a:	2202      	movs	r2, #2
 800358c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	212c      	movs	r1, #44	; 0x2c
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	335c      	adds	r3, #92	; 0x5c
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	202c      	movs	r0, #44	; 0x2c
 80035a6:	fb00 f303 	mul.w	r3, r0, r3
 80035aa:	440b      	add	r3, r1
 80035ac:	335c      	adds	r3, #92	; 0x5c
 80035ae:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	212c      	movs	r1, #44	; 0x2c
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	4413      	add	r3, r2
 80035bc:	3360      	adds	r3, #96	; 0x60
 80035be:	2204      	movs	r2, #4
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e00a      	b.n	80035da <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	212c      	movs	r1, #44	; 0x2c
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	4413      	add	r3, r2
 80035d0:	3361      	adds	r3, #97	; 0x61
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	f000 80ae 	beq.w	8003736 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	b2d9      	uxtb	r1, r3
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	202c      	movs	r0, #44	; 0x2c
 80035e4:	fb00 f303 	mul.w	r3, r0, r3
 80035e8:	4413      	add	r3, r2
 80035ea:	3360      	adds	r3, #96	; 0x60
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f00a f9e1 	bl	800d9b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035f6:	e09f      	b.n	8003738 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	4611      	mov	r1, r2
 8003602:	4618      	mov	r0, r3
 8003604:	f003 fdb5 	bl	8007172 <USB_ReadChInterrupts>
 8003608:	4603      	mov	r3, r0
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d123      	bne.n	800365a <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4413      	add	r3, r2
 800361a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361e:	461a      	mov	r2, r3
 8003620:	2340      	movs	r3, #64	; 0x40
 8003622:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	212c      	movs	r1, #44	; 0x2c
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	4413      	add	r3, r2
 8003630:	3361      	adds	r3, #97	; 0x61
 8003632:	2205      	movs	r2, #5
 8003634:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	212c      	movs	r1, #44	; 0x2c
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	4413      	add	r3, r2
 8003642:	335c      	adds	r3, #92	; 0x5c
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	4611      	mov	r1, r2
 8003652:	4618      	mov	r0, r3
 8003654:	f004 fa17 	bl	8007a86 <USB_HC_Halt>
 8003658:	e06e      	b.n	8003738 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f003 fd84 	bl	8007172 <USB_ReadChInterrupts>
 800366a:	4603      	mov	r3, r0
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b10      	cmp	r3, #16
 8003672:	d161      	bne.n	8003738 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	212c      	movs	r1, #44	; 0x2c
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	333f      	adds	r3, #63	; 0x3f
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b03      	cmp	r3, #3
 8003686:	d11a      	bne.n	80036be <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	212c      	movs	r1, #44	; 0x2c
 800368e:	fb01 f303 	mul.w	r3, r1, r3
 8003692:	4413      	add	r3, r2
 8003694:	335c      	adds	r3, #92	; 0x5c
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	212c      	movs	r1, #44	; 0x2c
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	4413      	add	r3, r2
 80036a6:	3361      	adds	r3, #97	; 0x61
 80036a8:	2204      	movs	r2, #4
 80036aa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f004 f9e5 	bl	8007a86 <USB_HC_Halt>
 80036bc:	e031      	b.n	8003722 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	333f      	adds	r3, #63	; 0x3f
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	212c      	movs	r1, #44	; 0x2c
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	4413      	add	r3, r2
 80036de:	333f      	adds	r3, #63	; 0x3f
 80036e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d11d      	bne.n	8003722 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	335c      	adds	r3, #92	; 0x5c
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d110      	bne.n	8003722 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	212c      	movs	r1, #44	; 0x2c
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	3361      	adds	r3, #97	; 0x61
 800370e:	2204      	movs	r2, #4
 8003710:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f004 f9b2 	bl	8007a86 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4413      	add	r3, r2
 800372a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372e:	461a      	mov	r2, r3
 8003730:	2310      	movs	r3, #16
 8003732:	6093      	str	r3, [r2, #8]
 8003734:	e000      	b.n	8003738 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 8003736:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b088      	sub	sp, #32
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	460b      	mov	r3, r1
 8003748:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	4611      	mov	r1, r2
 8003762:	4618      	mov	r0, r3
 8003764:	f003 fd05 	bl	8007172 <USB_ReadChInterrupts>
 8003768:	4603      	mov	r3, r0
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b04      	cmp	r3, #4
 8003770:	d11a      	bne.n	80037a8 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	4413      	add	r3, r2
 800377a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377e:	461a      	mov	r2, r3
 8003780:	2304      	movs	r3, #4
 8003782:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	3361      	adds	r3, #97	; 0x61
 8003792:	2207      	movs	r2, #7
 8003794:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	4611      	mov	r1, r2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f004 f970 	bl	8007a86 <USB_HC_Halt>
 80037a6:	e393      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	4611      	mov	r1, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f003 fcdd 	bl	8007172 <USB_ReadChInterrupts>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d137      	bne.n	8003832 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ce:	461a      	mov	r2, r3
 80037d0:	2320      	movs	r3, #32
 80037d2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	212c      	movs	r1, #44	; 0x2c
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	4413      	add	r3, r2
 80037e0:	333d      	adds	r3, #61	; 0x3d
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	f040 8373 	bne.w	8003ed0 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	212c      	movs	r1, #44	; 0x2c
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	4413      	add	r3, r2
 80037f6:	333d      	adds	r3, #61	; 0x3d
 80037f8:	2200      	movs	r2, #0
 80037fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	4413      	add	r3, r2
 8003808:	3360      	adds	r3, #96	; 0x60
 800380a:	2202      	movs	r2, #2
 800380c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	212c      	movs	r1, #44	; 0x2c
 8003814:	fb01 f303 	mul.w	r3, r1, r3
 8003818:	4413      	add	r3, r2
 800381a:	3361      	adds	r3, #97	; 0x61
 800381c:	2203      	movs	r2, #3
 800381e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f004 f92b 	bl	8007a86 <USB_HC_Halt>
 8003830:	e34e      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	4611      	mov	r1, r2
 800383c:	4618      	mov	r0, r3
 800383e:	f003 fc98 	bl	8007172 <USB_ReadChInterrupts>
 8003842:	4603      	mov	r3, r0
 8003844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800384c:	d112      	bne.n	8003874 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	4413      	add	r3, r2
 8003856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385a:	461a      	mov	r2, r3
 800385c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003860:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f004 f90a 	bl	8007a86 <USB_HC_Halt>
 8003872:	e32d      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f003 fc77 	bl	8007172 <USB_ReadChInterrupts>
 8003884:	4603      	mov	r3, r0
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b01      	cmp	r3, #1
 800388c:	d142      	bne.n	8003914 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	212c      	movs	r1, #44	; 0x2c
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	4413      	add	r3, r2
 800389a:	335c      	adds	r3, #92	; 0x5c
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f003 fc61 	bl	8007172 <USB_ReadChInterrupts>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b6:	2b40      	cmp	r3, #64	; 0x40
 80038b8:	d111      	bne.n	80038de <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	212c      	movs	r1, #44	; 0x2c
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	333d      	adds	r3, #61	; 0x3d
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d8:	461a      	mov	r2, r3
 80038da:	2340      	movs	r3, #64	; 0x40
 80038dc:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ea:	461a      	mov	r2, r3
 80038ec:	2301      	movs	r3, #1
 80038ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	212c      	movs	r1, #44	; 0x2c
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	4413      	add	r3, r2
 80038fc:	3361      	adds	r3, #97	; 0x61
 80038fe:	2201      	movs	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f004 f8ba 	bl	8007a86 <USB_HC_Halt>
 8003912:	e2dd      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f003 fc27 	bl	8007172 <USB_ReadChInterrupts>
 8003924:	4603      	mov	r3, r0
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d12c      	bne.n	8003988 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	212c      	movs	r1, #44	; 0x2c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	3361      	adds	r3, #97	; 0x61
 800393c:	2205      	movs	r2, #5
 800393e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	212c      	movs	r1, #44	; 0x2c
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	4413      	add	r3, r2
 800394c:	333d      	adds	r3, #61	; 0x3d
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	212c      	movs	r1, #44	; 0x2c
 8003958:	fb01 f303 	mul.w	r3, r1, r3
 800395c:	4413      	add	r3, r2
 800395e:	335c      	adds	r3, #92	; 0x5c
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f004 f889 	bl	8007a86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	4413      	add	r3, r2
 800397c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003980:	461a      	mov	r2, r3
 8003982:	2340      	movs	r3, #64	; 0x40
 8003984:	6093      	str	r3, [r2, #8]
 8003986:	e2a3      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	4611      	mov	r1, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f003 fbed 	bl	8007172 <USB_ReadChInterrupts>
 8003998:	4603      	mov	r3, r0
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d11a      	bne.n	80039d8 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ae:	461a      	mov	r2, r3
 80039b0:	2308      	movs	r3, #8
 80039b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	3361      	adds	r3, #97	; 0x61
 80039c2:	2206      	movs	r2, #6
 80039c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f004 f858 	bl	8007a86 <USB_HC_Halt>
 80039d6:	e27b      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f003 fbc5 	bl	8007172 <USB_ReadChInterrupts>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b10      	cmp	r3, #16
 80039f0:	d140      	bne.n	8003a74 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	212c      	movs	r1, #44	; 0x2c
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
 80039fc:	4413      	add	r3, r2
 80039fe:	335c      	adds	r3, #92	; 0x5c
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	212c      	movs	r1, #44	; 0x2c
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	4413      	add	r3, r2
 8003a10:	3361      	adds	r3, #97	; 0x61
 8003a12:	2204      	movs	r2, #4
 8003a14:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	212c      	movs	r1, #44	; 0x2c
 8003a1c:	fb01 f303 	mul.w	r3, r1, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	333d      	adds	r3, #61	; 0x3d
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d112      	bne.n	8003a50 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	212c      	movs	r1, #44	; 0x2c
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	4413      	add	r3, r2
 8003a36:	333c      	adds	r3, #60	; 0x3c
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d108      	bne.n	8003a50 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	212c      	movs	r1, #44	; 0x2c
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	4413      	add	r3, r2
 8003a4a:	333d      	adds	r3, #61	; 0x3d
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	4611      	mov	r1, r2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f004 f813 	bl	8007a86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	2310      	movs	r3, #16
 8003a70:	6093      	str	r3, [r2, #8]
 8003a72:	e22d      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f003 fb77 	bl	8007172 <USB_ReadChInterrupts>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8a:	2b80      	cmp	r3, #128	; 0x80
 8003a8c:	d164      	bne.n	8003b58 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d111      	bne.n	8003aba <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	212c      	movs	r1, #44	; 0x2c
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3361      	adds	r3, #97	; 0x61
 8003aa4:	2207      	movs	r2, #7
 8003aa6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f003 ffe7 	bl	8007a86 <USB_HC_Halt>
 8003ab8:	e044      	b.n	8003b44 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	212c      	movs	r1, #44	; 0x2c
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	335c      	adds	r3, #92	; 0x5c
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	202c      	movs	r0, #44	; 0x2c
 8003ad2:	fb00 f303 	mul.w	r3, r0, r3
 8003ad6:	440b      	add	r3, r1
 8003ad8:	335c      	adds	r3, #92	; 0x5c
 8003ada:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	212c      	movs	r1, #44	; 0x2c
 8003ae2:	fb01 f303 	mul.w	r3, r1, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	335c      	adds	r3, #92	; 0x5c
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d920      	bls.n	8003b32 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	212c      	movs	r1, #44	; 0x2c
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	335c      	adds	r3, #92	; 0x5c
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	212c      	movs	r1, #44	; 0x2c
 8003b08:	fb01 f303 	mul.w	r3, r1, r3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3360      	adds	r3, #96	; 0x60
 8003b10:	2204      	movs	r2, #4
 8003b12:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	b2d9      	uxtb	r1, r3
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	202c      	movs	r0, #44	; 0x2c
 8003b1e:	fb00 f303 	mul.w	r3, r0, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	3360      	adds	r3, #96	; 0x60
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f009 ff44 	bl	800d9b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b30:	e008      	b.n	8003b44 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	212c      	movs	r1, #44	; 0x2c
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3360      	adds	r3, #96	; 0x60
 8003b40:	2202      	movs	r2, #2
 8003b42:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b50:	461a      	mov	r2, r3
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	6093      	str	r3, [r2, #8]
 8003b56:	e1bb      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f003 fb05 	bl	8007172 <USB_ReadChInterrupts>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b72:	d11b      	bne.n	8003bac <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	212c      	movs	r1, #44	; 0x2c
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	3361      	adds	r3, #97	; 0x61
 8003b82:	2209      	movs	r2, #9
 8003b84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f003 ff78 	bl	8007a86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba8:	6093      	str	r3, [r2, #8]
 8003baa:	e191      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f003 fadb 	bl	8007172 <USB_ReadChInterrupts>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	f040 8184 	bne.w	8003ed0 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	3361      	adds	r3, #97	; 0x61
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	f040 8087 	bne.w	8003cfe <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	212c      	movs	r1, #44	; 0x2c
 8003bf6:	fb01 f303 	mul.w	r3, r1, r3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3361      	adds	r3, #97	; 0x61
 8003bfe:	2202      	movs	r2, #2
 8003c00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	212c      	movs	r1, #44	; 0x2c
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3360      	adds	r3, #96	; 0x60
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	212c      	movs	r1, #44	; 0x2c
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	333f      	adds	r3, #63	; 0x3f
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d00a      	beq.n	8003c3e <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	212c      	movs	r1, #44	; 0x2c
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	333f      	adds	r3, #63	; 0x3f
 8003c36:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	f040 8139 	bne.w	8003eb0 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d113      	bne.n	8003c6e <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	212c      	movs	r1, #44	; 0x2c
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	3355      	adds	r3, #85	; 0x55
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	f083 0301 	eor.w	r3, r3, #1
 8003c5a:	b2d8      	uxtb	r0, r3
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	212c      	movs	r1, #44	; 0x2c
 8003c62:	fb01 f303 	mul.w	r3, r1, r3
 8003c66:	4413      	add	r3, r2
 8003c68:	3355      	adds	r3, #85	; 0x55
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	f040 811c 	bne.w	8003eb0 <HCD_HC_OUT_IRQHandler+0x772>
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	212c      	movs	r1, #44	; 0x2c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	334c      	adds	r3, #76	; 0x4c
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8111 	beq.w	8003eb0 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	212c      	movs	r1, #44	; 0x2c
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	4413      	add	r3, r2
 8003c9a:	334c      	adds	r3, #76	; 0x4c
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	202c      	movs	r0, #44	; 0x2c
 8003ca4:	fb00 f202 	mul.w	r2, r0, r2
 8003ca8:	440a      	add	r2, r1
 8003caa:	3240      	adds	r2, #64	; 0x40
 8003cac:	8812      	ldrh	r2, [r2, #0]
 8003cae:	4413      	add	r3, r2
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	202c      	movs	r0, #44	; 0x2c
 8003cb8:	fb00 f202 	mul.w	r2, r0, r2
 8003cbc:	440a      	add	r2, r1
 8003cbe:	3240      	adds	r2, #64	; 0x40
 8003cc0:	8812      	ldrh	r2, [r2, #0]
 8003cc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80ee 	beq.w	8003eb0 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	212c      	movs	r1, #44	; 0x2c
 8003cda:	fb01 f303 	mul.w	r3, r1, r3
 8003cde:	4413      	add	r3, r2
 8003ce0:	3355      	adds	r3, #85	; 0x55
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	f083 0301 	eor.w	r3, r3, #1
 8003ce8:	b2d8      	uxtb	r0, r3
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3355      	adds	r3, #85	; 0x55
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	e0d8      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	212c      	movs	r1, #44	; 0x2c
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	4413      	add	r3, r2
 8003d0a:	3361      	adds	r3, #97	; 0x61
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d109      	bne.n	8003d26 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3361      	adds	r3, #97	; 0x61
 8003d20:	2202      	movs	r2, #2
 8003d22:	701a      	strb	r2, [r3, #0]
 8003d24:	e0c4      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	212c      	movs	r1, #44	; 0x2c
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	3361      	adds	r3, #97	; 0x61
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d112      	bne.n	8003d60 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	212c      	movs	r1, #44	; 0x2c
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	3361      	adds	r3, #97	; 0x61
 8003d48:	2202      	movs	r2, #2
 8003d4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	212c      	movs	r1, #44	; 0x2c
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	4413      	add	r3, r2
 8003d58:	3360      	adds	r3, #96	; 0x60
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	e0a7      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	212c      	movs	r1, #44	; 0x2c
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3361      	adds	r3, #97	; 0x61
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	d112      	bne.n	8003d9a <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	212c      	movs	r1, #44	; 0x2c
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
 8003d7e:	4413      	add	r3, r2
 8003d80:	3361      	adds	r3, #97	; 0x61
 8003d82:	2202      	movs	r2, #2
 8003d84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	212c      	movs	r1, #44	; 0x2c
 8003d8c:	fb01 f303 	mul.w	r3, r1, r3
 8003d90:	4413      	add	r3, r2
 8003d92:	3360      	adds	r3, #96	; 0x60
 8003d94:	2202      	movs	r2, #2
 8003d96:	701a      	strb	r2, [r3, #0]
 8003d98:	e08a      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	212c      	movs	r1, #44	; 0x2c
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	4413      	add	r3, r2
 8003da6:	3361      	adds	r3, #97	; 0x61
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b06      	cmp	r3, #6
 8003dac:	d112      	bne.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	212c      	movs	r1, #44	; 0x2c
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	4413      	add	r3, r2
 8003dba:	3361      	adds	r3, #97	; 0x61
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	212c      	movs	r1, #44	; 0x2c
 8003dc6:	fb01 f303 	mul.w	r3, r1, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	3360      	adds	r3, #96	; 0x60
 8003dce:	2205      	movs	r2, #5
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e06d      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	212c      	movs	r1, #44	; 0x2c
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	3361      	adds	r3, #97	; 0x61
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b07      	cmp	r3, #7
 8003de6:	d009      	beq.n	8003dfc <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	3361      	adds	r3, #97	; 0x61
 8003df6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003df8:	2b09      	cmp	r3, #9
 8003dfa:	d168      	bne.n	8003ece <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	212c      	movs	r1, #44	; 0x2c
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	4413      	add	r3, r2
 8003e08:	3361      	adds	r3, #97	; 0x61
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	212c      	movs	r1, #44	; 0x2c
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	335c      	adds	r3, #92	; 0x5c
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	202c      	movs	r0, #44	; 0x2c
 8003e26:	fb00 f303 	mul.w	r3, r0, r3
 8003e2a:	440b      	add	r3, r1
 8003e2c:	335c      	adds	r3, #92	; 0x5c
 8003e2e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	212c      	movs	r1, #44	; 0x2c
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	335c      	adds	r3, #92	; 0x5c
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d912      	bls.n	8003e6a <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	212c      	movs	r1, #44	; 0x2c
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	4413      	add	r3, r2
 8003e50:	335c      	adds	r3, #92	; 0x5c
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	212c      	movs	r1, #44	; 0x2c
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	4413      	add	r3, r2
 8003e62:	3360      	adds	r3, #96	; 0x60
 8003e64:	2204      	movs	r2, #4
 8003e66:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e68:	e021      	b.n	8003eae <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	3360      	adds	r3, #96	; 0x60
 8003e78:	2202      	movs	r2, #2
 8003e7a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e92:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e9a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003eae:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	b2d9      	uxtb	r1, r3
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	202c      	movs	r0, #44	; 0x2c
 8003eba:	fb00 f303 	mul.w	r3, r0, r3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3360      	adds	r3, #96	; 0x60
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f009 fd76 	bl	800d9b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ecc:	e000      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8003ece:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b08a      	sub	sp, #40	; 0x28
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	0c5b      	lsrs	r3, r3, #17
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f0a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d004      	beq.n	8003f1c <HCD_RXQLVL_IRQHandler+0x46>
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b05      	cmp	r3, #5
 8003f16:	f000 80a9 	beq.w	800406c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003f1a:	e0aa      	b.n	8004072 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 80a6 	beq.w	8004070 <HCD_RXQLVL_IRQHandler+0x19a>
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	212c      	movs	r1, #44	; 0x2c
 8003f2a:	fb01 f303 	mul.w	r3, r1, r3
 8003f2e:	4413      	add	r3, r2
 8003f30:	3344      	adds	r3, #68	; 0x44
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 809b 	beq.w	8004070 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	212c      	movs	r1, #44	; 0x2c
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	3350      	adds	r3, #80	; 0x50
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	441a      	add	r2, r3
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	202c      	movs	r0, #44	; 0x2c
 8003f54:	fb00 f303 	mul.w	r3, r0, r3
 8003f58:	440b      	add	r3, r1
 8003f5a:	334c      	adds	r3, #76	; 0x4c
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d87a      	bhi.n	8004058 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	212c      	movs	r1, #44	; 0x2c
 8003f6c:	fb01 f303 	mul.w	r3, r1, r3
 8003f70:	4413      	add	r3, r2
 8003f72:	3344      	adds	r3, #68	; 0x44
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	b292      	uxth	r2, r2
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f003 f88e 	bl	800709c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	212c      	movs	r1, #44	; 0x2c
 8003f86:	fb01 f303 	mul.w	r3, r1, r3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3344      	adds	r3, #68	; 0x44
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	441a      	add	r2, r3
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	202c      	movs	r0, #44	; 0x2c
 8003f9a:	fb00 f303 	mul.w	r3, r0, r3
 8003f9e:	440b      	add	r3, r1
 8003fa0:	3344      	adds	r3, #68	; 0x44
 8003fa2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	212c      	movs	r1, #44	; 0x2c
 8003faa:	fb01 f303 	mul.w	r3, r1, r3
 8003fae:	4413      	add	r3, r2
 8003fb0:	3350      	adds	r3, #80	; 0x50
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	441a      	add	r2, r3
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	202c      	movs	r0, #44	; 0x2c
 8003fbe:	fb00 f303 	mul.w	r3, r0, r3
 8003fc2:	440b      	add	r3, r1
 8003fc4:	3350      	adds	r3, #80	; 0x50
 8003fc6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	0cdb      	lsrs	r3, r3, #19
 8003fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fdc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	212c      	movs	r1, #44	; 0x2c
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	3340      	adds	r3, #64	; 0x40
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d13c      	bne.n	8004070 <HCD_RXQLVL_IRQHandler+0x19a>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d039      	beq.n	8004070 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	4413      	add	r3, r2
 8004004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004012:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800401a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	4413      	add	r3, r2
 8004024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004028:	461a      	mov	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	212c      	movs	r1, #44	; 0x2c
 8004034:	fb01 f303 	mul.w	r3, r1, r3
 8004038:	4413      	add	r3, r2
 800403a:	3354      	adds	r3, #84	; 0x54
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	f083 0301 	eor.w	r3, r3, #1
 8004042:	b2d8      	uxtb	r0, r3
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	212c      	movs	r1, #44	; 0x2c
 800404a:	fb01 f303 	mul.w	r3, r1, r3
 800404e:	4413      	add	r3, r2
 8004050:	3354      	adds	r3, #84	; 0x54
 8004052:	4602      	mov	r2, r0
 8004054:	701a      	strb	r2, [r3, #0]
      break;
 8004056:	e00b      	b.n	8004070 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	212c      	movs	r1, #44	; 0x2c
 800405e:	fb01 f303 	mul.w	r3, r1, r3
 8004062:	4413      	add	r3, r2
 8004064:	3360      	adds	r3, #96	; 0x60
 8004066:	2204      	movs	r2, #4
 8004068:	701a      	strb	r2, [r3, #0]
      break;
 800406a:	e001      	b.n	8004070 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800406c:	bf00      	nop
 800406e:	e000      	b.n	8004072 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004070:	bf00      	nop
  }
}
 8004072:	bf00      	nop
 8004074:	3728      	adds	r7, #40	; 0x28
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b086      	sub	sp, #24
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80040a6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d10b      	bne.n	80040ca <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d102      	bne.n	80040c2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f009 fc5f 	bl	800d980 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f043 0302 	orr.w	r3, r3, #2
 80040c8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d132      	bne.n	800413a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f043 0308 	orr.w	r3, r3, #8
 80040da:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d126      	bne.n	8004134 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d113      	bne.n	8004116 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80040f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040f8:	d106      	bne.n	8004108 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2102      	movs	r1, #2
 8004100:	4618      	mov	r0, r3
 8004102:	f003 f985 	bl	8007410 <USB_InitFSLSPClkSel>
 8004106:	e011      	b.n	800412c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2101      	movs	r1, #1
 800410e:	4618      	mov	r0, r3
 8004110:	f003 f97e 	bl	8007410 <USB_InitFSLSPClkSel>
 8004114:	e00a      	b.n	800412c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d106      	bne.n	800412c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004124:	461a      	mov	r2, r3
 8004126:	f64e 2360 	movw	r3, #60000	; 0xea60
 800412a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f009 fc51 	bl	800d9d4 <HAL_HCD_PortEnabled_Callback>
 8004132:	e002      	b.n	800413a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f009 fc5b 	bl	800d9f0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	2b20      	cmp	r3, #32
 8004142:	d103      	bne.n	800414c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f043 0320 	orr.w	r3, r3, #32
 800414a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004152:	461a      	mov	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	6013      	str	r3, [r2, #0]
}
 8004158:	bf00      	nop
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004170:	f000 f808 	bl	8004184 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004174:	4b02      	ldr	r3, [pc, #8]	; (8004180 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004176:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800417a:	615a      	str	r2, [r3, #20]
  }
}
 800417c:	bf00      	nop
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40013c00 	.word	0x40013c00

08004184 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800419e:	4b23      	ldr	r3, [pc, #140]	; (800422c <HAL_PWREx_EnableOverDrive+0x98>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	4a22      	ldr	r2, [pc, #136]	; (800422c <HAL_PWREx_EnableOverDrive+0x98>)
 80041a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a8:	6413      	str	r3, [r2, #64]	; 0x40
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_PWREx_EnableOverDrive+0x98>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80041b6:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041c2:	f7fd fd05 	bl	8001bd0 <HAL_GetTick>
 80041c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041c8:	e009      	b.n	80041de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041ca:	f7fd fd01 	bl	8001bd0 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d8:	d901      	bls.n	80041de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e022      	b.n	8004224 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041de:	4b14      	ldr	r3, [pc, #80]	; (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ea:	d1ee      	bne.n	80041ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041ec:	4b10      	ldr	r3, [pc, #64]	; (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0f      	ldr	r2, [pc, #60]	; (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041f8:	f7fd fcea 	bl	8001bd0 <HAL_GetTick>
 80041fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041fe:	e009      	b.n	8004214 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004200:	f7fd fce6 	bl	8001bd0 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800420e:	d901      	bls.n	8004214 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e007      	b.n	8004224 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004220:	d1ee      	bne.n	8004200 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40023800 	.word	0x40023800
 8004230:	40007000 	.word	0x40007000

08004234 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800423c:	2300      	movs	r3, #0
 800423e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e293      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8089 	beq.w	800436a <HAL_RCC_OscConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004258:	4b97      	ldr	r3, [pc, #604]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b04      	cmp	r3, #4
 8004262:	d00c      	beq.n	800427e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004264:	4b94      	ldr	r3, [pc, #592]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d112      	bne.n	8004296 <HAL_RCC_OscConfig+0x62>
 8004270:	4b91      	ldr	r3, [pc, #580]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800427c:	d10b      	bne.n	8004296 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427e:	4b8e      	ldr	r3, [pc, #568]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d06e      	beq.n	8004368 <HAL_RCC_OscConfig+0x134>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d16a      	bne.n	8004368 <HAL_RCC_OscConfig+0x134>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e26d      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429e:	d106      	bne.n	80042ae <HAL_RCC_OscConfig+0x7a>
 80042a0:	4b85      	ldr	r3, [pc, #532]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a84      	ldr	r2, [pc, #528]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e02e      	b.n	800430c <HAL_RCC_OscConfig+0xd8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x9c>
 80042b6:	4b80      	ldr	r3, [pc, #512]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a7f      	ldr	r2, [pc, #508]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80042bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b7d      	ldr	r3, [pc, #500]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7c      	ldr	r2, [pc, #496]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80042c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e01d      	b.n	800430c <HAL_RCC_OscConfig+0xd8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0xc0>
 80042da:	4b77      	ldr	r3, [pc, #476]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a76      	ldr	r2, [pc, #472]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80042e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b74      	ldr	r3, [pc, #464]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a73      	ldr	r2, [pc, #460]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0xd8>
 80042f4:	4b70      	ldr	r3, [pc, #448]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a6f      	ldr	r2, [pc, #444]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b6d      	ldr	r3, [pc, #436]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a6c      	ldr	r2, [pc, #432]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d014      	beq.n	800433e <HAL_RCC_OscConfig+0x10a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fd fc5c 	bl	8001bd0 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	e009      	b.n	8004330 <HAL_RCC_OscConfig+0xfc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7fd fc58 	bl	8001bd0 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0xfc>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e220      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004330:	4b61      	ldr	r3, [pc, #388]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0ef      	beq.n	800431c <HAL_RCC_OscConfig+0xe8>
 800433c:	e015      	b.n	800436a <HAL_RCC_OscConfig+0x136>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433e:	f7fd fc47 	bl	8001bd0 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004344:	e009      	b.n	800435a <HAL_RCC_OscConfig+0x126>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004346:	f7fd fc43 	bl	8001bd0 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e20b      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435a:	4b57      	ldr	r3, [pc, #348]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1ef      	bne.n	8004346 <HAL_RCC_OscConfig+0x112>
 8004366:	e000      	b.n	800436a <HAL_RCC_OscConfig+0x136>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d069      	beq.n	800444a <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004376:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <HAL_RCC_OscConfig+0x166>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004382:	4b4d      	ldr	r3, [pc, #308]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
 800438a:	2b08      	cmp	r3, #8
 800438c:	d11c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x194>
 800438e:	4b4a      	ldr	r3, [pc, #296]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d116      	bne.n	80043c8 <HAL_RCC_OscConfig+0x194>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439a:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_RCC_OscConfig+0x17e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d001      	beq.n	80043b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e1df      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b2:	4b41      	ldr	r3, [pc, #260]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	493d      	ldr	r1, [pc, #244]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c6:	e040      	b.n	800444a <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d023      	beq.n	8004418 <HAL_RCC_OscConfig+0x1e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d0:	4b39      	ldr	r3, [pc, #228]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a38      	ldr	r2, [pc, #224]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fd fbf8 	bl	8001bd0 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x1c2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e4:	f7fd fbf4 	bl	8001bd0 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e1bd      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f6:	4b30      	ldr	r3, [pc, #192]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004402:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4929      	ldr	r1, [pc, #164]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004412:	4313      	orrs	r3, r2
 8004414:	600b      	str	r3, [r1, #0]
 8004416:	e018      	b.n	800444a <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004418:	4b27      	ldr	r3, [pc, #156]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a26      	ldr	r2, [pc, #152]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004424:	f7fd fbd4 	bl	8001bd0 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x20a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800442c:	f7fd fbd0 	bl	8001bd0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e199      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443e:	4b1e      	ldr	r3, [pc, #120]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d038      	beq.n	80044c8 <HAL_RCC_OscConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d019      	beq.n	8004492 <HAL_RCC_OscConfig+0x25e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800445e:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004462:	4a15      	ldr	r2, [pc, #84]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446a:	f7fd fbb1 	bl	8001bd0 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x250>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004472:	f7fd fbad 	bl	8001bd0 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x250>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e176      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004484:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x23e>
 8004490:	e01a      	b.n	80044c8 <HAL_RCC_OscConfig+0x294>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004492:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004496:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449e:	f7fd fb97 	bl	8001bd0 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a4:	e00a      	b.n	80044bc <HAL_RCC_OscConfig+0x288>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a6:	f7fd fb93 	bl	8001bd0 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d903      	bls.n	80044bc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e15c      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>
 80044b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044bc:	4b91      	ldr	r3, [pc, #580]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1ee      	bne.n	80044a6 <HAL_RCC_OscConfig+0x272>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80a4 	beq.w	800461e <HAL_RCC_OscConfig+0x3ea>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d6:	4b8b      	ldr	r3, [pc, #556]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10d      	bne.n	80044fe <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e2:	4b88      	ldr	r3, [pc, #544]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	4a87      	ldr	r2, [pc, #540]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ec:	6413      	str	r3, [r2, #64]	; 0x40
 80044ee:	4b85      	ldr	r3, [pc, #532]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044fa:	2301      	movs	r3, #1
 80044fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fe:	4b82      	ldr	r3, [pc, #520]	; (8004708 <HAL_RCC_OscConfig+0x4d4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d118      	bne.n	800453c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800450a:	4b7f      	ldr	r3, [pc, #508]	; (8004708 <HAL_RCC_OscConfig+0x4d4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a7e      	ldr	r2, [pc, #504]	; (8004708 <HAL_RCC_OscConfig+0x4d4>)
 8004510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004516:	f7fd fb5b 	bl	8001bd0 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451e:	f7fd fb57 	bl	8001bd0 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b64      	cmp	r3, #100	; 0x64
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e120      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004530:	4b75      	ldr	r3, [pc, #468]	; (8004708 <HAL_RCC_OscConfig+0x4d4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d106      	bne.n	8004552 <HAL_RCC_OscConfig+0x31e>
 8004544:	4b6f      	ldr	r3, [pc, #444]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	4a6e      	ldr	r2, [pc, #440]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	6713      	str	r3, [r2, #112]	; 0x70
 8004550:	e02d      	b.n	80045ae <HAL_RCC_OscConfig+0x37a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10c      	bne.n	8004574 <HAL_RCC_OscConfig+0x340>
 800455a:	4b6a      	ldr	r3, [pc, #424]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455e:	4a69      	ldr	r2, [pc, #420]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004560:	f023 0301 	bic.w	r3, r3, #1
 8004564:	6713      	str	r3, [r2, #112]	; 0x70
 8004566:	4b67      	ldr	r3, [pc, #412]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	4a66      	ldr	r2, [pc, #408]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800456c:	f023 0304 	bic.w	r3, r3, #4
 8004570:	6713      	str	r3, [r2, #112]	; 0x70
 8004572:	e01c      	b.n	80045ae <HAL_RCC_OscConfig+0x37a>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b05      	cmp	r3, #5
 800457a:	d10c      	bne.n	8004596 <HAL_RCC_OscConfig+0x362>
 800457c:	4b61      	ldr	r3, [pc, #388]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	4a60      	ldr	r2, [pc, #384]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004582:	f043 0304 	orr.w	r3, r3, #4
 8004586:	6713      	str	r3, [r2, #112]	; 0x70
 8004588:	4b5e      	ldr	r3, [pc, #376]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	4a5d      	ldr	r2, [pc, #372]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	6713      	str	r3, [r2, #112]	; 0x70
 8004594:	e00b      	b.n	80045ae <HAL_RCC_OscConfig+0x37a>
 8004596:	4b5b      	ldr	r3, [pc, #364]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459a:	4a5a      	ldr	r2, [pc, #360]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	6713      	str	r3, [r2, #112]	; 0x70
 80045a2:	4b58      	ldr	r3, [pc, #352]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	4a57      	ldr	r2, [pc, #348]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80045a8:	f023 0304 	bic.w	r3, r3, #4
 80045ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d015      	beq.n	80045e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b6:	f7fd fb0b 	bl	8001bd0 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045bc:	e00a      	b.n	80045d4 <HAL_RCC_OscConfig+0x3a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045be:	f7fd fb07 	bl	8001bd0 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x3a0>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e0ce      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d4:	4b4b      	ldr	r3, [pc, #300]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ee      	beq.n	80045be <HAL_RCC_OscConfig+0x38a>
 80045e0:	e014      	b.n	800460c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e2:	f7fd faf5 	bl	8001bd0 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e8:	e00a      	b.n	8004600 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fd faf1 	bl	8001bd0 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e0b8      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004600:	4b40      	ldr	r3, [pc, #256]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1ee      	bne.n	80045ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d105      	bne.n	800461e <HAL_RCC_OscConfig+0x3ea>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004612:	4b3c      	ldr	r3, [pc, #240]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	4a3b      	ldr	r2, [pc, #236]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80a4 	beq.w	8004770 <HAL_RCC_OscConfig+0x53c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004628:	4b36      	ldr	r3, [pc, #216]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 030c 	and.w	r3, r3, #12
 8004630:	2b08      	cmp	r3, #8
 8004632:	d06b      	beq.n	800470c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d149      	bne.n	80046d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463c:	4b31      	ldr	r3, [pc, #196]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a30      	ldr	r2, [pc, #192]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fd fac2 	bl	8001bd0 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x42e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004650:	f7fd fabe 	bl	8001bd0 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e087      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004662:	4b28      	ldr	r3, [pc, #160]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x41c>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69da      	ldr	r2, [r3, #28]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	019b      	lsls	r3, r3, #6
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	085b      	lsrs	r3, r3, #1
 8004686:	3b01      	subs	r3, #1
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	4313      	orrs	r3, r2
 8004694:	4a1b      	ldr	r2, [pc, #108]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004696:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800469a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800469c:	4b19      	ldr	r3, [pc, #100]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a18      	ldr	r2, [pc, #96]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80046a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a8:	f7fd fa92 	bl	8001bd0 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b0:	f7fd fa8e 	bl	8001bd0 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e057      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0x47c>
 80046ce:	e04f      	b.n	8004770 <HAL_RCC_OscConfig+0x53c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d0:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a0b      	ldr	r2, [pc, #44]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80046d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fd fa78 	bl	8001bd0 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e4:	f7fd fa74 	bl	8001bd0 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e03d      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f6:	4b03      	ldr	r3, [pc, #12]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4b0>
 8004702:	e035      	b.n	8004770 <HAL_RCC_OscConfig+0x53c>
 8004704:	40023800 	.word	0x40023800
 8004708:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800470c:	4b1b      	ldr	r3, [pc, #108]	; (800477c <HAL_RCC_OscConfig+0x548>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d028      	beq.n	800476c <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d121      	bne.n	800476c <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d11a      	bne.n	800476c <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800473c:	4013      	ands	r3, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004742:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004744:	4293      	cmp	r3, r2
 8004746:	d111      	bne.n	800476c <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	3b01      	subs	r3, #1
 8004756:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d107      	bne.n	800476c <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_OscConfig+0x53c>
#endif
      {
        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <HAL_RCC_OscConfig+0x53e>
      }
    }
  }
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40023800 	.word	0x40023800

08004780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0d0      	b.n	800493a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004798:	4b6a      	ldr	r3, [pc, #424]	; (8004944 <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d910      	bls.n	80047c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a6:	4b67      	ldr	r3, [pc, #412]	; (8004944 <HAL_RCC_ClockConfig+0x1c4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 020f 	bic.w	r2, r3, #15
 80047ae:	4965      	ldr	r1, [pc, #404]	; (8004944 <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b6:	4b63      	ldr	r3, [pc, #396]	; (8004944 <HAL_RCC_ClockConfig+0x1c4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0b8      	b.n	800493a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d020      	beq.n	8004816 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e0:	4b59      	ldr	r3, [pc, #356]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a58      	ldr	r2, [pc, #352]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 80047e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047f8:	4b53      	ldr	r3, [pc, #332]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4a52      	ldr	r2, [pc, #328]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 80047fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004802:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004804:	4b50      	ldr	r3, [pc, #320]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	494d      	ldr	r1, [pc, #308]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d040      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482a:	4b47      	ldr	r3, [pc, #284]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d115      	bne.n	8004862 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e07f      	b.n	800493a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d107      	bne.n	8004852 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004842:	4b41      	ldr	r3, [pc, #260]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e073      	b.n	800493a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004852:	4b3d      	ldr	r3, [pc, #244]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e06b      	b.n	800493a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004862:	4b39      	ldr	r3, [pc, #228]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f023 0203 	bic.w	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	4936      	ldr	r1, [pc, #216]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 8004870:	4313      	orrs	r3, r2
 8004872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004874:	f7fd f9ac 	bl	8001bd0 <HAL_GetTick>
 8004878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487a:	e00a      	b.n	8004892 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800487c:	f7fd f9a8 	bl	8001bd0 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	f241 3288 	movw	r2, #5000	; 0x1388
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e053      	b.n	800493a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004892:	4b2d      	ldr	r3, [pc, #180]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 020c 	and.w	r2, r3, #12
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d1eb      	bne.n	800487c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048a4:	4b27      	ldr	r3, [pc, #156]	; (8004944 <HAL_RCC_ClockConfig+0x1c4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d210      	bcs.n	80048d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b2:	4b24      	ldr	r3, [pc, #144]	; (8004944 <HAL_RCC_ClockConfig+0x1c4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 020f 	bic.w	r2, r3, #15
 80048ba:	4922      	ldr	r1, [pc, #136]	; (8004944 <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	4313      	orrs	r3, r2
 80048c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b20      	ldr	r3, [pc, #128]	; (8004944 <HAL_RCC_ClockConfig+0x1c4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e032      	b.n	800493a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e0:	4b19      	ldr	r3, [pc, #100]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	4916      	ldr	r1, [pc, #88]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048fe:	4b12      	ldr	r3, [pc, #72]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	490e      	ldr	r1, [pc, #56]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004912:	f000 f831 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004916:	4602      	mov	r2, r0
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	490a      	ldr	r1, [pc, #40]	; (800494c <HAL_RCC_ClockConfig+0x1cc>)
 8004924:	5ccb      	ldrb	r3, [r1, r3]
 8004926:	fa22 f303 	lsr.w	r3, r2, r3
 800492a:	4a09      	ldr	r2, [pc, #36]	; (8004950 <HAL_RCC_ClockConfig+0x1d0>)
 800492c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800492e:	4b09      	ldr	r3, [pc, #36]	; (8004954 <HAL_RCC_ClockConfig+0x1d4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fc fcbc 	bl	80012b0 <HAL_InitTick>

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40023c00 	.word	0x40023c00
 8004948:	40023800 	.word	0x40023800
 800494c:	0800e1d0 	.word	0x0800e1d0
 8004950:	20000000 	.word	0x20000000
 8004954:	20000004 	.word	0x20000004

08004958 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <HAL_RCC_EnableCSS+0x1c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a04      	ldr	r2, [pc, #16]	; (8004974 <HAL_RCC_EnableCSS+0x1c>)
 8004962:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004966:	6013      	str	r3, [r2, #0]
}
 8004968:	bf00      	nop
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800

08004978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800497c:	b090      	sub	sp, #64	; 0x40
 800497e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	637b      	str	r3, [r7, #52]	; 0x34
 8004984:	2300      	movs	r3, #0
 8004986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004988:	2300      	movs	r3, #0
 800498a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004990:	4b59      	ldr	r3, [pc, #356]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b08      	cmp	r3, #8
 800499a:	d00d      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0x40>
 800499c:	2b08      	cmp	r3, #8
 800499e:	f200 80a1 	bhi.w	8004ae4 <HAL_RCC_GetSysClockFreq+0x16c>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x34>
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049aa:	e09b      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049ac:	4b53      	ldr	r3, [pc, #332]	; (8004afc <HAL_RCC_GetSysClockFreq+0x184>)
 80049ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049b0:	e09b      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b2:	4b53      	ldr	r3, [pc, #332]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80049b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049b6:	e098      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b8:	4b4f      	ldr	r3, [pc, #316]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80049c2:	4b4d      	ldr	r3, [pc, #308]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d028      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ce:	4b4a      	ldr	r3, [pc, #296]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	099b      	lsrs	r3, r3, #6
 80049d4:	2200      	movs	r2, #0
 80049d6:	623b      	str	r3, [r7, #32]
 80049d8:	627a      	str	r2, [r7, #36]	; 0x24
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049e0:	2100      	movs	r1, #0
 80049e2:	4b47      	ldr	r3, [pc, #284]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80049e4:	fb03 f201 	mul.w	r2, r3, r1
 80049e8:	2300      	movs	r3, #0
 80049ea:	fb00 f303 	mul.w	r3, r0, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	4a43      	ldr	r2, [pc, #268]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80049f2:	fba0 1202 	umull	r1, r2, r0, r2
 80049f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049f8:	460a      	mov	r2, r1
 80049fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80049fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049fe:	4413      	add	r3, r2
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a04:	2200      	movs	r2, #0
 8004a06:	61bb      	str	r3, [r7, #24]
 8004a08:	61fa      	str	r2, [r7, #28]
 8004a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a12:	f7fb fc05 	bl	8000220 <__aeabi_uldivmod>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a1e:	e053      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a20:	4b35      	ldr	r3, [pc, #212]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	099b      	lsrs	r3, r3, #6
 8004a26:	2200      	movs	r2, #0
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	617a      	str	r2, [r7, #20]
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a32:	f04f 0b00 	mov.w	fp, #0
 8004a36:	4652      	mov	r2, sl
 8004a38:	465b      	mov	r3, fp
 8004a3a:	f04f 0000 	mov.w	r0, #0
 8004a3e:	f04f 0100 	mov.w	r1, #0
 8004a42:	0159      	lsls	r1, r3, #5
 8004a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a48:	0150      	lsls	r0, r2, #5
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	ebb2 080a 	subs.w	r8, r2, sl
 8004a52:	eb63 090b 	sbc.w	r9, r3, fp
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a6a:	ebb2 0408 	subs.w	r4, r2, r8
 8004a6e:	eb63 0509 	sbc.w	r5, r3, r9
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	00eb      	lsls	r3, r5, #3
 8004a7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a80:	00e2      	lsls	r2, r4, #3
 8004a82:	4614      	mov	r4, r2
 8004a84:	461d      	mov	r5, r3
 8004a86:	eb14 030a 	adds.w	r3, r4, sl
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	eb45 030b 	adc.w	r3, r5, fp
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	028b      	lsls	r3, r1, #10
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	028a      	lsls	r2, r1, #10
 8004aac:	4610      	mov	r0, r2
 8004aae:	4619      	mov	r1, r3
 8004ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	60fa      	str	r2, [r7, #12]
 8004ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004abc:	f7fb fbb0 	bl	8000220 <__aeabi_uldivmod>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	0c1b      	lsrs	r3, r3, #16
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004ad8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ae2:	e002      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_RCC_GetSysClockFreq+0x184>)
 8004ae6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3740      	adds	r7, #64	; 0x40
 8004af0:	46bd      	mov	sp, r7
 8004af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800
 8004afc:	00f42400 	.word	0x00f42400
 8004b00:	017d7840 	.word	0x017d7840

08004b04 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b08:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000000 	.word	0x20000000

08004b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b20:	f7ff fff0 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	0a9b      	lsrs	r3, r3, #10
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	4903      	ldr	r1, [pc, #12]	; (8004b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b32:	5ccb      	ldrb	r3, [r1, r3]
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	0800e1e0 	.word	0x0800e1e0

08004b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b48:	f7ff ffdc 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0b5b      	lsrs	r3, r3, #13
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4903      	ldr	r1, [pc, #12]	; (8004b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b5a:	5ccb      	ldrb	r3, [r1, r3]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	0800e1e0 	.word	0x0800e1e0

08004b6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	220f      	movs	r2, #15
 8004b7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b7c:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0203 	and.w	r2, r3, #3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ba0:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	08db      	lsrs	r3, r3, #3
 8004ba6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bae:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <HAL_RCC_GetClockConfig+0x60>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 020f 	and.w	r2, r3, #15
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	601a      	str	r2, [r3, #0]
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	40023c00 	.word	0x40023c00

08004bd0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004bd4:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bdc:	2b80      	cmp	r3, #128	; 0x80
 8004bde:	d104      	bne.n	8004bea <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004be0:	f000 f80a 	bl	8004bf8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004be4:	4b03      	ldr	r3, [pc, #12]	; (8004bf4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004be6:	2280      	movs	r2, #128	; 0x80
 8004be8:	701a      	strb	r2, [r3, #0]
  }
}
 8004bea:	bf00      	nop
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	4002380e 	.word	0x4002380e

08004bf8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d012      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c2c:	4b65      	ldr	r3, [pc, #404]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	4a64      	ldr	r2, [pc, #400]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c36:	6093      	str	r3, [r2, #8]
 8004c38:	4b62      	ldr	r3, [pc, #392]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	4960      	ldr	r1, [pc, #384]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d017      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c5e:	4b59      	ldr	r3, [pc, #356]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6c:	4955      	ldr	r1, [pc, #340]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c7c:	d101      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d017      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c9a:	4b4a      	ldr	r3, [pc, #296]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ca0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	4946      	ldr	r1, [pc, #280]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cb8:	d101      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 808b 	beq.w	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cd8:	4b3a      	ldr	r3, [pc, #232]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	4a39      	ldr	r2, [pc, #228]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ce4:	4b37      	ldr	r3, [pc, #220]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cf0:	4b35      	ldr	r3, [pc, #212]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a34      	ldr	r2, [pc, #208]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cfc:	f7fc ff68 	bl	8001bd0 <HAL_GetTick>
 8004d00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d04:	f7fc ff64 	bl	8001bd0 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	; 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e2bc      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d16:	4b2c      	ldr	r3, [pc, #176]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d22:	4b28      	ldr	r3, [pc, #160]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d035      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d02e      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d40:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d4a:	4b1e      	ldr	r3, [pc, #120]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4e:	4a1d      	ldr	r2, [pc, #116]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d56:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	4a1a      	ldr	r2, [pc, #104]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d62:	4a18      	ldr	r2, [pc, #96]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d68:	4b16      	ldr	r3, [pc, #88]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d114      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fc ff2c 	bl	8001bd0 <HAL_GetTick>
 8004d78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d7c:	f7fc ff28 	bl	8001bd0 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e27e      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d92:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0ee      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004daa:	d111      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004db8:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004dba:	400b      	ands	r3, r1
 8004dbc:	4901      	ldr	r1, [pc, #4]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	608b      	str	r3, [r1, #8]
 8004dc2:	e00b      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40007000 	.word	0x40007000
 8004dcc:	0ffffcff 	.word	0x0ffffcff
 8004dd0:	4ba4      	ldr	r3, [pc, #656]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4aa3      	ldr	r2, [pc, #652]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004dd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dda:	6093      	str	r3, [r2, #8]
 8004ddc:	4ba1      	ldr	r3, [pc, #644]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004dde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de8:	499e      	ldr	r1, [pc, #632]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d010      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dfa:	4b9a      	ldr	r3, [pc, #616]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e00:	4a98      	ldr	r2, [pc, #608]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e0a:	4b96      	ldr	r3, [pc, #600]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	4993      	ldr	r1, [pc, #588]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e28:	4b8e      	ldr	r3, [pc, #568]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e36:	498b      	ldr	r1, [pc, #556]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e4a:	4b86      	ldr	r3, [pc, #536]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e58:	4982      	ldr	r1, [pc, #520]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e6c:	4b7d      	ldr	r3, [pc, #500]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e7a:	497a      	ldr	r1, [pc, #488]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e8e:	4b75      	ldr	r3, [pc, #468]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e94:	f023 0203 	bic.w	r2, r3, #3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9c:	4971      	ldr	r1, [pc, #452]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004eb0:	4b6c      	ldr	r3, [pc, #432]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb6:	f023 020c 	bic.w	r2, r3, #12
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	4969      	ldr	r1, [pc, #420]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ed2:	4b64      	ldr	r3, [pc, #400]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee0:	4960      	ldr	r1, [pc, #384]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ef4:	4b5b      	ldr	r3, [pc, #364]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f02:	4958      	ldr	r1, [pc, #352]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f16:	4b53      	ldr	r3, [pc, #332]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f24:	494f      	ldr	r1, [pc, #316]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f38:	4b4a      	ldr	r3, [pc, #296]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f46:	4947      	ldr	r1, [pc, #284]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f5a:	4b42      	ldr	r3, [pc, #264]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f68:	493e      	ldr	r1, [pc, #248]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f7c:	4b39      	ldr	r3, [pc, #228]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8a:	4936      	ldr	r1, [pc, #216]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d011      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f9e:	4b31      	ldr	r3, [pc, #196]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fac:	492d      	ldr	r1, [pc, #180]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fbc:	d101      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fce:	4b25      	ldr	r3, [pc, #148]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fdc:	4921      	ldr	r1, [pc, #132]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ff0:	4b1c      	ldr	r3, [pc, #112]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ffe:	4919      	ldr	r1, [pc, #100]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005012:	4b14      	ldr	r3, [pc, #80]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005018:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005020:	4910      	ldr	r1, [pc, #64]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d006      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 809d 	beq.w	8005176 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800503c:	4b09      	ldr	r3, [pc, #36]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a08      	ldr	r2, [pc, #32]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005042:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005046:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005048:	f7fc fdc2 	bl	8001bd0 <HAL_GetTick>
 800504c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800504e:	e00b      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005050:	f7fc fdbe 	bl	8001bd0 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b64      	cmp	r3, #100	; 0x64
 800505c:	d904      	bls.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e116      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005062:	bf00      	nop
 8005064:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005068:	4b8b      	ldr	r3, [pc, #556]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1ed      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d017      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d113      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005088:	4b83      	ldr	r3, [pc, #524]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800508a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508e:	0e1b      	lsrs	r3, r3, #24
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	019a      	lsls	r2, r3, #6
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	061b      	lsls	r3, r3, #24
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	071b      	lsls	r3, r3, #28
 80050a8:	497b      	ldr	r1, [pc, #492]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d004      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c4:	d00a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d024      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050da:	d11f      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050dc:	4b6e      	ldr	r3, [pc, #440]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e2:	0f1b      	lsrs	r3, r3, #28
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	019a      	lsls	r2, r3, #6
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	061b      	lsls	r3, r3, #24
 80050f6:	431a      	orrs	r2, r3
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	071b      	lsls	r3, r3, #28
 80050fc:	4966      	ldr	r1, [pc, #408]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005104:	4b64      	ldr	r3, [pc, #400]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800510a:	f023 021f 	bic.w	r2, r3, #31
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	3b01      	subs	r3, #1
 8005114:	4960      	ldr	r1, [pc, #384]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00d      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	019a      	lsls	r2, r3, #6
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	061b      	lsls	r3, r3, #24
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	071b      	lsls	r3, r3, #28
 800513c:	4956      	ldr	r1, [pc, #344]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005144:	4b54      	ldr	r3, [pc, #336]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a53      	ldr	r2, [pc, #332]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800514a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800514e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005150:	f7fc fd3e 	bl	8001bd0 <HAL_GetTick>
 8005154:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005156:	e008      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005158:	f7fc fd3a 	bl	8001bd0 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b64      	cmp	r3, #100	; 0x64
 8005164:	d901      	bls.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e092      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800516a:	4b4b      	ldr	r3, [pc, #300]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f0      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	2b01      	cmp	r3, #1
 800517a:	f040 8088 	bne.w	800528e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800517e:	4b46      	ldr	r3, [pc, #280]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a45      	ldr	r2, [pc, #276]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800518a:	f7fc fd21 	bl	8001bd0 <HAL_GetTick>
 800518e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005190:	e008      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005192:	f7fc fd1d 	bl	8001bd0 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b64      	cmp	r3, #100	; 0x64
 800519e:	d901      	bls.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e075      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051a4:	4b3c      	ldr	r3, [pc, #240]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051b0:	d0ef      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d024      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d120      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051da:	4b2f      	ldr	r3, [pc, #188]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	019a      	lsls	r2, r3, #6
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	041b      	lsls	r3, r3, #16
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	061b      	lsls	r3, r3, #24
 80051fa:	4927      	ldr	r1, [pc, #156]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005202:	4b25      	ldr	r3, [pc, #148]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005208:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	3b01      	subs	r3, #1
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	4920      	ldr	r1, [pc, #128]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d018      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800522c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005230:	d113      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005232:	4b19      	ldr	r3, [pc, #100]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	0e1b      	lsrs	r3, r3, #24
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	019a      	lsls	r2, r3, #6
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	041b      	lsls	r3, r3, #16
 800524c:	431a      	orrs	r2, r3
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	061b      	lsls	r3, r3, #24
 8005252:	4911      	ldr	r1, [pc, #68]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800525a:	4b0f      	ldr	r3, [pc, #60]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a0e      	ldr	r2, [pc, #56]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005266:	f7fc fcb3 	bl	8001bd0 <HAL_GetTick>
 800526a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800526c:	e008      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800526e:	f7fc fcaf 	bl	8001bd0 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b64      	cmp	r3, #100	; 0x64
 800527a:	d901      	bls.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e007      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005280:	4b05      	ldr	r3, [pc, #20]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800528c:	d1ef      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40023800 	.word	0x40023800

0800529c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e049      	b.n	8005342 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f841 	bl	800534a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4619      	mov	r1, r3
 80052da:	4610      	mov	r0, r2
 80052dc:	f000 fa00 	bl	80056e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	d001      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e054      	b.n	8005422 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a26      	ldr	r2, [pc, #152]	; (8005430 <HAL_TIM_Base_Start_IT+0xd0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d022      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x80>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a2:	d01d      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x80>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a22      	ldr	r2, [pc, #136]	; (8005434 <HAL_TIM_Base_Start_IT+0xd4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d018      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x80>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a21      	ldr	r2, [pc, #132]	; (8005438 <HAL_TIM_Base_Start_IT+0xd8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d013      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x80>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1f      	ldr	r2, [pc, #124]	; (800543c <HAL_TIM_Base_Start_IT+0xdc>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00e      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x80>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1e      	ldr	r2, [pc, #120]	; (8005440 <HAL_TIM_Base_Start_IT+0xe0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d009      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x80>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1c      	ldr	r2, [pc, #112]	; (8005444 <HAL_TIM_Base_Start_IT+0xe4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d004      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x80>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1b      	ldr	r2, [pc, #108]	; (8005448 <HAL_TIM_Base_Start_IT+0xe8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d115      	bne.n	800540c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	4b19      	ldr	r3, [pc, #100]	; (800544c <HAL_TIM_Base_Start_IT+0xec>)
 80053e8:	4013      	ands	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b06      	cmp	r3, #6
 80053f0:	d015      	beq.n	800541e <HAL_TIM_Base_Start_IT+0xbe>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f8:	d011      	beq.n	800541e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0201 	orr.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540a:	e008      	b.n	800541e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e000      	b.n	8005420 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800541e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40010000 	.word	0x40010000
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800
 800543c:	40000c00 	.word	0x40000c00
 8005440:	40010400 	.word	0x40010400
 8005444:	40014000 	.word	0x40014000
 8005448:	40001800 	.word	0x40001800
 800544c:	00010007 	.word	0x00010007

08005450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b02      	cmp	r3, #2
 8005464:	d122      	bne.n	80054ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b02      	cmp	r3, #2
 8005472:	d11b      	bne.n	80054ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0202 	mvn.w	r2, #2
 800547c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f905 	bl	80056a2 <HAL_TIM_IC_CaptureCallback>
 8005498:	e005      	b.n	80054a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f8f7 	bl	800568e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f908 	bl	80056b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d122      	bne.n	8005500 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d11b      	bne.n	8005500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0204 	mvn.w	r2, #4
 80054d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f8db 	bl	80056a2 <HAL_TIM_IC_CaptureCallback>
 80054ec:	e005      	b.n	80054fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f8cd 	bl	800568e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f8de 	bl	80056b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b08      	cmp	r3, #8
 800550c:	d122      	bne.n	8005554 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b08      	cmp	r3, #8
 800551a:	d11b      	bne.n	8005554 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0208 	mvn.w	r2, #8
 8005524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2204      	movs	r2, #4
 800552a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f8b1 	bl	80056a2 <HAL_TIM_IC_CaptureCallback>
 8005540:	e005      	b.n	800554e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f8a3 	bl	800568e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f8b4 	bl	80056b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	2b10      	cmp	r3, #16
 8005560:	d122      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b10      	cmp	r3, #16
 800556e:	d11b      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0210 	mvn.w	r2, #16
 8005578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2208      	movs	r2, #8
 800557e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f887 	bl	80056a2 <HAL_TIM_IC_CaptureCallback>
 8005594:	e005      	b.n	80055a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f879 	bl	800568e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f88a 	bl	80056b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d10e      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d107      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0201 	mvn.w	r2, #1
 80055cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fb fca0 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055de:	2b80      	cmp	r3, #128	; 0x80
 80055e0:	d10e      	bne.n	8005600 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ec:	2b80      	cmp	r3, #128	; 0x80
 80055ee:	d107      	bne.n	8005600 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f91a 	bl	8005834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560e:	d10e      	bne.n	800562e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561a:	2b80      	cmp	r3, #128	; 0x80
 800561c:	d107      	bne.n	800562e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f90d 	bl	8005848 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b40      	cmp	r3, #64	; 0x40
 800563a:	d10e      	bne.n	800565a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005646:	2b40      	cmp	r3, #64	; 0x40
 8005648:	d107      	bne.n	800565a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f838 	bl	80056ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b20      	cmp	r3, #32
 8005666:	d10e      	bne.n	8005686 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f003 0320 	and.w	r3, r3, #32
 8005672:	2b20      	cmp	r3, #32
 8005674:	d107      	bne.n	8005686 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f06f 0220 	mvn.w	r2, #32
 800567e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f8cd 	bl	8005820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005686:	bf00      	nop
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a40      	ldr	r2, [pc, #256]	; (80057f4 <TIM_Base_SetConfig+0x114>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d013      	beq.n	8005720 <TIM_Base_SetConfig+0x40>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fe:	d00f      	beq.n	8005720 <TIM_Base_SetConfig+0x40>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a3d      	ldr	r2, [pc, #244]	; (80057f8 <TIM_Base_SetConfig+0x118>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00b      	beq.n	8005720 <TIM_Base_SetConfig+0x40>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a3c      	ldr	r2, [pc, #240]	; (80057fc <TIM_Base_SetConfig+0x11c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <TIM_Base_SetConfig+0x40>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a3b      	ldr	r2, [pc, #236]	; (8005800 <TIM_Base_SetConfig+0x120>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_Base_SetConfig+0x40>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a3a      	ldr	r2, [pc, #232]	; (8005804 <TIM_Base_SetConfig+0x124>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d108      	bne.n	8005732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a2f      	ldr	r2, [pc, #188]	; (80057f4 <TIM_Base_SetConfig+0x114>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d02b      	beq.n	8005792 <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005740:	d027      	beq.n	8005792 <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a2c      	ldr	r2, [pc, #176]	; (80057f8 <TIM_Base_SetConfig+0x118>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d023      	beq.n	8005792 <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a2b      	ldr	r2, [pc, #172]	; (80057fc <TIM_Base_SetConfig+0x11c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d01f      	beq.n	8005792 <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a2a      	ldr	r2, [pc, #168]	; (8005800 <TIM_Base_SetConfig+0x120>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d01b      	beq.n	8005792 <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a29      	ldr	r2, [pc, #164]	; (8005804 <TIM_Base_SetConfig+0x124>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d017      	beq.n	8005792 <TIM_Base_SetConfig+0xb2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a28      	ldr	r2, [pc, #160]	; (8005808 <TIM_Base_SetConfig+0x128>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <TIM_Base_SetConfig+0xb2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a27      	ldr	r2, [pc, #156]	; (800580c <TIM_Base_SetConfig+0x12c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00f      	beq.n	8005792 <TIM_Base_SetConfig+0xb2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a26      	ldr	r2, [pc, #152]	; (8005810 <TIM_Base_SetConfig+0x130>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00b      	beq.n	8005792 <TIM_Base_SetConfig+0xb2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a25      	ldr	r2, [pc, #148]	; (8005814 <TIM_Base_SetConfig+0x134>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d007      	beq.n	8005792 <TIM_Base_SetConfig+0xb2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a24      	ldr	r2, [pc, #144]	; (8005818 <TIM_Base_SetConfig+0x138>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <TIM_Base_SetConfig+0xb2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a23      	ldr	r2, [pc, #140]	; (800581c <TIM_Base_SetConfig+0x13c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d108      	bne.n	80057a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a0a      	ldr	r2, [pc, #40]	; (80057f4 <TIM_Base_SetConfig+0x114>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_Base_SetConfig+0xf8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a0c      	ldr	r2, [pc, #48]	; (8005804 <TIM_Base_SetConfig+0x124>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d103      	bne.n	80057e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	615a      	str	r2, [r3, #20]
}
 80057e6:	bf00      	nop
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40010000 	.word	0x40010000
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40000800 	.word	0x40000800
 8005800:	40000c00 	.word	0x40000c00
 8005804:	40010400 	.word	0x40010400
 8005808:	40014000 	.word	0x40014000
 800580c:	40014400 	.word	0x40014400
 8005810:	40014800 	.word	0x40014800
 8005814:	40001800 	.word	0x40001800
 8005818:	40001c00 	.word	0x40001c00
 800581c:	40002000 	.word	0x40002000

08005820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e040      	b.n	80058f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb fe96 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	; 0x24
 8005888:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fb1e 	bl	8005edc <UART_SetConfig>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e022      	b.n	80058f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fd76 	bl	80063a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fdfd 	bl	80064e8 <UART_CheckIdleState>
 80058ee:	4603      	mov	r3, r0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b0ba      	sub	sp, #232	; 0xe8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800591e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005922:	f640 030f 	movw	r3, #2063	; 0x80f
 8005926:	4013      	ands	r3, r2
 8005928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800592c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005930:	2b00      	cmp	r3, #0
 8005932:	d115      	bne.n	8005960 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00f      	beq.n	8005960 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b00      	cmp	r3, #0
 800594a:	d009      	beq.n	8005960 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 8297 	beq.w	8005e84 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	4798      	blx	r3
      }
      return;
 800595e:	e291      	b.n	8005e84 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8117 	beq.w	8005b98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800596a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005976:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800597a:	4b85      	ldr	r3, [pc, #532]	; (8005b90 <HAL_UART_IRQHandler+0x298>)
 800597c:	4013      	ands	r3, r2
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 810a 	beq.w	8005b98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	d011      	beq.n	80059b4 <HAL_UART_IRQHandler+0xbc>
 8005990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2201      	movs	r2, #1
 80059a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059aa:	f043 0201 	orr.w	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d011      	beq.n	80059e4 <HAL_UART_IRQHandler+0xec>
 80059c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2202      	movs	r2, #2
 80059d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059da:	f043 0204 	orr.w	r2, r3, #4
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d011      	beq.n	8005a14 <HAL_UART_IRQHandler+0x11c>
 80059f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00b      	beq.n	8005a14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2204      	movs	r2, #4
 8005a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a0a:	f043 0202 	orr.w	r2, r3, #2
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d017      	beq.n	8005a50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a24:	f003 0320 	and.w	r3, r3, #32
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d105      	bne.n	8005a38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00b      	beq.n	8005a50 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a46:	f043 0208 	orr.w	r2, r3, #8
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d012      	beq.n	8005a82 <HAL_UART_IRQHandler+0x18a>
 8005a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00c      	beq.n	8005a82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a78:	f043 0220 	orr.w	r2, r3, #32
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 81fd 	beq.w	8005e88 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a92:	f003 0320 	and.w	r3, r3, #32
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00d      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d005      	beq.n	8005ada <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ad2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d04f      	beq.n	8005b7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fe01 	bl	80066e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aea:	2b40      	cmp	r3, #64	; 0x40
 8005aec:	d141      	bne.n	8005b72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3308      	adds	r3, #8
 8005af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3308      	adds	r3, #8
 8005b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1d9      	bne.n	8005aee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d013      	beq.n	8005b6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b46:	4a13      	ldr	r2, [pc, #76]	; (8005b94 <HAL_UART_IRQHandler+0x29c>)
 8005b48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fc fa9f 	bl	8002092 <HAL_DMA_Abort_IT>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d017      	beq.n	8005b8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b64:	4610      	mov	r0, r2
 8005b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b68:	e00f      	b.n	8005b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f9a0 	bl	8005eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b70:	e00b      	b.n	8005b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f99c 	bl	8005eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b78:	e007      	b.n	8005b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f998 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005b88:	e17e      	b.n	8005e88 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8a:	bf00      	nop
    return;
 8005b8c:	e17c      	b.n	8005e88 <HAL_UART_IRQHandler+0x590>
 8005b8e:	bf00      	nop
 8005b90:	04000120 	.word	0x04000120
 8005b94:	080067ab 	.word	0x080067ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	f040 814c 	bne.w	8005e3a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 8145 	beq.w	8005e3a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 813e 	beq.w	8005e3a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2210      	movs	r2, #16
 8005bc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	f040 80b6 	bne.w	8005d42 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005be2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 8150 	beq.w	8005e8c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	f080 8148 	bcs.w	8005e8c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c10:	f000 8086 	beq.w	8005d20 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c20:	e853 3f00 	ldrex	r3, [r3]
 8005c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1da      	bne.n	8005c14 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3308      	adds	r3, #8
 8005c64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c70:	f023 0301 	bic.w	r3, r3, #1
 8005c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e1      	bne.n	8005c5e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ca4:	e853 3f00 	ldrex	r3, [r3]
 8005ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3308      	adds	r3, #8
 8005cba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e3      	bne.n	8005c9a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf0:	f023 0310 	bic.w	r3, r3, #16
 8005cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d02:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e4      	bne.n	8005ce0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fc f949 	bl	8001fb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f8c2 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d40:	e0a4      	b.n	8005e8c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 8096 	beq.w	8005e90 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 8091 	beq.w	8005e90 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d76:	e853 3f00 	ldrex	r3, [r3]
 8005d7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d90:	647b      	str	r3, [r7, #68]	; 0x44
 8005d92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d98:	e841 2300 	strex	r3, r2, [r1]
 8005d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e4      	bne.n	8005d6e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3308      	adds	r3, #8
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	623b      	str	r3, [r7, #32]
   return(result);
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	f023 0301 	bic.w	r3, r3, #1
 8005dba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dc8:	633a      	str	r2, [r7, #48]	; 0x30
 8005dca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e3      	bne.n	8005da4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f023 0310 	bic.w	r3, r3, #16
 8005e04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	69b9      	ldr	r1, [r7, #24]
 8005e18:	69fa      	ldr	r2, [r7, #28]
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e4      	bne.n	8005df0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f846 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e38:	e02a      	b.n	8005e90 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00e      	beq.n	8005e64 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d008      	beq.n	8005e64 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d01c      	beq.n	8005e94 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	4798      	blx	r3
    }
    return;
 8005e62:	e017      	b.n	8005e94 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d012      	beq.n	8005e96 <HAL_UART_IRQHandler+0x59e>
 8005e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00c      	beq.n	8005e96 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fcaa 	bl	80067d6 <UART_EndTransmit_IT>
    return;
 8005e82:	e008      	b.n	8005e96 <HAL_UART_IRQHandler+0x59e>
      return;
 8005e84:	bf00      	nop
 8005e86:	e006      	b.n	8005e96 <HAL_UART_IRQHandler+0x59e>
    return;
 8005e88:	bf00      	nop
 8005e8a:	e004      	b.n	8005e96 <HAL_UART_IRQHandler+0x59e>
      return;
 8005e8c:	bf00      	nop
 8005e8e:	e002      	b.n	8005e96 <HAL_UART_IRQHandler+0x59e>
      return;
 8005e90:	bf00      	nop
 8005e92:	e000      	b.n	8005e96 <HAL_UART_IRQHandler+0x59e>
    return;
 8005e94:	bf00      	nop
  }

}
 8005e96:	37e8      	adds	r7, #232	; 0xe8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	4ba6      	ldr	r3, [pc, #664]	; (80061a0 <UART_SetConfig+0x2c4>)
 8005f08:	4013      	ands	r3, r2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6812      	ldr	r2, [r2, #0]
 8005f0e:	6979      	ldr	r1, [r7, #20]
 8005f10:	430b      	orrs	r3, r1
 8005f12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a94      	ldr	r2, [pc, #592]	; (80061a4 <UART_SetConfig+0x2c8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d120      	bne.n	8005f9a <UART_SetConfig+0xbe>
 8005f58:	4b93      	ldr	r3, [pc, #588]	; (80061a8 <UART_SetConfig+0x2cc>)
 8005f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d816      	bhi.n	8005f94 <UART_SetConfig+0xb8>
 8005f66:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <UART_SetConfig+0x90>)
 8005f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6c:	08005f7d 	.word	0x08005f7d
 8005f70:	08005f89 	.word	0x08005f89
 8005f74:	08005f83 	.word	0x08005f83
 8005f78:	08005f8f 	.word	0x08005f8f
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	77fb      	strb	r3, [r7, #31]
 8005f80:	e150      	b.n	8006224 <UART_SetConfig+0x348>
 8005f82:	2302      	movs	r3, #2
 8005f84:	77fb      	strb	r3, [r7, #31]
 8005f86:	e14d      	b.n	8006224 <UART_SetConfig+0x348>
 8005f88:	2304      	movs	r3, #4
 8005f8a:	77fb      	strb	r3, [r7, #31]
 8005f8c:	e14a      	b.n	8006224 <UART_SetConfig+0x348>
 8005f8e:	2308      	movs	r3, #8
 8005f90:	77fb      	strb	r3, [r7, #31]
 8005f92:	e147      	b.n	8006224 <UART_SetConfig+0x348>
 8005f94:	2310      	movs	r3, #16
 8005f96:	77fb      	strb	r3, [r7, #31]
 8005f98:	e144      	b.n	8006224 <UART_SetConfig+0x348>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a83      	ldr	r2, [pc, #524]	; (80061ac <UART_SetConfig+0x2d0>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d132      	bne.n	800600a <UART_SetConfig+0x12e>
 8005fa4:	4b80      	ldr	r3, [pc, #512]	; (80061a8 <UART_SetConfig+0x2cc>)
 8005fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005faa:	f003 030c 	and.w	r3, r3, #12
 8005fae:	2b0c      	cmp	r3, #12
 8005fb0:	d828      	bhi.n	8006004 <UART_SetConfig+0x128>
 8005fb2:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <UART_SetConfig+0xdc>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	08005fed 	.word	0x08005fed
 8005fbc:	08006005 	.word	0x08006005
 8005fc0:	08006005 	.word	0x08006005
 8005fc4:	08006005 	.word	0x08006005
 8005fc8:	08005ff9 	.word	0x08005ff9
 8005fcc:	08006005 	.word	0x08006005
 8005fd0:	08006005 	.word	0x08006005
 8005fd4:	08006005 	.word	0x08006005
 8005fd8:	08005ff3 	.word	0x08005ff3
 8005fdc:	08006005 	.word	0x08006005
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	08006005 	.word	0x08006005
 8005fe8:	08005fff 	.word	0x08005fff
 8005fec:	2300      	movs	r3, #0
 8005fee:	77fb      	strb	r3, [r7, #31]
 8005ff0:	e118      	b.n	8006224 <UART_SetConfig+0x348>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	77fb      	strb	r3, [r7, #31]
 8005ff6:	e115      	b.n	8006224 <UART_SetConfig+0x348>
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	77fb      	strb	r3, [r7, #31]
 8005ffc:	e112      	b.n	8006224 <UART_SetConfig+0x348>
 8005ffe:	2308      	movs	r3, #8
 8006000:	77fb      	strb	r3, [r7, #31]
 8006002:	e10f      	b.n	8006224 <UART_SetConfig+0x348>
 8006004:	2310      	movs	r3, #16
 8006006:	77fb      	strb	r3, [r7, #31]
 8006008:	e10c      	b.n	8006224 <UART_SetConfig+0x348>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a68      	ldr	r2, [pc, #416]	; (80061b0 <UART_SetConfig+0x2d4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d120      	bne.n	8006056 <UART_SetConfig+0x17a>
 8006014:	4b64      	ldr	r3, [pc, #400]	; (80061a8 <UART_SetConfig+0x2cc>)
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800601e:	2b30      	cmp	r3, #48	; 0x30
 8006020:	d013      	beq.n	800604a <UART_SetConfig+0x16e>
 8006022:	2b30      	cmp	r3, #48	; 0x30
 8006024:	d814      	bhi.n	8006050 <UART_SetConfig+0x174>
 8006026:	2b20      	cmp	r3, #32
 8006028:	d009      	beq.n	800603e <UART_SetConfig+0x162>
 800602a:	2b20      	cmp	r3, #32
 800602c:	d810      	bhi.n	8006050 <UART_SetConfig+0x174>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <UART_SetConfig+0x15c>
 8006032:	2b10      	cmp	r3, #16
 8006034:	d006      	beq.n	8006044 <UART_SetConfig+0x168>
 8006036:	e00b      	b.n	8006050 <UART_SetConfig+0x174>
 8006038:	2300      	movs	r3, #0
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e0f2      	b.n	8006224 <UART_SetConfig+0x348>
 800603e:	2302      	movs	r3, #2
 8006040:	77fb      	strb	r3, [r7, #31]
 8006042:	e0ef      	b.n	8006224 <UART_SetConfig+0x348>
 8006044:	2304      	movs	r3, #4
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	e0ec      	b.n	8006224 <UART_SetConfig+0x348>
 800604a:	2308      	movs	r3, #8
 800604c:	77fb      	strb	r3, [r7, #31]
 800604e:	e0e9      	b.n	8006224 <UART_SetConfig+0x348>
 8006050:	2310      	movs	r3, #16
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e0e6      	b.n	8006224 <UART_SetConfig+0x348>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a56      	ldr	r2, [pc, #344]	; (80061b4 <UART_SetConfig+0x2d8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d120      	bne.n	80060a2 <UART_SetConfig+0x1c6>
 8006060:	4b51      	ldr	r3, [pc, #324]	; (80061a8 <UART_SetConfig+0x2cc>)
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006066:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800606a:	2bc0      	cmp	r3, #192	; 0xc0
 800606c:	d013      	beq.n	8006096 <UART_SetConfig+0x1ba>
 800606e:	2bc0      	cmp	r3, #192	; 0xc0
 8006070:	d814      	bhi.n	800609c <UART_SetConfig+0x1c0>
 8006072:	2b80      	cmp	r3, #128	; 0x80
 8006074:	d009      	beq.n	800608a <UART_SetConfig+0x1ae>
 8006076:	2b80      	cmp	r3, #128	; 0x80
 8006078:	d810      	bhi.n	800609c <UART_SetConfig+0x1c0>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <UART_SetConfig+0x1a8>
 800607e:	2b40      	cmp	r3, #64	; 0x40
 8006080:	d006      	beq.n	8006090 <UART_SetConfig+0x1b4>
 8006082:	e00b      	b.n	800609c <UART_SetConfig+0x1c0>
 8006084:	2300      	movs	r3, #0
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	e0cc      	b.n	8006224 <UART_SetConfig+0x348>
 800608a:	2302      	movs	r3, #2
 800608c:	77fb      	strb	r3, [r7, #31]
 800608e:	e0c9      	b.n	8006224 <UART_SetConfig+0x348>
 8006090:	2304      	movs	r3, #4
 8006092:	77fb      	strb	r3, [r7, #31]
 8006094:	e0c6      	b.n	8006224 <UART_SetConfig+0x348>
 8006096:	2308      	movs	r3, #8
 8006098:	77fb      	strb	r3, [r7, #31]
 800609a:	e0c3      	b.n	8006224 <UART_SetConfig+0x348>
 800609c:	2310      	movs	r3, #16
 800609e:	77fb      	strb	r3, [r7, #31]
 80060a0:	e0c0      	b.n	8006224 <UART_SetConfig+0x348>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a44      	ldr	r2, [pc, #272]	; (80061b8 <UART_SetConfig+0x2dc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d125      	bne.n	80060f8 <UART_SetConfig+0x21c>
 80060ac:	4b3e      	ldr	r3, [pc, #248]	; (80061a8 <UART_SetConfig+0x2cc>)
 80060ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ba:	d017      	beq.n	80060ec <UART_SetConfig+0x210>
 80060bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060c0:	d817      	bhi.n	80060f2 <UART_SetConfig+0x216>
 80060c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c6:	d00b      	beq.n	80060e0 <UART_SetConfig+0x204>
 80060c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060cc:	d811      	bhi.n	80060f2 <UART_SetConfig+0x216>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <UART_SetConfig+0x1fe>
 80060d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d6:	d006      	beq.n	80060e6 <UART_SetConfig+0x20a>
 80060d8:	e00b      	b.n	80060f2 <UART_SetConfig+0x216>
 80060da:	2300      	movs	r3, #0
 80060dc:	77fb      	strb	r3, [r7, #31]
 80060de:	e0a1      	b.n	8006224 <UART_SetConfig+0x348>
 80060e0:	2302      	movs	r3, #2
 80060e2:	77fb      	strb	r3, [r7, #31]
 80060e4:	e09e      	b.n	8006224 <UART_SetConfig+0x348>
 80060e6:	2304      	movs	r3, #4
 80060e8:	77fb      	strb	r3, [r7, #31]
 80060ea:	e09b      	b.n	8006224 <UART_SetConfig+0x348>
 80060ec:	2308      	movs	r3, #8
 80060ee:	77fb      	strb	r3, [r7, #31]
 80060f0:	e098      	b.n	8006224 <UART_SetConfig+0x348>
 80060f2:	2310      	movs	r3, #16
 80060f4:	77fb      	strb	r3, [r7, #31]
 80060f6:	e095      	b.n	8006224 <UART_SetConfig+0x348>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a2f      	ldr	r2, [pc, #188]	; (80061bc <UART_SetConfig+0x2e0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d125      	bne.n	800614e <UART_SetConfig+0x272>
 8006102:	4b29      	ldr	r3, [pc, #164]	; (80061a8 <UART_SetConfig+0x2cc>)
 8006104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006108:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800610c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006110:	d017      	beq.n	8006142 <UART_SetConfig+0x266>
 8006112:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006116:	d817      	bhi.n	8006148 <UART_SetConfig+0x26c>
 8006118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800611c:	d00b      	beq.n	8006136 <UART_SetConfig+0x25a>
 800611e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006122:	d811      	bhi.n	8006148 <UART_SetConfig+0x26c>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <UART_SetConfig+0x254>
 8006128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800612c:	d006      	beq.n	800613c <UART_SetConfig+0x260>
 800612e:	e00b      	b.n	8006148 <UART_SetConfig+0x26c>
 8006130:	2301      	movs	r3, #1
 8006132:	77fb      	strb	r3, [r7, #31]
 8006134:	e076      	b.n	8006224 <UART_SetConfig+0x348>
 8006136:	2302      	movs	r3, #2
 8006138:	77fb      	strb	r3, [r7, #31]
 800613a:	e073      	b.n	8006224 <UART_SetConfig+0x348>
 800613c:	2304      	movs	r3, #4
 800613e:	77fb      	strb	r3, [r7, #31]
 8006140:	e070      	b.n	8006224 <UART_SetConfig+0x348>
 8006142:	2308      	movs	r3, #8
 8006144:	77fb      	strb	r3, [r7, #31]
 8006146:	e06d      	b.n	8006224 <UART_SetConfig+0x348>
 8006148:	2310      	movs	r3, #16
 800614a:	77fb      	strb	r3, [r7, #31]
 800614c:	e06a      	b.n	8006224 <UART_SetConfig+0x348>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1b      	ldr	r2, [pc, #108]	; (80061c0 <UART_SetConfig+0x2e4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d138      	bne.n	80061ca <UART_SetConfig+0x2ee>
 8006158:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <UART_SetConfig+0x2cc>)
 800615a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006162:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006166:	d017      	beq.n	8006198 <UART_SetConfig+0x2bc>
 8006168:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800616c:	d82a      	bhi.n	80061c4 <UART_SetConfig+0x2e8>
 800616e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006172:	d00b      	beq.n	800618c <UART_SetConfig+0x2b0>
 8006174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006178:	d824      	bhi.n	80061c4 <UART_SetConfig+0x2e8>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <UART_SetConfig+0x2aa>
 800617e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006182:	d006      	beq.n	8006192 <UART_SetConfig+0x2b6>
 8006184:	e01e      	b.n	80061c4 <UART_SetConfig+0x2e8>
 8006186:	2300      	movs	r3, #0
 8006188:	77fb      	strb	r3, [r7, #31]
 800618a:	e04b      	b.n	8006224 <UART_SetConfig+0x348>
 800618c:	2302      	movs	r3, #2
 800618e:	77fb      	strb	r3, [r7, #31]
 8006190:	e048      	b.n	8006224 <UART_SetConfig+0x348>
 8006192:	2304      	movs	r3, #4
 8006194:	77fb      	strb	r3, [r7, #31]
 8006196:	e045      	b.n	8006224 <UART_SetConfig+0x348>
 8006198:	2308      	movs	r3, #8
 800619a:	77fb      	strb	r3, [r7, #31]
 800619c:	e042      	b.n	8006224 <UART_SetConfig+0x348>
 800619e:	bf00      	nop
 80061a0:	efff69f3 	.word	0xefff69f3
 80061a4:	40011000 	.word	0x40011000
 80061a8:	40023800 	.word	0x40023800
 80061ac:	40004400 	.word	0x40004400
 80061b0:	40004800 	.word	0x40004800
 80061b4:	40004c00 	.word	0x40004c00
 80061b8:	40005000 	.word	0x40005000
 80061bc:	40011400 	.word	0x40011400
 80061c0:	40007800 	.word	0x40007800
 80061c4:	2310      	movs	r3, #16
 80061c6:	77fb      	strb	r3, [r7, #31]
 80061c8:	e02c      	b.n	8006224 <UART_SetConfig+0x348>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a72      	ldr	r2, [pc, #456]	; (8006398 <UART_SetConfig+0x4bc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d125      	bne.n	8006220 <UART_SetConfig+0x344>
 80061d4:	4b71      	ldr	r3, [pc, #452]	; (800639c <UART_SetConfig+0x4c0>)
 80061d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061e2:	d017      	beq.n	8006214 <UART_SetConfig+0x338>
 80061e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061e8:	d817      	bhi.n	800621a <UART_SetConfig+0x33e>
 80061ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ee:	d00b      	beq.n	8006208 <UART_SetConfig+0x32c>
 80061f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f4:	d811      	bhi.n	800621a <UART_SetConfig+0x33e>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <UART_SetConfig+0x326>
 80061fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061fe:	d006      	beq.n	800620e <UART_SetConfig+0x332>
 8006200:	e00b      	b.n	800621a <UART_SetConfig+0x33e>
 8006202:	2300      	movs	r3, #0
 8006204:	77fb      	strb	r3, [r7, #31]
 8006206:	e00d      	b.n	8006224 <UART_SetConfig+0x348>
 8006208:	2302      	movs	r3, #2
 800620a:	77fb      	strb	r3, [r7, #31]
 800620c:	e00a      	b.n	8006224 <UART_SetConfig+0x348>
 800620e:	2304      	movs	r3, #4
 8006210:	77fb      	strb	r3, [r7, #31]
 8006212:	e007      	b.n	8006224 <UART_SetConfig+0x348>
 8006214:	2308      	movs	r3, #8
 8006216:	77fb      	strb	r3, [r7, #31]
 8006218:	e004      	b.n	8006224 <UART_SetConfig+0x348>
 800621a:	2310      	movs	r3, #16
 800621c:	77fb      	strb	r3, [r7, #31]
 800621e:	e001      	b.n	8006224 <UART_SetConfig+0x348>
 8006220:	2310      	movs	r3, #16
 8006222:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622c:	d15b      	bne.n	80062e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800622e:	7ffb      	ldrb	r3, [r7, #31]
 8006230:	2b08      	cmp	r3, #8
 8006232:	d828      	bhi.n	8006286 <UART_SetConfig+0x3aa>
 8006234:	a201      	add	r2, pc, #4	; (adr r2, 800623c <UART_SetConfig+0x360>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	08006261 	.word	0x08006261
 8006240:	08006269 	.word	0x08006269
 8006244:	08006271 	.word	0x08006271
 8006248:	08006287 	.word	0x08006287
 800624c:	08006277 	.word	0x08006277
 8006250:	08006287 	.word	0x08006287
 8006254:	08006287 	.word	0x08006287
 8006258:	08006287 	.word	0x08006287
 800625c:	0800627f 	.word	0x0800627f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006260:	f7fe fc5c 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 8006264:	61b8      	str	r0, [r7, #24]
        break;
 8006266:	e013      	b.n	8006290 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006268:	f7fe fc6c 	bl	8004b44 <HAL_RCC_GetPCLK2Freq>
 800626c:	61b8      	str	r0, [r7, #24]
        break;
 800626e:	e00f      	b.n	8006290 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006270:	4b4b      	ldr	r3, [pc, #300]	; (80063a0 <UART_SetConfig+0x4c4>)
 8006272:	61bb      	str	r3, [r7, #24]
        break;
 8006274:	e00c      	b.n	8006290 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006276:	f7fe fb7f 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 800627a:	61b8      	str	r0, [r7, #24]
        break;
 800627c:	e008      	b.n	8006290 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800627e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006282:	61bb      	str	r3, [r7, #24]
        break;
 8006284:	e004      	b.n	8006290 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	77bb      	strb	r3, [r7, #30]
        break;
 800628e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d074      	beq.n	8006380 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	005a      	lsls	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	085b      	lsrs	r3, r3, #1
 80062a0:	441a      	add	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	2b0f      	cmp	r3, #15
 80062b0:	d916      	bls.n	80062e0 <UART_SetConfig+0x404>
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b8:	d212      	bcs.n	80062e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f023 030f 	bic.w	r3, r3, #15
 80062c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	085b      	lsrs	r3, r3, #1
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	89fb      	ldrh	r3, [r7, #14]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	89fa      	ldrh	r2, [r7, #14]
 80062dc:	60da      	str	r2, [r3, #12]
 80062de:	e04f      	b.n	8006380 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	77bb      	strb	r3, [r7, #30]
 80062e4:	e04c      	b.n	8006380 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062e6:	7ffb      	ldrb	r3, [r7, #31]
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d828      	bhi.n	800633e <UART_SetConfig+0x462>
 80062ec:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <UART_SetConfig+0x418>)
 80062ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f2:	bf00      	nop
 80062f4:	08006319 	.word	0x08006319
 80062f8:	08006321 	.word	0x08006321
 80062fc:	08006329 	.word	0x08006329
 8006300:	0800633f 	.word	0x0800633f
 8006304:	0800632f 	.word	0x0800632f
 8006308:	0800633f 	.word	0x0800633f
 800630c:	0800633f 	.word	0x0800633f
 8006310:	0800633f 	.word	0x0800633f
 8006314:	08006337 	.word	0x08006337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006318:	f7fe fc00 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 800631c:	61b8      	str	r0, [r7, #24]
        break;
 800631e:	e013      	b.n	8006348 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006320:	f7fe fc10 	bl	8004b44 <HAL_RCC_GetPCLK2Freq>
 8006324:	61b8      	str	r0, [r7, #24]
        break;
 8006326:	e00f      	b.n	8006348 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006328:	4b1d      	ldr	r3, [pc, #116]	; (80063a0 <UART_SetConfig+0x4c4>)
 800632a:	61bb      	str	r3, [r7, #24]
        break;
 800632c:	e00c      	b.n	8006348 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800632e:	f7fe fb23 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8006332:	61b8      	str	r0, [r7, #24]
        break;
 8006334:	e008      	b.n	8006348 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800633a:	61bb      	str	r3, [r7, #24]
        break;
 800633c:	e004      	b.n	8006348 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	77bb      	strb	r3, [r7, #30]
        break;
 8006346:	bf00      	nop
    }

    if (pclk != 0U)
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d018      	beq.n	8006380 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	085a      	lsrs	r2, r3, #1
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	441a      	add	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006360:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b0f      	cmp	r3, #15
 8006366:	d909      	bls.n	800637c <UART_SetConfig+0x4a0>
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800636e:	d205      	bcs.n	800637c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	b29a      	uxth	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60da      	str	r2, [r3, #12]
 800637a:	e001      	b.n	8006380 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800638c:	7fbb      	ldrb	r3, [r7, #30]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3720      	adds	r7, #32
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40007c00 	.word	0x40007c00
 800639c:	40023800 	.word	0x40023800
 80063a0:	00f42400 	.word	0x00f42400

080063a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	f003 0310 	and.w	r3, r3, #16
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01a      	beq.n	80064ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064a2:	d10a      	bne.n	80064ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	605a      	str	r2, [r3, #4]
  }
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064f8:	f7fb fb6a 	bl	8001bd0 <HAL_GetTick>
 80064fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0308 	and.w	r3, r3, #8
 8006508:	2b08      	cmp	r3, #8
 800650a:	d10e      	bne.n	800652a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800650c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f81b 	bl	8006556 <UART_WaitOnFlagUntilTimeout>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e011      	b.n	800654e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b09c      	sub	sp, #112	; 0x70
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	603b      	str	r3, [r7, #0]
 8006562:	4613      	mov	r3, r2
 8006564:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006566:	e0a7      	b.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800656e:	f000 80a3 	beq.w	80066b8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006572:	f7fb fb2d 	bl	8001bd0 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800657e:	429a      	cmp	r2, r3
 8006580:	d302      	bcc.n	8006588 <UART_WaitOnFlagUntilTimeout+0x32>
 8006582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006584:	2b00      	cmp	r3, #0
 8006586:	d13f      	bne.n	8006608 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006598:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800659c:	667b      	str	r3, [r7, #100]	; 0x64
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065ae:	e841 2300 	strex	r3, r2, [r1]
 80065b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1e6      	bne.n	8006588 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3308      	adds	r3, #8
 80065c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	f023 0301 	bic.w	r3, r3, #1
 80065d0:	663b      	str	r3, [r7, #96]	; 0x60
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3308      	adds	r3, #8
 80065d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065da:	64ba      	str	r2, [r7, #72]	; 0x48
 80065dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e5      	bne.n	80065ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2220      	movs	r2, #32
 80065f2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e068      	b.n	80066da <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	d050      	beq.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006624:	d148      	bne.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800662e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	e853 3f00 	ldrex	r3, [r3]
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006644:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664e:	637b      	str	r3, [r7, #52]	; 0x34
 8006650:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006656:	e841 2300 	strex	r3, r2, [r1]
 800665a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1e6      	bne.n	8006630 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	613b      	str	r3, [r7, #16]
   return(result);
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f023 0301 	bic.w	r3, r3, #1
 8006678:	66bb      	str	r3, [r7, #104]	; 0x68
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3308      	adds	r3, #8
 8006680:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006682:	623a      	str	r2, [r7, #32]
 8006684:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	69f9      	ldr	r1, [r7, #28]
 8006688:	6a3a      	ldr	r2, [r7, #32]
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e5      	bne.n	8006662 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2220      	movs	r2, #32
 800669a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e010      	b.n	80066da <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69da      	ldr	r2, [r3, #28]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4013      	ands	r3, r2
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	bf0c      	ite	eq
 80066c8:	2301      	moveq	r3, #1
 80066ca:	2300      	movne	r3, #0
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	461a      	mov	r2, r3
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	f43f af48 	beq.w	8006568 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3770      	adds	r7, #112	; 0x70
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b095      	sub	sp, #84	; 0x54
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006708:	643b      	str	r3, [r7, #64]	; 0x40
 800670a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800670e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e6      	bne.n	80066ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3308      	adds	r3, #8
 8006722:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	61fb      	str	r3, [r7, #28]
   return(result);
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f023 0301 	bic.w	r3, r3, #1
 8006732:	64bb      	str	r3, [r7, #72]	; 0x48
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3308      	adds	r3, #8
 800673a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800673c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800673e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e5      	bne.n	800671c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006754:	2b01      	cmp	r3, #1
 8006756:	d118      	bne.n	800678a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	60bb      	str	r3, [r7, #8]
   return(result);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f023 0310 	bic.w	r3, r3, #16
 800676c:	647b      	str	r3, [r7, #68]	; 0x44
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006776:	61bb      	str	r3, [r7, #24]
 8006778:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	6979      	ldr	r1, [r7, #20]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	e841 2300 	strex	r3, r2, [r1]
 8006782:	613b      	str	r3, [r7, #16]
   return(result);
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1e6      	bne.n	8006758 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800679e:	bf00      	nop
 80067a0:	3754      	adds	r7, #84	; 0x54
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f7ff fb71 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b088      	sub	sp, #32
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f2:	61fb      	str	r3, [r7, #28]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6979      	ldr	r1, [r7, #20]
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	613b      	str	r3, [r7, #16]
   return(result);
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e6      	bne.n	80067de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff fb3d 	bl	8005e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006822:	bf00      	nop
 8006824:	3720      	adds	r7, #32
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <LL_EXTI_EnableIT_0_31>:
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8006834:	4b05      	ldr	r3, [pc, #20]	; (800684c <LL_EXTI_EnableIT_0_31+0x20>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	4904      	ldr	r1, [pc, #16]	; (800684c <LL_EXTI_EnableIT_0_31+0x20>)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4313      	orrs	r3, r2
 800683e:	600b      	str	r3, [r1, #0]
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	40013c00 	.word	0x40013c00

08006850 <LL_EXTI_DisableIT_0_31>:
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8006858:	4b06      	ldr	r3, [pc, #24]	; (8006874 <LL_EXTI_DisableIT_0_31+0x24>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	43db      	mvns	r3, r3
 8006860:	4904      	ldr	r1, [pc, #16]	; (8006874 <LL_EXTI_DisableIT_0_31+0x24>)
 8006862:	4013      	ands	r3, r2
 8006864:	600b      	str	r3, [r1, #0]
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	40013c00 	.word	0x40013c00

08006878 <LL_EXTI_EnableEvent_0_31>:
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8006880:	4b05      	ldr	r3, [pc, #20]	; (8006898 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	4904      	ldr	r1, [pc, #16]	; (8006898 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4313      	orrs	r3, r2
 800688a:	604b      	str	r3, [r1, #4]
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	40013c00 	.word	0x40013c00

0800689c <LL_EXTI_DisableEvent_0_31>:
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80068a4:	4b06      	ldr	r3, [pc, #24]	; (80068c0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	43db      	mvns	r3, r3
 80068ac:	4904      	ldr	r1, [pc, #16]	; (80068c0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80068ae:	4013      	ands	r3, r2
 80068b0:	604b      	str	r3, [r1, #4]
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40013c00 	.word	0x40013c00

080068c4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80068cc:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	4904      	ldr	r1, [pc, #16]	; (80068e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	608b      	str	r3, [r1, #8]
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	40013c00 	.word	0x40013c00

080068e8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80068f0:	4b06      	ldr	r3, [pc, #24]	; (800690c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	43db      	mvns	r3, r3
 80068f8:	4904      	ldr	r1, [pc, #16]	; (800690c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	608b      	str	r3, [r1, #8]
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	40013c00 	.word	0x40013c00

08006910 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8006918:	4b05      	ldr	r3, [pc, #20]	; (8006930 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	4904      	ldr	r1, [pc, #16]	; (8006930 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4313      	orrs	r3, r2
 8006922:	60cb      	str	r3, [r1, #12]
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	40013c00 	.word	0x40013c00

08006934 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800693c:	4b06      	ldr	r3, [pc, #24]	; (8006958 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	43db      	mvns	r3, r3
 8006944:	4904      	ldr	r1, [pc, #16]	; (8006958 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006946:	4013      	ands	r3, r2
 8006948:	60cb      	str	r3, [r1, #12]
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	40013c00 	.word	0x40013c00

0800695c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8006964:	2300      	movs	r3, #0
 8006966:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	791b      	ldrb	r3, [r3, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d065      	beq.n	8006a3c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d06c      	beq.n	8006a52 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	795b      	ldrb	r3, [r3, #5]
 800697c:	2b02      	cmp	r3, #2
 800697e:	d01c      	beq.n	80069ba <LL_EXTI_Init+0x5e>
 8006980:	2b02      	cmp	r3, #2
 8006982:	dc25      	bgt.n	80069d0 <LL_EXTI_Init+0x74>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <LL_EXTI_Init+0x32>
 8006988:	2b01      	cmp	r3, #1
 800698a:	d00b      	beq.n	80069a4 <LL_EXTI_Init+0x48>
 800698c:	e020      	b.n	80069d0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff ff82 	bl	800689c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff ff45 	bl	800682c <LL_EXTI_EnableIT_0_31>
          break;
 80069a2:	e018      	b.n	80069d6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff ff51 	bl	8006850 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff ff60 	bl	8006878 <LL_EXTI_EnableEvent_0_31>
          break;
 80069b8:	e00d      	b.n	80069d6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff ff34 	bl	800682c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff ff55 	bl	8006878 <LL_EXTI_EnableEvent_0_31>
          break;
 80069ce:	e002      	b.n	80069d6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	73fb      	strb	r3, [r7, #15]
          break;
 80069d4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	799b      	ldrb	r3, [r3, #6]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d039      	beq.n	8006a52 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	799b      	ldrb	r3, [r3, #6]
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d01c      	beq.n	8006a20 <LL_EXTI_Init+0xc4>
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	dc25      	bgt.n	8006a36 <LL_EXTI_Init+0xda>
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d002      	beq.n	80069f4 <LL_EXTI_Init+0x98>
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d00b      	beq.n	8006a0a <LL_EXTI_Init+0xae>
 80069f2:	e020      	b.n	8006a36 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7ff ff9b 	bl	8006934 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff ff5e 	bl	80068c4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8006a08:	e024      	b.n	8006a54 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff ff6a 	bl	80068e8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7ff ff79 	bl	8006910 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006a1e:	e019      	b.n	8006a54 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7ff ff4d 	bl	80068c4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff ff6e 	bl	8006910 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006a34:	e00e      	b.n	8006a54 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	73fb      	strb	r3, [r7, #15]
            break;
 8006a3a:	e00b      	b.n	8006a54 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7ff ff05 	bl	8006850 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7ff ff26 	bl	800689c <LL_EXTI_DisableEvent_0_31>
 8006a50:	e000      	b.n	8006a54 <LL_EXTI_Init+0xf8>
      }
 8006a52:	bf00      	nop
  }
  return status;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <LL_GPIO_SetPinMode>:
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b089      	sub	sp, #36	; 0x24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	fa93 f3a3 	rbit	r3, r3
 8006a78:	613b      	str	r3, [r7, #16]
  return result;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	fab3 f383 	clz	r3, r3
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	2103      	movs	r1, #3
 8006a86:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8a:	43db      	mvns	r3, r3
 8006a8c:	401a      	ands	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	fa93 f3a3 	rbit	r3, r3
 8006a98:	61bb      	str	r3, [r7, #24]
  return result;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	fab3 f383 	clz	r3, r3
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	601a      	str	r2, [r3, #0]
}
 8006ab0:	bf00      	nop
 8006ab2:	3724      	adds	r7, #36	; 0x24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <LL_GPIO_SetPinOutputType>:
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	43db      	mvns	r3, r3
 8006ad0:	401a      	ands	r2, r3
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	fb01 f303 	mul.w	r3, r1, r3
 8006ada:	431a      	orrs	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	605a      	str	r2, [r3, #4]
}
 8006ae0:	bf00      	nop
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <LL_GPIO_SetPinSpeed>:
{
 8006aec:	b480      	push	{r7}
 8006aee:	b089      	sub	sp, #36	; 0x24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	fa93 f3a3 	rbit	r3, r3
 8006b06:	613b      	str	r3, [r7, #16]
  return result;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	fab3 f383 	clz	r3, r3
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	2103      	movs	r1, #3
 8006b14:	fa01 f303 	lsl.w	r3, r1, r3
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	401a      	ands	r2, r3
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	fa93 f3a3 	rbit	r3, r3
 8006b26:	61bb      	str	r3, [r7, #24]
  return result;
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	fab3 f383 	clz	r3, r3
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	fa01 f303 	lsl.w	r3, r1, r3
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	609a      	str	r2, [r3, #8]
}
 8006b3e:	bf00      	nop
 8006b40:	3724      	adds	r7, #36	; 0x24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <LL_GPIO_SetPinPull>:
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b089      	sub	sp, #36	; 0x24
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	fa93 f3a3 	rbit	r3, r3
 8006b64:	613b      	str	r3, [r7, #16]
  return result;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	fab3 f383 	clz	r3, r3
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	2103      	movs	r1, #3
 8006b72:	fa01 f303 	lsl.w	r3, r1, r3
 8006b76:	43db      	mvns	r3, r3
 8006b78:	401a      	ands	r2, r3
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	fa93 f3a3 	rbit	r3, r3
 8006b84:	61bb      	str	r3, [r7, #24]
  return result;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	fab3 f383 	clz	r3, r3
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	fa01 f303 	lsl.w	r3, r1, r3
 8006b96:	431a      	orrs	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	60da      	str	r2, [r3, #12]
}
 8006b9c:	bf00      	nop
 8006b9e:	3724      	adds	r7, #36	; 0x24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <LL_GPIO_SetAFPin_0_7>:
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b089      	sub	sp, #36	; 0x24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a1a      	ldr	r2, [r3, #32]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	fa93 f3a3 	rbit	r3, r3
 8006bc2:	613b      	str	r3, [r7, #16]
  return result;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	fab3 f383 	clz	r3, r3
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	210f      	movs	r1, #15
 8006bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd4:	43db      	mvns	r3, r3
 8006bd6:	401a      	ands	r2, r3
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	fa93 f3a3 	rbit	r3, r3
 8006be2:	61bb      	str	r3, [r7, #24]
  return result;
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	fab3 f383 	clz	r3, r3
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	3724      	adds	r7, #36	; 0x24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <LL_GPIO_SetAFPin_8_15>:
{
 8006c06:	b480      	push	{r7}
 8006c08:	b089      	sub	sp, #36	; 0x24
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	0a1b      	lsrs	r3, r3, #8
 8006c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	fa93 f3a3 	rbit	r3, r3
 8006c22:	613b      	str	r3, [r7, #16]
  return result;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	fab3 f383 	clz	r3, r3
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	210f      	movs	r1, #15
 8006c30:	fa01 f303 	lsl.w	r3, r1, r3
 8006c34:	43db      	mvns	r3, r3
 8006c36:	401a      	ands	r2, r3
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	0a1b      	lsrs	r3, r3, #8
 8006c3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	fa93 f3a3 	rbit	r3, r3
 8006c44:	61bb      	str	r3, [r7, #24]
  return result;
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	fab3 f383 	clz	r3, r3
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	fa01 f303 	lsl.w	r3, r1, r3
 8006c56:	431a      	orrs	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006c5c:	bf00      	nop
 8006c5e:	3724      	adds	r7, #36	; 0x24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	fa93 f3a3 	rbit	r3, r3
 8006c86:	613b      	str	r3, [r7, #16]
  return result;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	fab3 f383 	clz	r3, r3
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006c92:	e051      	b.n	8006d38 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	2101      	movs	r1, #1
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d043      	beq.n	8006d32 <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d003      	beq.n	8006cba <LL_GPIO_Init+0x52>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d10e      	bne.n	8006cd8 <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	69b9      	ldr	r1, [r7, #24]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff ff12 	bl	8006aec <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	6819      	ldr	r1, [r3, #0]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff fef2 	bl	8006abc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	69b9      	ldr	r1, [r7, #24]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff ff32 	bl	8006b4a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d11a      	bne.n	8006d24 <LL_GPIO_Init+0xbc>
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	fa93 f3a3 	rbit	r3, r3
 8006cf8:	60bb      	str	r3, [r7, #8]
  return result;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006cfc:	fab3 f383 	clz	r3, r3
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b07      	cmp	r3, #7
 8006d04:	d807      	bhi.n	8006d16 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	69b9      	ldr	r1, [r7, #24]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff ff4a 	bl	8006ba8 <LL_GPIO_SetAFPin_0_7>
 8006d14:	e006      	b.n	8006d24 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	69b9      	ldr	r1, [r7, #24]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff ff71 	bl	8006c06 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	69b9      	ldr	r1, [r7, #24]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff fe96 	bl	8006a5e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	3301      	adds	r3, #1
 8006d36:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1a6      	bne.n	8006c94 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3720      	adds	r7, #32
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d50:	b084      	sub	sp, #16
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	f107 001c 	add.w	r0, r7, #28
 8006d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d126      	bne.n	8006db6 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	4b3f      	ldr	r3, [pc, #252]	; (8006e78 <USB_CoreInit+0x128>)
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f043 0210 	orr.w	r2, r3, #16
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d105      	bne.n	8006daa <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fa10 	bl	80071d0 <USB_CoreReset>
 8006db0:	4603      	mov	r3, r0
 8006db2:	73fb      	strb	r3, [r7, #15]
 8006db4:	e048      	b.n	8006e48 <USB_CoreInit+0xf8>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d134      	bne.n	8006e26 <USB_CoreInit+0xd6>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	4b2a      	ldr	r3, [pc, #168]	; (8006e78 <USB_CoreInit+0x128>)
 8006dce:	4013      	ands	r3, r2
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f023 0210 	bic.w	r2, r3, #16
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	60da      	str	r2, [r3, #12]
#ifdef USBPHYC
    /* Enable USB HS PHY */
    USBx->GCCFG |= USB_OTG_GCCFG_PHYHSEN;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enables control of a High Speed USB PHY */
    if (USB_HS_PHYCInit(USBx) != HAL_OK)
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fa1d 	bl	8007238 <USB_HS_PHYCInit>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <USB_CoreInit+0xb8>
    {
      return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e02f      	b.n	8006e68 <USB_CoreInit+0x118>
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8006e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d105      	bne.n	8006e1a <USB_CoreInit+0xca>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f9d8 	bl	80071d0 <USB_CoreReset>
 8006e20:	4603      	mov	r3, r0
 8006e22:	73fb      	strb	r3, [r7, #15]
 8006e24:	e010      	b.n	8006e48 <USB_CoreInit+0xf8>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f9cc 	bl	80071d0 <USB_CoreReset>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d10b      	bne.n	8006e66 <USB_CoreInit+0x116>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f043 0206 	orr.w	r2, r3, #6
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f043 0220 	orr.w	r2, r3, #32
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e72:	b004      	add	sp, #16
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	ffbdffbf 	.word	0xffbdffbf

08006e7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f043 0201 	orr.w	r2, r3, #1
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f023 0201 	bic.w	r2, r3, #1
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006edc:	78fb      	ldrb	r3, [r7, #3]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d115      	bne.n	8006f0e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006eee:	2001      	movs	r0, #1
 8006ef0:	f7fa fe7a 	bl	8001be8 <HAL_Delay>
      ms++;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f95a 	bl	80071b4 <USB_GetMode>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d01e      	beq.n	8006f44 <USB_SetCurrentMode+0x84>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b31      	cmp	r3, #49	; 0x31
 8006f0a:	d9f0      	bls.n	8006eee <USB_SetCurrentMode+0x2e>
 8006f0c:	e01a      	b.n	8006f44 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f0e:	78fb      	ldrb	r3, [r7, #3]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d115      	bne.n	8006f40 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f20:	2001      	movs	r0, #1
 8006f22:	f7fa fe61 	bl	8001be8 <HAL_Delay>
      ms++;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f941 	bl	80071b4 <USB_GetMode>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d005      	beq.n	8006f44 <USB_SetCurrentMode+0x84>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b31      	cmp	r3, #49	; 0x31
 8006f3c:	d9f0      	bls.n	8006f20 <USB_SetCurrentMode+0x60>
 8006f3e:	e001      	b.n	8006f44 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e005      	b.n	8006f50 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b32      	cmp	r3, #50	; 0x32
 8006f48:	d101      	bne.n	8006f4e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e000      	b.n	8006f50 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4a13      	ldr	r2, [pc, #76]	; (8006fbc <USB_FlushTxFifo+0x64>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d901      	bls.n	8006f78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e01b      	b.n	8006fb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	daf2      	bge.n	8006f66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	019b      	lsls	r3, r3, #6
 8006f88:	f043 0220 	orr.w	r2, r3, #32
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	3301      	adds	r3, #1
 8006f94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4a08      	ldr	r2, [pc, #32]	; (8006fbc <USB_FlushTxFifo+0x64>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d901      	bls.n	8006fa2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e006      	b.n	8006fb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d0f0      	beq.n	8006f90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	00030d40 	.word	0x00030d40

08006fc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4a11      	ldr	r2, [pc, #68]	; (800701c <USB_FlushRxFifo+0x5c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d901      	bls.n	8006fde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e018      	b.n	8007010 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	daf2      	bge.n	8006fcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2210      	movs	r2, #16
 8006fee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4a08      	ldr	r2, [pc, #32]	; (800701c <USB_FlushRxFifo+0x5c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d901      	bls.n	8007002 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e006      	b.n	8007010 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f003 0310 	and.w	r3, r3, #16
 800700a:	2b10      	cmp	r3, #16
 800700c:	d0f0      	beq.n	8006ff0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	00030d40 	.word	0x00030d40

08007020 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007020:	b480      	push	{r7}
 8007022:	b089      	sub	sp, #36	; 0x24
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	4611      	mov	r1, r2
 800702c:	461a      	mov	r2, r3
 800702e:	460b      	mov	r3, r1
 8007030:	71fb      	strb	r3, [r7, #7]
 8007032:	4613      	mov	r3, r2
 8007034:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800703e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007042:	2b00      	cmp	r3, #0
 8007044:	d123      	bne.n	800708e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007046:	88bb      	ldrh	r3, [r7, #4]
 8007048:	3303      	adds	r3, #3
 800704a:	089b      	lsrs	r3, r3, #2
 800704c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800704e:	2300      	movs	r3, #0
 8007050:	61bb      	str	r3, [r7, #24]
 8007052:	e018      	b.n	8007086 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	031a      	lsls	r2, r3, #12
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	4413      	add	r3, r2
 800705c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007060:	461a      	mov	r2, r3
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	3301      	adds	r3, #1
 800706c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	3301      	adds	r3, #1
 8007072:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	3301      	adds	r3, #1
 8007078:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	3301      	adds	r3, #1
 800707e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	3301      	adds	r3, #1
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	429a      	cmp	r2, r3
 800708c:	d3e2      	bcc.n	8007054 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3724      	adds	r7, #36	; 0x24
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800709c:	b480      	push	{r7}
 800709e:	b08b      	sub	sp, #44	; 0x2c
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80070b2:	88fb      	ldrh	r3, [r7, #6]
 80070b4:	089b      	lsrs	r3, r3, #2
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	f003 0303 	and.w	r3, r3, #3
 80070c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80070c2:	2300      	movs	r3, #0
 80070c4:	623b      	str	r3, [r7, #32]
 80070c6:	e014      	b.n	80070f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	3301      	adds	r3, #1
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	3301      	adds	r3, #1
 80070de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	3301      	adds	r3, #1
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	3301      	adds	r3, #1
 80070ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	3301      	adds	r3, #1
 80070f0:	623b      	str	r3, [r7, #32]
 80070f2:	6a3a      	ldr	r2, [r7, #32]
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d3e6      	bcc.n	80070c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80070fa:	8bfb      	ldrh	r3, [r7, #30]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d01e      	beq.n	800713e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800710a:	461a      	mov	r2, r3
 800710c:	f107 0310 	add.w	r3, r7, #16
 8007110:	6812      	ldr	r2, [r2, #0]
 8007112:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	fa22 f303 	lsr.w	r3, r2, r3
 8007120:	b2da      	uxtb	r2, r3
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	701a      	strb	r2, [r3, #0]
      i++;
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	3301      	adds	r3, #1
 800712a:	623b      	str	r3, [r7, #32]
      pDest++;
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	3301      	adds	r3, #1
 8007130:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007132:	8bfb      	ldrh	r3, [r7, #30]
 8007134:	3b01      	subs	r3, #1
 8007136:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007138:	8bfb      	ldrh	r3, [r7, #30]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1ea      	bne.n	8007114 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007140:	4618      	mov	r0, r3
 8007142:	372c      	adds	r7, #44	; 0x2c
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	4013      	ands	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007164:	68fb      	ldr	r3, [r7, #12]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007172:	b480      	push	{r7}
 8007174:	b085      	sub	sp, #20
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	460b      	mov	r3, r1
 800717c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007182:	78fb      	ldrb	r3, [r7, #3]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4413      	add	r3, r2
 800718a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007192:	78fb      	ldrb	r3, [r7, #3]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	4413      	add	r3, r2
 800719a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	4013      	ands	r3, r2
 80071a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071a6:	68bb      	ldr	r3, [r7, #8]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	f003 0301 	and.w	r3, r3, #1
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3301      	adds	r3, #1
 80071e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4a13      	ldr	r2, [pc, #76]	; (8007234 <USB_CoreReset+0x64>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d901      	bls.n	80071ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e01b      	b.n	8007226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	daf2      	bge.n	80071dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f043 0201 	orr.w	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3301      	adds	r3, #1
 800720a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4a09      	ldr	r2, [pc, #36]	; (8007234 <USB_CoreReset+0x64>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d901      	bls.n	8007218 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e006      	b.n	8007226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b01      	cmp	r3, #1
 8007222:	d0f0      	beq.n	8007206 <USB_CoreReset+0x36>

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	00030d40 	.word	0x00030d40

08007238 <USB_HS_PHYCInit>:
  *         Init the low level hardware : GPIO, CLOCK, NVIC...
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_HS_PHYCInit(USB_OTG_GlobalTypeDef *USBx)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  __IO uint32_t count = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	60fb      	str	r3, [r7, #12]

  /* Enable LDO */
  USB_HS_PHYC->USB_HS_PHYC_LDO |= USB_HS_PHYC_LDO_ENABLE;
 8007244:	4b16      	ldr	r3, [pc, #88]	; (80072a0 <USB_HS_PHYCInit+0x68>)
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	4a15      	ldr	r2, [pc, #84]	; (80072a0 <USB_HS_PHYCInit+0x68>)
 800724a:	f043 0304 	orr.w	r3, r3, #4
 800724e:	6193      	str	r3, [r2, #24]

  /* wait for LDO Ready */
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8007250:	e008      	b.n	8007264 <USB_HS_PHYCInit+0x2c>
  {
    count++;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3301      	adds	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4a12      	ldr	r2, [pc, #72]	; (80072a4 <USB_HS_PHYCInit+0x6c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d901      	bls.n	8007264 <USB_HS_PHYCInit+0x2c>
    {
      return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e019      	b.n	8007298 <USB_HS_PHYCInit+0x60>
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8007264:	4b0e      	ldr	r3, [pc, #56]	; (80072a0 <USB_HS_PHYCInit+0x68>)
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0f0      	beq.n	8007252 <USB_HS_PHYCInit+0x1a>
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x4U << 1);
  }
  else if (HSE_VALUE == 25000000U) /* HSE = 25MHz */
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x5U << 1);
 8007270:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <USB_HS_PHYCInit+0x68>)
 8007272:	220a      	movs	r2, #10
 8007274:	601a      	str	r2, [r3, #0]
  {
    /* ... */
  }

  /* Control the tuning interface of the High Speed PHY */
  USB_HS_PHYC->USB_HS_PHYC_TUNE |= USB_HS_PHYC_TUNE_VALUE;
 8007276:	4b0a      	ldr	r3, [pc, #40]	; (80072a0 <USB_HS_PHYCInit+0x68>)
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	4909      	ldr	r1, [pc, #36]	; (80072a0 <USB_HS_PHYCInit+0x68>)
 800727c:	f640 7313 	movw	r3, #3859	; 0xf13
 8007280:	4313      	orrs	r3, r2
 8007282:	60cb      	str	r3, [r1, #12]

  /* Enable PLL internal PHY */
  USB_HS_PHYC->USB_HS_PHYC_PLL |= USB_HS_PHYC_PLL_PLLEN;
 8007284:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <USB_HS_PHYCInit+0x68>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a05      	ldr	r2, [pc, #20]	; (80072a0 <USB_HS_PHYCInit+0x68>)
 800728a:	f043 0301 	orr.w	r3, r3, #1
 800728e:	6013      	str	r3, [r2, #0]


  /* 2ms Delay required to get internal phy clock stable */
  HAL_Delay(2U);
 8007290:	2002      	movs	r0, #2
 8007292:	f7fa fca9 	bl	8001be8 <HAL_Delay>

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	40017c00 	.word	0x40017c00
 80072a4:	00030d40 	.word	0x00030d40

080072a8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072a8:	b084      	sub	sp, #16
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b086      	sub	sp, #24
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072c8:	461a      	mov	r2, r3
 80072ca:	2300      	movs	r3, #0
 80072cc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d018      	beq.n	8007318 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d10a      	bne.n	8007302 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072fa:	f043 0304 	orr.w	r3, r3, #4
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	e014      	b.n	800732c <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007310:	f023 0304 	bic.w	r3, r3, #4
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	e009      	b.n	800732c <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007326:	f023 0304 	bic.w	r3, r3, #4
 800732a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800732c:	2110      	movs	r1, #16
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff fe12 	bl	8006f58 <USB_FlushTxFifo>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7ff fe3e 	bl	8006fc0 <USB_FlushRxFifo>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800734e:	2300      	movs	r3, #0
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	e015      	b.n	8007380 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007360:	461a      	mov	r2, r3
 8007362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007366:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007374:	461a      	mov	r2, r3
 8007376:	2300      	movs	r3, #0
 8007378:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	3301      	adds	r3, #1
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	429a      	cmp	r2, r3
 8007386:	d3e5      	bcc.n	8007354 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007394:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00b      	beq.n	80073ba <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073a8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a13      	ldr	r2, [pc, #76]	; (80073fc <USB_HostInit+0x154>)
 80073ae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a13      	ldr	r2, [pc, #76]	; (8007400 <USB_HostInit+0x158>)
 80073b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80073b8:	e009      	b.n	80073ce <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2280      	movs	r2, #128	; 0x80
 80073be:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a10      	ldr	r2, [pc, #64]	; (8007404 <USB_HostInit+0x15c>)
 80073c4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a0f      	ldr	r2, [pc, #60]	; (8007408 <USB_HostInit+0x160>)
 80073ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d105      	bne.n	80073e0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	f043 0210 	orr.w	r2, r3, #16
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	699a      	ldr	r2, [r3, #24]
 80073e4:	4b09      	ldr	r3, [pc, #36]	; (800740c <USB_HostInit+0x164>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80073ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073f8:	b004      	add	sp, #16
 80073fa:	4770      	bx	lr
 80073fc:	01000200 	.word	0x01000200
 8007400:	00e00300 	.word	0x00e00300
 8007404:	00600080 	.word	0x00600080
 8007408:	004000e0 	.word	0x004000e0
 800740c:	a3200008 	.word	0xa3200008

08007410 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800742e:	f023 0303 	bic.w	r3, r3, #3
 8007432:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	78fb      	ldrb	r3, [r7, #3]
 800743e:	f003 0303 	and.w	r3, r3, #3
 8007442:	68f9      	ldr	r1, [r7, #12]
 8007444:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007448:	4313      	orrs	r3, r2
 800744a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800744c:	78fb      	ldrb	r3, [r7, #3]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d107      	bne.n	8007462 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007458:	461a      	mov	r2, r3
 800745a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800745e:	6053      	str	r3, [r2, #4]
 8007460:	e009      	b.n	8007476 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	2b02      	cmp	r3, #2
 8007466:	d106      	bne.n	8007476 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800746e:	461a      	mov	r2, r3
 8007470:	f241 7370 	movw	r3, #6000	; 0x1770
 8007474:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80074a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80074ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80074b4:	2064      	movs	r0, #100	; 0x64
 80074b6:	f7fa fb97 	bl	8001be8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80074c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80074c8:	200a      	movs	r0, #10
 80074ca:	f7fa fb8d 	bl	8001be8 <HAL_Delay>

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80074fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d109      	bne.n	800751c <USB_DriveVbus+0x44>
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d106      	bne.n	800751c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007516:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800751a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007526:	d109      	bne.n	800753c <USB_DriveVbus+0x64>
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d106      	bne.n	800753c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800753a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800754a:	b480      	push	{r7}
 800754c:	b085      	sub	sp, #20
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	0c5b      	lsrs	r3, r3, #17
 8007568:	f003 0303 	and.w	r3, r3, #3
}
 800756c:	4618      	mov	r0, r3
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	b29b      	uxth	r3, r3
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
	...

0800759c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	4608      	mov	r0, r1
 80075a6:	4611      	mov	r1, r2
 80075a8:	461a      	mov	r2, r3
 80075aa:	4603      	mov	r3, r0
 80075ac:	70fb      	strb	r3, [r7, #3]
 80075ae:	460b      	mov	r3, r1
 80075b0:	70bb      	strb	r3, [r7, #2]
 80075b2:	4613      	mov	r3, r2
 80075b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80075be:	78fb      	ldrb	r3, [r7, #3]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ca:	461a      	mov	r2, r3
 80075cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80075d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d87e      	bhi.n	80076d8 <USB_HC_Init+0x13c>
 80075da:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <USB_HC_Init+0x44>)
 80075dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e0:	080075f1 	.word	0x080075f1
 80075e4:	0800769b 	.word	0x0800769b
 80075e8:	080075f1 	.word	0x080075f1
 80075ec:	0800765d 	.word	0x0800765d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075fc:	461a      	mov	r2, r3
 80075fe:	f240 439d 	movw	r3, #1181	; 0x49d
 8007602:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007604:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007608:	2b00      	cmp	r3, #0
 800760a:	da10      	bge.n	800762e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800760c:	78fb      	ldrb	r3, [r7, #3]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	4413      	add	r3, r2
 8007614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	78fa      	ldrb	r2, [r7, #3]
 800761c:	0151      	lsls	r1, r2, #5
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	440a      	add	r2, r1
 8007622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800762a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800762c:	e057      	b.n	80076de <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007636:	2b00      	cmp	r3, #0
 8007638:	d051      	beq.n	80076de <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800763a:	78fb      	ldrb	r3, [r7, #3]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	4413      	add	r3, r2
 8007642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	78fa      	ldrb	r2, [r7, #3]
 800764a:	0151      	lsls	r1, r2, #5
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	440a      	add	r2, r1
 8007650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007654:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007658:	60d3      	str	r3, [r2, #12]
      break;
 800765a:	e040      	b.n	80076de <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800765c:	78fb      	ldrb	r3, [r7, #3]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	4413      	add	r3, r2
 8007664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007668:	461a      	mov	r2, r3
 800766a:	f240 639d 	movw	r3, #1693	; 0x69d
 800766e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007670:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007674:	2b00      	cmp	r3, #0
 8007676:	da34      	bge.n	80076e2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	4413      	add	r3, r2
 8007680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	78fa      	ldrb	r2, [r7, #3]
 8007688:	0151      	lsls	r1, r2, #5
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	440a      	add	r2, r1
 800768e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007696:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007698:	e023      	b.n	80076e2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800769a:	78fb      	ldrb	r3, [r7, #3]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a6:	461a      	mov	r2, r3
 80076a8:	f240 2325 	movw	r3, #549	; 0x225
 80076ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80076ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	da17      	bge.n	80076e6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80076b6:	78fb      	ldrb	r3, [r7, #3]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	78fa      	ldrb	r2, [r7, #3]
 80076c6:	0151      	lsls	r1, r2, #5
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	440a      	add	r2, r1
 80076cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076d0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80076d4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80076d6:	e006      	b.n	80076e6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	77fb      	strb	r3, [r7, #31]
      break;
 80076dc:	e004      	b.n	80076e8 <USB_HC_Init+0x14c>
      break;
 80076de:	bf00      	nop
 80076e0:	e002      	b.n	80076e8 <USB_HC_Init+0x14c>
      break;
 80076e2:	bf00      	nop
 80076e4:	e000      	b.n	80076e8 <USB_HC_Init+0x14c>
      break;
 80076e6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	78fa      	ldrb	r2, [r7, #3]
 80076f8:	0151      	lsls	r1, r2, #5
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	440a      	add	r2, r1
 80076fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007702:	f043 0302 	orr.w	r3, r3, #2
 8007706:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800770e:	699a      	ldr	r2, [r3, #24]
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	f003 030f 	and.w	r3, r3, #15
 8007716:	2101      	movs	r1, #1
 8007718:	fa01 f303 	lsl.w	r3, r1, r3
 800771c:	6939      	ldr	r1, [r7, #16]
 800771e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007722:	4313      	orrs	r3, r2
 8007724:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007732:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007736:	2b00      	cmp	r3, #0
 8007738:	da03      	bge.n	8007742 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800773a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800773e:	61bb      	str	r3, [r7, #24]
 8007740:	e001      	b.n	8007746 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff feff 	bl	800754a <USB_GetHostSpeed>
 800774c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800774e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007752:	2b02      	cmp	r3, #2
 8007754:	d106      	bne.n	8007764 <USB_HC_Init+0x1c8>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b02      	cmp	r3, #2
 800775a:	d003      	beq.n	8007764 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800775c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007760:	617b      	str	r3, [r7, #20]
 8007762:	e001      	b.n	8007768 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007768:	787b      	ldrb	r3, [r7, #1]
 800776a:	059b      	lsls	r3, r3, #22
 800776c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007770:	78bb      	ldrb	r3, [r7, #2]
 8007772:	02db      	lsls	r3, r3, #11
 8007774:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007778:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800777a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800777e:	049b      	lsls	r3, r3, #18
 8007780:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007784:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007786:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007788:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800778c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007792:	78fb      	ldrb	r3, [r7, #3]
 8007794:	0159      	lsls	r1, r3, #5
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	440b      	add	r3, r1
 800779a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800779e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80077a4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80077a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d003      	beq.n	80077b6 <USB_HC_Init+0x21a>
 80077ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d10f      	bne.n	80077d6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80077b6:	78fb      	ldrb	r3, [r7, #3]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	78fa      	ldrb	r2, [r7, #3]
 80077c6:	0151      	lsls	r1, r2, #5
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	440a      	add	r2, r1
 80077cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077d4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80077d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3720      	adds	r7, #32
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08c      	sub	sp, #48	; 0x30
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	4613      	mov	r3, r2
 80077ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	785b      	ldrb	r3, [r3, #1]
 80077f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80077f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077fc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007806:	2b00      	cmp	r3, #0
 8007808:	d02d      	beq.n	8007866 <USB_HC_StartXfer+0x86>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	791b      	ldrb	r3, [r3, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d129      	bne.n	8007866 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d117      	bne.n	8007848 <USB_HC_StartXfer+0x68>
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	79db      	ldrb	r3, [r3, #7]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d003      	beq.n	8007828 <USB_HC_StartXfer+0x48>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	79db      	ldrb	r3, [r3, #7]
 8007824:	2b02      	cmp	r3, #2
 8007826:	d10f      	bne.n	8007848 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	4413      	add	r3, r2
 8007830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	69fa      	ldr	r2, [r7, #28]
 8007838:	0151      	lsls	r1, r2, #5
 800783a:	6a3a      	ldr	r2, [r7, #32]
 800783c:	440a      	add	r2, r1
 800783e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007846:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10b      	bne.n	8007866 <USB_HC_StartXfer+0x86>
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	795b      	ldrb	r3, [r3, #5]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d107      	bne.n	8007866 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	4619      	mov	r1, r3
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 fa0f 	bl	8007c80 <USB_DoPing>
      return HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	e0f8      	b.n	8007a58 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d018      	beq.n	80078a0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	8912      	ldrh	r2, [r2, #8]
 8007876:	4413      	add	r3, r2
 8007878:	3b01      	subs	r3, #1
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	8912      	ldrh	r2, [r2, #8]
 800787e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007882:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007884:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007886:	8b7b      	ldrh	r3, [r7, #26]
 8007888:	429a      	cmp	r2, r3
 800788a:	d90b      	bls.n	80078a4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800788c:	8b7b      	ldrh	r3, [r7, #26]
 800788e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007890:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	8912      	ldrh	r2, [r2, #8]
 8007896:	fb03 f202 	mul.w	r2, r3, r2
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	611a      	str	r2, [r3, #16]
 800789e:	e001      	b.n	80078a4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80078a0:	2301      	movs	r3, #1
 80078a2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	78db      	ldrb	r3, [r3, #3]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d007      	beq.n	80078bc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80078ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	8912      	ldrh	r2, [r2, #8]
 80078b2:	fb03 f202 	mul.w	r2, r3, r2
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	611a      	str	r2, [r3, #16]
 80078ba:	e003      	b.n	80078c4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	695a      	ldr	r2, [r3, #20]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80078cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80078ce:	04d9      	lsls	r1, r3, #19
 80078d0:	4b63      	ldr	r3, [pc, #396]	; (8007a60 <USB_HC_StartXfer+0x280>)
 80078d2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078d4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	7a9b      	ldrb	r3, [r3, #10]
 80078da:	075b      	lsls	r3, r3, #29
 80078dc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078e0:	69f9      	ldr	r1, [r7, #28]
 80078e2:	0148      	lsls	r0, r1, #5
 80078e4:	6a39      	ldr	r1, [r7, #32]
 80078e6:	4401      	add	r1, r0
 80078e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80078ec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078ee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80078f0:	79fb      	ldrb	r3, [r7, #7]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d009      	beq.n	800790a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	68d9      	ldr	r1, [r3, #12]
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	4413      	add	r3, r2
 8007902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007906:	460a      	mov	r2, r1
 8007908:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b00      	cmp	r3, #0
 8007918:	bf0c      	ite	eq
 800791a:	2301      	moveq	r3, #1
 800791c:	2300      	movne	r3, #0
 800791e:	b2db      	uxtb	r3, r3
 8007920:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	4413      	add	r3, r2
 800792a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	0151      	lsls	r1, r2, #5
 8007934:	6a3a      	ldr	r2, [r7, #32]
 8007936:	440a      	add	r2, r1
 8007938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800793c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007940:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	4413      	add	r3, r2
 800794a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	7e7b      	ldrb	r3, [r7, #25]
 8007952:	075b      	lsls	r3, r3, #29
 8007954:	69f9      	ldr	r1, [r7, #28]
 8007956:	0148      	lsls	r0, r1, #5
 8007958:	6a39      	ldr	r1, [r7, #32]
 800795a:	4401      	add	r1, r0
 800795c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007960:	4313      	orrs	r3, r2
 8007962:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	4413      	add	r3, r2
 800796c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800797a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	78db      	ldrb	r3, [r3, #3]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d004      	beq.n	800798e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	e003      	b.n	8007996 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007994:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800799c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079aa:	461a      	mov	r2, r3
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	e04e      	b.n	8007a58 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	78db      	ldrb	r3, [r3, #3]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d149      	bne.n	8007a56 <USB_HC_StartXfer+0x276>
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d045      	beq.n	8007a56 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	79db      	ldrb	r3, [r3, #7]
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d830      	bhi.n	8007a34 <USB_HC_StartXfer+0x254>
 80079d2:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <USB_HC_StartXfer+0x1f8>)
 80079d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d8:	080079e9 	.word	0x080079e9
 80079dc:	08007a0d 	.word	0x08007a0d
 80079e0:	080079e9 	.word	0x080079e9
 80079e4:	08007a0d 	.word	0x08007a0d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	3303      	adds	r3, #3
 80079ee:	089b      	lsrs	r3, r3, #2
 80079f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80079f2:	8afa      	ldrh	r2, [r7, #22]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d91c      	bls.n	8007a38 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	f043 0220 	orr.w	r2, r3, #32
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a0a:	e015      	b.n	8007a38 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	3303      	adds	r3, #3
 8007a12:	089b      	lsrs	r3, r3, #2
 8007a14:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007a16:	8afa      	ldrh	r2, [r7, #22]
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d90a      	bls.n	8007a3c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a32:	e003      	b.n	8007a3c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007a34:	bf00      	nop
 8007a36:	e002      	b.n	8007a3e <USB_HC_StartXfer+0x25e>
        break;
 8007a38:	bf00      	nop
 8007a3a:	e000      	b.n	8007a3e <USB_HC_StartXfer+0x25e>
        break;
 8007a3c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	68d9      	ldr	r1, [r3, #12]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	785a      	ldrb	r2, [r3, #1]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	9000      	str	r0, [sp, #0]
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f7ff fae5 	bl	8007020 <USB_WritePacket>
  }

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3728      	adds	r7, #40	; 0x28
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	1ff80000 	.word	0x1ff80000

08007a64 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	b29b      	uxth	r3, r3
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b089      	sub	sp, #36	; 0x24
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007a96:	78fb      	ldrb	r3, [r7, #3]
 8007a98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	0c9b      	lsrs	r3, r3, #18
 8007aae:	f003 0303 	and.w	r3, r3, #3
 8007ab2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	0fdb      	lsrs	r3, r3, #31
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b20      	cmp	r3, #32
 8007ad4:	d104      	bne.n	8007ae0 <USB_HC_Halt+0x5a>
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	e0c8      	b.n	8007c72 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d002      	beq.n	8007aec <USB_HC_Halt+0x66>
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d163      	bne.n	8007bb4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	0151      	lsls	r1, r2, #5
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	440a      	add	r2, r1
 8007b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b0a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f040 80ab 	bne.w	8007c70 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d133      	bne.n	8007b8e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	0151      	lsls	r1, r2, #5
 8007b38:	69fa      	ldr	r2, [r7, #28]
 8007b3a:	440a      	add	r2, r1
 8007b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b44:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	0151      	lsls	r1, r2, #5
 8007b58:	69fa      	ldr	r2, [r7, #28]
 8007b5a:	440a      	add	r2, r1
 8007b5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b64:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b72:	d81d      	bhi.n	8007bb0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b8a:	d0ec      	beq.n	8007b66 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b8c:	e070      	b.n	8007c70 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	0151      	lsls	r1, r2, #5
 8007ba0:	69fa      	ldr	r2, [r7, #28]
 8007ba2:	440a      	add	r2, r1
 8007ba4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ba8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bae:	e05f      	b.n	8007c70 <USB_HC_Halt+0x1ea>
            break;
 8007bb0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bb2:	e05d      	b.n	8007c70 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	015a      	lsls	r2, r3, #5
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	4413      	add	r3, r2
 8007bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	0151      	lsls	r1, r2, #5
 8007bc6:	69fa      	ldr	r2, [r7, #28]
 8007bc8:	440a      	add	r2, r1
 8007bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bd2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d133      	bne.n	8007c4c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	0151      	lsls	r1, r2, #5
 8007bf6:	69fa      	ldr	r2, [r7, #28]
 8007bf8:	440a      	add	r2, r1
 8007bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c02:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	0151      	lsls	r1, r2, #5
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	440a      	add	r2, r1
 8007c1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c22:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c30:	d81d      	bhi.n	8007c6e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c48:	d0ec      	beq.n	8007c24 <USB_HC_Halt+0x19e>
 8007c4a:	e011      	b.n	8007c70 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69ba      	ldr	r2, [r7, #24]
 8007c5c:	0151      	lsls	r1, r2, #5
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	440a      	add	r2, r1
 8007c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	e000      	b.n	8007c70 <USB_HC_Halt+0x1ea>
          break;
 8007c6e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3724      	adds	r7, #36	; 0x24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
	...

08007c80 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007c94:	2301      	movs	r3, #1
 8007c96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	04da      	lsls	r2, r3, #19
 8007c9c:	4b15      	ldr	r3, [pc, #84]	; (8007cf4 <USB_DoPing+0x74>)
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	0151      	lsls	r1, r2, #5
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	440a      	add	r2, r1
 8007ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cb0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007cc8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cd0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	015a      	lsls	r2, r3, #5
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cde:	461a      	mov	r2, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	371c      	adds	r7, #28
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	1ff80000 	.word	0x1ff80000

08007cf8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b088      	sub	sp, #32
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7ff f8c6 	bl	8006e9e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d12:	2110      	movs	r1, #16
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7ff f91f 	bl	8006f58 <USB_FlushTxFifo>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7ff f94b 	bl	8006fc0 <USB_FlushRxFifo>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007d34:	2300      	movs	r3, #0
 8007d36:	61bb      	str	r3, [r7, #24]
 8007d38:	e01f      	b.n	8007d7a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	015a      	lsls	r2, r3, #5
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	4413      	add	r3, r2
 8007d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d58:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d60:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d6e:	461a      	mov	r2, r3
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	3301      	adds	r3, #1
 8007d78:	61bb      	str	r3, [r7, #24]
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	2b0f      	cmp	r3, #15
 8007d7e:	d9dc      	bls.n	8007d3a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007d80:	2300      	movs	r3, #0
 8007d82:	61bb      	str	r3, [r7, #24]
 8007d84:	e034      	b.n	8007df0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d9c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007da4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007dac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dba:	461a      	mov	r2, r3
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dcc:	d80c      	bhi.n	8007de8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007de4:	d0ec      	beq.n	8007dc0 <USB_StopHost+0xc8>
 8007de6:	e000      	b.n	8007dea <USB_StopHost+0xf2>
        break;
 8007de8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	3301      	adds	r3, #1
 8007dee:	61bb      	str	r3, [r7, #24]
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	2b0f      	cmp	r3, #15
 8007df4:	d9c7      	bls.n	8007d86 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e02:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e0a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7ff f835 	bl	8006e7c <USB_EnableGlobalInt>

  return ret;
 8007e12:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3720      	adds	r7, #32
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBH_HID_InterfaceInit>:
 phost->pActiveClass->iface_initnum  - variable where last index of an active interface is hold. It
 is used as an index of HID_Handle index as well.

 phost->pActiveClass->interfaces - this variable hold all successfully initialised interfaces.
 */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost) {
 8007e1c:	b5b0      	push	{r4, r5, r7, lr}
 8007e1e:	b08c      	sub	sp, #48	; 0x30
 8007e20:	af04      	add	r7, sp, #16
 8007e22:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8007e24:	2301      	movs	r3, #1
 8007e26:	77fb      	strb	r3, [r7, #31]
	USBH_StatusTypeDef ctlStatus = USBH_BUSY;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	77bb      	strb	r3, [r7, #30]
	HID_HandleTypeDef *HID_Handle;
	USBH_InterfaceDescTypeDef *Itf_Desc;

	uint8_t iface_num = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	76fb      	strb	r3, [r7, #27]
	uint8_t i = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	777b      	strb	r3, [r7, #29]
	uint8_t max_ep;
	uint8_t num = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	773b      	strb	r3, [r7, #28]

	switch (phost->pActiveClass->iface_init) {
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e3e:	7f9b      	ldrb	r3, [r3, #30]
 8007e40:	2b07      	cmp	r3, #7
 8007e42:	f200 8297 	bhi.w	8008374 <USBH_HID_InterfaceInit+0x558>
 8007e46:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <USBH_HID_InterfaceInit+0x30>)
 8007e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4c:	08007e6d 	.word	0x08007e6d
 8007e50:	08007f1f 	.word	0x08007f1f
 8007e54:	08007f95 	.word	0x08007f95
 8007e58:	0800800d 	.word	0x0800800d
 8007e5c:	080080e7 	.word	0x080080e7
 8007e60:	08008243 	.word	0x08008243
 8007e64:	08008273 	.word	0x08008273
 8007e68:	08008329 	.word	0x08008329
	case IFACE_INIT: {

		phost->pActiveClass->iface_initnum = 0U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e72:	2200      	movs	r2, #0
 8007e74:	775a      	strb	r2, [r3, #29]

		//init all possible HID_Handlers even if not all will be used.

		for (; i < USBH_MAX_NUM_INTERFACES; i++) {
 8007e76:	e044      	b.n	8007f02 <USBH_HID_InterfaceInit+0xe6>
			phost->pActiveClass->pData[i] = (HID_HandleTypeDef*) USBH_malloc(
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 4380 	ldr.w	r4, [r3, #896]	; 0x380
 8007e7e:	7f7d      	ldrb	r5, [r7, #29]
 8007e80:	206c      	movs	r0, #108	; 0x6c
 8007e82:	f005 fff7 	bl	800de74 <malloc>
 8007e86:	4603      	mov	r3, r0
 8007e88:	461a      	mov	r2, r3
 8007e8a:	f105 0308 	add.w	r3, r5, #8
 8007e8e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
					sizeof(HID_HandleTypeDef));
			HID_Handle = (HID_HandleTypeDef*) phost->pActiveClass->pData[i];
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e98:	7f7a      	ldrb	r2, [r7, #29]
 8007e9a:	3208      	adds	r2, #8
 8007e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea0:	617b      	str	r3, [r7, #20]
			memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8007ea2:	226c      	movs	r2, #108	; 0x6c
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	6978      	ldr	r0, [r7, #20]
 8007ea8:	f005 fff4 	bl	800de94 <memset>

			// HID_Handle = phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
			HID_Handle->state = HID_INIT;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	709a      	strb	r2, [r3, #2]
			HID_Handle->ctl_state = HID_REQ_INIT;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	715a      	strb	r2, [r3, #5]
			HID_Handle->ep_addr =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].bEndpointAddress;
 8007eb8:	7f7b      	ldrb	r3, [r7, #29]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	211a      	movs	r1, #26
 8007ebe:	fb01 f303 	mul.w	r3, r1, r3
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ec8:	781a      	ldrb	r2, [r3, #0]
			HID_Handle->ep_addr =
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	769a      	strb	r2, [r3, #26]
			HID_Handle->length =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].wMaxPacketSize;
 8007ece:	7f7b      	ldrb	r3, [r7, #29]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	211a      	movs	r1, #26
 8007ed4:	fb01 f303 	mul.w	r3, r1, r3
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ede:	881a      	ldrh	r2, [r3, #0]
			HID_Handle->length =
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	831a      	strh	r2, [r3, #24]
			HID_Handle->poll =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].bInterval;
 8007ee4:	7f7b      	ldrb	r3, [r7, #29]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	211a      	movs	r1, #26
 8007eea:	fb01 f303 	mul.w	r3, r1, r3
 8007eee:	4413      	add	r3, r2
 8007ef0:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	b29a      	uxth	r2, r3
			HID_Handle->poll =
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	839a      	strh	r2, [r3, #28]
		for (; i < USBH_MAX_NUM_INTERFACES; i++) {
 8007efc:	7f7b      	ldrb	r3, [r7, #29]
 8007efe:	3301      	adds	r3, #1
 8007f00:	777b      	strb	r3, [r7, #29]
 8007f02:	7f7b      	ldrb	r3, [r7, #29]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d9b7      	bls.n	8007e78 <USBH_HID_InterfaceInit+0x5c>

		}
		phost->pActiveClass->interfaces = 0U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f0e:	2200      	movs	r2, #0
 8007f10:	771a      	strb	r2, [r3, #28]
		phost->pActiveClass->iface_init = IFACE_READHID;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f18:	2201      	movs	r2, #1
 8007f1a:	779a      	strb	r2, [r3, #30]

	}
		break;
 8007f1c:	e22a      	b.n	8008374 <USBH_HID_InterfaceInit+0x558>

	case IFACE_READHID: {
		iface_num =
				phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum].bInterfaceNumber;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f24:	7f5b      	ldrb	r3, [r3, #29]
 8007f26:	4619      	mov	r1, r3
		iface_num =
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	231a      	movs	r3, #26
 8007f2c:	fb01 f303 	mul.w	r3, r1, r3
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	76fb      	strb	r3, [r7, #27]
		USBH_SelectInterface(phost, iface_num);
 8007f3a:	7efb      	ldrb	r3, [r7, #27]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f004 f8bb 	bl	800c0ba <USBH_SelectInterface>

		if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE,
				phost->pActiveClass->iface_initnum) == USBH_OK) {
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
		if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE,
 8007f4a:	7f5b      	ldrb	r3, [r3, #29]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	2109      	movs	r1, #9
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fb9b 	bl	800868c <USBH_HID_GetHIDDescriptor>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f040 8204 	bne.w	8008366 <USBH_HID_InterfaceInit+0x54a>

			HID_Handle =
					phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 8007f6a:	7f52      	ldrb	r2, [r2, #29]
			HID_Handle =
 8007f6c:	3208      	adds	r2, #8
 8007f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f72:	617b      	str	r3, [r7, #20]
			USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f80:	4619      	mov	r1, r3
 8007f82:	4610      	mov	r0, r2
 8007f84:	f000 fbef 	bl	8008766 <USBH_HID_ParseHIDDesc>
			phost->pActiveClass->iface_init = IFACE_READHIDRPTDESC;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f8e:	2202      	movs	r2, #2
 8007f90:	779a      	strb	r2, [r3, #30]
		} else {
			//TODO Check if device is XBOX360 game controller as it doesn't do HID Descriptors aparently
		}

	}
		break;
 8007f92:	e1e8      	b.n	8008366 <USBH_HID_InterfaceInit+0x54a>

	case IFACE_READHIDRPTDESC: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 8007fa0:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 8007fa2:	3208      	adds	r2, #8
 8007fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa8:	617b      	str	r3, [r7, #20]
		iface_num =
				phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum].bInterfaceNumber;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fb0:	7f5b      	ldrb	r3, [r3, #29]
 8007fb2:	4619      	mov	r1, r3
		iface_num =
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	231a      	movs	r3, #26
 8007fb8:	fb01 f303 	mul.w	r3, r1, r3
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	76fb      	strb	r3, [r7, #27]
		USBH_SelectInterface(phost, iface_num);
 8007fc6:	7efb      	ldrb	r3, [r7, #27]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f004 f875 	bl	800c0ba <USBH_SelectInterface>

		if (USBH_HID_GetHIDReportDescriptor(phost,
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
				HID_Handle->HID_Desc.wItemLength,
				phost->pActiveClass->iface_initnum) == USBH_OK) {
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
		if (USBH_HID_GetHIDReportDescriptor(phost,
 8007fda:	7f5b      	ldrb	r3, [r3, #29]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fb37 	bl	8008652 <USBH_HID_GetHIDReportDescriptor>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f040 81bf 	bne.w	800836a <USBH_HID_InterfaceInit+0x54e>

			parse_report_descriptor(phost->device.Data,
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f503 708e 	add.w	r0, r3, #284	; 0x11c
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	3330      	adds	r3, #48	; 0x30
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f001 fb6a 	bl	80096d4 <parse_report_descriptor>
					HID_Handle->HID_Desc.wItemLength,
					&(HID_Handle->HID_Desc.RptDesc));

			phost->pActiveClass->iface_init = IFACE_INITSUBCLASS;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008006:	2203      	movs	r2, #3
 8008008:	779a      	strb	r2, [r3, #30]
		}
	}
		break;
 800800a:	e1ae      	b.n	800836a <USBH_HID_InterfaceInit+0x54e>

	case IFACE_INITSUBCLASS: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 8008018:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 800801a:	3208      	adds	r2, #8
 800801c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008020:	617b      	str	r3, [r7, #20]

		Itf_Desc =
				&phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum];
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008028:	7f5b      	ldrb	r3, [r3, #29]
 800802a:	461a      	mov	r2, r3
		Itf_Desc =
 800802c:	231a      	movs	r3, #26
 800802e:	fb02 f303 	mul.w	r3, r2, r3
 8008032:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	4413      	add	r3, r2
 800803a:	330a      	adds	r3, #10
 800803c:	613b      	str	r3, [r7, #16]

		if ((Itf_Desc->bInterfaceClass == 0x03
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	795b      	ldrb	r3, [r3, #5]
 8008042:	2b03      	cmp	r3, #3
 8008044:	d107      	bne.n	8008056 <USBH_HID_InterfaceInit+0x23a>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	799b      	ldrb	r3, [r3, #6]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d103      	bne.n	8008056 <USBH_HID_InterfaceInit+0x23a>
				&& Itf_Desc->bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	79db      	ldrb	r3, [r3, #7]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d007      	beq.n	8008066 <USBH_HID_InterfaceInit+0x24a>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD))
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800805c:	f003 0303 	and.w	r3, r3, #3
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b02      	cmp	r3, #2
 8008064:	d109      	bne.n	800807a <USBH_HID_InterfaceInit+0x25e>

				{
			HID_Handle->Init = USBH_HID_KeybdInit;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	4aac      	ldr	r2, [pc, #688]	; (800831c <USBH_HID_InterfaceInit+0x500>)
 800806a:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008072:	7f1a      	ldrb	r2, [r3, #28]
 8008074:	3201      	adds	r2, #1
 8008076:	b2d2      	uxtb	r2, r2
 8008078:	771a      	strb	r2, [r3, #28]
		}

		if ((Itf_Desc->bInterfaceClass == 0x03
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	795b      	ldrb	r3, [r3, #5]
 800807e:	2b03      	cmp	r3, #3
 8008080:	d107      	bne.n	8008092 <USBH_HID_InterfaceInit+0x276>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	799b      	ldrb	r3, [r3, #6]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d103      	bne.n	8008092 <USBH_HID_InterfaceInit+0x276>
				&& Itf_Desc->bInterfaceProtocol == HID_MOUSE_BOOT_CODE)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	79db      	ldrb	r3, [r3, #7]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d007      	beq.n	80080a2 <USBH_HID_InterfaceInit+0x286>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE))
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008098:	f003 0303 	and.w	r3, r3, #3
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d109      	bne.n	80080b6 <USBH_HID_InterfaceInit+0x29a>

				{
			HID_Handle->Init = USBH_HID_MouseInit;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	4a9e      	ldr	r2, [pc, #632]	; (8008320 <USBH_HID_InterfaceInit+0x504>)
 80080a6:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080ae:	7f1a      	ldrb	r2, [r3, #28]
 80080b0:	3201      	adds	r2, #1
 80080b2:	b2d2      	uxtb	r2, r2
 80080b4:	771a      	strb	r2, [r3, #28]
		}

		if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_JOYSTICK) {
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080bc:	f003 0303 	and.w	r3, r3, #3
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d109      	bne.n	80080da <USBH_HID_InterfaceInit+0x2be>
			HID_Handle->Init = USBH_HID_GamepadInit;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	4a96      	ldr	r2, [pc, #600]	; (8008324 <USBH_HID_InterfaceInit+0x508>)
 80080ca:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080d2:	7f1a      	ldrb	r2, [r3, #28]
 80080d4:	3201      	adds	r2, #1
 80080d6:	b2d2      	uxtb	r2, r2
 80080d8:	771a      	strb	r2, [r3, #28]
		}

		phost->pActiveClass->iface_init = IFACE_INITENDPNT;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080e0:	2204      	movs	r2, #4
 80080e2:	779a      	strb	r2, [r3, #30]
	}
		break;
 80080e4:	e146      	b.n	8008374 <USBH_HID_InterfaceInit+0x558>

	case IFACE_INITENDPNT: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 80080f2:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 80080f4:	3208      	adds	r2, #8
 80080f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fa:	617b      	str	r3, [r7, #20]

		/* Check fo available number of endpoints*/
		/* Find the number of EPs in the Interface Descriptor*/
		/* Choose the lower number in order not to overrun the buffer allocated*/
		max_ep =
				((phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008102:	4619      	mov	r1, r3
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	231a      	movs	r3, #26
 8008108:	fb01 f303 	mul.w	r3, r1, r3
 800810c:	4413      	add	r3, r2
 800810e:	f203 3346 	addw	r3, r3, #838	; 0x346
 8008112:	781b      	ldrb	r3, [r3, #0]
		max_ep =
 8008114:	2b02      	cmp	r3, #2
 8008116:	bf28      	it	cs
 8008118:	2302      	movcs	r3, #2
 800811a:	73fb      	strb	r3, [r7, #15]
						<= USBH_MAX_NUM_ENDPOINTS) ?
						phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
						USBH_MAX_NUM_ENDPOINTS);

		/* Decode endpoint IN and OUT address from interface descriptor*/
		for (; num < max_ep; num++) {
 800811c:	e086      	b.n	800822c <USBH_HID_InterfaceInit+0x410>
			if (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008124:	4618      	mov	r0, r3
 8008126:	7f3b      	ldrb	r3, [r7, #28]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	3301      	adds	r3, #1
 800812c:	00d9      	lsls	r1, r3, #3
 800812e:	231a      	movs	r3, #26
 8008130:	fb00 f303 	mul.w	r3, r0, r3
 8008134:	440b      	add	r3, r1
 8008136:	4413      	add	r3, r2
 8008138:	f203 3346 	addw	r3, r3, #838	; 0x346
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	b25b      	sxtb	r3, r3
 8008140:	2b00      	cmp	r3, #0
 8008142:	da38      	bge.n	80081b6 <USBH_HID_InterfaceInit+0x39a>
					& 0x80U) {
				HID_Handle->InEp =
						(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800814a:	4618      	mov	r0, r3
 800814c:	7f3b      	ldrb	r3, [r7, #28]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	3301      	adds	r3, #1
 8008152:	00d9      	lsls	r1, r3, #3
 8008154:	231a      	movs	r3, #26
 8008156:	fb00 f303 	mul.w	r3, r0, r3
 800815a:	440b      	add	r3, r1
 800815c:	4413      	add	r3, r2
 800815e:	f203 3346 	addw	r3, r3, #838	; 0x346
 8008162:	781a      	ldrb	r2, [r3, #0]
				HID_Handle->InEp =
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	711a      	strb	r2, [r3, #4]
				HID_Handle->InPipe =\
 USBH_AllocPipe(phost, HID_Handle->InEp);
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	791b      	ldrb	r3, [r3, #4]
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f005 f9cd 	bl	800d50e <USBH_AllocPipe>
 8008174:	4603      	mov	r3, r0
 8008176:	461a      	mov	r2, r3
				HID_Handle->InPipe =\
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	705a      	strb	r2, [r3, #1]

				/* Open pipe for IN endpoint*/
				USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp,
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	7859      	ldrb	r1, [r3, #1]
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	7918      	ldrb	r0, [r3, #4]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	8b12      	ldrh	r2, [r2, #24]
 8008194:	9202      	str	r2, [sp, #8]
 8008196:	2203      	movs	r2, #3
 8008198:	9201      	str	r2, [sp, #4]
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	4623      	mov	r3, r4
 800819e:	4602      	mov	r2, r0
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f005 f985 	bl	800d4b0 <USBH_OpenPipe>
						phost->device.address, phost->device.speed,
						USB_EP_TYPE_INTR, HID_Handle->length);

				USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	785b      	ldrb	r3, [r3, #1]
 80081aa:	2200      	movs	r2, #0
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f005 fdcf 	bl	800dd52 <USBH_LL_SetToggle>
 80081b4:	e037      	b.n	8008226 <USBH_HID_InterfaceInit+0x40a>

			} else {
				HID_Handle->OutEp =
						(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80081bc:	4618      	mov	r0, r3
 80081be:	7f3b      	ldrb	r3, [r7, #28]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	3301      	adds	r3, #1
 80081c4:	00d9      	lsls	r1, r3, #3
 80081c6:	231a      	movs	r3, #26
 80081c8:	fb00 f303 	mul.w	r3, r0, r3
 80081cc:	440b      	add	r3, r1
 80081ce:	4413      	add	r3, r2
 80081d0:	f203 3346 	addw	r3, r3, #838	; 0x346
 80081d4:	781a      	ldrb	r2, [r3, #0]
				HID_Handle->OutEp =
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	70da      	strb	r2, [r3, #3]
				HID_Handle->OutPipe =\
 USBH_AllocPipe(phost,
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	78db      	ldrb	r3, [r3, #3]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f005 f994 	bl	800d50e <USBH_AllocPipe>
 80081e6:	4603      	mov	r3, r0
 80081e8:	461a      	mov	r2, r3
				HID_Handle->OutPipe =\
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	701a      	strb	r2, [r3, #0]
						HID_Handle->OutEp);

				/* Open pipe for OUT endpoint*/
				USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp,
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	7819      	ldrb	r1, [r3, #0]
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	78d8      	ldrb	r0, [r3, #3]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	8b12      	ldrh	r2, [r2, #24]
 8008206:	9202      	str	r2, [sp, #8]
 8008208:	2203      	movs	r2, #3
 800820a:	9201      	str	r2, [sp, #4]
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	4623      	mov	r3, r4
 8008210:	4602      	mov	r2, r0
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f005 f94c 	bl	800d4b0 <USBH_OpenPipe>
						phost->device.address, phost->device.speed,
						USB_EP_TYPE_INTR, HID_Handle->length);

				USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2200      	movs	r2, #0
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f005 fd96 	bl	800dd52 <USBH_LL_SetToggle>
		for (; num < max_ep; num++) {
 8008226:	7f3b      	ldrb	r3, [r7, #28]
 8008228:	3301      	adds	r3, #1
 800822a:	773b      	strb	r3, [r7, #28]
 800822c:	7f3a      	ldrb	r2, [r7, #28]
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	429a      	cmp	r2, r3
 8008232:	f4ff af74 	bcc.w	800811e <USBH_HID_InterfaceInit+0x302>
			}

		}

		phost->pActiveClass->iface_init = IFACE_SETPROTOCOL;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800823c:	2205      	movs	r2, #5
 800823e:	779a      	strb	r2, [r3, #30]
	}
		break;
 8008240:	e098      	b.n	8008374 <USBH_HID_InterfaceInit+0x558>

	case IFACE_SETPROTOCOL: {
		//Set protocol (0U boot, 1U report)

		ctlStatus = USBH_HID_SetProtocol(phost, 1U,
				phost->device.current_interface);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
		ctlStatus = USBH_HID_SetProtocol(phost, 1U,
 8008248:	b29b      	uxth	r3, r3
 800824a:	461a      	mov	r2, r3
 800824c:	2101      	movs	r1, #1
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fa67 	bl	8008722 <USBH_HID_SetProtocol>
 8008254:	4603      	mov	r3, r0
 8008256:	77bb      	strb	r3, [r7, #30]

		if (ctlStatus == USBH_OK || ctlStatus == USBH_NOT_SUPPORTED) {
 8008258:	7fbb      	ldrb	r3, [r7, #30]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <USBH_HID_InterfaceInit+0x44a>
 800825e:	7fbb      	ldrb	r3, [r7, #30]
 8008260:	2b03      	cmp	r3, #3
 8008262:	f040 8084 	bne.w	800836e <USBH_HID_InterfaceInit+0x552>
			phost->pActiveClass->iface_init = IFACE_SETIDLE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800826c:	2206      	movs	r2, #6
 800826e:	779a      	strb	r2, [r3, #30]
		}

	}
		break;
 8008270:	e07d      	b.n	800836e <USBH_HID_InterfaceInit+0x552>

	case IFACE_SETIDLE: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 800827e:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 8008280:	3208      	adds	r2, #8
 8008282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008286:	617b      	str	r3, [r7, #20]
		Itf_Desc =
				&phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum];
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800828e:	7f5b      	ldrb	r3, [r3, #29]
 8008290:	461a      	mov	r2, r3
		Itf_Desc =
 8008292:	231a      	movs	r3, #26
 8008294:	fb02 f303 	mul.w	r3, r2, r3
 8008298:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	4413      	add	r3, r2
 80082a0:	330a      	adds	r3, #10
 80082a2:	613b      	str	r3, [r7, #16]

		if ((Itf_Desc->bInterfaceClass == 0x03
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	795b      	ldrb	r3, [r3, #5]
 80082a8:	2b03      	cmp	r3, #3
 80082aa:	d107      	bne.n	80082bc <USBH_HID_InterfaceInit+0x4a0>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	799b      	ldrb	r3, [r3, #6]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d103      	bne.n	80082bc <USBH_HID_InterfaceInit+0x4a0>
				&& Itf_Desc->bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	79db      	ldrb	r3, [r3, #7]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d007      	beq.n	80082cc <USBH_HID_InterfaceInit+0x4b0>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD)) {
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d10a      	bne.n	80082e2 <USBH_HID_InterfaceInit+0x4c6>
			//set up polling at 500ms - 1 unit should be 4ms
			ctlStatus = USBH_HID_SetIdle(phost, 125U, 0U,
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80082d2:	2200      	movs	r2, #0
 80082d4:	217d      	movs	r1, #125	; 0x7d
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f9f5 	bl	80086c6 <USBH_HID_SetIdle>
 80082dc:	4603      	mov	r3, r0
 80082de:	77bb      	strb	r3, [r7, #30]
 80082e0:	e009      	b.n	80082f6 <USBH_HID_InterfaceInit+0x4da>
					phost->device.current_interface);
		} else {
			ctlStatus = USBH_HID_SetIdle(phost, 0U, 0U,
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80082e8:	2200      	movs	r2, #0
 80082ea:	2100      	movs	r1, #0
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f9ea 	bl	80086c6 <USBH_HID_SetIdle>
 80082f2:	4603      	mov	r3, r0
 80082f4:	77bb      	strb	r3, [r7, #30]
					phost->device.current_interface);
		}

		if (ctlStatus == USBH_OK) {
 80082f6:	7fbb      	ldrb	r3, [r7, #30]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d105      	bne.n	8008308 <USBH_HID_InterfaceInit+0x4ec>
			phost->pActiveClass->iface_init = IFACE_SELECTIFACE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008302:	2207      	movs	r2, #7
 8008304:	779a      	strb	r2, [r3, #30]

			}
		}

	}
		break;
 8008306:	e034      	b.n	8008372 <USBH_HID_InterfaceInit+0x556>
			if (ctlStatus == USBH_NOT_SUPPORTED) {
 8008308:	7fbb      	ldrb	r3, [r7, #30]
 800830a:	2b03      	cmp	r3, #3
 800830c:	d131      	bne.n	8008372 <USBH_HID_InterfaceInit+0x556>
				phost->pActiveClass->iface_init = IFACE_SELECTIFACE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008314:	2207      	movs	r2, #7
 8008316:	779a      	strb	r2, [r3, #30]
		break;
 8008318:	e02b      	b.n	8008372 <USBH_HID_InterfaceInit+0x556>
 800831a:	bf00      	nop
 800831c:	08008ed5 	.word	0x08008ed5
 8008320:	08009225 	.word	0x08009225
 8008324:	08008965 	.word	0x08008965

	case IFACE_SELECTIFACE: {
		//Check if we have any other interfaces to phost->device.CfgDesc.bNumInterfaces
		if (++phost->pActiveClass->iface_initnum
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800832e:	7f5a      	ldrb	r2, [r3, #29]
 8008330:	3201      	adds	r2, #1
 8008332:	b2d2      	uxtb	r2, r2
 8008334:	775a      	strb	r2, [r3, #29]
 8008336:	7f5a      	ldrb	r2, [r3, #29]
				< phost->device.CfgDesc.bNumInterfaces) {
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
		if (++phost->pActiveClass->iface_initnum
 800833e:	429a      	cmp	r2, r3
 8008340:	d20e      	bcs.n	8008360 <USBH_HID_InterfaceInit+0x544>
			//Have we reached maximum of interfaces? USBH_MAX_NUM_INTERFACES
			if (phost->pActiveClass->iface_initnum <= USBH_MAX_NUM_INTERFACES) {
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008348:	7f5b      	ldrb	r3, [r3, #29]
 800834a:	2b02      	cmp	r3, #2
 800834c:	d805      	bhi.n	800835a <USBH_HID_InterfaceInit+0x53e>
				phost->pActiveClass->iface_init = IFACE_READHID;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008354:	2201      	movs	r2, #1
 8008356:	779a      	strb	r2, [r3, #30]
			}
		} else {
			status = USBH_OK;
		}
	}
		break;
 8008358:	e00c      	b.n	8008374 <USBH_HID_InterfaceInit+0x558>
				status = USBH_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	77fb      	strb	r3, [r7, #31]
		break;
 800835e:	e009      	b.n	8008374 <USBH_HID_InterfaceInit+0x558>
			status = USBH_OK;
 8008360:	2300      	movs	r3, #0
 8008362:	77fb      	strb	r3, [r7, #31]
		break;
 8008364:	e006      	b.n	8008374 <USBH_HID_InterfaceInit+0x558>
		break;
 8008366:	bf00      	nop
 8008368:	e004      	b.n	8008374 <USBH_HID_InterfaceInit+0x558>
		break;
 800836a:	bf00      	nop
 800836c:	e002      	b.n	8008374 <USBH_HID_InterfaceInit+0x558>
		break;
 800836e:	bf00      	nop
 8008370:	e000      	b.n	8008374 <USBH_HID_InterfaceInit+0x558>
		break;
 8008372:	bf00      	nop
	}

	return status;
 8008374:	7ffb      	ldrb	r3, [r7, #31]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3720      	adds	r7, #32
 800837a:	46bd      	mov	sp, r7
 800837c:	bdb0      	pop	{r4, r5, r7, pc}
 800837e:	bf00      	nop

08008380 <USBH_HID_InterfaceDeInit>:
 * @brief  USBH_HID_InterfaceDeInit
 *         The function DeInit the Pipes used for the HID class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef static USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost) {
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]

	HID_HandleTypeDef *HID_Handle;

	uint8_t i = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	73fb      	strb	r3, [r7, #15]
	for (; i <= (USBH_MAX_NUM_INTERFACES - 1); i++) {
 800838c:	e055      	b.n	800843a <USBH_HID_InterfaceDeInit+0xba>

		HID_Handle = (HID_HandleTypeDef*) phost->pActiveClass->pData[i];
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008394:	7bfa      	ldrb	r2, [r7, #15]
 8008396:	3208      	adds	r2, #8
 8008398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839c:	60bb      	str	r3, [r7, #8]

		if (HID_Handle->InPipe != 0x00U) {
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00e      	beq.n	80083c4 <USBH_HID_InterfaceDeInit+0x44>
			USBH_ClosePipe(phost, HID_Handle->InPipe);
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	785b      	ldrb	r3, [r3, #1]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f005 f89e 	bl	800d4ee <USBH_ClosePipe>
			USBH_FreePipe(phost, HID_Handle->InPipe);
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	785b      	ldrb	r3, [r3, #1]
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f005 f8c8 	bl	800d54e <USBH_FreePipe>
			HID_Handle->InPipe = 0U; /* Reset the pipe as Free */
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2200      	movs	r2, #0
 80083c2:	705a      	strb	r2, [r3, #1]
		}

		if (HID_Handle->OutPipe != 0x00U) {
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00e      	beq.n	80083ea <USBH_HID_InterfaceDeInit+0x6a>
			USBH_ClosePipe(phost, HID_Handle->OutPipe);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	4619      	mov	r1, r3
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f005 f88b 	bl	800d4ee <USBH_ClosePipe>
			USBH_FreePipe(phost, HID_Handle->OutPipe);
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f005 f8b5 	bl	800d54e <USBH_FreePipe>
			HID_Handle->OutPipe = 0U; /* Reset the pipe as Free */
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2200      	movs	r2, #0
 80083e8:	701a      	strb	r2, [r3, #0]
		}

		if (phost->pActiveClass->pData[i]) {
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80083f0:	7bfa      	ldrb	r2, [r7, #15]
 80083f2:	3208      	adds	r2, #8
 80083f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d01b      	beq.n	8008434 <USBH_HID_InterfaceDeInit+0xb4>
			USBH_free(phost->pActiveClass->pData[i]);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008402:	7bfa      	ldrb	r2, [r7, #15]
 8008404:	3208      	adds	r2, #8
 8008406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840a:	4618      	mov	r0, r3
 800840c:	f005 fd3a 	bl	800de84 <free>
			free(phost->pActiveClass->pData[i]);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008416:	7bfa      	ldrb	r2, [r7, #15]
 8008418:	3208      	adds	r2, #8
 800841a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841e:	4618      	mov	r0, r3
 8008420:	f005 fd30 	bl	800de84 <free>
			phost->pActiveClass->pData[i] = 0U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800842a:	7bfa      	ldrb	r2, [r7, #15]
 800842c:	3208      	adds	r2, #8
 800842e:	2100      	movs	r1, #0
 8008430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (; i <= (USBH_MAX_NUM_INTERFACES - 1); i++) {
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	3301      	adds	r3, #1
 8008438:	73fb      	strb	r3, [r7, #15]
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d9a6      	bls.n	800838e <USBH_HID_InterfaceDeInit+0xe>
		}
	}
	phost->pActiveClass->iface_init = 0U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008446:	2200      	movs	r2, #0
 8008448:	779a      	strb	r2, [r3, #30]
	phost->pActiveClass->iface_initnum = 0U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008450:	2200      	movs	r2, #0
 8008452:	775a      	strb	r2, [r3, #29]
	phost->pActiveClass->interfaces = 0U;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800845a:	2200      	movs	r2, #0
 800845c:	771a      	strb	r2, [r3, #28]

	return USBH_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBH_HID_NextInterface>:
 *         for HID class.
 * @param  phost: Host handle
 * @retval USBH Status
 */

void USBH_HID_NextInterface(USBH_HandleTypeDef *phost) {
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
	phost->device.current_interface++;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008476:	3301      	adds	r3, #1
 8008478:	b2da      	uxtb	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	if (phost->device.current_interface >= phost->pActiveClass->interfaces) {
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800848c:	7f1b      	ldrb	r3, [r3, #28]
 800848e:	429a      	cmp	r2, r3
 8008490:	d303      	bcc.n	800849a <USBH_HID_NextInterface+0x32>
		phost->device.current_interface = 0;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
	}
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USBH_HID_ClassRequest>:

static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost) {
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
	//All config has been done already in USBH_HID_InterfaceInit
	return USBH_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <USBH_HID_Process>:
 * @brief  USBH_HID_Process
 *         The function is for managing state machine for HID data transfers
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost) {
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	75fb      	strb	r3, [r7, #23]
	HID_HandleTypeDef *HID_Handle =
			(HID_HandleTypeDef*) phost->pActiveClass->pData[phost->device.current_interface];
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
	HID_HandleTypeDef *HID_Handle =
 80084d4:	3208      	adds	r2, #8
 80084d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084da:	613b      	str	r3, [r7, #16]
	uint32_t XferSize;

	switch (HID_Handle->state) {
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	789b      	ldrb	r3, [r3, #2]
 80084e0:	2b06      	cmp	r3, #6
 80084e2:	f200 8084 	bhi.w	80085ee <USBH_HID_Process+0x132>
 80084e6:	a201      	add	r2, pc, #4	; (adr r2, 80084ec <USBH_HID_Process+0x30>)
 80084e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ec:	08008509 	.word	0x08008509
 80084f0:	080085ef 	.word	0x080085ef
 80084f4:	080085ef 	.word	0x080085ef
 80084f8:	080085ef 	.word	0x080085ef
 80084fc:	0800853b 	.word	0x0800853b
 8008500:	08008525 	.word	0x08008525
 8008504:	08008569 	.word	0x08008569
	case HID_INIT:
		HID_Handle->Init(phost);
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	4798      	blx	r3
		HID_Handle->state = HID_SYNC;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	2205      	movs	r2, #5
 8008514:	709a      	strb	r2, [r3, #2]
		phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800851c:	2102      	movs	r1, #2
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	4798      	blx	r3
		break;
 8008522:	e069      	b.n	80085f8 <USBH_HID_Process+0x13c>

	case HID_SYNC:
		/* Sync with start of Even Frame */
		if (phost->Timer & 1U) {
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	2b00      	cmp	r3, #0
 8008530:	d05f      	beq.n	80085f2 <USBH_HID_Process+0x136>
			HID_Handle->state = HID_GET_DATA;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	2204      	movs	r2, #4
 8008536:	709a      	strb	r2, [r3, #2]
		}
		break;
 8008538:	e05b      	b.n	80085f2 <USBH_HID_Process+0x136>

	case HID_GET_DATA:
		USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	6959      	ldr	r1, [r3, #20]
				(uint8_t) HID_Handle->length, HID_Handle->InPipe);
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	8b1b      	ldrh	r3, [r3, #24]
		USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8008542:	b2da      	uxtb	r2, r3
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	785b      	ldrb	r3, [r3, #1]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f004 ff92 	bl	800d472 <USBH_InterruptReceiveData>

		HID_Handle->state = HID_POLL;
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	2206      	movs	r2, #6
 8008552:	709a      	strb	r2, [r3, #2]
		HID_Handle->timer = phost->Timer;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	621a      	str	r2, [r3, #32]
		HID_Handle->DataReady = 0U;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 8008566:	e047      	b.n	80085f8 <USBH_HID_Process+0x13c>

	case HID_POLL:
		if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE) {
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	785b      	ldrb	r3, [r3, #1]
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f005 fbce 	bl	800dd10 <USBH_LL_GetURBState>
 8008574:	4603      	mov	r3, r0
 8008576:	2b01      	cmp	r3, #1
 8008578:	d120      	bne.n	80085bc <USBH_HID_Process+0x100>

			XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	785b      	ldrb	r3, [r3, #1]
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f005 fb33 	bl	800dbec <USBH_LL_GetLastXferSize>
 8008586:	60f8      	str	r0, [r7, #12]

			if (HID_Handle->DataReady == 0U && XferSize != 0U) {
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800858e:	2b00      	cmp	r3, #0
 8008590:	d131      	bne.n	80085f6 <USBH_HID_Process+0x13a>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d02e      	beq.n	80085f6 <USBH_HID_Process+0x13a>
				USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData,
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	f103 0008 	add.w	r0, r3, #8
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	6959      	ldr	r1, [r3, #20]
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	8b1b      	ldrh	r3, [r3, #24]
 80085a6:	461a      	mov	r2, r3
 80085a8:	f000 f97d 	bl	80088a6 <USBH_HID_FifoWrite>
						HID_Handle->length);
				HID_Handle->DataReady = 1U;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				USBH_HID_EventCallback(phost);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f9ca 	bl	800894e <USBH_HID_EventCallback>
					HID_Handle->state = HID_GET_DATA;
					USBH_HID_NextInterface(phost);
				}
			}
		}
		break;
 80085ba:	e01c      	b.n	80085f6 <USBH_HID_Process+0x13a>
			if (USBH_LL_GetURBState(phost, HID_Handle->InPipe)
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	785b      	ldrb	r3, [r3, #1]
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f005 fba4 	bl	800dd10 <USBH_LL_GetURBState>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b05      	cmp	r3, #5
 80085cc:	d113      	bne.n	80085f6 <USBH_HID_Process+0x13a>
				if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK) {
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	7e9b      	ldrb	r3, [r3, #26]
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f004 fb5e 	bl	800cc96 <USBH_ClrFeature>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <USBH_HID_Process+0x13a>
					HID_Handle->state = HID_GET_DATA;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	2204      	movs	r2, #4
 80085e4:	709a      	strb	r2, [r3, #2]
					USBH_HID_NextInterface(phost);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7ff ff3e 	bl	8008468 <USBH_HID_NextInterface>
		break;
 80085ec:	e003      	b.n	80085f6 <USBH_HID_Process+0x13a>

	default:
		break;
 80085ee:	bf00      	nop
 80085f0:	e002      	b.n	80085f8 <USBH_HID_Process+0x13c>
		break;
 80085f2:	bf00      	nop
 80085f4:	e000      	b.n	80085f8 <USBH_HID_Process+0x13c>
		break;
 80085f6:	bf00      	nop
	}

	return status;
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3718      	adds	r7, #24
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop

08008604 <USBH_HID_SOFProcess>:
 * @brief  USBH_HID_SOFProcess
 *         The function is for managing the SOF Process
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost) {
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
	HID_HandleTypeDef *HID_Handle =
			(HID_HandleTypeDef*) phost->pActiveClass->pData[phost->device.current_interface];
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
	HID_HandleTypeDef *HID_Handle =
 8008618:	3208      	adds	r2, #8
 800861a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800861e:	60fb      	str	r3, [r7, #12]

	if (HID_Handle->state == HID_POLL) {
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	789b      	ldrb	r3, [r3, #2]
 8008624:	2b06      	cmp	r3, #6
 8008626:	d10f      	bne.n	8008648 <USBH_HID_SOFProcess+0x44>
		if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll) {
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	8b92      	ldrh	r2, [r2, #28]
 8008638:	4293      	cmp	r3, r2
 800863a:	d305      	bcc.n	8008648 <USBH_HID_SOFProcess+0x44>
			HID_Handle->state = HID_GET_DATA;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2204      	movs	r2, #4
 8008640:	709a      	strb	r2, [r3, #2]
			USBH_HID_NextInterface(phost);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7ff ff10 	bl	8008468 <USBH_HID_NextInterface>
		}
	}
	return USBH_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBH_HID_GetHIDReportDescriptor>:
 * @param  phost: Host handle
 * @param  Length : HID Report Descriptor Length
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
		uint16_t length, uint8_t iface_idx) {
 8008652:	b580      	push	{r7, lr}
 8008654:	b086      	sub	sp, #24
 8008656:	af02      	add	r7, sp, #8
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	460b      	mov	r3, r1
 800865c:	807b      	strh	r3, [r7, #2]
 800865e:	4613      	mov	r3, r2
 8008660:	707b      	strb	r3, [r7, #1]

	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID_REPORT, iface_idx, phost->device.Data, length);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f503 738e 	add.w	r3, r3, #284	; 0x11c
	status = USBH_GetDescriptor(phost,
 8008668:	7879      	ldrb	r1, [r7, #1]
 800866a:	887a      	ldrh	r2, [r7, #2]
 800866c:	9201      	str	r2, [sp, #4]
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	460b      	mov	r3, r1
 8008672:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8008676:	2101      	movs	r1, #1
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f004 fa67 	bl	800cb4c <USBH_GetDescriptor>
 800867e:	4603      	mov	r3, r0
 8008680:	73fb      	strb	r3, [r7, #15]
	 In case of USB Boot Mode devices for In report handling ,
	 HID report descriptor parsing is not required.
	 In case, for supporting Non-Boot Protocol devices and output reports,
	 user may parse the report descriptor*/

	return status;
 8008682:	7bfb      	ldrb	r3, [r7, #15]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBH_HID_GetHIDDescriptor>:
 * @param  phost: Host handle
 * @param  Length : HID Descriptor Length
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor(USBH_HandleTypeDef *phost,
		uint16_t length, uint8_t iface_idx) {
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af02      	add	r7, sp, #8
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	460b      	mov	r3, r1
 8008696:	807b      	strh	r3, [r7, #2]
 8008698:	4613      	mov	r3, r2
 800869a:	707b      	strb	r3, [r7, #1]
	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID, iface_idx, phost->device.Data, length);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
	status = USBH_GetDescriptor(phost,
 80086a2:	7879      	ldrb	r1, [r7, #1]
 80086a4:	887a      	ldrh	r2, [r7, #2]
 80086a6:	9201      	str	r2, [sp, #4]
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	460b      	mov	r3, r1
 80086ac:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 80086b0:	2101      	movs	r1, #1
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f004 fa4a 	bl	800cb4c <USBH_GetDescriptor>
 80086b8:	4603      	mov	r3, r0
 80086ba:	73fb      	strb	r3, [r7, #15]

	return status;
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBH_HID_SetIdle>:
 * @param  duration: Duration for HID Idle request
 * @param  reportId : Targeted report ID for Set Idle request
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost, uint8_t duration,
		uint8_t reportId, uint8_t interface) {
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	4608      	mov	r0, r1
 80086d0:	4611      	mov	r1, r2
 80086d2:	461a      	mov	r2, r3
 80086d4:	4603      	mov	r3, r0
 80086d6:	70fb      	strb	r3, [r7, #3]
 80086d8:	460b      	mov	r3, r1
 80086da:	70bb      	strb	r3, [r7, #2]
 80086dc:	4613      	mov	r3, r2
 80086de:	707b      	strb	r3, [r7, #1]

	phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2221      	movs	r2, #33	; 0x21
 80086e4:	741a      	strb	r2, [r3, #16]
			|
			USB_REQ_TYPE_CLASS;

	phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	220a      	movs	r2, #10
 80086ea:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.w = (uint16_t) (((uint32_t) duration << 8U)
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	021b      	lsls	r3, r3, #8
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	78bb      	ldrb	r3, [r7, #2]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	4313      	orrs	r3, r2
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	825a      	strh	r2, [r3, #18]
			| (uint32_t) reportId);

	phost->Control.setup.b.wIndex.w = 0U;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	829a      	strh	r2, [r3, #20]
	phost->Control.setup.b.wLength.w = interface;
 8008706:	787b      	ldrb	r3, [r7, #1]
 8008708:	b29a      	uxth	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	82da      	strh	r2, [r3, #22]

	return USBH_CtlReq(phost, 0U, 0U);
 800870e:	2200      	movs	r2, #0
 8008710:	2100      	movs	r1, #0
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f004 fc9f 	bl	800d056 <USBH_CtlReq>
 8008718:	4603      	mov	r3, r0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <USBH_HID_SetProtocol>:
 * @param  phost: Host handle
 * @param  protocol : Set Protocol for HID : boot/report protocol
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
		uint8_t protocol, uint16_t interface) {
 8008722:	b580      	push	{r7, lr}
 8008724:	b082      	sub	sp, #8
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	460b      	mov	r3, r1
 800872c:	70fb      	strb	r3, [r7, #3]
 800872e:	4613      	mov	r3, r2
 8008730:	803b      	strh	r3, [r7, #0]
	phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2221      	movs	r2, #33	; 0x21
 8008736:	741a      	strb	r2, [r3, #16]
			| USB_REQ_TYPE_CLASS;

	phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	220b      	movs	r2, #11
 800873c:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.w = protocol;
 800873e:	78fb      	ldrb	r3, [r7, #3]
 8008740:	b29a      	uxth	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	825a      	strh	r2, [r3, #18]
	phost->Control.setup.b.wIndex.w = interface;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	883a      	ldrh	r2, [r7, #0]
 800874a:	829a      	strh	r2, [r3, #20]
	phost->Control.setup.b.wLength.w = 0U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	82da      	strh	r2, [r3, #22]

	return USBH_CtlReq(phost, 0U, 0U);
 8008752:	2200      	movs	r2, #0
 8008754:	2100      	movs	r1, #0
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f004 fc7d 	bl	800d056 <USBH_CtlReq>
 800875c:	4603      	mov	r3, r0

}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBH_HID_ParseHIDDesc>:
 *         This function Parse the HID descriptor
 * @param  desc: HID Descriptor
 * @param  buf: Buffer where the source descriptor is available
 * @retval None
 */
void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf) {
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]

	desc->bLength = *(uint8_t*) (buf + 0);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	781a      	ldrb	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	701a      	strb	r2, [r3, #0]
	desc->bDescriptorType = *(uint8_t*) (buf + 1);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	785a      	ldrb	r2, [r3, #1]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	705a      	strb	r2, [r3, #1]
	desc->bcdHID = LE16(buf + 2);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	3302      	adds	r3, #2
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	b29a      	uxth	r2, r3
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	3303      	adds	r3, #3
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	b29b      	uxth	r3, r3
 8008790:	021b      	lsls	r3, r3, #8
 8008792:	b29b      	uxth	r3, r3
 8008794:	4313      	orrs	r3, r2
 8008796:	b29a      	uxth	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	805a      	strh	r2, [r3, #2]
	desc->bCountryCode = *(uint8_t*) (buf + 4);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	791a      	ldrb	r2, [r3, #4]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	711a      	strb	r2, [r3, #4]
	desc->bNumDescriptors = *(uint8_t*) (buf + 5);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	795a      	ldrb	r2, [r3, #5]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	715a      	strb	r2, [r3, #5]
	desc->bReportDescriptorType = *(uint8_t*) (buf + 6);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	799a      	ldrb	r2, [r3, #6]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	719a      	strb	r2, [r3, #6]
	desc->wItemLength = LE16(buf + 7);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	3307      	adds	r3, #7
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	3308      	adds	r3, #8
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	021b      	lsls	r3, r3, #8
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	4313      	orrs	r3, r2
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	811a      	strh	r2, [r3, #8]
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USBH_HID_FifoInit>:
 * @param  f: Fifo address
 * @param  buf: Fifo buffer
 * @param  size: Fifo Size
 * @retval none
 */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size) {
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	80fb      	strh	r3, [r7, #6]
	f->head = 0U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	809a      	strh	r2, [r3, #4]
	f->tail = 0U;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	80da      	strh	r2, [r3, #6]
	f->lock = 0U;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	729a      	strb	r2, [r3, #10]
	f->size = size;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	88fa      	ldrh	r2, [r7, #6]
 8008800:	811a      	strh	r2, [r3, #8]
	f->buf = buf;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	601a      	str	r2, [r3, #0]
}
 8008808:	bf00      	nop
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <USBH_HID_FifoRead>:
 * @param  f: Fifo address
 * @param  buf: read buffer
 * @param  nbytes: number of item to read
 * @retval number of read items
 */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes) {
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4613      	mov	r3, r2
 8008820:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t *p;

	p = (uint8_t*) buf;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	613b      	str	r3, [r7, #16]

	if (f->lock == 0U) {
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	7a9b      	ldrb	r3, [r3, #10]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d131      	bne.n	8008892 <USBH_HID_FifoRead+0x7e>
		f->lock = 1U;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2201      	movs	r2, #1
 8008832:	729a      	strb	r2, [r3, #10]

		for (i = 0U; i < nbytes; i++) {
 8008834:	2300      	movs	r3, #0
 8008836:	82fb      	strh	r3, [r7, #22]
 8008838:	e027      	b.n	800888a <USBH_HID_FifoRead+0x76>
			if (f->tail != f->head) {
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	88da      	ldrh	r2, [r3, #6]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	889b      	ldrh	r3, [r3, #4]
 8008842:	429a      	cmp	r2, r3
 8008844:	d019      	beq.n	800887a <USBH_HID_FifoRead+0x66>
				*p++ = f->buf[f->tail];
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	88d2      	ldrh	r2, [r2, #6]
 800884e:	441a      	add	r2, r3
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	1c59      	adds	r1, r3, #1
 8008854:	6139      	str	r1, [r7, #16]
 8008856:	7812      	ldrb	r2, [r2, #0]
 8008858:	701a      	strb	r2, [r3, #0]
				f->tail++;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	88db      	ldrh	r3, [r3, #6]
 800885e:	3301      	adds	r3, #1
 8008860:	b29a      	uxth	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	80da      	strh	r2, [r3, #6]

				if (f->tail == f->size) {
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	88da      	ldrh	r2, [r3, #6]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	891b      	ldrh	r3, [r3, #8]
 800886e:	429a      	cmp	r2, r3
 8008870:	d108      	bne.n	8008884 <USBH_HID_FifoRead+0x70>
					f->tail = 0U;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	80da      	strh	r2, [r3, #6]
 8008878:	e004      	b.n	8008884 <USBH_HID_FifoRead+0x70>
				}
			} else {
				f->lock = 0U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	729a      	strb	r2, [r3, #10]
				return i;
 8008880:	8afb      	ldrh	r3, [r7, #22]
 8008882:	e00a      	b.n	800889a <USBH_HID_FifoRead+0x86>
		for (i = 0U; i < nbytes; i++) {
 8008884:	8afb      	ldrh	r3, [r7, #22]
 8008886:	3301      	adds	r3, #1
 8008888:	82fb      	strh	r3, [r7, #22]
 800888a:	8afa      	ldrh	r2, [r7, #22]
 800888c:	88fb      	ldrh	r3, [r7, #6]
 800888e:	429a      	cmp	r2, r3
 8008890:	d3d3      	bcc.n	800883a <USBH_HID_FifoRead+0x26>
			}
		}
	}

	f->lock = 0U;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	729a      	strb	r2, [r3, #10]

	return nbytes;
 8008898:	88fb      	ldrh	r3, [r7, #6]
}
 800889a:	4618      	mov	r0, r3
 800889c:	371c      	adds	r7, #28
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <USBH_HID_FifoWrite>:
 * @param  f: Fifo address
 * @param  buf: read buffer
 * @param  nbytes: number of item to write
 * @retval number of written items
 */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t nbytes) {
 80088a6:	b480      	push	{r7}
 80088a8:	b087      	sub	sp, #28
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	4613      	mov	r3, r2
 80088b2:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t *p;

	p = (uint8_t*) buf;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	613b      	str	r3, [r7, #16]

	if (f->lock == 0U) {
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	7a9b      	ldrb	r3, [r3, #10]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d13c      	bne.n	800893a <USBH_HID_FifoWrite+0x94>
		f->lock = 1U;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2201      	movs	r2, #1
 80088c4:	729a      	strb	r2, [r3, #10]

		for (i = 0U; i < nbytes; i++) {
 80088c6:	2300      	movs	r3, #0
 80088c8:	82fb      	strh	r3, [r7, #22]
 80088ca:	e032      	b.n	8008932 <USBH_HID_FifoWrite+0x8c>
			if ((f->head + 1U == f->tail)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	889b      	ldrh	r3, [r3, #4]
 80088d0:	3301      	adds	r3, #1
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	88d2      	ldrh	r2, [r2, #6]
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d00a      	beq.n	80088f0 <USBH_HID_FifoWrite+0x4a>
					|| ((f->head + 1U == f->size) && (f->tail == 0U))) {
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	889b      	ldrh	r3, [r3, #4]
 80088de:	3301      	adds	r3, #1
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	8912      	ldrh	r2, [r2, #8]
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d108      	bne.n	80088fa <USBH_HID_FifoWrite+0x54>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	88db      	ldrh	r3, [r3, #6]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d104      	bne.n	80088fa <USBH_HID_FifoWrite+0x54>
				f->lock = 0U;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	729a      	strb	r2, [r3, #10]
				return i;
 80088f6:	8afb      	ldrh	r3, [r7, #22]
 80088f8:	e023      	b.n	8008942 <USBH_HID_FifoWrite+0x9c>
			} else {
				f->buf[f->head] = *p++;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	613a      	str	r2, [r7, #16]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	6812      	ldr	r2, [r2, #0]
 8008904:	68f9      	ldr	r1, [r7, #12]
 8008906:	8889      	ldrh	r1, [r1, #4]
 8008908:	440a      	add	r2, r1
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	7013      	strb	r3, [r2, #0]
				f->head++;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	889b      	ldrh	r3, [r3, #4]
 8008912:	3301      	adds	r3, #1
 8008914:	b29a      	uxth	r2, r3
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	809a      	strh	r2, [r3, #4]

				if (f->head == f->size) {
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	889a      	ldrh	r2, [r3, #4]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	891b      	ldrh	r3, [r3, #8]
 8008922:	429a      	cmp	r2, r3
 8008924:	d102      	bne.n	800892c <USBH_HID_FifoWrite+0x86>
					f->head = 0U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	809a      	strh	r2, [r3, #4]
		for (i = 0U; i < nbytes; i++) {
 800892c:	8afb      	ldrh	r3, [r7, #22]
 800892e:	3301      	adds	r3, #1
 8008930:	82fb      	strh	r3, [r7, #22]
 8008932:	8afa      	ldrh	r2, [r7, #22]
 8008934:	88fb      	ldrh	r3, [r7, #6]
 8008936:	429a      	cmp	r2, r3
 8008938:	d3c8      	bcc.n	80088cc <USBH_HID_FifoWrite+0x26>
				}
			}
		}
	}

	f->lock = 0U;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	729a      	strb	r2, [r3, #10]

	return nbytes;
 8008940:	88fb      	ldrh	r3, [r7, #6]
}
 8008942:	4618      	mov	r0, r3
 8008944:	371c      	adds	r7, #28
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <USBH_HID_EventCallback>:
/**
 * @brief  The function is a callback about HID Data events
 *  @param  phost: Selected device
 * @retval None
 */
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) {
 800894e:	b480      	push	{r7}
 8008950:	b083      	sub	sp, #12
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(phost);
}
 8008956:	bf00      	nop
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
	...

08008964 <USBH_HID_GamepadInit>:
  *         The function init the HID gamepad.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GamepadInit(USBH_HandleTypeDef *phost)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8008978:	3208      	adds	r2, #8
 800897a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897e:	60fb      	str	r3, [r7, #12]
  uint8_t reportSize = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	72fb      	strb	r3, [r7, #11]
  reportSize = HID_Handle->HID_Desc.RptDesc.report_size;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800898a:	72fb      	strb	r3, [r7, #11]





  HID_Handle->length = reportSize;
 800898c:	7afb      	ldrb	r3, [r7, #11]
 800898e:	b29a      	uxth	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	831a      	strh	r2, [r3, #24]


  HID_Handle->pData = (uint8_t*) malloc (reportSize *sizeof(uint8_t)); //(uint8_t*)(void *)
 8008994:	7afb      	ldrb	r3, [r7, #11]
 8008996:	4618      	mov	r0, r3
 8008998:	f005 fa6c 	bl	800de74 <malloc>
 800899c:	4603      	mov	r3, r0
 800899e:	461a      	mov	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	615a      	str	r2, [r3, #20]
  gamepad_report_data = HID_Handle->pData;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	695b      	ldr	r3, [r3, #20]
 80089a8:	4a0a      	ldr	r2, [pc, #40]	; (80089d4 <USBH_HID_GamepadInit+0x70>)
 80089aa:	6013      	str	r3, [r2, #0]
  USBH_HID_FifoInit(&HID_Handle->fifo, gamepad_report_data, HID_QUEUE_SIZE * reportSize);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f103 0008 	add.w	r0, r3, #8
 80089b2:	4b08      	ldr	r3, [pc, #32]	; (80089d4 <USBH_HID_GamepadInit+0x70>)
 80089b4:	6819      	ldr	r1, [r3, #0]
 80089b6:	7afb      	ldrb	r3, [r7, #11]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	461a      	mov	r2, r3
 80089bc:	0092      	lsls	r2, r2, #2
 80089be:	4413      	add	r3, r2
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	461a      	mov	r2, r3
 80089c6:	f7ff ff09 	bl	80087dc <USBH_HID_FifoInit>

  return USBH_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20000270 	.word	0x20000270

080089d8 <USBH_HID_GetGamepadInfo>:
  *         The function return gamepad information.
  * @param  phost: Host handle
  * @retval gamepad information
  */
HID_gamepad_Info_TypeDef *USBH_HID_GetGamepadInfo(USBH_HandleTypeDef *phost)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
	//refresh value of joymap and return value
	if(USBH_HID_GamepadDecode(phost)== USBH_OK)
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f80d 	bl	8008a00 <USBH_HID_GamepadDecode>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <USBH_HID_GetGamepadInfo+0x18>
	{
		return &gamepad_info;
 80089ec:	4b03      	ldr	r3, [pc, #12]	; (80089fc <USBH_HID_GetGamepadInfo+0x24>)
 80089ee:	e000      	b.n	80089f2 <USBH_HID_GetGamepadInfo+0x1a>
	}
	else
	{
		return NULL;
 80089f0:	2300      	movs	r3, #0
	}
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	2000026c 	.word	0x2000026c

08008a00 <USBH_HID_GamepadDecode>:
  *         The function decode gamepad data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_GamepadDecode(USBH_HandleTypeDef *phost)
{
 8008a00:	b5b0      	push	{r4, r5, r7, lr}
 8008a02:	b098      	sub	sp, #96	; 0x60
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
	HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8008a14:	3208      	adds	r2, #8
 8008a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a1a:	65bb      	str	r3, [r7, #88]	; 0x58

	  if(HID_Handle->length == 0U)
 8008a1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a1e:	8b1b      	ldrh	r3, [r3, #24]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <USBH_HID_GamepadDecode+0x28>
	  {
	    return USBH_FAIL;
 8008a24:	2302      	movs	r3, #2
 8008a26:	e24f      	b.n	8008ec8 <USBH_HID_GamepadDecode+0x4c8>
	  }

	  if(USBH_HID_FifoRead(&HID_Handle->fifo, gamepad_report_data, HID_Handle->length) ==  HID_Handle->length)
 8008a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a2a:	f103 0008 	add.w	r0, r3, #8
 8008a2e:	4bc6      	ldr	r3, [pc, #792]	; (8008d48 <USBH_HID_GamepadDecode+0x348>)
 8008a30:	6819      	ldr	r1, [r3, #0]
 8008a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a34:	8b1b      	ldrh	r3, [r3, #24]
 8008a36:	461a      	mov	r2, r3
 8008a38:	f7ff feec 	bl	8008814 <USBH_HID_FifoRead>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	461a      	mov	r2, r3
 8008a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a42:	8b1b      	ldrh	r3, [r3, #24]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	f040 823e 	bne.w	8008ec6 <USBH_HID_GamepadDecode+0x4c6>
	    {


		uint8_t jmap = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		uint8_t btn = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		uint8_t btn_extra = 0;
 8008a56:	2300      	movs	r3, #0
 8008a58:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		int16_t a[2];
		uint8_t i;

		hid_report_t conf = HID_Handle->HID_Desc.RptDesc;
 8008a5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a5e:	f107 040c 	add.w	r4, r7, #12
 8008a62:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8008a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a72:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008a76:	6020      	str	r0, [r4, #0]
 8008a78:	3404      	adds	r4, #4
 8008a7a:	8021      	strh	r1, [r4, #0]

		// skip report id if present
		uint8_t *p = gamepad_report_data+(conf.report_id?1:0);
 8008a7c:	4bb2      	ldr	r3, [pc, #712]	; (8008d48 <USBH_HID_GamepadDecode+0x348>)
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	7b7b      	ldrb	r3, [r7, #13]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <USBH_HID_GamepadDecode+0x8a>
 8008a86:	2301      	movs	r3, #1
 8008a88:	e000      	b.n	8008a8c <USBH_HID_GamepadDecode+0x8c>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	4413      	add	r3, r2
 8008a8e:	657b      	str	r3, [r7, #84]	; 0x54


		//process axis
		// two axes ...
				for(i=0;i<2;i++) {
 8008a90:	2300      	movs	r3, #0
 8008a92:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008a96:	e038      	b.n	8008b0a <USBH_HID_GamepadDecode+0x10a>
					// if logical minimum is > logical maximum then logical minimum
					// is signed. This means that the value itself is also signed
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 8008a98:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	3360      	adds	r3, #96	; 0x60
 8008aa2:	443b      	add	r3, r7
 8008aa4:	f833 2c50 	ldrh.w	r2, [r3, #-80]
					conf.joystick_mouse.axis[i].logical.max;
 8008aa8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008aac:	3301      	adds	r3, #1
 8008aae:	00db      	lsls	r3, r3, #3
 8008ab0:	3360      	adds	r3, #96	; 0x60
 8008ab2:	443b      	add	r3, r7
 8008ab4:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	bf8c      	ite	hi
 8008abc:	2301      	movhi	r3, #1
 8008abe:	2300      	movls	r3, #0
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	64bb      	str	r3, [r7, #72]	; 0x48
					a[i] = collect_bits(p, conf.joystick_mouse.axis[i].offset,
 8008ac4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008ac8:	3301      	adds	r3, #1
 8008aca:	00db      	lsls	r3, r3, #3
 8008acc:	3360      	adds	r3, #96	; 0x60
 8008ace:	443b      	add	r3, r7
 8008ad0:	f833 1c54 	ldrh.w	r1, [r3, #-84]
 8008ad4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008ad8:	3301      	adds	r3, #1
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	3360      	adds	r3, #96	; 0x60
 8008ade:	443b      	add	r3, r7
 8008ae0:	f813 2c52 	ldrb.w	r2, [r3, #-82]
 8008ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ae6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008ae8:	f000 fb08 	bl	80090fc <collect_bits>
 8008aec:	4603      	mov	r3, r0
 8008aee:	461a      	mov	r2, r3
 8008af0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008af4:	b212      	sxth	r2, r2
 8008af6:	005b      	lsls	r3, r3, #1
 8008af8:	3360      	adds	r3, #96	; 0x60
 8008afa:	443b      	add	r3, r7
 8008afc:	f823 2c1c 	strh.w	r2, [r3, #-28]
				for(i=0;i<2;i++) {
 8008b00:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b04:	3301      	adds	r3, #1
 8008b06:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008b0a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d9c2      	bls.n	8008a98 <USBH_HID_GamepadDecode+0x98>
								conf.joystick_mouse.axis[i].size, is_signed);
				}

		//process 4 first buttons
		for(i=0;i<4;i++)
 8008b12:	2300      	movs	r3, #0
 8008b14:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008b18:	e028      	b.n	8008b6c <USBH_HID_GamepadDecode+0x16c>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008b1a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b1e:	330c      	adds	r3, #12
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	3360      	adds	r3, #96	; 0x60
 8008b24:	443b      	add	r3, r7
 8008b26:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b2e:	4413      	add	r3, r2
 8008b30:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 8008b32:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b36:	330c      	adds	r3, #12
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	3360      	adds	r3, #96	; 0x60
 8008b3c:	443b      	add	r3, r7
 8008b3e:	f813 3c53 	ldrb.w	r3, [r3, #-83]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008b42:	4013      	ands	r3, r2
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00b      	beq.n	8008b62 <USBH_HID_GamepadDecode+0x162>
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 8008b4a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b4e:	2201      	movs	r2, #1
 8008b50:	fa02 f303 	lsl.w	r3, r2, r3
 8008b54:	b25a      	sxtb	r2, r3
 8008b56:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	b25b      	sxtb	r3, r3
 8008b5e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		for(i=0;i<4;i++)
 8008b62:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b66:	3301      	adds	r3, #1
 8008b68:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008b6c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d9d2      	bls.n	8008b1a <USBH_HID_GamepadDecode+0x11a>

		// ... and the eight extra buttons
		for(i=4;i<12;i++)
 8008b74:	2304      	movs	r3, #4
 8008b76:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008b7a:	e029      	b.n	8008bd0 <USBH_HID_GamepadDecode+0x1d0>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008b7c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b80:	330c      	adds	r3, #12
 8008b82:	005b      	lsls	r3, r3, #1
 8008b84:	3360      	adds	r3, #96	; 0x60
 8008b86:	443b      	add	r3, r7
 8008b88:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b90:	4413      	add	r3, r2
 8008b92:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8008b94:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008b98:	330c      	adds	r3, #12
 8008b9a:	005b      	lsls	r3, r3, #1
 8008b9c:	3360      	adds	r3, #96	; 0x60
 8008b9e:	443b      	add	r3, r7
 8008ba0:	f813 3c53 	ldrb.w	r3, [r3, #-83]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00c      	beq.n	8008bc6 <USBH_HID_GamepadDecode+0x1c6>
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8008bac:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008bb0:	3b04      	subs	r3, #4
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb8:	b25a      	sxtb	r2, r3
 8008bba:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	b25b      	sxtb	r3, r3
 8008bc2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		for(i=4;i<12;i++)
 8008bc6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008bca:	3301      	adds	r3, #1
 8008bcc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008bd0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008bd4:	2b0b      	cmp	r3, #11
 8008bd6:	d9d1      	bls.n	8008b7c <USBH_HID_GamepadDecode+0x17c>



	for(i=0;i<2;i++) {
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008bde:	e131      	b.n	8008e44 <USBH_HID_GamepadDecode+0x444>

		int hrange = (conf.joystick_mouse.axis[i].logical.max - abs(conf.joystick_mouse.axis[i].logical.min)) / 2;
 8008be0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008be4:	3301      	adds	r3, #1
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	3360      	adds	r3, #96	; 0x60
 8008bea:	443b      	add	r3, r7
 8008bec:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	00db      	lsls	r3, r3, #3
 8008bfa:	3360      	adds	r3, #96	; 0x60
 8008bfc:	443b      	add	r3, r7
 8008bfe:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	da00      	bge.n	8008c0a <USBH_HID_GamepadDecode+0x20a>
 8008c08:	3301      	adds	r3, #1
 8008c0a:	105b      	asrs	r3, r3, #1
 8008c0c:	653b      	str	r3, [r7, #80]	; 0x50
		int dead = hrange/63;
 8008c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c10:	4a4e      	ldr	r2, [pc, #312]	; (8008d4c <USBH_HID_GamepadDecode+0x34c>)
 8008c12:	fb82 1203 	smull	r1, r2, r2, r3
 8008c16:	441a      	add	r2, r3
 8008c18:	1152      	asrs	r2, r2, #5
 8008c1a:	17db      	asrs	r3, r3, #31
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (a[i] < conf.joystick_mouse.axis[i].logical.min) a[i] = conf.joystick_mouse.axis[i].logical.min;
 8008c20:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c24:	005b      	lsls	r3, r3, #1
 8008c26:	3360      	adds	r3, #96	; 0x60
 8008c28:	443b      	add	r3, r7
 8008c2a:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c34:	3301      	adds	r3, #1
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	3360      	adds	r3, #96	; 0x60
 8008c3a:	443b      	add	r3, r7
 8008c3c:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	da10      	bge.n	8008c66 <USBH_HID_GamepadDecode+0x266>
 8008c44:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c48:	3301      	adds	r3, #1
 8008c4a:	00db      	lsls	r3, r3, #3
 8008c4c:	3360      	adds	r3, #96	; 0x60
 8008c4e:	443b      	add	r3, r7
 8008c50:	f833 2c50 	ldrh.w	r2, [r3, #-80]
 8008c54:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c58:	b212      	sxth	r2, r2
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	3360      	adds	r3, #96	; 0x60
 8008c5e:	443b      	add	r3, r7
 8008c60:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8008c64:	e021      	b.n	8008caa <USBH_HID_GamepadDecode+0x2aa>
		else if (a[i] > conf.joystick_mouse.axis[i].logical.max) a[i] = conf.joystick_mouse.axis[i].logical.max;
 8008c66:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	3360      	adds	r3, #96	; 0x60
 8008c6e:	443b      	add	r3, r7
 8008c70:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008c74:	461a      	mov	r2, r3
 8008c76:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	3360      	adds	r3, #96	; 0x60
 8008c80:	443b      	add	r3, r7
 8008c82:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	dd0f      	ble.n	8008caa <USBH_HID_GamepadDecode+0x2aa>
 8008c8a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c8e:	3301      	adds	r3, #1
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	3360      	adds	r3, #96	; 0x60
 8008c94:	443b      	add	r3, r7
 8008c96:	f833 2c4e 	ldrh.w	r2, [r3, #-78]
 8008c9a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008c9e:	b212      	sxth	r2, r2
 8008ca0:	005b      	lsls	r3, r3, #1
 8008ca2:	3360      	adds	r3, #96	; 0x60
 8008ca4:	443b      	add	r3, r7
 8008ca6:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i] = a[i] - (abs(conf.joystick_mouse.axis[i].logical.min) + conf.joystick_mouse.axis[i].logical.max) / 2;
 8008caa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	3360      	adds	r3, #96	; 0x60
 8008cb2:	443b      	add	r3, r7
 8008cb4:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	00db      	lsls	r3, r3, #3
 8008cc2:	3360      	adds	r3, #96	; 0x60
 8008cc4:	443b      	add	r3, r7
 8008cc6:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8008cca:	4619      	mov	r1, r3
 8008ccc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	3360      	adds	r3, #96	; 0x60
 8008cd6:	443b      	add	r3, r7
 8008cd8:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8008cdc:	440b      	add	r3, r1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	da00      	bge.n	8008ce4 <USBH_HID_GamepadDecode+0x2e4>
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	105b      	asrs	r3, r3, #1
 8008ce6:	425b      	negs	r3, r3
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	4413      	add	r3, r2
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008cf2:	b212      	sxth	r2, r2
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	3360      	adds	r3, #96	; 0x60
 8008cf8:	443b      	add	r3, r7
 8008cfa:	f823 2c1c 	strh.w	r2, [r3, #-28]

		hrange -= dead;
 8008cfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	653b      	str	r3, [r7, #80]	; 0x50
		if (a[i] < -dead) a[i] += dead;
 8008d06:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	3360      	adds	r3, #96	; 0x60
 8008d0e:	443b      	add	r3, r7
 8008d10:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008d14:	461a      	mov	r2, r3
 8008d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d18:	425b      	negs	r3, r3
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	da18      	bge.n	8008d50 <USBH_HID_GamepadDecode+0x350>
 8008d1e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	3360      	adds	r3, #96	; 0x60
 8008d26:	443b      	add	r3, r7
 8008d28:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	4413      	add	r3, r2
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d3a:	b212      	sxth	r2, r2
 8008d3c:	005b      	lsls	r3, r3, #1
 8008d3e:	3360      	adds	r3, #96	; 0x60
 8008d40:	443b      	add	r3, r7
 8008d42:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8008d46:	e02b      	b.n	8008da0 <USBH_HID_GamepadDecode+0x3a0>
 8008d48:	20000270 	.word	0x20000270
 8008d4c:	82082083 	.word	0x82082083
		else if (a[i] > dead) a[i] -= dead;
 8008d50:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	3360      	adds	r3, #96	; 0x60
 8008d58:	443b      	add	r3, r7
 8008d5a:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d62:	4293      	cmp	r3, r2
 8008d64:	da14      	bge.n	8008d90 <USBH_HID_GamepadDecode+0x390>
 8008d66:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	3360      	adds	r3, #96	; 0x60
 8008d6e:	443b      	add	r3, r7
 8008d70:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d82:	b212      	sxth	r2, r2
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	3360      	adds	r3, #96	; 0x60
 8008d88:	443b      	add	r3, r7
 8008d8a:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8008d8e:	e007      	b.n	8008da0 <USBH_HID_GamepadDecode+0x3a0>
		else a[i] = 0;
 8008d90:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	3360      	adds	r3, #96	; 0x60
 8008d98:	443b      	add	r3, r7
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i] = (a[i] * 127) / hrange;
 8008da0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008da4:	005b      	lsls	r3, r3, #1
 8008da6:	3360      	adds	r3, #96	; 0x60
 8008da8:	443b      	add	r3, r7
 8008daa:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008dae:	461a      	mov	r2, r3
 8008db0:	4613      	mov	r3, r2
 8008db2:	01db      	lsls	r3, r3, #7
 8008db4:	1a9a      	subs	r2, r3, r2
 8008db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008db8:	fb92 f2f3 	sdiv	r2, r2, r3
 8008dbc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008dc0:	b212      	sxth	r2, r2
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	3360      	adds	r3, #96	; 0x60
 8008dc6:	443b      	add	r3, r7
 8008dc8:	f823 2c1c 	strh.w	r2, [r3, #-28]

		if (a[i] < -127) a[i] = -127;
 8008dcc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008dd0:	005b      	lsls	r3, r3, #1
 8008dd2:	3360      	adds	r3, #96	; 0x60
 8008dd4:	443b      	add	r3, r7
 8008dd6:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008dda:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8008dde:	da09      	bge.n	8008df4 <USBH_HID_GamepadDecode+0x3f4>
 8008de0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	3360      	adds	r3, #96	; 0x60
 8008de8:	443b      	add	r3, r7
 8008dea:	f64f 7281 	movw	r2, #65409	; 0xff81
 8008dee:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8008df2:	e010      	b.n	8008e16 <USBH_HID_GamepadDecode+0x416>
		else if (a[i] > 127) a[i] = 127;
 8008df4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	3360      	adds	r3, #96	; 0x60
 8008dfc:	443b      	add	r3, r7
 8008dfe:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008e02:	2b7f      	cmp	r3, #127	; 0x7f
 8008e04:	dd07      	ble.n	8008e16 <USBH_HID_GamepadDecode+0x416>
 8008e06:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	3360      	adds	r3, #96	; 0x60
 8008e0e:	443b      	add	r3, r7
 8008e10:	227f      	movs	r2, #127	; 0x7f
 8008e12:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i]=a[i]+127; // mist wants a value in the range [0..255]
 8008e16:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e1a:	005b      	lsls	r3, r3, #1
 8008e1c:	3360      	adds	r3, #96	; 0x60
 8008e1e:	443b      	add	r3, r7
 8008e20:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	337f      	adds	r3, #127	; 0x7f
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e2e:	b212      	sxth	r2, r2
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	3360      	adds	r3, #96	; 0x60
 8008e34:	443b      	add	r3, r7
 8008e36:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for(i=0;i<2;i++) {
 8008e3a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e3e:	3301      	adds	r3, #1
 8008e40:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008e44:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	f67f aec9 	bls.w	8008be0 <USBH_HID_GamepadDecode+0x1e0>
	}

				if(a[0] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_LEFT;
 8008e4e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8008e52:	2b3f      	cmp	r3, #63	; 0x3f
 8008e54:	dc05      	bgt.n	8008e62 <USBH_HID_GamepadDecode+0x462>
 8008e56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e5a:	f043 0302 	orr.w	r3, r3, #2
 8008e5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[0] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_RIGHT;
 8008e62:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8008e66:	2bc0      	cmp	r3, #192	; 0xc0
 8008e68:	dd05      	ble.n	8008e76 <USBH_HID_GamepadDecode+0x476>
 8008e6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e6e:	f043 0301 	orr.w	r3, r3, #1
 8008e72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[1] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_UP;
 8008e76:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8008e7a:	2b3f      	cmp	r3, #63	; 0x3f
 8008e7c:	dc05      	bgt.n	8008e8a <USBH_HID_GamepadDecode+0x48a>
 8008e7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e82:	f043 0308 	orr.w	r3, r3, #8
 8008e86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[1] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_DOWN;
 8008e8a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8008e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8008e90:	dd05      	ble.n	8008e9e <USBH_HID_GamepadDecode+0x49e>
 8008e92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e96:	f043 0304 	orr.w	r3, r3, #4
 8008e9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				jmap |= btn << JOY_BTN_SHIFT;      // add buttons
 8008e9e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8008ea2:	011b      	lsls	r3, r3, #4
 8008ea4:	b25a      	sxtb	r2, r3
 8008ea6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	b25b      	sxtb	r3, r3
 8008eae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

				gamepad_info.gamepad_data = jmap;
 8008eb2:	4a07      	ldr	r2, [pc, #28]	; (8008ed0 <USBH_HID_GamepadDecode+0x4d0>)
 8008eb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eb8:	7013      	strb	r3, [r2, #0]
				gamepad_info.gamepad_extraBtn = btn_extra;
 8008eba:	4a05      	ldr	r2, [pc, #20]	; (8008ed0 <USBH_HID_GamepadDecode+0x4d0>)
 8008ebc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8008ec0:	7053      	strb	r3, [r2, #1]

		  return USBH_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	e000      	b.n	8008ec8 <USBH_HID_GamepadDecode+0x4c8>
	    }



	  return USBH_FAIL;
 8008ec6:	2302      	movs	r3, #2

}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3760      	adds	r7, #96	; 0x60
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bdb0      	pop	{r4, r5, r7, pc}
 8008ed0:	2000026c 	.word	0x2000026c

08008ed4 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8008ee8:	3208      	adds	r2, #8
 8008eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eee:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 8008ef0:	4b23      	ldr	r3, [pc, #140]	; (8008f80 <USBH_HID_KeybdInit+0xac>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	709a      	strb	r2, [r3, #2]
 8008ef6:	4b22      	ldr	r3, [pc, #136]	; (8008f80 <USBH_HID_KeybdInit+0xac>)
 8008ef8:	789a      	ldrb	r2, [r3, #2]
 8008efa:	4b21      	ldr	r3, [pc, #132]	; (8008f80 <USBH_HID_KeybdInit+0xac>)
 8008efc:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 8008efe:	4b20      	ldr	r3, [pc, #128]	; (8008f80 <USBH_HID_KeybdInit+0xac>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	711a      	strb	r2, [r3, #4]
 8008f04:	4b1e      	ldr	r3, [pc, #120]	; (8008f80 <USBH_HID_KeybdInit+0xac>)
 8008f06:	791a      	ldrb	r2, [r3, #4]
 8008f08:	4b1d      	ldr	r3, [pc, #116]	; (8008f80 <USBH_HID_KeybdInit+0xac>)
 8008f0a:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 8008f0c:	4b1c      	ldr	r3, [pc, #112]	; (8008f80 <USBH_HID_KeybdInit+0xac>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	719a      	strb	r2, [r3, #6]
 8008f12:	4b1b      	ldr	r3, [pc, #108]	; (8008f80 <USBH_HID_KeybdInit+0xac>)
 8008f14:	799a      	ldrb	r2, [r3, #6]
 8008f16:	4b1a      	ldr	r3, [pc, #104]	; (8008f80 <USBH_HID_KeybdInit+0xac>)
 8008f18:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8008f1a:	4b19      	ldr	r3, [pc, #100]	; (8008f80 <USBH_HID_KeybdInit+0xac>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	721a      	strb	r2, [r3, #8]
 8008f20:	4b17      	ldr	r3, [pc, #92]	; (8008f80 <USBH_HID_KeybdInit+0xac>)
 8008f22:	7a1a      	ldrb	r2, [r3, #8]
 8008f24:	4b16      	ldr	r3, [pc, #88]	; (8008f80 <USBH_HID_KeybdInit+0xac>)
 8008f26:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8008f28:	2300      	movs	r3, #0
 8008f2a:	60fb      	str	r3, [r7, #12]
 8008f2c:	e00c      	b.n	8008f48 <USBH_HID_KeybdInit+0x74>
  {
    keybd_report_data[x] = 0U;
 8008f2e:	4a15      	ldr	r2, [pc, #84]	; (8008f84 <USBH_HID_KeybdInit+0xb0>)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2100      	movs	r1, #0
 8008f34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8008f38:	4a13      	ldr	r2, [pc, #76]	; (8008f88 <USBH_HID_KeybdInit+0xb4>)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3301      	adds	r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d9ef      	bls.n	8008f2e <USBH_HID_KeybdInit+0x5a>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	8b1b      	ldrh	r3, [r3, #24]
 8008f52:	2b08      	cmp	r3, #8
 8008f54:	d902      	bls.n	8008f5c <USBH_HID_KeybdInit+0x88>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2208      	movs	r2, #8
 8008f5a:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	4a0a      	ldr	r2, [pc, #40]	; (8008f88 <USBH_HID_KeybdInit+0xb4>)
 8008f60:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f103 0008 	add.w	r0, r3, #8
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f6e:	2250      	movs	r2, #80	; 0x50
 8008f70:	4619      	mov	r1, r3
 8008f72:	f7ff fc33 	bl	80087dc <USBH_HID_FifoInit>

  return USBH_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	20000274 	.word	0x20000274
 8008f84:	2000028c 	.word	0x2000028c
 8008f88:	20000284 	.word	0x20000284

08008f8c <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f80d 	bl	8008fb4 <USBH_HID_KeybdDecode>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d101      	bne.n	8008fa4 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 8008fa0:	4b03      	ldr	r3, [pc, #12]	; (8008fb0 <USBH_HID_GetKeybdInfo+0x24>)
 8008fa2:	e000      	b.n	8008fa6 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 8008fa4:	2300      	movs	r3, #0
  }
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	20000274 	.word	0x20000274

08008fb4 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8008fc8:	3208      	adds	r2, #8
 8008fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fce:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	8b1b      	ldrh	r3, [r3, #24]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <USBH_HID_KeybdDecode+0x28>
  {
    return USBH_FAIL;
 8008fd8:	2302      	movs	r3, #2
 8008fda:	e072      	b.n	80090c2 <USBH_HID_KeybdDecode+0x10e>
  }
  /*Fill report */

  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f103 0008 	add.w	r0, r3, #8
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	8b1b      	ldrh	r3, [r3, #24]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	4938      	ldr	r1, [pc, #224]	; (80090cc <USBH_HID_KeybdDecode+0x118>)
 8008fea:	f7ff fc13 	bl	8008814 <USBH_HID_FifoRead>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	8b1b      	ldrh	r3, [r3, #24]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d162      	bne.n	80090c0 <USBH_HID_KeybdDecode+0x10c>
  {
	  if (keybd_report_data[0] == 0x1010000 && keybd_report_data[1]==0x1010101)
 8008ffa:	4b34      	ldr	r3, [pc, #208]	; (80090cc <USBH_HID_KeybdDecode+0x118>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a34      	ldr	r2, [pc, #208]	; (80090d0 <USBH_HID_KeybdDecode+0x11c>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d106      	bne.n	8009012 <USBH_HID_KeybdDecode+0x5e>
 8009004:	4b31      	ldr	r3, [pc, #196]	; (80090cc <USBH_HID_KeybdDecode+0x118>)
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 800900c:	d101      	bne.n	8009012 <USBH_HID_KeybdDecode+0x5e>
	  {
		  return USBH_FAIL;
 800900e:	2302      	movs	r3, #2
 8009010:	e057      	b.n	80090c2 <USBH_HID_KeybdDecode+0x10e>
	  }
	//  if keybd_re  5055
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8009012:	2100      	movs	r1, #0
 8009014:	482f      	ldr	r0, [pc, #188]	; (80090d4 <USBH_HID_KeybdDecode+0x120>)
 8009016:	f000 fa8f 	bl	8009538 <HID_ReadItem>
 800901a:	4603      	mov	r3, r0
 800901c:	b2da      	uxtb	r2, r3
 800901e:	4b2e      	ldr	r3, [pc, #184]	; (80090d8 <USBH_HID_KeybdDecode+0x124>)
 8009020:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 8009022:	2100      	movs	r1, #0
 8009024:	482d      	ldr	r0, [pc, #180]	; (80090dc <USBH_HID_KeybdDecode+0x128>)
 8009026:	f000 fa87 	bl	8009538 <HID_ReadItem>
 800902a:	4603      	mov	r3, r0
 800902c:	b2da      	uxtb	r2, r3
 800902e:	4b2a      	ldr	r3, [pc, #168]	; (80090d8 <USBH_HID_KeybdDecode+0x124>)
 8009030:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8009032:	2100      	movs	r1, #0
 8009034:	482a      	ldr	r0, [pc, #168]	; (80090e0 <USBH_HID_KeybdDecode+0x12c>)
 8009036:	f000 fa7f 	bl	8009538 <HID_ReadItem>
 800903a:	4603      	mov	r3, r0
 800903c:	b2da      	uxtb	r2, r3
 800903e:	4b26      	ldr	r3, [pc, #152]	; (80090d8 <USBH_HID_KeybdDecode+0x124>)
 8009040:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8009042:	2100      	movs	r1, #0
 8009044:	4827      	ldr	r0, [pc, #156]	; (80090e4 <USBH_HID_KeybdDecode+0x130>)
 8009046:	f000 fa77 	bl	8009538 <HID_ReadItem>
 800904a:	4603      	mov	r3, r0
 800904c:	b2da      	uxtb	r2, r3
 800904e:	4b22      	ldr	r3, [pc, #136]	; (80090d8 <USBH_HID_KeybdDecode+0x124>)
 8009050:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8009052:	2100      	movs	r1, #0
 8009054:	4824      	ldr	r0, [pc, #144]	; (80090e8 <USBH_HID_KeybdDecode+0x134>)
 8009056:	f000 fa6f 	bl	8009538 <HID_ReadItem>
 800905a:	4603      	mov	r3, r0
 800905c:	b2da      	uxtb	r2, r3
 800905e:	4b1e      	ldr	r3, [pc, #120]	; (80090d8 <USBH_HID_KeybdDecode+0x124>)
 8009060:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8009062:	2100      	movs	r1, #0
 8009064:	4821      	ldr	r0, [pc, #132]	; (80090ec <USBH_HID_KeybdDecode+0x138>)
 8009066:	f000 fa67 	bl	8009538 <HID_ReadItem>
 800906a:	4603      	mov	r3, r0
 800906c:	b2da      	uxtb	r2, r3
 800906e:	4b1a      	ldr	r3, [pc, #104]	; (80090d8 <USBH_HID_KeybdDecode+0x124>)
 8009070:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 8009072:	2100      	movs	r1, #0
 8009074:	481e      	ldr	r0, [pc, #120]	; (80090f0 <USBH_HID_KeybdDecode+0x13c>)
 8009076:	f000 fa5f 	bl	8009538 <HID_ReadItem>
 800907a:	4603      	mov	r3, r0
 800907c:	b2da      	uxtb	r2, r3
 800907e:	4b16      	ldr	r3, [pc, #88]	; (80090d8 <USBH_HID_KeybdDecode+0x124>)
 8009080:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8009082:	2100      	movs	r1, #0
 8009084:	481b      	ldr	r0, [pc, #108]	; (80090f4 <USBH_HID_KeybdDecode+0x140>)
 8009086:	f000 fa57 	bl	8009538 <HID_ReadItem>
 800908a:	4603      	mov	r3, r0
 800908c:	b2da      	uxtb	r2, r3
 800908e:	4b12      	ldr	r3, [pc, #72]	; (80090d8 <USBH_HID_KeybdDecode+0x124>)
 8009090:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8009092:	2300      	movs	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]
 8009096:	e00e      	b.n	80090b6 <USBH_HID_KeybdDecode+0x102>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8009098:	7bfb      	ldrb	r3, [r7, #15]
 800909a:	4619      	mov	r1, r3
 800909c:	4816      	ldr	r0, [pc, #88]	; (80090f8 <USBH_HID_KeybdDecode+0x144>)
 800909e:	f000 fa4b 	bl	8009538 <HID_ReadItem>
 80090a2:	4602      	mov	r2, r0
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
 80090a6:	b2d1      	uxtb	r1, r2
 80090a8:	4a0b      	ldr	r2, [pc, #44]	; (80090d8 <USBH_HID_KeybdDecode+0x124>)
 80090aa:	4413      	add	r3, r2
 80090ac:	460a      	mov	r2, r1
 80090ae:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
 80090b2:	3301      	adds	r3, #1
 80090b4:	73fb      	strb	r3, [r7, #15]
 80090b6:	7bfb      	ldrb	r3, [r7, #15]
 80090b8:	2b05      	cmp	r3, #5
 80090ba:	d9ed      	bls.n	8009098 <USBH_HID_KeybdDecode+0xe4>
    }

    return USBH_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	e000      	b.n	80090c2 <USBH_HID_KeybdDecode+0x10e>
  }
  return   USBH_FAIL;
 80090c0:	2302      	movs	r3, #2
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	2000028c 	.word	0x2000028c
 80090d0:	01010000 	.word	0x01010000
 80090d4:	0800e1e8 	.word	0x0800e1e8
 80090d8:	20000274 	.word	0x20000274
 80090dc:	0800e208 	.word	0x0800e208
 80090e0:	0800e228 	.word	0x0800e228
 80090e4:	0800e248 	.word	0x0800e248
 80090e8:	0800e268 	.word	0x0800e268
 80090ec:	0800e288 	.word	0x0800e288
 80090f0:	0800e2a8 	.word	0x0800e2a8
 80090f4:	0800e2c8 	.word	0x0800e2c8
 80090f8:	0800e2e8 	.word	0x0800e2e8

080090fc <collect_bits>:


/**
  * @}
  */
uint16_t collect_bits(uint8_t *p, uint16_t offset, uint8_t size, int is_signed) {
 80090fc:	b480      	push	{r7}
 80090fe:	b089      	sub	sp, #36	; 0x24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	607b      	str	r3, [r7, #4]
 8009106:	460b      	mov	r3, r1
 8009108:	817b      	strh	r3, [r7, #10]
 800910a:	4613      	mov	r3, r2
 800910c:	727b      	strb	r3, [r7, #9]
  // mask unused bits of first byte
  uint8_t mask = 0xff << (offset&7);
 800910e:	897b      	ldrh	r3, [r7, #10]
 8009110:	f003 0307 	and.w	r3, r3, #7
 8009114:	22ff      	movs	r2, #255	; 0xff
 8009116:	fa02 f303 	lsl.w	r3, r2, r3
 800911a:	75fb      	strb	r3, [r7, #23]
  uint8_t byte = offset/8;
 800911c:	897b      	ldrh	r3, [r7, #10]
 800911e:	08db      	lsrs	r3, r3, #3
 8009120:	b29b      	uxth	r3, r3
 8009122:	77fb      	strb	r3, [r7, #31]
  uint8_t bits = size;
 8009124:	7a7b      	ldrb	r3, [r7, #9]
 8009126:	77bb      	strb	r3, [r7, #30]
  uint8_t shift = offset&7;
 8009128:	897b      	ldrh	r3, [r7, #10]
 800912a:	b2db      	uxtb	r3, r3
 800912c:	f003 0307 	and.w	r3, r3, #7
 8009130:	777b      	strb	r3, [r7, #29]


  uint16_t rval = (p[byte++] & mask) >> shift;
 8009132:	7ffb      	ldrb	r3, [r7, #31]
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	77fa      	strb	r2, [r7, #31]
 8009138:	461a      	mov	r2, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	4413      	add	r3, r2
 800913e:	781a      	ldrb	r2, [r3, #0]
 8009140:	7dfb      	ldrb	r3, [r7, #23]
 8009142:	4013      	ands	r3, r2
 8009144:	b2db      	uxtb	r3, r3
 8009146:	461a      	mov	r2, r3
 8009148:	7f7b      	ldrb	r3, [r7, #29]
 800914a:	fa42 f303 	asr.w	r3, r2, r3
 800914e:	837b      	strh	r3, [r7, #26]
  mask = 0xff;
 8009150:	23ff      	movs	r3, #255	; 0xff
 8009152:	75fb      	strb	r3, [r7, #23]
  shift = 8-shift;
 8009154:	7f7b      	ldrb	r3, [r7, #29]
 8009156:	f1c3 0308 	rsb	r3, r3, #8
 800915a:	777b      	strb	r3, [r7, #29]
  bits -= shift;
 800915c:	7fba      	ldrb	r2, [r7, #30]
 800915e:	7f7b      	ldrb	r3, [r7, #29]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	77bb      	strb	r3, [r7, #30]

  // first byte already contained more bits than we need
  if(shift > size) {
 8009164:	7f7a      	ldrb	r2, [r7, #29]
 8009166:	7a7b      	ldrb	r3, [r7, #9]
 8009168:	429a      	cmp	r2, r3
 800916a:	d937      	bls.n	80091dc <collect_bits+0xe0>
    // mask unused bits
    rval &= (1<<size)-1;
 800916c:	7a7b      	ldrb	r3, [r7, #9]
 800916e:	2201      	movs	r2, #1
 8009170:	fa02 f303 	lsl.w	r3, r2, r3
 8009174:	b29b      	uxth	r3, r3
 8009176:	3b01      	subs	r3, #1
 8009178:	b29b      	uxth	r3, r3
 800917a:	b21a      	sxth	r2, r3
 800917c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009180:	4013      	ands	r3, r2
 8009182:	b21b      	sxth	r3, r3
 8009184:	837b      	strh	r3, [r7, #26]
 8009186:	e02c      	b.n	80091e2 <collect_bits+0xe6>
  } else {
    // further bytes if required
    while(bits) {
      mask = (bits<8)?(0xff>>(8-bits)):0xff;
 8009188:	7fbb      	ldrb	r3, [r7, #30]
 800918a:	2b07      	cmp	r3, #7
 800918c:	d807      	bhi.n	800919e <collect_bits+0xa2>
 800918e:	7fbb      	ldrb	r3, [r7, #30]
 8009190:	f1c3 0308 	rsb	r3, r3, #8
 8009194:	22ff      	movs	r2, #255	; 0xff
 8009196:	fa42 f303 	asr.w	r3, r2, r3
 800919a:	b2db      	uxtb	r3, r3
 800919c:	e000      	b.n	80091a0 <collect_bits+0xa4>
 800919e:	23ff      	movs	r3, #255	; 0xff
 80091a0:	75fb      	strb	r3, [r7, #23]
      rval += (p[byte++] & mask) << shift;
 80091a2:	7ffb      	ldrb	r3, [r7, #31]
 80091a4:	1c5a      	adds	r2, r3, #1
 80091a6:	77fa      	strb	r2, [r7, #31]
 80091a8:	461a      	mov	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4413      	add	r3, r2
 80091ae:	781a      	ldrb	r2, [r3, #0]
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	4013      	ands	r3, r2
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	461a      	mov	r2, r3
 80091b8:	7f7b      	ldrb	r3, [r7, #29]
 80091ba:	fa02 f303 	lsl.w	r3, r2, r3
 80091be:	b29a      	uxth	r2, r3
 80091c0:	8b7b      	ldrh	r3, [r7, #26]
 80091c2:	4413      	add	r3, r2
 80091c4:	837b      	strh	r3, [r7, #26]
      shift += 8;
 80091c6:	7f7b      	ldrb	r3, [r7, #29]
 80091c8:	3308      	adds	r3, #8
 80091ca:	777b      	strb	r3, [r7, #29]
      bits -= (bits>8)?8:bits;
 80091cc:	7fbb      	ldrb	r3, [r7, #30]
 80091ce:	2b08      	cmp	r3, #8
 80091d0:	bf28      	it	cs
 80091d2:	2308      	movcs	r3, #8
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	7fba      	ldrb	r2, [r7, #30]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	77bb      	strb	r3, [r7, #30]
    while(bits) {
 80091dc:	7fbb      	ldrb	r3, [r7, #30]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1d2      	bne.n	8009188 <collect_bits+0x8c>
    }
  }

  if(is_signed) {
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d016      	beq.n	8009216 <collect_bits+0x11a>
    // do sign expansion
    uint16_t sign_bit = 1<<(size-1);
 80091e8:	7a7b      	ldrb	r3, [r7, #9]
 80091ea:	3b01      	subs	r3, #1
 80091ec:	2201      	movs	r2, #1
 80091ee:	fa02 f303 	lsl.w	r3, r2, r3
 80091f2:	833b      	strh	r3, [r7, #24]
    if(rval & sign_bit) {
 80091f4:	8b7a      	ldrh	r2, [r7, #26]
 80091f6:	8b3b      	ldrh	r3, [r7, #24]
 80091f8:	4013      	ands	r3, r2
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00a      	beq.n	8009216 <collect_bits+0x11a>
      while(sign_bit) {
 8009200:	e006      	b.n	8009210 <collect_bits+0x114>
	rval |= sign_bit;
 8009202:	8b7a      	ldrh	r2, [r7, #26]
 8009204:	8b3b      	ldrh	r3, [r7, #24]
 8009206:	4313      	orrs	r3, r2
 8009208:	837b      	strh	r3, [r7, #26]
	sign_bit <<= 1;
 800920a:	8b3b      	ldrh	r3, [r7, #24]
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	833b      	strh	r3, [r7, #24]
      while(sign_bit) {
 8009210:	8b3b      	ldrh	r3, [r7, #24]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1f5      	bne.n	8009202 <collect_bits+0x106>
      }
    }
  }

  return rval;
 8009216:	8b7b      	ldrh	r3, [r7, #26]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3724      	adds	r7, #36	; 0x24
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8009238:	3208      	adds	r2, #8
 800923a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800923e:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8009240:	4b25      	ldr	r3, [pc, #148]	; (80092d8 <USBH_HID_MouseInit+0xb4>)
 8009242:	2200      	movs	r2, #0
 8009244:	801a      	strh	r2, [r3, #0]
  mouse_info.y = 0U;
 8009246:	4b24      	ldr	r3, [pc, #144]	; (80092d8 <USBH_HID_MouseInit+0xb4>)
 8009248:	2200      	movs	r2, #0
 800924a:	805a      	strh	r2, [r3, #2]
  mouse_info.buttons[0] = 0U;
 800924c:	4b22      	ldr	r3, [pc, #136]	; (80092d8 <USBH_HID_MouseInit+0xb4>)
 800924e:	2200      	movs	r2, #0
 8009250:	711a      	strb	r2, [r3, #4]
  mouse_info.buttons[1] = 0U;
 8009252:	4b21      	ldr	r3, [pc, #132]	; (80092d8 <USBH_HID_MouseInit+0xb4>)
 8009254:	2200      	movs	r2, #0
 8009256:	715a      	strb	r2, [r3, #5]
  mouse_info.buttons[2] = 0U;
 8009258:	4b1f      	ldr	r3, [pc, #124]	; (80092d8 <USBH_HID_MouseInit+0xb4>)
 800925a:	2200      	movs	r2, #0
 800925c:	719a      	strb	r2, [r3, #6]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800925e:	2300      	movs	r3, #0
 8009260:	60fb      	str	r3, [r7, #12]
 8009262:	e00c      	b.n	800927e <USBH_HID_MouseInit+0x5a>
  {
    mouse_report_data[i] = 0U;
 8009264:	4a1d      	ldr	r2, [pc, #116]	; (80092dc <USBH_HID_MouseInit+0xb8>)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	4413      	add	r3, r2
 800926a:	2200      	movs	r2, #0
 800926c:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800926e:	4a1c      	ldr	r2, [pc, #112]	; (80092e0 <USBH_HID_MouseInit+0xbc>)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2100      	movs	r1, #0
 8009274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	3301      	adds	r3, #1
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d9ef      	bls.n	8009264 <USBH_HID_MouseInit+0x40>

  //if (HID_Handle->length > sizeof(mouse_report_data))
  //{
  //  HID_Handle->length = sizeof(mouse_report_data);
  //}
  HID_Handle->length = HID_Handle->HID_Desc.RptDesc.report_size+ (HID_Handle->HID_Desc.RptDesc.report_id?1:0);
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800928a:	b29a      	uxth	r2, r3
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009292:	2b00      	cmp	r3, #0
 8009294:	bf14      	ite	ne
 8009296:	2301      	movne	r3, #1
 8009298:	2300      	moveq	r3, #0
 800929a:	b2db      	uxtb	r3, r3
 800929c:	b29b      	uxth	r3, r3
 800929e:	4413      	add	r3, r2
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	831a      	strh	r2, [r3, #24]
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	4a0d      	ldr	r2, [pc, #52]	; (80092e0 <USBH_HID_MouseInit+0xbc>)
 80092aa:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * HID_Handle->length);
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f103 0008 	add.w	r0, r3, #8
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	8b1b      	ldrh	r3, [r3, #24]
 80092bc:	461a      	mov	r2, r3
 80092be:	0092      	lsls	r2, r2, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	461a      	mov	r2, r3
 80092c8:	f7ff fa88 	bl	80087dc <USBH_HID_FifoInit>

  return USBH_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20000294 	.word	0x20000294
 80092dc:	2000029c 	.word	0x2000029c
 80092e0:	200002a4 	.word	0x200002a4

080092e4 <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f80d 	bl	800930c <USBH_HID_MouseDecode>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 80092f8:	4b03      	ldr	r3, [pc, #12]	; (8009308 <USBH_HID_GetMouseInfo+0x24>)
 80092fa:	e000      	b.n	80092fe <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 80092fc:	2300      	movs	r3, #0
  }
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	20000294 	.word	0x20000294

0800930c <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b088      	sub	sp, #32
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8009320:	3208      	adds	r2, #8
 8009322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009326:	61bb      	str	r3, [r7, #24]

  if (HID_Handle->length == 0U)
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	8b1b      	ldrh	r3, [r3, #24]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d101      	bne.n	8009334 <USBH_HID_MouseDecode+0x28>
  {
    return USBH_FAIL;
 8009330:	2302      	movs	r3, #2
 8009332:	e0f6      	b.n	8009522 <USBH_HID_MouseDecode+0x216>
  }

  //Clear mouse_report_data

  memset(&mouse_report_data,0,sizeof(mouse_report_data));
 8009334:	2208      	movs	r2, #8
 8009336:	2100      	movs	r1, #0
 8009338:	487c      	ldr	r0, [pc, #496]	; (800952c <USBH_HID_MouseDecode+0x220>)
 800933a:	f004 fdab 	bl	800de94 <memset>


  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) !=0)
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	f103 0008 	add.w	r0, r3, #8
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	8b1b      	ldrh	r3, [r3, #24]
 8009348:	461a      	mov	r2, r3
 800934a:	4978      	ldr	r1, [pc, #480]	; (800952c <USBH_HID_MouseDecode+0x220>)
 800934c:	f7ff fa62 	bl	8008814 <USBH_HID_FifoRead>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 80e4 	beq.w	8009520 <USBH_HID_MouseDecode+0x214>
  {

	  uint8_t btn = 0;
 8009358:	2300      	movs	r3, #0
 800935a:	77fb      	strb	r3, [r7, #31]
	  uint8_t btn_extra = 0;
 800935c:	2300      	movs	r3, #0
 800935e:	77bb      	strb	r3, [r7, #30]
	  uint8_t i;



	  // skip report id if present
	  uint8_t *p = mouse_report_data + (HID_Handle->HID_Desc.RptDesc.report_id?1:0);
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <USBH_HID_MouseDecode+0x62>
 800936a:	4b71      	ldr	r3, [pc, #452]	; (8009530 <USBH_HID_MouseDecode+0x224>)
 800936c:	e000      	b.n	8009370 <USBH_HID_MouseDecode+0x64>
 800936e:	4b6f      	ldr	r3, [pc, #444]	; (800952c <USBH_HID_MouseDecode+0x220>)
 8009370:	617b      	str	r3, [r7, #20]


	  //process axis
	  // two axes ...
	  		for(i=0;i<2;i++) {
 8009372:	2300      	movs	r3, #0
 8009374:	777b      	strb	r3, [r7, #29]
 8009376:	e02d      	b.n	80093d4 <USBH_HID_MouseDecode+0xc8>
	  			// if logical minimum is > logical maximum then logical minimum
	  			// is signed. This means that the value itself is also signed
	  			int is_signed = HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.min >
 8009378:	7f7b      	ldrb	r3, [r7, #29]
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	3306      	adds	r3, #6
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	4413      	add	r3, r2
 8009382:	899a      	ldrh	r2, [r3, #12]
	  				HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.max;
 8009384:	7f7b      	ldrb	r3, [r7, #29]
 8009386:	69b9      	ldr	r1, [r7, #24]
 8009388:	3306      	adds	r3, #6
 800938a:	00db      	lsls	r3, r3, #3
 800938c:	440b      	add	r3, r1
 800938e:	89db      	ldrh	r3, [r3, #14]
	  			int is_signed = HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.min >
 8009390:	429a      	cmp	r2, r3
 8009392:	bf8c      	ite	hi
 8009394:	2301      	movhi	r3, #1
 8009396:	2300      	movls	r3, #0
 8009398:	b2db      	uxtb	r3, r3
 800939a:	613b      	str	r3, [r7, #16]
	  			a[i] = collect_bits(p, HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].offset,
 800939c:	7f7b      	ldrb	r3, [r7, #29]
 800939e:	69ba      	ldr	r2, [r7, #24]
 80093a0:	3306      	adds	r3, #6
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	4413      	add	r3, r2
 80093a6:	8919      	ldrh	r1, [r3, #8]
 80093a8:	7f7b      	ldrb	r3, [r7, #29]
 80093aa:	69ba      	ldr	r2, [r7, #24]
 80093ac:	3306      	adds	r3, #6
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	4413      	add	r3, r2
 80093b2:	7a9a      	ldrb	r2, [r3, #10]
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	6978      	ldr	r0, [r7, #20]
 80093b8:	f7ff fea0 	bl	80090fc <collect_bits>
 80093bc:	4603      	mov	r3, r0
 80093be:	461a      	mov	r2, r3
 80093c0:	7f7b      	ldrb	r3, [r7, #29]
 80093c2:	b212      	sxth	r2, r2
 80093c4:	005b      	lsls	r3, r3, #1
 80093c6:	3320      	adds	r3, #32
 80093c8:	443b      	add	r3, r7
 80093ca:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		for(i=0;i<2;i++) {
 80093ce:	7f7b      	ldrb	r3, [r7, #29]
 80093d0:	3301      	adds	r3, #1
 80093d2:	777b      	strb	r3, [r7, #29]
 80093d4:	7f7b      	ldrb	r3, [r7, #29]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d9ce      	bls.n	8009378 <USBH_HID_MouseDecode+0x6c>
	  					HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].size, is_signed);
	  		}

	  //process 4 first buttons
	  for(i=0;i<4;i++)
 80093da:	2300      	movs	r3, #0
 80093dc:	777b      	strb	r3, [r7, #29]
 80093de:	e020      	b.n	8009422 <USBH_HID_MouseDecode+0x116>
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 80093e0:	7f7b      	ldrb	r3, [r7, #29]
 80093e2:	69ba      	ldr	r2, [r7, #24]
 80093e4:	3320      	adds	r3, #32
 80093e6:	005b      	lsls	r3, r3, #1
 80093e8:	4413      	add	r3, r2
 80093ea:	7a1b      	ldrb	r3, [r3, #8]
 80093ec:	461a      	mov	r2, r3
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	4413      	add	r3, r2
 80093f2:	781a      	ldrb	r2, [r3, #0]
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 80093f4:	7f7b      	ldrb	r3, [r7, #29]
 80093f6:	69b9      	ldr	r1, [r7, #24]
 80093f8:	3320      	adds	r3, #32
 80093fa:	005b      	lsls	r3, r3, #1
 80093fc:	440b      	add	r3, r1
 80093fe:	7a5b      	ldrb	r3, [r3, #9]
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 8009400:	4013      	ands	r3, r2
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b00      	cmp	r3, #0
 8009406:	d009      	beq.n	800941c <USBH_HID_MouseDecode+0x110>
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 8009408:	7f7b      	ldrb	r3, [r7, #29]
 800940a:	2201      	movs	r2, #1
 800940c:	fa02 f303 	lsl.w	r3, r2, r3
 8009410:	b25a      	sxtb	r2, r3
 8009412:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009416:	4313      	orrs	r3, r2
 8009418:	b25b      	sxtb	r3, r3
 800941a:	77fb      	strb	r3, [r7, #31]
	  for(i=0;i<4;i++)
 800941c:	7f7b      	ldrb	r3, [r7, #29]
 800941e:	3301      	adds	r3, #1
 8009420:	777b      	strb	r3, [r7, #29]
 8009422:	7f7b      	ldrb	r3, [r7, #29]
 8009424:	2b03      	cmp	r3, #3
 8009426:	d9db      	bls.n	80093e0 <USBH_HID_MouseDecode+0xd4>

	  // ... and the eight extra buttons
	  for(i=4;i<12;i++)
 8009428:	2304      	movs	r3, #4
 800942a:	777b      	strb	r3, [r7, #29]
 800942c:	e021      	b.n	8009472 <USBH_HID_MouseDecode+0x166>
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 800942e:	7f7b      	ldrb	r3, [r7, #29]
 8009430:	69ba      	ldr	r2, [r7, #24]
 8009432:	3320      	adds	r3, #32
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	4413      	add	r3, r2
 8009438:	7a1b      	ldrb	r3, [r3, #8]
 800943a:	461a      	mov	r2, r3
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	4413      	add	r3, r2
 8009440:	781a      	ldrb	r2, [r3, #0]
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8009442:	7f7b      	ldrb	r3, [r7, #29]
 8009444:	69b9      	ldr	r1, [r7, #24]
 8009446:	3320      	adds	r3, #32
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	440b      	add	r3, r1
 800944c:	7a5b      	ldrb	r3, [r3, #9]
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 800944e:	4013      	ands	r3, r2
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00a      	beq.n	800946c <USBH_HID_MouseDecode+0x160>
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8009456:	7f7b      	ldrb	r3, [r7, #29]
 8009458:	3b04      	subs	r3, #4
 800945a:	2201      	movs	r2, #1
 800945c:	fa02 f303 	lsl.w	r3, r2, r3
 8009460:	b25a      	sxtb	r2, r3
 8009462:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009466:	4313      	orrs	r3, r2
 8009468:	b25b      	sxtb	r3, r3
 800946a:	77bb      	strb	r3, [r7, #30]
	  for(i=4;i<12;i++)
 800946c:	7f7b      	ldrb	r3, [r7, #29]
 800946e:	3301      	adds	r3, #1
 8009470:	777b      	strb	r3, [r7, #29]
 8009472:	7f7b      	ldrb	r3, [r7, #29]
 8009474:	2b0b      	cmp	r3, #11
 8009476:	d9da      	bls.n	800942e <USBH_HID_MouseDecode+0x122>

	  //process mouse
	  if(HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE) {
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800947e:	f003 0303 	and.w	r3, r3, #3
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b01      	cmp	r3, #1
 8009486:	d149      	bne.n	800951c <USBH_HID_MouseDecode+0x210>
	  		// iprintf("mouse %d %d %x\n", (int16_t)a[0], (int16_t)a[1], btn);
	  		// limit mouse movement to +/- 128
	  		for(i=0;i<2;i++) {
 8009488:	2300      	movs	r3, #0
 800948a:	777b      	strb	r3, [r7, #29]
 800948c:	e022      	b.n	80094d4 <USBH_HID_MouseDecode+0x1c8>
	  		if((int16_t)a[i] >  127) a[i] =  127;
 800948e:	7f7b      	ldrb	r3, [r7, #29]
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	3320      	adds	r3, #32
 8009494:	443b      	add	r3, r7
 8009496:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800949a:	2b7f      	cmp	r3, #127	; 0x7f
 800949c:	dd06      	ble.n	80094ac <USBH_HID_MouseDecode+0x1a0>
 800949e:	7f7b      	ldrb	r3, [r7, #29]
 80094a0:	005b      	lsls	r3, r3, #1
 80094a2:	3320      	adds	r3, #32
 80094a4:	443b      	add	r3, r7
 80094a6:	227f      	movs	r2, #127	; 0x7f
 80094a8:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		if((int16_t)a[i] < -128) a[i] = -128;
 80094ac:	7f7b      	ldrb	r3, [r7, #29]
 80094ae:	005b      	lsls	r3, r3, #1
 80094b0:	3320      	adds	r3, #32
 80094b2:	443b      	add	r3, r7
 80094b4:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80094b8:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80094bc:	da07      	bge.n	80094ce <USBH_HID_MouseDecode+0x1c2>
 80094be:	7f7b      	ldrb	r3, [r7, #29]
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	3320      	adds	r3, #32
 80094c4:	443b      	add	r3, r7
 80094c6:	f64f 7280 	movw	r2, #65408	; 0xff80
 80094ca:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		for(i=0;i<2;i++) {
 80094ce:	7f7b      	ldrb	r3, [r7, #29]
 80094d0:	3301      	adds	r3, #1
 80094d2:	777b      	strb	r3, [r7, #29]
 80094d4:	7f7b      	ldrb	r3, [r7, #29]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d9d9      	bls.n	800948e <USBH_HID_MouseDecode+0x182>
	  		}
	  		//btn
	  	  mouse_info.x = a[0];
 80094da:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80094de:	4b15      	ldr	r3, [pc, #84]	; (8009534 <USBH_HID_MouseDecode+0x228>)
 80094e0:	801a      	strh	r2, [r3, #0]
	  	  mouse_info.y = a[1];
 80094e2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80094e6:	4b13      	ldr	r3, [pc, #76]	; (8009534 <USBH_HID_MouseDecode+0x228>)
 80094e8:	805a      	strh	r2, [r3, #2]
	  	  mouse_info.buttons[0] = btn&0x1;
 80094ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	b25a      	sxtb	r2, r3
 80094f4:	4b0f      	ldr	r3, [pc, #60]	; (8009534 <USBH_HID_MouseDecode+0x228>)
 80094f6:	711a      	strb	r2, [r3, #4]
	  	  mouse_info.buttons[1] = (btn>>1)&0x1;
 80094f8:	7ffb      	ldrb	r3, [r7, #31]
 80094fa:	085b      	lsrs	r3, r3, #1
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	b25b      	sxtb	r3, r3
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	b25a      	sxtb	r2, r3
 8009506:	4b0b      	ldr	r3, [pc, #44]	; (8009534 <USBH_HID_MouseDecode+0x228>)
 8009508:	715a      	strb	r2, [r3, #5]
	  	  mouse_info.buttons[2] = (btn>>2)&0x1;
 800950a:	7ffb      	ldrb	r3, [r7, #31]
 800950c:	089b      	lsrs	r3, r3, #2
 800950e:	b2db      	uxtb	r3, r3
 8009510:	b25b      	sxtb	r3, r3
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	b25a      	sxtb	r2, r3
 8009518:	4b06      	ldr	r3, [pc, #24]	; (8009534 <USBH_HID_MouseDecode+0x228>)
 800951a:	719a      	strb	r2, [r3, #6]
	  	}
    return USBH_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	e000      	b.n	8009522 <USBH_HID_MouseDecode+0x216>
  }
  return   USBH_FAIL;
 8009520:	2302      	movs	r3, #2
}
 8009522:	4618      	mov	r0, r3
 8009524:	3720      	adds	r7, #32
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	2000029c 	.word	0x2000029c
 8009530:	2000029d 	.word	0x2000029d
 8009534:	20000294 	.word	0x20000294

08009538 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8009538:	b480      	push	{r7}
 800953a:	b089      	sub	sp, #36	; 0x24
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8009544:	2300      	movs	r3, #0
 8009546:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8009548:	2300      	movs	r3, #0
 800954a:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	7a1b      	ldrb	r3, [r3, #8]
 8009556:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	7a5b      	ldrb	r3, [r3, #9]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d01a      	beq.n	8009596 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	7a5b      	ldrb	r3, [r3, #9]
 8009564:	78fa      	ldrb	r2, [r7, #3]
 8009566:	429a      	cmp	r2, r3
 8009568:	d301      	bcc.n	800956e <HID_ReadItem+0x36>
    {
      return (0U);
 800956a:	2300      	movs	r3, #0
 800956c:	e076      	b.n	800965c <HID_ReadItem+0x124>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	6852      	ldr	r2, [r2, #4]
 8009574:	fb02 f303 	mul.w	r3, r2, r3
 8009578:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800957a:	7cfb      	ldrb	r3, [r7, #19]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	4413      	add	r3, r2
 8009580:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	08db      	lsrs	r3, r3, #3
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	4413      	add	r3, r2
 800958a:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	f003 0307 	and.w	r3, r3, #7
 8009594:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 8009596:	2300      	movs	r3, #0
 8009598:	61bb      	str	r3, [r7, #24]
 800959a:	e00a      	b.n	80095b2 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	fa02 f303 	lsl.w	r3, r2, r3
 80095aa:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	3301      	adds	r3, #1
 80095b0:	61bb      	str	r3, [r7, #24]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	f003 0307 	and.w	r3, r3, #7
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d004      	beq.n	80095c8 <HID_ReadItem+0x90>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	08db      	lsrs	r3, r3, #3
 80095c4:	3301      	adds	r3, #1
 80095c6:	e002      	b.n	80095ce <HID_ReadItem+0x96>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	08db      	lsrs	r3, r3, #3
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d8e3      	bhi.n	800959c <HID_ReadItem+0x64>
  }
  val = (val >> shift) & ((1U << ri->size) - 1U);
 80095d4:	7cfb      	ldrb	r3, [r7, #19]
 80095d6:	69fa      	ldr	r2, [r7, #28]
 80095d8:	40da      	lsrs	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	2101      	movs	r1, #1
 80095e0:	fa01 f303 	lsl.w	r3, r1, r3
 80095e4:	3b01      	subs	r3, #1
 80095e6:	4013      	ands	r3, r2
 80095e8:	61fb      	str	r3, [r7, #28]

  if (val < ri->logical_min || val > ri->logical_max)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	69fa      	ldr	r2, [r7, #28]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d304      	bcc.n	80095fe <HID_ReadItem+0xc6>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	69fa      	ldr	r2, [r7, #28]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d901      	bls.n	8009602 <HID_ReadItem+0xca>
  {
    return (0U);
 80095fe:	2300      	movs	r3, #0
 8009600:	e02c      	b.n	800965c <HID_ReadItem+0x124>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1U << (ri->size - 1U))))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	7a9b      	ldrb	r3, [r3, #10]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d01d      	beq.n	8009646 <HID_ReadItem+0x10e>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	3b01      	subs	r3, #1
 8009610:	2201      	movs	r2, #1
 8009612:	409a      	lsls	r2, r3
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	4013      	ands	r3, r2
 8009618:	2b00      	cmp	r3, #0
 800961a:	d014      	beq.n	8009646 <HID_ReadItem+0x10e>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	fa02 f303 	lsl.w	r3, r2, r3
 8009626:	425b      	negs	r3, r3
 8009628:	69fa      	ldr	r2, [r7, #28]
 800962a:	4313      	orrs	r3, r2
 800962c:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d101      	bne.n	800963a <HID_ReadItem+0x102>
    {
      return ((uint32_t)vs);
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	e010      	b.n	800965c <HID_ReadItem+0x124>
    }
    return ((uint32_t)(vs * ri->resolution));
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	fb02 f303 	mul.w	r3, r2, r3
 8009644:	e00a      	b.n	800965c <HID_ReadItem+0x124>
  }
  else
  {
    if (ri->resolution == 1U)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	69db      	ldr	r3, [r3, #28]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d101      	bne.n	8009652 <HID_ReadItem+0x11a>
    {
      return (val);
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	e004      	b.n	800965c <HID_ReadItem+0x124>
    }
    return (val * ri->resolution);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	69fa      	ldr	r2, [r7, #28]
 8009658:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800965c:	4618      	mov	r0, r3
 800965e:	3724      	adds	r7, #36	; 0x24
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <report_is_usable>:
  uint8_t bType: 2;
  uint8_t bTag: 4;
} __attribute__((packed)) item_t;


int report_is_usable(uint16_t bit_count, uint8_t report_complete, hid_report_t *conf) {
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	603a      	str	r2, [r7, #0]
 8009672:	80fb      	strh	r3, [r7, #6]
 8009674:	460b      	mov	r3, r1
 8009676:	717b      	strb	r3, [r7, #5]
// hidp_debugf("  - total bit count: %d (%d bytes, %d bits)",
//	      bit_count, bit_count/8, bit_count%8);

  conf->report_size = bit_count/8;
 8009678:	88fb      	ldrh	r3, [r7, #6]
 800967a:	08db      	lsrs	r3, r3, #3
 800967c:	b29b      	uxth	r3, r3
 800967e:	b2da      	uxtb	r2, r3
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	709a      	strb	r2, [r3, #2]

  // check if something useful was detected
  if( ((conf->type == REPORT_TYPE_JOYSTICK) && ((report_complete & JOYSTICK_COMPLETE) == JOYSTICK_COMPLETE)) ||
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	f003 0303 	and.w	r3, r3, #3
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b03      	cmp	r3, #3
 8009690:	d104      	bne.n	800969c <report_is_usable+0x34>
 8009692:	797b      	ldrb	r3, [r7, #5]
 8009694:	f003 0307 	and.w	r3, r3, #7
 8009698:	2b07      	cmp	r3, #7
 800969a:	d012      	beq.n	80096c2 <report_is_usable+0x5a>
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	f003 0303 	and.w	r3, r3, #3
 80096a4:	b2db      	uxtb	r3, r3
  if( ((conf->type == REPORT_TYPE_JOYSTICK) && ((report_complete & JOYSTICK_COMPLETE) == JOYSTICK_COMPLETE)) ||
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d104      	bne.n	80096b4 <report_is_usable+0x4c>
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 80096aa:	797b      	ldrb	r3, [r7, #5]
 80096ac:	f003 030f 	and.w	r3, r3, #15
 80096b0:	2b0f      	cmp	r3, #15
 80096b2:	d006      	beq.n	80096c2 <report_is_usable+0x5a>
      ((conf->type == REPORT_TYPE_KEYBOARD))) {
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f003 0303 	and.w	r3, r3, #3
 80096bc:	b2db      	uxtb	r3, r3
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d101      	bne.n	80096c6 <report_is_usable+0x5e>
 //   hidp_debugf("  - report %d is usable", conf->report_id);
    return 1;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e000      	b.n	80096c8 <report_is_usable+0x60>
  }

//  hidp_debugf("  - unusable report %d", conf->report_id);
  return 0;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <parse_report_descriptor>:



int parse_report_descriptor(uint8_t *rep, uint16_t rep_size,hid_report_t *conf) {
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08e      	sub	sp, #56	; 0x38
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	460b      	mov	r3, r1
 80096de:	607a      	str	r2, [r7, #4]
 80096e0:	817b      	strh	r3, [r7, #10]
  int8_t app_collection = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int8_t phys_log_collection = 0;
 80096e8:	2300      	movs	r3, #0
 80096ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint8_t skip_collection = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  int8_t generic_desktop = -1;   // depth at which first gen_desk was found
 80096f4:	23ff      	movs	r3, #255	; 0xff
 80096f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  uint8_t collection_depth = 0;
 80096fa:	2300      	movs	r3, #0
 80096fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33


  //
  uint8_t report_size = 0, report_count = 0;
 8009700:	2300      	movs	r3, #0
 8009702:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009706:	2300      	movs	r3, #0
 8009708:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  uint16_t bit_count = 0, usage_count = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009710:	2300      	movs	r3, #0
 8009712:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t logical_minimum=0, logical_maximum=0;
 8009714:	2300      	movs	r3, #0
 8009716:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009718:	2300      	movs	r3, #0
 800971a:	853b      	strh	r3, [r7, #40]	; 0x28

  // mask used to check of all required components have been found, so
  // that e.g. both axes and the button of a joystick are ready to be used
  uint8_t report_complete = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  // joystick/mouse components
  int8_t axis[2] = { -1, -1};
 8009722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009726:	823b      	strh	r3, [r7, #16]
  uint8_t btns = 0;
 8009728:	2300      	movs	r3, #0
 800972a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  int8_t hat = -1;
 800972e:	23ff      	movs	r3, #255	; 0xff
 8009730:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


  while(rep_size) {
 8009734:	e2d2      	b.n	8009cdc <parse_report_descriptor+0x608>
    // extract short item
    uint8_t tag = ((item_t*)rep)->bTag;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800973e:	b2db      	uxtb	r3, r3
 8009740:	777b      	strb	r3, [r7, #29]
    uint8_t type = ((item_t*)rep)->bType;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800974a:	b2db      	uxtb	r3, r3
 800974c:	773b      	strb	r3, [r7, #28]
    uint8_t size = ((item_t*)rep)->bSize;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009756:	b2db      	uxtb	r3, r3
 8009758:	76fb      	strb	r3, [r7, #27]

    rep++;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3301      	adds	r3, #1
 800975e:	60fb      	str	r3, [r7, #12]
    rep_size--;   // one byte consumed
 8009760:	897b      	ldrh	r3, [r7, #10]
 8009762:	3b01      	subs	r3, #1
 8009764:	817b      	strh	r3, [r7, #10]



    uint32_t value = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	623b      	str	r3, [r7, #32]
     if(size) {      // size 1/2/3
 800976a:	7efb      	ldrb	r3, [r7, #27]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d007      	beq.n	8009780 <parse_report_descriptor+0xac>
       value = *rep++;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	1c5a      	adds	r2, r3, #1
 8009774:	60fa      	str	r2, [r7, #12]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	623b      	str	r3, [r7, #32]
       rep_size--;
 800977a:	897b      	ldrh	r3, [r7, #10]
 800977c:	3b01      	subs	r3, #1
 800977e:	817b      	strh	r3, [r7, #10]
     }

     if(size > 1) {  // size 2/3
 8009780:	7efb      	ldrb	r3, [r7, #27]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d90b      	bls.n	800979e <parse_report_descriptor+0xca>
       value = (value & 0xff) + ((uint32_t)(*rep++)<<8);
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	b2da      	uxtb	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	1c59      	adds	r1, r3, #1
 800978e:	60f9      	str	r1, [r7, #12]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	021b      	lsls	r3, r3, #8
 8009794:	4413      	add	r3, r2
 8009796:	623b      	str	r3, [r7, #32]
       rep_size--;
 8009798:	897b      	ldrh	r3, [r7, #10]
 800979a:	3b01      	subs	r3, #1
 800979c:	817b      	strh	r3, [r7, #10]
     }

     if(size > 2) {  // size 3
 800979e:	7efb      	ldrb	r3, [r7, #27]
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d915      	bls.n	80097d0 <parse_report_descriptor+0xfc>
       value &= 0xffff;
 80097a4:	6a3b      	ldr	r3, [r7, #32]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	623b      	str	r3, [r7, #32]
       value |= ((uint32_t)(*rep++)<<16);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	1c5a      	adds	r2, r3, #1
 80097ae:	60fa      	str	r2, [r7, #12]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	041b      	lsls	r3, r3, #16
 80097b4:	6a3a      	ldr	r2, [r7, #32]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	623b      	str	r3, [r7, #32]
       value |= ((uint32_t)(*rep++)<<24);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	60fa      	str	r2, [r7, #12]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	061b      	lsls	r3, r3, #24
 80097c4:	6a3a      	ldr	r2, [r7, #32]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	623b      	str	r3, [r7, #32]
       rep_size-=2;
 80097ca:	897b      	ldrh	r3, [r7, #10]
 80097cc:	3b02      	subs	r3, #2
 80097ce:	817b      	strh	r3, [r7, #10]
     }


       // we are currently skipping an unknown/unsupported collection)
           if(skip_collection) {
 80097d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d029      	beq.n	800982c <parse_report_descriptor+0x158>
             if(!type) {  // main item
 80097d8:	7f3b      	ldrb	r3, [r7, #28]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f040 827e 	bne.w	8009cdc <parse_report_descriptor+0x608>
       				// any new collection increases the depth of collections to skip
       				if(tag == 10) {
 80097e0:	7f7b      	ldrb	r3, [r7, #29]
 80097e2:	2b0a      	cmp	r3, #10
 80097e4:	d109      	bne.n	80097fa <parse_report_descriptor+0x126>
       					skip_collection++;
 80097e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80097ea:	3301      	adds	r3, #1
 80097ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
       					collection_depth++;
 80097f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097f4:	3301      	adds	r3, #1
 80097f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
       				}

       				// any end collection decreases it
       				if(tag == 12) {
 80097fa:	7f7b      	ldrb	r3, [r7, #29]
 80097fc:	2b0c      	cmp	r3, #12
 80097fe:	f040 826d 	bne.w	8009cdc <parse_report_descriptor+0x608>
       					skip_collection--;
 8009802:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009806:	3b01      	subs	r3, #1
 8009808:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
       					collection_depth--;
 800980c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009810:	3b01      	subs	r3, #1
 8009812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

       					// leaving the depth the generic desktop was valid for
       					if(generic_desktop > collection_depth)
 8009816:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 800981a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800981e:	429a      	cmp	r2, r3
 8009820:	f340 825c 	ble.w	8009cdc <parse_report_descriptor+0x608>
       						generic_desktop = -1;
 8009824:	23ff      	movs	r3, #255	; 0xff
 8009826:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800982a:	e257      	b.n	8009cdc <parse_report_descriptor+0x608>
             }

           } else {


                 switch(type) {
 800982c:	7f3b      	ldrb	r3, [r7, #28]
 800982e:	2b02      	cmp	r3, #2
 8009830:	f000 81c9 	beq.w	8009bc6 <parse_report_descriptor+0x4f2>
 8009834:	2b02      	cmp	r3, #2
 8009836:	f300 8250 	bgt.w	8009cda <parse_report_descriptor+0x606>
 800983a:	2b00      	cmp	r3, #0
 800983c:	d003      	beq.n	8009846 <parse_report_descriptor+0x172>
 800983e:	2b01      	cmp	r3, #1
 8009840:	f000 8170 	beq.w	8009b24 <parse_report_descriptor+0x450>
 8009844:	e249      	b.n	8009cda <parse_report_descriptor+0x606>
                 case 0:
           	// main item

           	switch(tag) {
 8009846:	7f7b      	ldrb	r3, [r7, #29]
 8009848:	3b08      	subs	r3, #8
 800984a:	2b04      	cmp	r3, #4
 800984c:	f200 8166 	bhi.w	8009b1c <parse_report_descriptor+0x448>
 8009850:	a201      	add	r2, pc, #4	; (adr r2, 8009858 <parse_report_descriptor+0x184>)
 8009852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009856:	bf00      	nop
 8009858:	0800986d 	.word	0x0800986d
 800985c:	08009b21 	.word	0x08009b21
 8009860:	08009a4f 	.word	0x08009a4f
 8009864:	08009b21 	.word	0x08009b21
 8009868:	08009aab 	.word	0x08009aab
           	case 8:
           	  // handle found buttons
           	  if(btns) {
 800986c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009870:	2b00      	cmp	r3, #0
 8009872:	d050      	beq.n	8009916 <parse_report_descriptor+0x242>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) ||
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	f003 0303 	and.w	r3, r3, #3
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b03      	cmp	r3, #3
 8009880:	d006      	beq.n	8009890 <parse_report_descriptor+0x1bc>
           	       (conf->type == REPORT_TYPE_MOUSE)) {
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	f003 0303 	and.w	r3, r3, #3
 800988a:	b2db      	uxtb	r3, r3
           	    if((conf->type == REPORT_TYPE_JOYSTICK) ||
 800988c:	2b01      	cmp	r3, #1
 800988e:	d142      	bne.n	8009916 <parse_report_descriptor+0x242>
           	      // scan for up to four buttons
           	      uint8_t b;
           	      for(b=0;b<12;b++) {
 8009890:	2300      	movs	r3, #0
 8009892:	77fb      	strb	r3, [r7, #31]
 8009894:	e02c      	b.n	80098f0 <parse_report_descriptor+0x21c>
           		if(report_count > b) {
 8009896:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800989a:	7ffb      	ldrb	r3, [r7, #31]
 800989c:	429a      	cmp	r2, r3
 800989e:	d91a      	bls.n	80098d6 <parse_report_descriptor+0x202>
           		  uint16_t this_bit = bit_count+b;
 80098a0:	7ffb      	ldrb	r3, [r7, #31]
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80098a6:	4413      	add	r3, r2
 80098a8:	833b      	strh	r3, [r7, #24]

           		  conf->joystick_mouse.button[b].byte_offset = this_bit/8;
 80098aa:	8b3b      	ldrh	r3, [r7, #24]
 80098ac:	08db      	lsrs	r3, r3, #3
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	7ffa      	ldrb	r2, [r7, #31]
 80098b2:	b2d9      	uxtb	r1, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	320c      	adds	r2, #12
 80098b8:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
           		  conf->joystick_mouse.button[b].bitmask = 1 << (this_bit%8);
 80098bc:	8b3b      	ldrh	r3, [r7, #24]
 80098be:	f003 0307 	and.w	r3, r3, #7
 80098c2:	2201      	movs	r2, #1
 80098c4:	409a      	lsls	r2, r3
 80098c6:	7ffb      	ldrb	r3, [r7, #31]
 80098c8:	b2d1      	uxtb	r1, r2
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	330c      	adds	r3, #12
 80098ce:	005b      	lsls	r3, r3, #1
 80098d0:	4413      	add	r3, r2
 80098d2:	460a      	mov	r2, r1
 80098d4:	705a      	strb	r2, [r3, #1]
           		}
           					conf->joystick_mouse.button_count = report_count * report_size;
 80098d6:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80098da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80098de:	fb12 f303 	smulbb	r3, r2, r3
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
           	      for(b=0;b<12;b++) {
 80098ea:	7ffb      	ldrb	r3, [r7, #31]
 80098ec:	3301      	adds	r3, #1
 80098ee:	77fb      	strb	r3, [r7, #31]
 80098f0:	7ffb      	ldrb	r3, [r7, #31]
 80098f2:	2b0b      	cmp	r3, #11
 80098f4:	d9cf      	bls.n	8009896 <parse_report_descriptor+0x1c2>
           	      }

           	      // we found at least one button which is all we want to accept this as a valid
           	      // joystick
           	      report_complete |= JOY_MOUSE_REQ_BTN_0;
 80098f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098fa:	f043 0304 	orr.w	r3, r3, #4
 80098fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	      if(report_count > 1) report_complete |= JOY_MOUSE_REQ_BTN_1;
 8009902:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009906:	2b01      	cmp	r3, #1
 8009908:	d905      	bls.n	8009916 <parse_report_descriptor+0x242>
 800990a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800990e:	f043 0308 	orr.w	r3, r3, #8
 8009912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	    }
           	  }

           	  // handle found axes
           	  uint8_t c;
           	  for(c=0;c<2;c++) {
 8009916:	2300      	movs	r3, #0
 8009918:	77bb      	strb	r3, [r7, #30]
 800991a:	e05c      	b.n	80099d6 <parse_report_descriptor+0x302>
           	    if(axis[c] >= 0) {
 800991c:	7fbb      	ldrb	r3, [r7, #30]
 800991e:	3338      	adds	r3, #56	; 0x38
 8009920:	443b      	add	r3, r7
 8009922:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8009926:	2b00      	cmp	r3, #0
 8009928:	db52      	blt.n	80099d0 <parse_report_descriptor+0x2fc>
           	      uint16_t cnt = bit_count + report_size * axis[c];
 800992a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800992e:	b29a      	uxth	r2, r3
 8009930:	7fbb      	ldrb	r3, [r7, #30]
 8009932:	3338      	adds	r3, #56	; 0x38
 8009934:	443b      	add	r3, r7
 8009936:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 800993a:	b29b      	uxth	r3, r3
 800993c:	fb12 f303 	smulbb	r3, r2, r3
 8009940:	b29a      	uxth	r2, r3
 8009942:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009944:	4413      	add	r3, r2
 8009946:	82bb      	strh	r3, [r7, #20]

           	      if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	f003 0303 	and.w	r3, r3, #3
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b03      	cmp	r3, #3
 8009954:	d006      	beq.n	8009964 <parse_report_descriptor+0x290>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	f003 0303 	and.w	r3, r3, #3
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b01      	cmp	r3, #1
 8009962:	d135      	bne.n	80099d0 <parse_report_descriptor+0x2fc>
           		// save in joystick report
           		conf->joystick_mouse.axis[c].offset = cnt;
 8009964:	7fba      	ldrb	r2, [r7, #30]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3201      	adds	r2, #1
 800996a:	8ab9      	ldrh	r1, [r7, #20]
 800996c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
           		conf->joystick_mouse.axis[c].size = report_size;
 8009970:	7fbb      	ldrb	r3, [r7, #30]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	3301      	adds	r3, #1
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	4413      	add	r3, r2
 800997a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800997e:	709a      	strb	r2, [r3, #2]
           		conf->joystick_mouse.axis[c].logical.min = logical_minimum;
 8009980:	7fbb      	ldrb	r3, [r7, #30]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	3301      	adds	r3, #1
 8009986:	00db      	lsls	r3, r3, #3
 8009988:	4413      	add	r3, r2
 800998a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800998c:	809a      	strh	r2, [r3, #4]
           		conf->joystick_mouse.axis[c].logical.max = logical_maximum;
 800998e:	7fbb      	ldrb	r3, [r7, #30]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	3301      	adds	r3, #1
 8009994:	00db      	lsls	r3, r3, #3
 8009996:	4413      	add	r3, r2
 8009998:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800999a:	80da      	strh	r2, [r3, #6]
           		conf->joystick_mouse.axis[c].size = report_size;
 800999c:	7fbb      	ldrb	r3, [r7, #30]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	3301      	adds	r3, #1
 80099a2:	00db      	lsls	r3, r3, #3
 80099a4:	4413      	add	r3, r2
 80099a6:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80099aa:	709a      	strb	r2, [r3, #2]
           		if(c==0) report_complete |= JOY_MOUSE_REQ_AXIS_X;
 80099ac:	7fbb      	ldrb	r3, [r7, #30]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d105      	bne.n	80099be <parse_report_descriptor+0x2ea>
 80099b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099b6:	f043 0301 	orr.w	r3, r3, #1
 80099ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           		if(c==1) report_complete |= JOY_MOUSE_REQ_AXIS_Y;
 80099be:	7fbb      	ldrb	r3, [r7, #30]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d105      	bne.n	80099d0 <parse_report_descriptor+0x2fc>
 80099c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099c8:	f043 0302 	orr.w	r3, r3, #2
 80099cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	  for(c=0;c<2;c++) {
 80099d0:	7fbb      	ldrb	r3, [r7, #30]
 80099d2:	3301      	adds	r3, #1
 80099d4:	77bb      	strb	r3, [r7, #30]
 80099d6:	7fbb      	ldrb	r3, [r7, #30]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d99f      	bls.n	800991c <parse_report_descriptor+0x248>
           	      }
           	    }
           	  }

           	  // handle found hat
           	  if(hat >= 0) {
 80099dc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	db1a      	blt.n	8009a1a <parse_report_descriptor+0x346>
           	    uint16_t cnt = bit_count + report_size * hat;
 80099e4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	fb12 f303 	smulbb	r3, r2, r3
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099f8:	4413      	add	r3, r2
 80099fa:	82fb      	strh	r3, [r7, #22]
           	    if(conf->type == REPORT_TYPE_JOYSTICK) {
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	f003 0303 	and.w	r3, r3, #3
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d107      	bne.n	8009a1a <parse_report_descriptor+0x346>
           	      conf->joystick_mouse.hat.offset = cnt;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	8afa      	ldrh	r2, [r7, #22]
 8009a0e:	861a      	strh	r2, [r3, #48]	; 0x30
           	      conf->joystick_mouse.hat.size = report_size;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8009a16:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
           	    }
           	  }


           	  // reset for next inputs
           	  bit_count += report_count * report_size;
 8009a1a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	fb12 f303 	smulbb	r3, r2, r3
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009a2e:	4413      	add	r3, r2
 8009a30:	85fb      	strh	r3, [r7, #46]	; 0x2e
           	  usage_count = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  btns = 0;
 8009a36:	2300      	movs	r3, #0
 8009a38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
           	  axis[0] = axis[1] = -1;
 8009a3c:	23ff      	movs	r3, #255	; 0xff
 8009a3e:	747b      	strb	r3, [r7, #17]
 8009a40:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8009a44:	743b      	strb	r3, [r7, #16]
           	  hat = -1;
 8009a46:	23ff      	movs	r3, #255	; 0xff
 8009a48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
           	  break;
 8009a4c:	e069      	b.n	8009b22 <parse_report_descriptor+0x44e>

           	case 11:
           	  break;

           	case 10:
           	  collection_depth++;
 8009a4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a52:	3301      	adds	r3, #1
 8009a54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
           	  usage_count = 0;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	85bb      	strh	r3, [r7, #44]	; 0x2c

           	  if(value == 1) {	   // app collection
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d107      	bne.n	8009a72 <parse_report_descriptor+0x39e>
           	    app_collection++;
 8009a62:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	3301      	adds	r3, #1
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
           	  } else if(value == 2) {  // logical collection
           	    phys_log_collection++;
           	  } else {
           	    skip_collection++;
           	  }
           	  break;
 8009a70:	e057      	b.n	8009b22 <parse_report_descriptor+0x44e>
           	  } else if(value == 0) {  // physical collection
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d107      	bne.n	8009a88 <parse_report_descriptor+0x3b4>
           	    phys_log_collection++;
 8009a78:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	3301      	adds	r3, #1
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	  break;
 8009a86:	e04c      	b.n	8009b22 <parse_report_descriptor+0x44e>
           	  } else if(value == 2) {  // logical collection
 8009a88:	6a3b      	ldr	r3, [r7, #32]
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d107      	bne.n	8009a9e <parse_report_descriptor+0x3ca>
           	    phys_log_collection++;
 8009a8e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	3301      	adds	r3, #1
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	  break;
 8009a9c:	e041      	b.n	8009b22 <parse_report_descriptor+0x44e>
           	    skip_collection++;
 8009a9e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
           	  break;
 8009aa8:	e03b      	b.n	8009b22 <parse_report_descriptor+0x44e>

           	case 12:
           	  collection_depth--;
 8009aaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

           	  // leaving the depth the generic desktop was valid for
           	  if(generic_desktop > collection_depth)
 8009ab4:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 8009ab8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009abc:	429a      	cmp	r2, r3
 8009abe:	dd02      	ble.n	8009ac6 <parse_report_descriptor+0x3f2>
           	    generic_desktop = -1;
 8009ac0:	23ff      	movs	r3, #255	; 0xff
 8009ac2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

           	  if(phys_log_collection) {
 8009ac6:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d007      	beq.n	8009ade <parse_report_descriptor+0x40a>

           	    phys_log_collection--;
 8009ace:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	    }

           	  } else {
           	    return 0;
           	  }
           	  break;
 8009adc:	e021      	b.n	8009b22 <parse_report_descriptor+0x44e>
           	  } else if(app_collection) {
 8009ade:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d018      	beq.n	8009b18 <parse_report_descriptor+0x444>
           	    app_collection--;
 8009ae6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	3b01      	subs	r3, #1
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
           	     if(report_is_usable(bit_count, report_complete, conf))
 8009af4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8009af8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7ff fdb3 	bl	8009668 <report_is_usable>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <parse_report_descriptor+0x438>
           	      return 1;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e0ec      	b.n	8009ce6 <parse_report_descriptor+0x612>
           	      bit_count = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
           	      report_complete = 0;
 8009b10:	2300      	movs	r3, #0
 8009b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	  break;
 8009b16:	e004      	b.n	8009b22 <parse_report_descriptor+0x44e>
           	    return 0;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	e0e4      	b.n	8009ce6 <parse_report_descriptor+0x612>

           	default:
           	  return 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	e0e2      	b.n	8009ce6 <parse_report_descriptor+0x612>
           	  break;
 8009b20:	bf00      	nop
           	  break;
           	}
           	break;
 8009b22:	e0db      	b.n	8009cdc <parse_report_descriptor+0x608>

                 case 1:
           	// global item
           	switch(tag) {
 8009b24:	7f7b      	ldrb	r3, [r7, #29]
 8009b26:	2b09      	cmp	r3, #9
 8009b28:	d847      	bhi.n	8009bba <parse_report_descriptor+0x4e6>
 8009b2a:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <parse_report_descriptor+0x45c>)
 8009b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b30:	08009b59 	.word	0x08009b59
 8009b34:	08009b95 	.word	0x08009b95
 8009b38:	08009b9b 	.word	0x08009b9b
 8009b3c:	08009bbf 	.word	0x08009bbf
 8009b40:	08009bbf 	.word	0x08009bbf
 8009b44:	08009bbf 	.word	0x08009bbf
 8009b48:	08009bbf 	.word	0x08009bbf
 8009b4c:	08009ba1 	.word	0x08009ba1
 8009b50:	08009ba9 	.word	0x08009ba9
 8009b54:	08009bb3 	.word	0x08009bb3
           	case 0:

           	  if(value == USAGE_PAGE_KEYBOARD) {
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	2b07      	cmp	r3, #7
 8009b5c:	d01a      	beq.n	8009b94 <parse_report_descriptor+0x4c0>
           	  } else if(value == USAGE_PAGE_GAMING) {
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	2b05      	cmp	r3, #5
 8009b62:	d017      	beq.n	8009b94 <parse_report_descriptor+0x4c0>
           	  } else if(value == USAGE_PAGE_LEDS) {
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	2b08      	cmp	r3, #8
 8009b68:	d014      	beq.n	8009b94 <parse_report_descriptor+0x4c0>
           	  } else if(value == USAGE_PAGE_CONSUMER) {
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	2b0c      	cmp	r3, #12
 8009b6e:	d011      	beq.n	8009b94 <parse_report_descriptor+0x4c0>
           	  } else if(value == USAGE_PAGE_BUTTON) {
 8009b70:	6a3b      	ldr	r3, [r7, #32]
 8009b72:	2b09      	cmp	r3, #9
 8009b74:	d103      	bne.n	8009b7e <parse_report_descriptor+0x4aa>
           	    btns = 1;
 8009b76:	2301      	movs	r3, #1
 8009b78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b7c:	e00a      	b.n	8009b94 <parse_report_descriptor+0x4c0>
           	  } else if(value == USAGE_PAGE_GENERIC_DESKTOP) {
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d11e      	bne.n	8009bc2 <parse_report_descriptor+0x4ee>
           	    if(generic_desktop < 0)
 8009b84:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	da03      	bge.n	8009b94 <parse_report_descriptor+0x4c0>
           	      generic_desktop = collection_depth;
 8009b8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b90:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
           	  } else

           	  break;

           	case 1:
           	  logical_minimum = value;
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	857b      	strh	r3, [r7, #42]	; 0x2a
           	  break;
 8009b98:	e014      	b.n	8009bc4 <parse_report_descriptor+0x4f0>

           	case 2:
           	  logical_maximum = value;
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	853b      	strh	r3, [r7, #40]	; 0x28
           	  break;
 8009b9e:	e011      	b.n	8009bc4 <parse_report_descriptor+0x4f0>

           	case 6:
           	  break;

           	case 7:
           	  report_size = value;
 8009ba0:	6a3b      	ldr	r3, [r7, #32]
 8009ba2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
           		break;
 8009ba6:	e00d      	b.n	8009bc4 <parse_report_descriptor+0x4f0>

           	case 8:
           	  conf->report_id = value;
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	705a      	strb	r2, [r3, #1]
           	  break;
 8009bb0:	e008      	b.n	8009bc4 <parse_report_descriptor+0x4f0>

           	case 9:
           		report_count = value;
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
           	  break;
 8009bb8:	e004      	b.n	8009bc4 <parse_report_descriptor+0x4f0>

           	default:
           	  return 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	e093      	b.n	8009ce6 <parse_report_descriptor+0x612>
           	  break;
 8009bbe:	bf00      	nop
 8009bc0:	e08c      	b.n	8009cdc <parse_report_descriptor+0x608>
           	  break;
 8009bc2:	bf00      	nop
           	  break;
           	}
           	break;
 8009bc4:	e08a      	b.n	8009cdc <parse_report_descriptor+0x608>

                 case 2:
           	// local item
           	switch(tag) {
 8009bc6:	7f7b      	ldrb	r3, [r7, #29]
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d07e      	beq.n	8009cca <parse_report_descriptor+0x5f6>
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	f300 8082 	bgt.w	8009cd6 <parse_report_descriptor+0x602>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <parse_report_descriptor+0x508>
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d06f      	beq.n	8009cba <parse_report_descriptor+0x5e6>
           	  usage_count += value;
           	  break;

           	default:

           	  break;
 8009bda:	e07c      	b.n	8009cd6 <parse_report_descriptor+0x602>
           	  if( !collection_depth && (value == USAGE_KEYBOARD)) {
 8009bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d109      	bne.n	8009bf8 <parse_report_descriptor+0x524>
 8009be4:	6a3b      	ldr	r3, [r7, #32]
 8009be6:	2b06      	cmp	r3, #6
 8009be8:	d106      	bne.n	8009bf8 <parse_report_descriptor+0x524>
           	    conf->type = REPORT_TYPE_KEYBOARD;
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	7813      	ldrb	r3, [r2, #0]
 8009bee:	2102      	movs	r1, #2
 8009bf0:	f361 0301 	bfi	r3, r1, #0, #2
 8009bf4:	7013      	strb	r3, [r2, #0]
 8009bf6:	e05c      	b.n	8009cb2 <parse_report_descriptor+0x5de>
           	  } else if(!collection_depth && (value == USAGE_MOUSE)) {
 8009bf8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d109      	bne.n	8009c14 <parse_report_descriptor+0x540>
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d106      	bne.n	8009c14 <parse_report_descriptor+0x540>
           	    conf->type = REPORT_TYPE_MOUSE;
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	7813      	ldrb	r3, [r2, #0]
 8009c0a:	2101      	movs	r1, #1
 8009c0c:	f361 0301 	bfi	r3, r1, #0, #2
 8009c10:	7013      	strb	r3, [r2, #0]
 8009c12:	e04e      	b.n	8009cb2 <parse_report_descriptor+0x5de>
           	  } else if(!collection_depth &&
 8009c14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10b      	bne.n	8009c34 <parse_report_descriptor+0x560>
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
 8009c1e:	2b05      	cmp	r3, #5
 8009c20:	d002      	beq.n	8009c28 <parse_report_descriptor+0x554>
           		    ((value == USAGE_GAMEPAD) || (value == USAGE_JOYSTICK))) {
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	2b04      	cmp	r3, #4
 8009c26:	d105      	bne.n	8009c34 <parse_report_descriptor+0x560>
           	    conf->type = REPORT_TYPE_JOYSTICK;
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	7813      	ldrb	r3, [r2, #0]
 8009c2c:	f043 0303 	orr.w	r3, r3, #3
 8009c30:	7013      	strb	r3, [r2, #0]
 8009c32:	e03e      	b.n	8009cb2 <parse_report_descriptor+0x5de>
           	  } else if(value == USAGE_POINTER && app_collection) {
 8009c34:	6a3b      	ldr	r3, [r7, #32]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d103      	bne.n	8009c42 <parse_report_descriptor+0x56e>
 8009c3a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d137      	bne.n	8009cb2 <parse_report_descriptor+0x5de>
           	  } else if((value == USAGE_X || value == USAGE_Y) && app_collection) {
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	2b30      	cmp	r3, #48	; 0x30
 8009c46:	d002      	beq.n	8009c4e <parse_report_descriptor+0x57a>
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	2b31      	cmp	r3, #49	; 0x31
 8009c4c:	d11e      	bne.n	8009c8c <parse_report_descriptor+0x5b8>
 8009c4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d01a      	beq.n	8009c8c <parse_report_descriptor+0x5b8>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	f003 0303 	and.w	r3, r3, #3
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	d006      	beq.n	8009c72 <parse_report_descriptor+0x59e>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	f003 0303 	and.w	r3, r3, #3
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d11e      	bne.n	8009cb0 <parse_report_descriptor+0x5dc>
           	      if(value == USAGE_X) {
 8009c72:	6a3b      	ldr	r3, [r7, #32]
 8009c74:	2b30      	cmp	r3, #48	; 0x30
 8009c76:	d102      	bne.n	8009c7e <parse_report_descriptor+0x5aa>
           		axis[0] = usage_count;
 8009c78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c7a:	b25b      	sxtb	r3, r3
 8009c7c:	743b      	strb	r3, [r7, #16]
           	      if(value == USAGE_Y) {
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	2b31      	cmp	r3, #49	; 0x31
 8009c82:	d115      	bne.n	8009cb0 <parse_report_descriptor+0x5dc>
           		axis[1] = usage_count;
 8009c84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c86:	b25b      	sxtb	r3, r3
 8009c88:	747b      	strb	r3, [r7, #17]
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8009c8a:	e011      	b.n	8009cb0 <parse_report_descriptor+0x5dc>
           	  } else if((value == USAGE_HAT) && app_collection) {
 8009c8c:	6a3b      	ldr	r3, [r7, #32]
 8009c8e:	2b39      	cmp	r3, #57	; 0x39
 8009c90:	d10f      	bne.n	8009cb2 <parse_report_descriptor+0x5de>
 8009c92:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00b      	beq.n	8009cb2 <parse_report_descriptor+0x5de>
           	    if(conf->type == REPORT_TYPE_JOYSTICK) {
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	f003 0303 	and.w	r3, r3, #3
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	2b03      	cmp	r3, #3
 8009ca6:	d104      	bne.n	8009cb2 <parse_report_descriptor+0x5de>
           	      hat = usage_count;
 8009ca8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009caa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009cae:	e000      	b.n	8009cb2 <parse_report_descriptor+0x5de>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8009cb0:	bf00      	nop
           	  usage_count++;
 8009cb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8009cb8:	e00e      	b.n	8009cd8 <parse_report_descriptor+0x604>
           	  usage_count -= (value-1);
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8009cc8:	e006      	b.n	8009cd8 <parse_report_descriptor+0x604>
           	  usage_count += value;
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009cd0:	4413      	add	r3, r2
 8009cd2:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8009cd4:	e000      	b.n	8009cd8 <parse_report_descriptor+0x604>
           	  break;
 8009cd6:	bf00      	nop
           	}
           	break;
 8009cd8:	e000      	b.n	8009cdc <parse_report_descriptor+0x608>

                 default:
           	// reserved

           	break;
 8009cda:	bf00      	nop
  while(rep_size) {
 8009cdc:	897b      	ldrh	r3, [r7, #10]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f47f ad29 	bne.w	8009736 <parse_report_descriptor+0x62>
                 }
               }
             }

             // if we get here then no usable setup was found
             return 0;
 8009ce4:	2300      	movs	r3, #0
           }
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3738      	adds	r7, #56	; 0x38
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop

08009cf0 <USBH_HUB_InterfaceInit>:




static USBH_StatusTypeDef USBH_HUB_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009cf0:	b590      	push	{r4, r7, lr}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	73fb      	strb	r3, [r7, #15]
	HUB_HandleTypeDef *HUB_Handle;
    uint8_t interface;


    interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x00U, 0x00U);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d02:	7919      	ldrb	r1, [r3, #4]
 8009d04:	2300      	movs	r3, #0
 8009d06:	2200      	movs	r2, #0
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f002 f9f2 	bl	800c0f2 <USBH_FindInterface>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	73bb      	strb	r3, [r7, #14]

    if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009d12:	7bbb      	ldrb	r3, [r7, #14]
 8009d14:	2bff      	cmp	r3, #255	; 0xff
 8009d16:	d002      	beq.n	8009d1e <USBH_HUB_InterfaceInit+0x2e>
 8009d18:	7bbb      	ldrb	r3, [r7, #14]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d901      	bls.n	8009d22 <USBH_HUB_InterfaceInit+0x32>
    {
        USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
        return USBH_FAIL;
 8009d1e:	2302      	movs	r3, #2
 8009d20:	e05e      	b.n	8009de0 <USBH_HUB_InterfaceInit+0xf0>
    }

    status = USBH_SelectInterface(phost, interface);
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
 8009d24:	4619      	mov	r1, r3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f002 f9c7 	bl	800c0ba <USBH_SelectInterface>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73fb      	strb	r3, [r7, #15]

    if (status != USBH_OK)
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d001      	beq.n	8009d3a <USBH_HUB_InterfaceInit+0x4a>
    {
        return USBH_FAIL;
 8009d36:	2302      	movs	r3, #2
 8009d38:	e052      	b.n	8009de0 <USBH_HUB_InterfaceInit+0xf0>
    }


    phost->pActiveClass->pData[0] = (HUB_HandleTypeDef *)USBH_malloc(sizeof(HUB_HandleTypeDef));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 4380 	ldr.w	r4, [r3, #896]	; 0x380
 8009d40:	f241 003c 	movw	r0, #4156	; 0x103c
 8009d44:	f004 f896 	bl	800de74 <malloc>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	6223      	str	r3, [r4, #32]
    HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d52:	6a1b      	ldr	r3, [r3, #32]
 8009d54:	60bb      	str	r3, [r7, #8]
    
    if (HUB_Handle == NULL)
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d101      	bne.n	8009d60 <USBH_HUB_InterfaceInit+0x70>
    {
        USBH_DbgLog("Cannot allocate memory for HID Handle");
        return USBH_FAIL;
 8009d5c:	2302      	movs	r3, #2
 8009d5e:	e03f      	b.n	8009de0 <USBH_HUB_InterfaceInit+0xf0>
    }

      /* Initialize hub handler */
    USBH_memset(HUB_Handle, 0, sizeof(HUB_HandleTypeDef));
 8009d60:	f241 023c 	movw	r2, #4156	; 0x103c
 8009d64:	2100      	movs	r1, #0
 8009d66:	68b8      	ldr	r0, [r7, #8]
 8009d68:	f004 f894 	bl	800de94 <memset>




  HUB_Handle->state     = HUB_INIT;
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	701a      	strb	r2, [r3, #0]
  HUB_Handle->ctl_state = HUB_REQ_INIT;
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2200      	movs	r2, #0
 8009d76:	70da      	strb	r2, [r3, #3]
  HUB_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	211a      	movs	r1, #26
 8009d7e:	fb01 f303 	mul.w	r3, r1, r3
 8009d82:	4413      	add	r3, r2
 8009d84:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009d88:	781a      	ldrb	r2, [r3, #0]
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	729a      	strb	r2, [r3, #10]
  HUB_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009d8e:	7bbb      	ldrb	r3, [r7, #14]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	211a      	movs	r1, #26
 8009d94:	fb01 f303 	mul.w	r3, r1, r3
 8009d98:	4413      	add	r3, r2
 8009d9a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009d9e:	881a      	ldrh	r2, [r3, #0]
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	811a      	strh	r2, [r3, #8]
  HUB_Handle->InEp      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009da4:	7bbb      	ldrb	r3, [r7, #14]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	211a      	movs	r1, #26
 8009daa:	fb01 f303 	mul.w	r3, r1, r3
 8009dae:	4413      	add	r3, r2
 8009db0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009db4:	781a      	ldrb	r2, [r3, #0]
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	709a      	strb	r2, [r3, #2]
  HUB_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	211a      	movs	r1, #26
 8009dc0:	fb01 f303 	mul.w	r3, r1, r3
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f203 3352 	addw	r3, r3, #850	; 0x352
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	819a      	strh	r2, [r3, #12]
  HUB_Handle->portNumber= 1;
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	return status;
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd90      	pop	{r4, r7, pc}

08009de8 <USBH_HUB_InterfaceDeInit>:

static USBH_StatusTypeDef USBH_HUB_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009df6:	6a1b      	ldr	r3, [r3, #32]
 8009df8:	60bb      	str	r3, [r7, #8]


  for (int i = 0; i<4; i++)
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	60fb      	str	r3, [r7, #12]
 8009dfe:	e04a      	b.n	8009e96 <USBH_HUB_InterfaceDeInit+0xae>
  {
    if(HUB_Handle->Port[i].MFC!=0) 
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8009e08:	fb01 f303 	mul.w	r3, r1, r3
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d017      	beq.n	8009e48 <USBH_HUB_InterfaceDeInit+0x60>
    {
      free(HUB_Handle->Port[i].MFC);
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8009e20:	fb01 f303 	mul.w	r3, r1, r3
 8009e24:	4413      	add	r3, r2
 8009e26:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f004 f829 	bl	800de84 <free>
      HUB_Handle->Port[i].MFC = 0;
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8009e3a:	fb01 f303 	mul.w	r3, r1, r3
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8009e44:	2200      	movs	r2, #0
 8009e46:	601a      	str	r2, [r3, #0]
    }
    if(HUB_Handle->Port[i].Product!=0) 
 8009e48:	68ba      	ldr	r2, [r7, #8]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8009e50:	fb01 f303 	mul.w	r3, r1, r3
 8009e54:	4413      	add	r3, r2
 8009e56:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d017      	beq.n	8009e90 <USBH_HUB_InterfaceDeInit+0xa8>
    {
      free(HUB_Handle->Port[i].Product);
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8009e68:	fb01 f303 	mul.w	r3, r1, r3
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f004 f805 	bl	800de84 <free>
      HUB_Handle->Port[i].Product = 0;
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8009e82:	fb01 f303 	mul.w	r3, r1, r3
 8009e86:	4413      	add	r3, r2
 8009e88:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	601a      	str	r2, [r3, #0]
  for (int i = 0; i<4; i++)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	3301      	adds	r3, #1
 8009e94:	60fb      	str	r3, [r7, #12]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	ddb1      	ble.n	8009e00 <USBH_HUB_InterfaceDeInit+0x18>
    }
  }

  if (phost->pActiveClass->pData[0])
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00b      	beq.n	8009ec0 <USBH_HUB_InterfaceDeInit+0xd8>
  {
    USBH_free(phost->pActiveClass->pData[0]);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f003 ffe7 	bl	800de84 <free>
    phost->pActiveClass->pData[0] = 0U;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	621a      	str	r2, [r3, #32]
  }


  USBH_memset(HUB_Handle, 0, sizeof(HUB_HandleTypeDef));
 8009ec0:	f241 023c 	movw	r2, #4156	; 0x103c
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	68b8      	ldr	r0, [r7, #8]
 8009ec8:	f003 ffe4 	bl	800de94 <memset>


  return USBH_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
	...

08009ed8 <USBH_HUB_ClassRequest>:
static USBH_StatusTypeDef USBH_HUB_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
    USBH_StatusTypeDef status = USBH_BUSY;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	73fb      	strb	r3, [r7, #15]
    HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009eea:	6a1b      	ldr	r3, [r3, #32]
 8009eec:	60bb      	str	r3, [r7, #8]


   switch (HUB_Handle->ctl_state)
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	78db      	ldrb	r3, [r3, #3]
 8009ef2:	2b07      	cmp	r3, #7
 8009ef4:	f200 8088 	bhi.w	800a008 <USBH_HUB_ClassRequest+0x130>
 8009ef8:	a201      	add	r2, pc, #4	; (adr r2, 8009f00 <USBH_HUB_ClassRequest+0x28>)
 8009efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efe:	bf00      	nop
 8009f00:	08009f21 	.word	0x08009f21
 8009f04:	08009f35 	.word	0x08009f35
 8009f08:	08009f5d 	.word	0x08009f5d
 8009f0c:	08009f75 	.word	0x08009f75
 8009f10:	08009f8d 	.word	0x08009f8d
 8009f14:	08009fa5 	.word	0x08009fa5
 8009f18:	08009fbd 	.word	0x08009fbd
 8009f1c:	08009fcf 	.word	0x08009fcf
   {
    case HUB_REQ_INIT:
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009f26:	2102      	movs	r1, #2
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	4798      	blx	r3
    HUB_Handle->ctl_state = HUB_REQ_GET_DESCRIPTOR; 
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	70da      	strb	r2, [r3, #3]
    break;
 8009f32:	e069      	b.n	800a008 <USBH_HUB_ClassRequest+0x130>
    case HUB_REQ_GET_DESCRIPTOR:

        if (USBH_HUB_GetDescriptor(phost) == USBH_OK)
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 ffcf 	bl	800aed8 <USBH_HUB_GetDescriptor>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d15a      	bne.n	8009ff6 <USBH_HUB_ClassRequest+0x11e>
        {
            USBH_HUB_ParseHubDescriptor(&HUB_Handle->HUB_Desc,phost->device.Data);
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	f103 0216 	add.w	r2, r3, #22
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	4610      	mov	r0, r2
 8009f50:	f001 f9ae 	bl	800b2b0 <USBH_HUB_ParseHubDescriptor>
            HUB_Handle->ctl_state = HUB_REQ_SET_POWER_PORT1 ;
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2202      	movs	r2, #2
 8009f58:	70da      	strb	r2, [r3, #3]
        }

      break;
 8009f5a:	e04c      	b.n	8009ff6 <USBH_HUB_ClassRequest+0x11e>

	  case HUB_REQ_SET_POWER_PORT1:

      if(USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_POWER,1) == USBH_OK)
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	2108      	movs	r1, #8
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 f888 	bl	800b076 <USBH_HUB_SetPortFeature>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d146      	bne.n	8009ffa <USBH_HUB_ClassRequest+0x122>
      {
        HUB_Handle->ctl_state = HUB_REQ_SET_POWER_PORT2 ;
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2203      	movs	r2, #3
 8009f70:	70da      	strb	r2, [r3, #3]
      }

      break;
 8009f72:	e042      	b.n	8009ffa <USBH_HUB_ClassRequest+0x122>
  
	  case HUB_REQ_SET_POWER_PORT2:

      if(USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_POWER,2) == USBH_OK)
 8009f74:	2202      	movs	r2, #2
 8009f76:	2108      	movs	r1, #8
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f001 f87c 	bl	800b076 <USBH_HUB_SetPortFeature>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d13c      	bne.n	8009ffe <USBH_HUB_ClassRequest+0x126>
      {
        HUB_Handle->ctl_state = HUB_REQ_SET_POWER_PORT3 ;
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	2204      	movs	r2, #4
 8009f88:	70da      	strb	r2, [r3, #3]
      }

      break;
 8009f8a:	e038      	b.n	8009ffe <USBH_HUB_ClassRequest+0x126>

  	case HUB_REQ_SET_POWER_PORT3:

      if(USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_POWER,3) == USBH_OK)
 8009f8c:	2203      	movs	r2, #3
 8009f8e:	2108      	movs	r1, #8
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f001 f870 	bl	800b076 <USBH_HUB_SetPortFeature>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d132      	bne.n	800a002 <USBH_HUB_ClassRequest+0x12a>
      {
        HUB_Handle->ctl_state = HUB_REQ_SET_POWER_PORT4;
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	2205      	movs	r2, #5
 8009fa0:	70da      	strb	r2, [r3, #3]
      }

    break;
 8009fa2:	e02e      	b.n	800a002 <USBH_HUB_ClassRequest+0x12a>
  
  	case HUB_REQ_SET_POWER_PORT4:
      if(USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_POWER,4) == USBH_OK)
 8009fa4:	2204      	movs	r2, #4
 8009fa6:	2108      	movs	r1, #8
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f001 f864 	bl	800b076 <USBH_HUB_SetPortFeature>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d128      	bne.n	800a006 <USBH_HUB_ClassRequest+0x12e>
      {
        HUB_Handle->ctl_state = HUB_WAIT_PWRGOOD ;
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	2206      	movs	r2, #6
 8009fb8:	70da      	strb	r2, [r3, #3]
      }
      break;
 8009fba:	e024      	b.n	800a006 <USBH_HUB_ClassRequest+0x12e>

   	case HUB_WAIT_PWRGOOD:  
      HAL_Delay(HUB_Handle->HUB_Desc.bPwrOn2PwrGood);
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	7f1b      	ldrb	r3, [r3, #28]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7f7 fe11 	bl	8001be8 <HAL_Delay>
      HUB_Handle->ctl_state = HUB_REQ_DONE;
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	2207      	movs	r2, #7
 8009fca:	70da      	strb	r2, [r3, #3]
      break;
 8009fcc:	e01c      	b.n	800a008 <USBH_HUB_ClassRequest+0x130>

    case HUB_REQ_DONE:
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	719a      	strb	r2, [r3, #6]
      HUB_Handle->current_Itf_number = 0;
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
      HUB_Handle->current_port_number = 0;
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      status = USBH_OK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ff4:	e008      	b.n	800a008 <USBH_HUB_ClassRequest+0x130>
      break;
 8009ff6:	bf00      	nop
 8009ff8:	e006      	b.n	800a008 <USBH_HUB_ClassRequest+0x130>
      break;
 8009ffa:	bf00      	nop
 8009ffc:	e004      	b.n	800a008 <USBH_HUB_ClassRequest+0x130>
      break;
 8009ffe:	bf00      	nop
 800a000:	e002      	b.n	800a008 <USBH_HUB_ClassRequest+0x130>
    break;
 800a002:	bf00      	nop
 800a004:	e000      	b.n	800a008 <USBH_HUB_ClassRequest+0x130>
      break;
 800a006:	bf00      	nop

  }

	return status;
 800a008:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop

0800a014 <USBH_HUB_Process>:

static USBH_StatusTypeDef USBH_HUB_Process(USBH_HandleTypeDef *phost)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b088      	sub	sp, #32
 800a018:	af04      	add	r7, sp, #16
 800a01a:	6078      	str	r0, [r7, #4]
    USBH_StatusTypeDef status = USBH_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	73fb      	strb	r3, [r7, #15]
    HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a026:	6a1b      	ldr	r3, [r3, #32]
 800a028:	60bb      	str	r3, [r7, #8]
    

    switch (HUB_Handle->state)
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	2b04      	cmp	r3, #4
 800a030:	f200 8100 	bhi.w	800a234 <USBH_HUB_Process+0x220>
 800a034:	a201      	add	r2, pc, #4	; (adr r2, 800a03c <USBH_HUB_Process+0x28>)
 800a036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a03a:	bf00      	nop
 800a03c:	0800a051 	.word	0x0800a051
 800a040:	0800a0af 	.word	0x0800a0af
 800a044:	0800a0c9 	.word	0x0800a0c9
 800a048:	0800a179 	.word	0x0800a179
 800a04c:	0800a227 	.word	0x0800a227
    {
    case HUB_INIT:
            USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80,
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	7919      	ldrb	r1, [r3, #4]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 231c 	ldrb.w	r2, [r3, #796]	; 0x31c
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a060:	2040      	movs	r0, #64	; 0x40
 800a062:	9002      	str	r0, [sp, #8]
 800a064:	2000      	movs	r0, #0
 800a066:	9001      	str	r0, [sp, #4]
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	4613      	mov	r3, r2
 800a06c:	2280      	movs	r2, #128	; 0x80
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f003 fa1e 	bl	800d4b0 <USBH_OpenPipe>
            phost->device.address, phost->device.speed,
            USBH_EP_CONTROL, (uint16_t)0x40);

            USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	7959      	ldrb	r1, [r3, #5]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f893 231c 	ldrb.w	r2, [r3, #796]	; 0x31c
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a084:	2040      	movs	r0, #64	; 0x40
 800a086:	9002      	str	r0, [sp, #8]
 800a088:	2000      	movs	r0, #0
 800a08a:	9001      	str	r0, [sp, #4]
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	4613      	mov	r3, r2
 800a090:	2200      	movs	r2, #0
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f003 fa0c 	bl	800d4b0 <USBH_OpenPipe>
            phost->device.address, phost->device.speed,
            USBH_EP_CONTROL, (uint16_t)0x40);

            phost->Control.pipe_size = 0x40;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2240      	movs	r2, #64	; 0x40
 800a09c:	719a      	strb	r2, [r3, #6]
            phost->Control.length = HUB_Handle->length;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	891a      	ldrh	r2, [r3, #8]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	819a      	strh	r2, [r3, #12]

      HUB_Handle->state = HUB_UPDATE_PORTS_STATUS;
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	701a      	strb	r2, [r3, #0]
      break;
 800a0ac:	e0ca      	b.n	800a244 <USBH_HUB_Process+0x230>

    case HUB_UPDATE_PORTS_STATUS:
          status = USBH_HUB_UpdatePortsStatus(phost);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f918 	bl	800a2e4 <USBH_HUB_UpdatePortsStatus>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73fb      	strb	r3, [r7, #15]
          if (status == USBH_OK)
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f040 80bd 	bne.w	800a23a <USBH_HUB_Process+0x226>
          {
            HUB_Handle->state = HUB_HANDLE_DISCONNECTED_PORTS;
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	701a      	strb	r2, [r3, #0]
          }


      break;
 800a0c6:	e0b8      	b.n	800a23a <USBH_HUB_Process+0x226>
    
    case HUB_HANDLE_DISCONNECTED_PORTS:

      if (HUB_Handle->Port[HUB_Handle->portNumber-1].Disconnected)
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a0da:	fb01 f303 	mul.w	r3, r1, r3
 800a0de:	4413      	add	r3, r2
 800a0e0:	f203 132d 	addw	r3, r3, #301	; 0x12d
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d028      	beq.n	800a13c <USBH_HUB_Process+0x128>
      {
        // Handle Disconnection
        //DeInit HID, Free Pipes and clear Handles.
        status = USBH_HUB_DisconnectDevice(phost,&HUB_Handle->Port[HUB_Handle->portNumber-1]);
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800a0fa:	fb02 f303 	mul.w	r3, r2, r3
 800a0fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	4413      	add	r3, r2
 800a106:	4619      	mov	r1, r3
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f913 	bl	800a334 <USBH_HUB_DisconnectDevice>
 800a10e:	4603      	mov	r3, r0
 800a110:	73fb      	strb	r3, [r7, #15]
        if (status == USBH_OK)
 800a112:	7bfb      	ldrb	r3, [r7, #15]
 800a114:	2b00      	cmp	r3, #0
 800a116:	f040 8092 	bne.w	800a23e <USBH_HUB_Process+0x22a>
        {
          HUB_Handle->Port[HUB_Handle->portNumber-1].Disconnected = 0;
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a120:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a124:	3b01      	subs	r3, #1
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a12c:	fb01 f303 	mul.w	r3, r1, r3
 800a130:	4413      	add	r3, r2
 800a132:	f203 132d 	addw	r3, r3, #301	; 0x12d
 800a136:	2200      	movs	r2, #0
 800a138:	701a      	strb	r2, [r3, #0]
        {
            HUB_Handle->portNumber = 1;
            HUB_Handle->state = HUB_HANDLE_CONNECTED_PORTS;
        }
      }
      break;
 800a13a:	e080      	b.n	800a23e <USBH_HUB_Process+0x22a>
        if (HUB_Handle->portNumber<4)
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a142:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a146:	2b03      	cmp	r3, #3
 800a148:	d80c      	bhi.n	800a164 <USBH_HUB_Process+0x150>
        HUB_Handle->portNumber++;
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a150:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a154:	3301      	adds	r3, #1
 800a156:	b2da      	uxtb	r2, r3
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a15e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      break;
 800a162:	e06c      	b.n	800a23e <USBH_HUB_Process+0x22a>
            HUB_Handle->portNumber = 1;
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            HUB_Handle->state = HUB_HANDLE_CONNECTED_PORTS;
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	2203      	movs	r2, #3
 800a174:	701a      	strb	r2, [r3, #0]
      break;
 800a176:	e062      	b.n	800a23e <USBH_HUB_Process+0x22a>

    case HUB_HANDLE_CONNECTED_PORTS:

      if (HUB_Handle->Port[HUB_Handle->portNumber-1].Connected)
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a17e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a182:	3b01      	subs	r3, #1
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a18a:	fb01 f303 	mul.w	r3, r1, r3
 800a18e:	4413      	add	r3, r2
 800a190:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d027      	beq.n	800a1ea <USBH_HUB_Process+0x1d6>
      {
        // Handle Connection / Enumeration
        status = USBH_HUB_Device_Enum(phost,&HUB_Handle->Port[HUB_Handle->portNumber-1]);
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800a1aa:	fb02 f303 	mul.w	r3, r2, r3
 800a1ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f001 f8f9 	bl	800b3b0 <USBH_HUB_Device_Enum>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	73fb      	strb	r3, [r7, #15]
        if (status==USBH_OK)
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d13c      	bne.n	800a242 <USBH_HUB_Process+0x22e>
        {
          HUB_Handle->Port[HUB_Handle->portNumber-1].Connected = 0;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800a1da:	fb01 f303 	mul.w	r3, r1, r3
 800a1de:	4413      	add	r3, r2
 800a1e0:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	701a      	strb	r2, [r3, #0]
        {
            HUB_Handle->portNumber = 1;
            HUB_Handle->state = HUB_PROCESS_PORTS;
        }
      }
    break;
 800a1e8:	e02b      	b.n	800a242 <USBH_HUB_Process+0x22e>
        if (HUB_Handle->portNumber<4)
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a1f4:	2b03      	cmp	r3, #3
 800a1f6:	d80c      	bhi.n	800a212 <USBH_HUB_Process+0x1fe>
          HUB_Handle->portNumber++;
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a202:	3301      	adds	r3, #1
 800a204:	b2da      	uxtb	r2, r3
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a20c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    break;
 800a210:	e017      	b.n	800a242 <USBH_HUB_Process+0x22e>
            HUB_Handle->portNumber = 1;
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            HUB_Handle->state = HUB_PROCESS_PORTS;
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2204      	movs	r2, #4
 800a222:	701a      	strb	r2, [r3, #0]
    break;
 800a224:	e00d      	b.n	800a242 <USBH_HUB_Process+0x22e>


    case HUB_PROCESS_PORTS:
      //handle all ports and interfaces at once.
      USBH_HUB_Device_Process(phost);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f001 fda8 	bl	800bd7c <USBH_HUB_Device_Process>



      HUB_Handle->state = HUB_INIT;
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	2200      	movs	r2, #0
 800a230:	701a      	strb	r2, [r3, #0]
      break;
 800a232:	e007      	b.n	800a244 <USBH_HUB_Process+0x230>

    default:
        status = USBH_FAIL;
 800a234:	2302      	movs	r3, #2
 800a236:	73fb      	strb	r3, [r7, #15]
      break;
 800a238:	e004      	b.n	800a244 <USBH_HUB_Process+0x230>
      break;
 800a23a:	bf00      	nop
 800a23c:	e002      	b.n	800a244 <USBH_HUB_Process+0x230>
      break;
 800a23e:	bf00      	nop
 800a240:	e000      	b.n	800a244 <USBH_HUB_Process+0x230>
    break;
 800a242:	bf00      	nop
    } 
    


 	return status;
 800a244:	7bfb      	ldrb	r3, [r7, #15]

   }
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop

0800a250 <USBH_HUB_SOFProcess>:

static USBH_StatusTypeDef USBH_HUB_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
    USBH_StatusTypeDef status = USBH_OK;
 800a258:	2300      	movs	r3, #0
 800a25a:	77fb      	strb	r3, [r7, #31]
    HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a262:	6a1b      	ldr	r3, [r3, #32]
 800a264:	61bb      	str	r3, [r7, #24]
    uint8_t currentPort = HUB_Handle->current_port_number;
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a26c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a270:	75fb      	strb	r3, [r7, #23]
    uint8_t currentItf  = HUB_Handle->current_Itf_number;
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a278:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800a27c:	75bb      	strb	r3, [r7, #22]

    HUB_Port_HandleTypeDef *port = (HUB_Port_HandleTypeDef *) &HUB_Handle->Port[currentPort];
 800a27e:	7dfb      	ldrb	r3, [r7, #23]
 800a280:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800a284:	fb02 f303 	mul.w	r3, r2, r3
 800a288:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	4413      	add	r3, r2
 800a290:	613b      	str	r3, [r7, #16]
    if (port->EnumState != HUB_ENUM_READY) return status;
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	799b      	ldrb	r3, [r3, #6]
 800a296:	2b16      	cmp	r3, #22
 800a298:	d001      	beq.n	800a29e <USBH_HUB_SOFProcess+0x4e>
 800a29a:	7ffb      	ldrb	r3, [r7, #31]
 800a29c:	e01e      	b.n	800a2dc <USBH_HUB_SOFProcess+0x8c>

    HUB_Port_Interface_HandleTypeDef *Itf = (HUB_Port_Interface_HandleTypeDef *) &port->Interface[currentItf];
 800a29e:	7dbb      	ldrb	r3, [r7, #22]
 800a2a0:	226c      	movs	r2, #108	; 0x6c
 800a2a2:	fb02 f303 	mul.w	r3, r2, r3
 800a2a6:	33e0      	adds	r3, #224	; 0xe0
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	60fb      	str	r3, [r7, #12]

    if (Itf->state == HUB_DEVICE_POLL)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	791b      	ldrb	r3, [r3, #4]
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	d110      	bne.n	800a2da <USBH_HUB_SOFProcess+0x8a>
    {
        if(phost->Timer - Itf->timer > Itf->poll)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	8952      	ldrh	r2, [r2, #10]
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d906      	bls.n	800a2da <USBH_HUB_SOFProcess+0x8a>
        {
          Itf->state = HUB_DEVICE_GET_DATA;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	711a      	strb	r2, [r3, #4]


          USBH_Next_Interface_Port(phost,port);
 800a2d2:	6939      	ldr	r1, [r7, #16]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 f867 	bl	800a3a8 <USBH_Next_Interface_Port>


        }
    }

	  return status;
 800a2da:	7ffb      	ldrb	r3, [r7, #31]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3720      	adds	r7, #32
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBH_HUB_UpdatePortsStatus>:

static USBH_StatusTypeDef USBH_HUB_UpdatePortsStatus(USBH_HandleTypeDef *phost)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  static uint8_t PortNumber = 1;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	73fb      	strb	r3, [r7, #15]

    status = USBH_HUB_GetPortStatus(phost,PortNumber);
 800a2f0:	4b0f      	ldr	r3, [pc, #60]	; (800a330 <USBH_HUB_UpdatePortsStatus+0x4c>)
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fe17 	bl	800af2a <USBH_HUB_GetPortStatus>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	73fb      	strb	r3, [r7, #15]
    if ( status == USBH_OK)
 800a300:	7bfb      	ldrb	r3, [r7, #15]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10f      	bne.n	800a326 <USBH_HUB_UpdatePortsStatus+0x42>
    {
      if (PortNumber<4) 
 800a306:	4b0a      	ldr	r3, [pc, #40]	; (800a330 <USBH_HUB_UpdatePortsStatus+0x4c>)
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	d808      	bhi.n	800a320 <USBH_HUB_UpdatePortsStatus+0x3c>
      {
        PortNumber++;
 800a30e:	4b08      	ldr	r3, [pc, #32]	; (800a330 <USBH_HUB_UpdatePortsStatus+0x4c>)
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	3301      	adds	r3, #1
 800a314:	b2da      	uxtb	r2, r3
 800a316:	4b06      	ldr	r3, [pc, #24]	; (800a330 <USBH_HUB_UpdatePortsStatus+0x4c>)
 800a318:	701a      	strb	r2, [r3, #0]
        status = USBH_BUSY;
 800a31a:	2301      	movs	r3, #1
 800a31c:	73fb      	strb	r3, [r7, #15]
 800a31e:	e002      	b.n	800a326 <USBH_HUB_UpdatePortsStatus+0x42>
      }  
      else
      {
        PortNumber = 1;
 800a320:	4b03      	ldr	r3, [pc, #12]	; (800a330 <USBH_HUB_UpdatePortsStatus+0x4c>)
 800a322:	2201      	movs	r2, #1
 800a324:	701a      	strb	r2, [r3, #0]
      } 
      
    }
	return status;
 800a326:	7bfb      	ldrb	r3, [r7, #15]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	20000084 	.word	0x20000084

0800a334 <USBH_HUB_DisconnectDevice>:



static USBH_StatusTypeDef USBH_HUB_DisconnectDevice(USBH_HandleTypeDef *phost, HUB_Port_HandleTypeDef *Port)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
    USBH_StatusTypeDef status = USBH_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	73fb      	strb	r3, [r7, #15]

      free(Port->MFC);
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	4618      	mov	r0, r3
 800a348:	f003 fd9c 	bl	800de84 <free>
      Port->MFC = 0;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	2200      	movs	r2, #0
 800a350:	60da      	str	r2, [r3, #12]
      free(Port->Product);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	4618      	mov	r0, r3
 800a358:	f003 fd94 	bl	800de84 <free>
      Port->Product = 0;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2200      	movs	r2, #0
 800a360:	611a      	str	r2, [r3, #16]
      if (Port->Interface[0].Pipe_in != 0 ) USBH_FreePipe(phost, Port->Interface[0].Pipe_in);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d006      	beq.n	800a37a <USBH_HUB_DisconnectDevice+0x46>
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 800a372:	4619      	mov	r1, r3
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f003 f8ea 	bl	800d54e <USBH_FreePipe>
      if (Port->Interface[1].Pipe_in != 0 ) USBH_FreePipe(phost, Port->Interface[0].Pipe_in);
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 800a380:	2b00      	cmp	r3, #0
 800a382:	d006      	beq.n	800a392 <USBH_HUB_DisconnectDevice+0x5e>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f003 f8de 	bl	800d54e <USBH_FreePipe>

      USBH_memset(Port, 0, sizeof(HUB_Port_HandleTypeDef));
 800a392:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800a396:	2100      	movs	r1, #0
 800a398:	6838      	ldr	r0, [r7, #0]
 800a39a:	f003 fd7b 	bl	800de94 <memset>
      
  return status;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBH_Next_Interface_Port>:

void USBH_Next_Interface_Port(USBH_HandleTypeDef *phost,HUB_Port_HandleTypeDef *port)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
    HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a3b8:	6a1b      	ldr	r3, [r3, #32]
 800a3ba:	60fb      	str	r3, [r7, #12]

          //CHECK IF NEXT INTERFACE NEED TO BE HANDLED
          if(port->CfgDesc.bNumInterfaces>1)
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d92e      	bls.n	800a424 <USBH_Next_Interface_Port+0x7c>
          {
             //NEXT INTERFACE
              if(HUB_Handle->current_Itf_number == 0)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3cc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d106      	bne.n	800a3e2 <USBH_Next_Interface_Port+0x3a>
              {
                HUB_Handle->current_Itf_number = 1;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
                else
                {
                  HUB_Handle->current_port_number++;
                }
          }
}
 800a3e0:	e03a      	b.n	800a458 <USBH_Next_Interface_Port+0xb0>
                HUB_Handle->current_Itf_number = 0;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
                if(HUB_Handle->current_port_number ==3)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a3f8:	2b03      	cmp	r3, #3
 800a3fa:	d106      	bne.n	800a40a <USBH_Next_Interface_Port+0x62>
                  HUB_Handle->current_port_number = 0;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a402:	2200      	movs	r2, #0
 800a404:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a408:	e026      	b.n	800a458 <USBH_Next_Interface_Port+0xb0>
                  HUB_Handle->current_port_number++;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a410:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a414:	3301      	adds	r3, #1
 800a416:	b2da      	uxtb	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a41e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a422:	e019      	b.n	800a458 <USBH_Next_Interface_Port+0xb0>
                if(HUB_Handle->current_port_number ==3)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a42a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a42e:	2b03      	cmp	r3, #3
 800a430:	d106      	bne.n	800a440 <USBH_Next_Interface_Port+0x98>
                  HUB_Handle->current_port_number = 0;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a43e:	e00b      	b.n	800a458 <USBH_Next_Interface_Port+0xb0>
                  HUB_Handle->current_port_number++;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a446:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a44a:	3301      	adds	r3, #1
 800a44c:	b2da      	uxtb	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a454:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a458:	bf00      	nop
 800a45a:	3714      	adds	r7, #20
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <USBH_HUB_GamepadInit>:
HID_gamepad_Info_TypeDef    hub_gamepad_info;

static USBH_StatusTypeDef USBH_HUB_GamepadDecode(HUB_Port_Interface_HandleTypeDef *Itf);

USBH_StatusTypeDef USBH_HUB_GamepadInit(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint8_t reportSize = 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73fb      	strb	r3, [r7, #15]
  reportSize = Itf->HIDDesc->RptDesc.report_size;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a474:	7b1b      	ldrb	r3, [r3, #12]
 800a476:	73fb      	strb	r3, [r7, #15]



  Itf->pFIFObuf = (uint8_t*) malloc (HID_QUEUE_SIZE * reportSize); 
 800a478:	7bfa      	ldrb	r2, [r7, #15]
 800a47a:	4613      	mov	r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	4413      	add	r3, r2
 800a480:	005b      	lsls	r3, r3, #1
 800a482:	4618      	mov	r0, r3
 800a484:	f003 fcf6 	bl	800de74 <malloc>
 800a488:	4603      	mov	r3, r0
 800a48a:	461a      	mov	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	665a      	str	r2, [r3, #100]	; 0x64
  hub_gamepad_report_data = Itf->pData;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	3318      	adds	r3, #24
 800a494:	4a0c      	ldr	r2, [pc, #48]	; (800a4c8 <USBH_HUB_GamepadInit+0x64>)
 800a496:	6013      	str	r3, [r2, #0]
  USBH_HID_FifoInit(&Itf->fifo, Itf->pFIFObuf, HID_QUEUE_SIZE * reportSize);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	0092      	lsls	r2, r2, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	005b      	lsls	r3, r3, #1
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	f7fe f993 	bl	80087dc <USBH_HID_FifoInit>

	Itf->DeviceType = HUB_GAMEPAD;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2203      	movs	r2, #3
 800a4ba:	705a      	strb	r2, [r3, #1]

  return USBH_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	200002ac 	.word	0x200002ac

0800a4cc <USBH_HUB_GetGamepadInfo>:


HID_gamepad_Info_TypeDef *USBH_HUB_GetGamepadInfo(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
	//refresh value of joymap and return value
	if(USBH_HUB_GamepadDecode(Itf)== USBH_OK)
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 f80d 	bl	800a4f4 <USBH_HUB_GamepadDecode>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d101      	bne.n	800a4e4 <USBH_HUB_GetGamepadInfo+0x18>
	{
		return &hub_gamepad_info;
 800a4e0:	4b03      	ldr	r3, [pc, #12]	; (800a4f0 <USBH_HUB_GetGamepadInfo+0x24>)
 800a4e2:	e000      	b.n	800a4e6 <USBH_HUB_GetGamepadInfo+0x1a>
	}
	else
	{
		return NULL;
 800a4e4:	2300      	movs	r3, #0
	}
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	200002b0 	.word	0x200002b0

0800a4f4 <USBH_HUB_GamepadDecode>:



static USBH_StatusTypeDef USBH_HUB_GamepadDecode(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4f6:	b097      	sub	sp, #92	; 0x5c
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]

	  if(Itf->length == 0U)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	88db      	ldrh	r3, [r3, #6]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d101      	bne.n	800a508 <USBH_HUB_GamepadDecode+0x14>
	  {
	    return USBH_FAIL;
 800a504:	2302      	movs	r3, #2
 800a506:	e259      	b.n	800a9bc <USBH_HUB_GamepadDecode+0x4c8>
	  }

	  if(USBH_HID_FifoRead(&Itf->fifo, hub_gamepad_report_data, Itf->length) ==  Itf->length)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800a50e:	4bcb      	ldr	r3, [pc, #812]	; (800a83c <USBH_HUB_GamepadDecode+0x348>)
 800a510:	6819      	ldr	r1, [r3, #0]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	88db      	ldrh	r3, [r3, #6]
 800a516:	461a      	mov	r2, r3
 800a518:	f7fe f97c 	bl	8008814 <USBH_HID_FifoRead>
 800a51c:	4603      	mov	r3, r0
 800a51e:	461a      	mov	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	88db      	ldrh	r3, [r3, #6]
 800a524:	429a      	cmp	r2, r3
 800a526:	f040 8248 	bne.w	800a9ba <USBH_HUB_GamepadDecode+0x4c6>
	    {


		uint8_t jmap = 0;
 800a52a:	2300      	movs	r3, #0
 800a52c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		uint8_t btn = 0;
 800a530:	2300      	movs	r3, #0
 800a532:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		uint8_t btn_extra = 0;
 800a536:	2300      	movs	r3, #0
 800a538:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		int16_t a[2];
		uint8_t i;

		hid_report_t conf = Itf->HIDDesc->RptDesc;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a540:	f103 040a 	add.w	r4, r3, #10
 800a544:	f107 0608 	add.w	r6, r7, #8
 800a548:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800a54c:	4635      	mov	r5, r6
 800a54e:	4623      	mov	r3, r4
 800a550:	6818      	ldr	r0, [r3, #0]
 800a552:	6859      	ldr	r1, [r3, #4]
 800a554:	689a      	ldr	r2, [r3, #8]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a55a:	3410      	adds	r4, #16
 800a55c:	3610      	adds	r6, #16
 800a55e:	4564      	cmp	r4, ip
 800a560:	d1f4      	bne.n	800a54c <USBH_HUB_GamepadDecode+0x58>
 800a562:	4633      	mov	r3, r6
 800a564:	4622      	mov	r2, r4
 800a566:	6810      	ldr	r0, [r2, #0]
 800a568:	6018      	str	r0, [r3, #0]
 800a56a:	8892      	ldrh	r2, [r2, #4]
 800a56c:	809a      	strh	r2, [r3, #4]

		// skip report id if present
		uint8_t *p = hub_gamepad_report_data+(conf.report_id?1:0);
 800a56e:	4bb3      	ldr	r3, [pc, #716]	; (800a83c <USBH_HUB_GamepadDecode+0x348>)
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	7a7b      	ldrb	r3, [r7, #9]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <USBH_HUB_GamepadDecode+0x88>
 800a578:	2301      	movs	r3, #1
 800a57a:	e000      	b.n	800a57e <USBH_HUB_GamepadDecode+0x8a>
 800a57c:	2300      	movs	r3, #0
 800a57e:	4413      	add	r3, r2
 800a580:	653b      	str	r3, [r7, #80]	; 0x50


		//process axis
		// two axes ...
				for(i=0;i<2;i++) {
 800a582:	2300      	movs	r3, #0
 800a584:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a588:	e038      	b.n	800a5fc <USBH_HUB_GamepadDecode+0x108>
					// if logical minimum is > logical maximum then logical minimum
					// is signed. This means that the value itself is also signed
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 800a58a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a58e:	3301      	adds	r3, #1
 800a590:	00db      	lsls	r3, r3, #3
 800a592:	3358      	adds	r3, #88	; 0x58
 800a594:	443b      	add	r3, r7
 800a596:	f833 2c4c 	ldrh.w	r2, [r3, #-76]
					conf.joystick_mouse.axis[i].logical.max;
 800a59a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a59e:	3301      	adds	r3, #1
 800a5a0:	00db      	lsls	r3, r3, #3
 800a5a2:	3358      	adds	r3, #88	; 0x58
 800a5a4:	443b      	add	r3, r7
 800a5a6:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	bf8c      	ite	hi
 800a5ae:	2301      	movhi	r3, #1
 800a5b0:	2300      	movls	r3, #0
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	647b      	str	r3, [r7, #68]	; 0x44
					a[i] = collect_bits(p, conf.joystick_mouse.axis[i].offset,
 800a5b6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	00db      	lsls	r3, r3, #3
 800a5be:	3358      	adds	r3, #88	; 0x58
 800a5c0:	443b      	add	r3, r7
 800a5c2:	f833 1c50 	ldrh.w	r1, [r3, #-80]
 800a5c6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	00db      	lsls	r3, r3, #3
 800a5ce:	3358      	adds	r3, #88	; 0x58
 800a5d0:	443b      	add	r3, r7
 800a5d2:	f813 2c4e 	ldrb.w	r2, [r3, #-78]
 800a5d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a5da:	f7fe fd8f 	bl	80090fc <collect_bits>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a5e6:	b212      	sxth	r2, r2
 800a5e8:	005b      	lsls	r3, r3, #1
 800a5ea:	3358      	adds	r3, #88	; 0x58
 800a5ec:	443b      	add	r3, r7
 800a5ee:	f823 2c18 	strh.w	r2, [r3, #-24]
				for(i=0;i<2;i++) {
 800a5f2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a5fc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a600:	2b01      	cmp	r3, #1
 800a602:	d9c2      	bls.n	800a58a <USBH_HUB_GamepadDecode+0x96>
								conf.joystick_mouse.axis[i].size, is_signed);
				}

		//process 4 first buttons
		for(i=0;i<4;i++)
 800a604:	2300      	movs	r3, #0
 800a606:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a60a:	e028      	b.n	800a65e <USBH_HUB_GamepadDecode+0x16a>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a60c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a610:	330c      	adds	r3, #12
 800a612:	005b      	lsls	r3, r3, #1
 800a614:	3358      	adds	r3, #88	; 0x58
 800a616:	443b      	add	r3, r7
 800a618:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800a61c:	461a      	mov	r2, r3
 800a61e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a620:	4413      	add	r3, r2
 800a622:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800a624:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a628:	330c      	adds	r3, #12
 800a62a:	005b      	lsls	r3, r3, #1
 800a62c:	3358      	adds	r3, #88	; 0x58
 800a62e:	443b      	add	r3, r7
 800a630:	f813 3c4f 	ldrb.w	r3, [r3, #-79]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a634:	4013      	ands	r3, r2
 800a636:	b2db      	uxtb	r3, r3
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00b      	beq.n	800a654 <USBH_HUB_GamepadDecode+0x160>
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800a63c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a640:	2201      	movs	r2, #1
 800a642:	fa02 f303 	lsl.w	r3, r2, r3
 800a646:	b25a      	sxtb	r2, r3
 800a648:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800a64c:	4313      	orrs	r3, r2
 800a64e:	b25b      	sxtb	r3, r3
 800a650:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		for(i=0;i<4;i++)
 800a654:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a658:	3301      	adds	r3, #1
 800a65a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a65e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a662:	2b03      	cmp	r3, #3
 800a664:	d9d2      	bls.n	800a60c <USBH_HUB_GamepadDecode+0x118>

		// ... and the eight extra buttons
		for(i=4;i<12;i++)
 800a666:	2304      	movs	r3, #4
 800a668:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a66c:	e029      	b.n	800a6c2 <USBH_HUB_GamepadDecode+0x1ce>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a66e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a672:	330c      	adds	r3, #12
 800a674:	005b      	lsls	r3, r3, #1
 800a676:	3358      	adds	r3, #88	; 0x58
 800a678:	443b      	add	r3, r7
 800a67a:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800a67e:	461a      	mov	r2, r3
 800a680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a682:	4413      	add	r3, r2
 800a684:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800a686:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a68a:	330c      	adds	r3, #12
 800a68c:	005b      	lsls	r3, r3, #1
 800a68e:	3358      	adds	r3, #88	; 0x58
 800a690:	443b      	add	r3, r7
 800a692:	f813 3c4f 	ldrb.w	r3, [r3, #-79]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a696:	4013      	ands	r3, r2
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00c      	beq.n	800a6b8 <USBH_HUB_GamepadDecode+0x1c4>
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800a69e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a6a2:	3b04      	subs	r3, #4
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6aa:	b25a      	sxtb	r2, r3
 800a6ac:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	b25b      	sxtb	r3, r3
 800a6b4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		for(i=4;i<12;i++)
 800a6b8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a6bc:	3301      	adds	r3, #1
 800a6be:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a6c2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a6c6:	2b0b      	cmp	r3, #11
 800a6c8:	d9d1      	bls.n	800a66e <USBH_HUB_GamepadDecode+0x17a>



	for(i=0;i<2;i++) {
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a6d0:	e132      	b.n	800a938 <USBH_HUB_GamepadDecode+0x444>

		int hrange = (conf.joystick_mouse.axis[i].logical.max - abs(conf.joystick_mouse.axis[i].logical.min)) / 2;
 800a6d2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	00db      	lsls	r3, r3, #3
 800a6da:	3358      	adds	r3, #88	; 0x58
 800a6dc:	443b      	add	r3, r7
 800a6de:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	00db      	lsls	r3, r3, #3
 800a6ec:	3358      	adds	r3, #88	; 0x58
 800a6ee:	443b      	add	r3, r7
 800a6f0:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	da00      	bge.n	800a6fc <USBH_HUB_GamepadDecode+0x208>
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	105b      	asrs	r3, r3, #1
 800a6fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		int dead = hrange/63;
 800a700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a702:	4a4f      	ldr	r2, [pc, #316]	; (800a840 <USBH_HUB_GamepadDecode+0x34c>)
 800a704:	fb82 1203 	smull	r1, r2, r2, r3
 800a708:	441a      	add	r2, r3
 800a70a:	1152      	asrs	r2, r2, #5
 800a70c:	17db      	asrs	r3, r3, #31
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	64bb      	str	r3, [r7, #72]	; 0x48

		if (a[i] < conf.joystick_mouse.axis[i].logical.min) a[i] = conf.joystick_mouse.axis[i].logical.min;
 800a712:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a716:	005b      	lsls	r3, r3, #1
 800a718:	3358      	adds	r3, #88	; 0x58
 800a71a:	443b      	add	r3, r7
 800a71c:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a720:	461a      	mov	r2, r3
 800a722:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a726:	3301      	adds	r3, #1
 800a728:	00db      	lsls	r3, r3, #3
 800a72a:	3358      	adds	r3, #88	; 0x58
 800a72c:	443b      	add	r3, r7
 800a72e:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800a732:	429a      	cmp	r2, r3
 800a734:	da10      	bge.n	800a758 <USBH_HUB_GamepadDecode+0x264>
 800a736:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a73a:	3301      	adds	r3, #1
 800a73c:	00db      	lsls	r3, r3, #3
 800a73e:	3358      	adds	r3, #88	; 0x58
 800a740:	443b      	add	r3, r7
 800a742:	f833 2c4c 	ldrh.w	r2, [r3, #-76]
 800a746:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a74a:	b212      	sxth	r2, r2
 800a74c:	005b      	lsls	r3, r3, #1
 800a74e:	3358      	adds	r3, #88	; 0x58
 800a750:	443b      	add	r3, r7
 800a752:	f823 2c18 	strh.w	r2, [r3, #-24]
 800a756:	e021      	b.n	800a79c <USBH_HUB_GamepadDecode+0x2a8>
		else if (a[i] > conf.joystick_mouse.axis[i].logical.max) a[i] = conf.joystick_mouse.axis[i].logical.max;
 800a758:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a75c:	005b      	lsls	r3, r3, #1
 800a75e:	3358      	adds	r3, #88	; 0x58
 800a760:	443b      	add	r3, r7
 800a762:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a766:	461a      	mov	r2, r3
 800a768:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a76c:	3301      	adds	r3, #1
 800a76e:	00db      	lsls	r3, r3, #3
 800a770:	3358      	adds	r3, #88	; 0x58
 800a772:	443b      	add	r3, r7
 800a774:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 800a778:	429a      	cmp	r2, r3
 800a77a:	dd0f      	ble.n	800a79c <USBH_HUB_GamepadDecode+0x2a8>
 800a77c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a780:	3301      	adds	r3, #1
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	3358      	adds	r3, #88	; 0x58
 800a786:	443b      	add	r3, r7
 800a788:	f833 2c4a 	ldrh.w	r2, [r3, #-74]
 800a78c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a790:	b212      	sxth	r2, r2
 800a792:	005b      	lsls	r3, r3, #1
 800a794:	3358      	adds	r3, #88	; 0x58
 800a796:	443b      	add	r3, r7
 800a798:	f823 2c18 	strh.w	r2, [r3, #-24]

		a[i] = a[i] - (abs(conf.joystick_mouse.axis[i].logical.min) + conf.joystick_mouse.axis[i].logical.max) / 2;
 800a79c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a7a0:	005b      	lsls	r3, r3, #1
 800a7a2:	3358      	adds	r3, #88	; 0x58
 800a7a4:	443b      	add	r3, r7
 800a7a6:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	00db      	lsls	r3, r3, #3
 800a7b4:	3358      	adds	r3, #88	; 0x58
 800a7b6:	443b      	add	r3, r7
 800a7b8:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800a7bc:	4619      	mov	r1, r3
 800a7be:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	00db      	lsls	r3, r3, #3
 800a7c6:	3358      	adds	r3, #88	; 0x58
 800a7c8:	443b      	add	r3, r7
 800a7ca:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 800a7ce:	440b      	add	r3, r1
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	da00      	bge.n	800a7d6 <USBH_HUB_GamepadDecode+0x2e2>
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	105b      	asrs	r3, r3, #1
 800a7d8:	425b      	negs	r3, r3
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	4413      	add	r3, r2
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a7e4:	b212      	sxth	r2, r2
 800a7e6:	005b      	lsls	r3, r3, #1
 800a7e8:	3358      	adds	r3, #88	; 0x58
 800a7ea:	443b      	add	r3, r7
 800a7ec:	f823 2c18 	strh.w	r2, [r3, #-24]

		hrange -= dead;
 800a7f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (a[i] < -dead) a[i] += dead;
 800a7f8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a7fc:	005b      	lsls	r3, r3, #1
 800a7fe:	3358      	adds	r3, #88	; 0x58
 800a800:	443b      	add	r3, r7
 800a802:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a806:	461a      	mov	r2, r3
 800a808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a80a:	425b      	negs	r3, r3
 800a80c:	429a      	cmp	r2, r3
 800a80e:	da19      	bge.n	800a844 <USBH_HUB_GamepadDecode+0x350>
 800a810:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	3358      	adds	r3, #88	; 0x58
 800a818:	443b      	add	r3, r7
 800a81a:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a81e:	b29a      	uxth	r2, r3
 800a820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a822:	b29b      	uxth	r3, r3
 800a824:	4413      	add	r3, r2
 800a826:	b29a      	uxth	r2, r3
 800a828:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a82c:	b212      	sxth	r2, r2
 800a82e:	005b      	lsls	r3, r3, #1
 800a830:	3358      	adds	r3, #88	; 0x58
 800a832:	443b      	add	r3, r7
 800a834:	f823 2c18 	strh.w	r2, [r3, #-24]
 800a838:	e02c      	b.n	800a894 <USBH_HUB_GamepadDecode+0x3a0>
 800a83a:	bf00      	nop
 800a83c:	200002ac 	.word	0x200002ac
 800a840:	82082083 	.word	0x82082083
		else if (a[i] > dead) a[i] -= dead;
 800a844:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a848:	005b      	lsls	r3, r3, #1
 800a84a:	3358      	adds	r3, #88	; 0x58
 800a84c:	443b      	add	r3, r7
 800a84e:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a852:	461a      	mov	r2, r3
 800a854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a856:	4293      	cmp	r3, r2
 800a858:	da14      	bge.n	800a884 <USBH_HUB_GamepadDecode+0x390>
 800a85a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a85e:	005b      	lsls	r3, r3, #1
 800a860:	3358      	adds	r3, #88	; 0x58
 800a862:	443b      	add	r3, r7
 800a864:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a868:	b29a      	uxth	r2, r3
 800a86a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	1ad3      	subs	r3, r2, r3
 800a870:	b29a      	uxth	r2, r3
 800a872:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a876:	b212      	sxth	r2, r2
 800a878:	005b      	lsls	r3, r3, #1
 800a87a:	3358      	adds	r3, #88	; 0x58
 800a87c:	443b      	add	r3, r7
 800a87e:	f823 2c18 	strh.w	r2, [r3, #-24]
 800a882:	e007      	b.n	800a894 <USBH_HUB_GamepadDecode+0x3a0>
		else a[i] = 0;
 800a884:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a888:	005b      	lsls	r3, r3, #1
 800a88a:	3358      	adds	r3, #88	; 0x58
 800a88c:	443b      	add	r3, r7
 800a88e:	2200      	movs	r2, #0
 800a890:	f823 2c18 	strh.w	r2, [r3, #-24]

		a[i] = (a[i] * 127) / hrange;
 800a894:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a898:	005b      	lsls	r3, r3, #1
 800a89a:	3358      	adds	r3, #88	; 0x58
 800a89c:	443b      	add	r3, r7
 800a89e:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	01db      	lsls	r3, r3, #7
 800a8a8:	1a9a      	subs	r2, r3, r2
 800a8aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8ac:	fb92 f2f3 	sdiv	r2, r2, r3
 800a8b0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a8b4:	b212      	sxth	r2, r2
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	3358      	adds	r3, #88	; 0x58
 800a8ba:	443b      	add	r3, r7
 800a8bc:	f823 2c18 	strh.w	r2, [r3, #-24]

		if (a[i] < -127) a[i] = -127;
 800a8c0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a8c4:	005b      	lsls	r3, r3, #1
 800a8c6:	3358      	adds	r3, #88	; 0x58
 800a8c8:	443b      	add	r3, r7
 800a8ca:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a8ce:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 800a8d2:	da09      	bge.n	800a8e8 <USBH_HUB_GamepadDecode+0x3f4>
 800a8d4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	3358      	adds	r3, #88	; 0x58
 800a8dc:	443b      	add	r3, r7
 800a8de:	f64f 7281 	movw	r2, #65409	; 0xff81
 800a8e2:	f823 2c18 	strh.w	r2, [r3, #-24]
 800a8e6:	e010      	b.n	800a90a <USBH_HUB_GamepadDecode+0x416>
		else if (a[i] > 127) a[i] = 127;
 800a8e8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a8ec:	005b      	lsls	r3, r3, #1
 800a8ee:	3358      	adds	r3, #88	; 0x58
 800a8f0:	443b      	add	r3, r7
 800a8f2:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a8f6:	2b7f      	cmp	r3, #127	; 0x7f
 800a8f8:	dd07      	ble.n	800a90a <USBH_HUB_GamepadDecode+0x416>
 800a8fa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	3358      	adds	r3, #88	; 0x58
 800a902:	443b      	add	r3, r7
 800a904:	227f      	movs	r2, #127	; 0x7f
 800a906:	f823 2c18 	strh.w	r2, [r3, #-24]

		a[i]=a[i]+127; // mist wants a value in the range [0..255]
 800a90a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a90e:	005b      	lsls	r3, r3, #1
 800a910:	3358      	adds	r3, #88	; 0x58
 800a912:	443b      	add	r3, r7
 800a914:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a918:	b29b      	uxth	r3, r3
 800a91a:	337f      	adds	r3, #127	; 0x7f
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a922:	b212      	sxth	r2, r2
 800a924:	005b      	lsls	r3, r3, #1
 800a926:	3358      	adds	r3, #88	; 0x58
 800a928:	443b      	add	r3, r7
 800a92a:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(i=0;i<2;i++) {
 800a92e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a932:	3301      	adds	r3, #1
 800a934:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a938:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	f67f aec8 	bls.w	800a6d2 <USBH_HUB_GamepadDecode+0x1de>
	}

				if(a[0] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_LEFT;
 800a942:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800a946:	2b3f      	cmp	r3, #63	; 0x3f
 800a948:	dc05      	bgt.n	800a956 <USBH_HUB_GamepadDecode+0x462>
 800a94a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a94e:	f043 0302 	orr.w	r3, r3, #2
 800a952:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(a[0] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_RIGHT;
 800a956:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800a95a:	2bc0      	cmp	r3, #192	; 0xc0
 800a95c:	dd05      	ble.n	800a96a <USBH_HUB_GamepadDecode+0x476>
 800a95e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a962:	f043 0301 	orr.w	r3, r3, #1
 800a966:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(a[1] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_UP;
 800a96a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800a96e:	2b3f      	cmp	r3, #63	; 0x3f
 800a970:	dc05      	bgt.n	800a97e <USBH_HUB_GamepadDecode+0x48a>
 800a972:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a976:	f043 0308 	orr.w	r3, r3, #8
 800a97a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(a[1] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_DOWN;
 800a97e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800a982:	2bc0      	cmp	r3, #192	; 0xc0
 800a984:	dd05      	ble.n	800a992 <USBH_HUB_GamepadDecode+0x49e>
 800a986:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a98a:	f043 0304 	orr.w	r3, r3, #4
 800a98e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				jmap |= btn << JOY_BTN_SHIFT;      // add buttons
 800a992:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800a996:	011b      	lsls	r3, r3, #4
 800a998:	b25a      	sxtb	r2, r3
 800a99a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	b25b      	sxtb	r3, r3
 800a9a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

				hub_gamepad_info.gamepad_data = jmap;
 800a9a6:	4a07      	ldr	r2, [pc, #28]	; (800a9c4 <USBH_HUB_GamepadDecode+0x4d0>)
 800a9a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9ac:	7013      	strb	r3, [r2, #0]
				hub_gamepad_info.gamepad_extraBtn = btn_extra;
 800a9ae:	4a05      	ldr	r2, [pc, #20]	; (800a9c4 <USBH_HUB_GamepadDecode+0x4d0>)
 800a9b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800a9b4:	7053      	strb	r3, [r2, #1]

		  return USBH_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	e000      	b.n	800a9bc <USBH_HUB_GamepadDecode+0x4c8>
	    }



	  return USBH_FAIL;
 800a9ba:	2302      	movs	r3, #2

}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	375c      	adds	r7, #92	; 0x5c
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9c4:	200002b0 	.word	0x200002b0

0800a9c8 <USBH_HUB_KeybdInit>:
  101,   /*max value device can report*/
  1      /*resolution*/
};

USBH_StatusTypeDef USBH_HUB_KeybdInit(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]

  uint32_t x;


    hub_keybd_info.lctrl = hub_keybd_info.lshift = 0U;
 800a9d0:	4b2a      	ldr	r3, [pc, #168]	; (800aa7c <USBH_HUB_KeybdInit+0xb4>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	709a      	strb	r2, [r3, #2]
 800a9d6:	4b29      	ldr	r3, [pc, #164]	; (800aa7c <USBH_HUB_KeybdInit+0xb4>)
 800a9d8:	789a      	ldrb	r2, [r3, #2]
 800a9da:	4b28      	ldr	r3, [pc, #160]	; (800aa7c <USBH_HUB_KeybdInit+0xb4>)
 800a9dc:	705a      	strb	r2, [r3, #1]
    hub_keybd_info.lalt = hub_keybd_info.lgui = 0U;
 800a9de:	4b27      	ldr	r3, [pc, #156]	; (800aa7c <USBH_HUB_KeybdInit+0xb4>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	711a      	strb	r2, [r3, #4]
 800a9e4:	4b25      	ldr	r3, [pc, #148]	; (800aa7c <USBH_HUB_KeybdInit+0xb4>)
 800a9e6:	791a      	ldrb	r2, [r3, #4]
 800a9e8:	4b24      	ldr	r3, [pc, #144]	; (800aa7c <USBH_HUB_KeybdInit+0xb4>)
 800a9ea:	70da      	strb	r2, [r3, #3]
    hub_keybd_info.rctrl = hub_keybd_info.rshift = 0U;
 800a9ec:	4b23      	ldr	r3, [pc, #140]	; (800aa7c <USBH_HUB_KeybdInit+0xb4>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	719a      	strb	r2, [r3, #6]
 800a9f2:	4b22      	ldr	r3, [pc, #136]	; (800aa7c <USBH_HUB_KeybdInit+0xb4>)
 800a9f4:	799a      	ldrb	r2, [r3, #6]
 800a9f6:	4b21      	ldr	r3, [pc, #132]	; (800aa7c <USBH_HUB_KeybdInit+0xb4>)
 800a9f8:	715a      	strb	r2, [r3, #5]
    hub_keybd_info.ralt = hub_keybd_info.rgui = 0U;
 800a9fa:	4b20      	ldr	r3, [pc, #128]	; (800aa7c <USBH_HUB_KeybdInit+0xb4>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	721a      	strb	r2, [r3, #8]
 800aa00:	4b1e      	ldr	r3, [pc, #120]	; (800aa7c <USBH_HUB_KeybdInit+0xb4>)
 800aa02:	7a1a      	ldrb	r2, [r3, #8]
 800aa04:	4b1d      	ldr	r3, [pc, #116]	; (800aa7c <USBH_HUB_KeybdInit+0xb4>)
 800aa06:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(hub_keybd_report_data) / sizeof(uint32_t)); x++)
 800aa08:	2300      	movs	r3, #0
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	e00c      	b.n	800aa28 <USBH_HUB_KeybdInit+0x60>
  {
    hub_keybd_report_data[x] = 0U;
 800aa0e:	4a1c      	ldr	r2, [pc, #112]	; (800aa80 <USBH_HUB_KeybdInit+0xb8>)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2100      	movs	r1, #0
 800aa14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    hub_keybd_rx_report_buf[x] = 0U;
 800aa18:	4a1a      	ldr	r2, [pc, #104]	; (800aa84 <USBH_HUB_KeybdInit+0xbc>)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(hub_keybd_report_data) / sizeof(uint32_t)); x++)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	3301      	adds	r3, #1
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d9ef      	bls.n	800aa0e <USBH_HUB_KeybdInit+0x46>
  }

  if (Itf->length > (sizeof(hub_keybd_report_data)))
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	88db      	ldrh	r3, [r3, #6]
 800aa32:	2b08      	cmp	r3, #8
 800aa34:	d902      	bls.n	800aa3c <USBH_HUB_KeybdInit+0x74>
  {
    Itf->length = (sizeof(hub_keybd_report_data));
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2208      	movs	r2, #8
 800aa3a:	80da      	strh	r2, [r3, #6]
  }
  //HUB_Handle->pData = (uint8_t *)(void *)hub_keybd_rx_report_buf;

    Itf->pFIFObuf = malloc(HID_QUEUE_SIZE * Itf->length);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	88db      	ldrh	r3, [r3, #6]
 800aa40:	461a      	mov	r2, r3
 800aa42:	4613      	mov	r3, r2
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	005b      	lsls	r3, r3, #1
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f003 fa12 	bl	800de74 <malloc>
 800aa50:	4603      	mov	r3, r0
 800aa52:	461a      	mov	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	665a      	str	r2, [r3, #100]	; 0x64
    USBH_HID_FifoInit(&Itf->fifo, Itf->pFIFObuf, HID_QUEUE_SIZE * sizeof(hub_keybd_report_data));
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa62:	2250      	movs	r2, #80	; 0x50
 800aa64:	4619      	mov	r1, r3
 800aa66:	f7fd feb9 	bl	80087dc <USBH_HID_FifoInit>
    Itf->DeviceType = HUB_KEYBOARD;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	705a      	strb	r2, [r3, #1]

  return USBH_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	200002b4 	.word	0x200002b4
 800aa80:	200002cc 	.word	0x200002cc
 800aa84:	200002c4 	.word	0x200002c4

0800aa88 <USBH_HUB_GetKeybdInfo>:


HID_KEYBD_Info_TypeDef *USBH_HUB_GetKeybdInfo(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  if (USBH_HUB_KeybdDecode(Itf) == USBH_OK)
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 f80d 	bl	800aab0 <USBH_HUB_KeybdDecode>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d101      	bne.n	800aaa0 <USBH_HUB_GetKeybdInfo+0x18>
  {
    return &hub_keybd_info;
 800aa9c:	4b03      	ldr	r3, [pc, #12]	; (800aaac <USBH_HUB_GetKeybdInfo+0x24>)
 800aa9e:	e000      	b.n	800aaa2 <USBH_HUB_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800aaa0:	2300      	movs	r3, #0
  }
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	200002b4 	.word	0x200002b4

0800aab0 <USBH_HUB_KeybdDecode>:



USBH_StatusTypeDef USBH_HUB_KeybdDecode(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  uint8_t x;


  if (Itf->length == 0U)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	88db      	ldrh	r3, [r3, #6]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d101      	bne.n	800aac4 <USBH_HUB_KeybdDecode+0x14>
  {
    return USBH_FAIL;
 800aac0:	2302      	movs	r3, #2
 800aac2:	e072      	b.n	800abaa <USBH_HUB_KeybdDecode+0xfa>
  }
  /*Fill report */

  if (USBH_HID_FifoRead(&Itf->fifo, &hub_keybd_report_data, Itf->length) ==  Itf->length)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	88db      	ldrh	r3, [r3, #6]
 800aace:	461a      	mov	r2, r3
 800aad0:	4938      	ldr	r1, [pc, #224]	; (800abb4 <USBH_HUB_KeybdDecode+0x104>)
 800aad2:	f7fd fe9f 	bl	8008814 <USBH_HID_FifoRead>
 800aad6:	4603      	mov	r3, r0
 800aad8:	461a      	mov	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	88db      	ldrh	r3, [r3, #6]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d162      	bne.n	800aba8 <USBH_HUB_KeybdDecode+0xf8>
  {
	  if (hub_keybd_report_data[0] == 0x1010000 && hub_keybd_report_data[1]==0x1010101)
 800aae2:	4b34      	ldr	r3, [pc, #208]	; (800abb4 <USBH_HUB_KeybdDecode+0x104>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a34      	ldr	r2, [pc, #208]	; (800abb8 <USBH_HUB_KeybdDecode+0x108>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d106      	bne.n	800aafa <USBH_HUB_KeybdDecode+0x4a>
 800aaec:	4b31      	ldr	r3, [pc, #196]	; (800abb4 <USBH_HUB_KeybdDecode+0x104>)
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 800aaf4:	d101      	bne.n	800aafa <USBH_HUB_KeybdDecode+0x4a>
  
	  {
		  return USBH_FAIL;
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	e057      	b.n	800abaa <USBH_HUB_KeybdDecode+0xfa>
	  }
	//  if keybd_re  5055
    hub_keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800aafa:	2100      	movs	r1, #0
 800aafc:	482f      	ldr	r0, [pc, #188]	; (800abbc <USBH_HUB_KeybdDecode+0x10c>)
 800aafe:	f7fe fd1b 	bl	8009538 <HID_ReadItem>
 800ab02:	4603      	mov	r3, r0
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	4b2e      	ldr	r3, [pc, #184]	; (800abc0 <USBH_HUB_KeybdDecode+0x110>)
 800ab08:	705a      	strb	r2, [r3, #1]
    hub_keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	482d      	ldr	r0, [pc, #180]	; (800abc4 <USBH_HUB_KeybdDecode+0x114>)
 800ab0e:	f7fe fd13 	bl	8009538 <HID_ReadItem>
 800ab12:	4603      	mov	r3, r0
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	4b2a      	ldr	r3, [pc, #168]	; (800abc0 <USBH_HUB_KeybdDecode+0x110>)
 800ab18:	709a      	strb	r2, [r3, #2]
    hub_keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	482a      	ldr	r0, [pc, #168]	; (800abc8 <USBH_HUB_KeybdDecode+0x118>)
 800ab1e:	f7fe fd0b 	bl	8009538 <HID_ReadItem>
 800ab22:	4603      	mov	r3, r0
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	4b26      	ldr	r3, [pc, #152]	; (800abc0 <USBH_HUB_KeybdDecode+0x110>)
 800ab28:	70da      	strb	r2, [r3, #3]
    hub_keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	4827      	ldr	r0, [pc, #156]	; (800abcc <USBH_HUB_KeybdDecode+0x11c>)
 800ab2e:	f7fe fd03 	bl	8009538 <HID_ReadItem>
 800ab32:	4603      	mov	r3, r0
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	4b22      	ldr	r3, [pc, #136]	; (800abc0 <USBH_HUB_KeybdDecode+0x110>)
 800ab38:	711a      	strb	r2, [r3, #4]
    hub_keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	4824      	ldr	r0, [pc, #144]	; (800abd0 <USBH_HUB_KeybdDecode+0x120>)
 800ab3e:	f7fe fcfb 	bl	8009538 <HID_ReadItem>
 800ab42:	4603      	mov	r3, r0
 800ab44:	b2da      	uxtb	r2, r3
 800ab46:	4b1e      	ldr	r3, [pc, #120]	; (800abc0 <USBH_HUB_KeybdDecode+0x110>)
 800ab48:	715a      	strb	r2, [r3, #5]
    hub_keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	4821      	ldr	r0, [pc, #132]	; (800abd4 <USBH_HUB_KeybdDecode+0x124>)
 800ab4e:	f7fe fcf3 	bl	8009538 <HID_ReadItem>
 800ab52:	4603      	mov	r3, r0
 800ab54:	b2da      	uxtb	r2, r3
 800ab56:	4b1a      	ldr	r3, [pc, #104]	; (800abc0 <USBH_HUB_KeybdDecode+0x110>)
 800ab58:	719a      	strb	r2, [r3, #6]
    hub_keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	481e      	ldr	r0, [pc, #120]	; (800abd8 <USBH_HUB_KeybdDecode+0x128>)
 800ab5e:	f7fe fceb 	bl	8009538 <HID_ReadItem>
 800ab62:	4603      	mov	r3, r0
 800ab64:	b2da      	uxtb	r2, r3
 800ab66:	4b16      	ldr	r3, [pc, #88]	; (800abc0 <USBH_HUB_KeybdDecode+0x110>)
 800ab68:	71da      	strb	r2, [r3, #7]
    hub_keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	481b      	ldr	r0, [pc, #108]	; (800abdc <USBH_HUB_KeybdDecode+0x12c>)
 800ab6e:	f7fe fce3 	bl	8009538 <HID_ReadItem>
 800ab72:	4603      	mov	r3, r0
 800ab74:	b2da      	uxtb	r2, r3
 800ab76:	4b12      	ldr	r3, [pc, #72]	; (800abc0 <USBH_HUB_KeybdDecode+0x110>)
 800ab78:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(hub_keybd_info.keys); x++)
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	73fb      	strb	r3, [r7, #15]
 800ab7e:	e00e      	b.n	800ab9e <USBH_HUB_KeybdDecode+0xee>
    {
      hub_keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
 800ab82:	4619      	mov	r1, r3
 800ab84:	4816      	ldr	r0, [pc, #88]	; (800abe0 <USBH_HUB_KeybdDecode+0x130>)
 800ab86:	f7fe fcd7 	bl	8009538 <HID_ReadItem>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
 800ab8e:	b2d1      	uxtb	r1, r2
 800ab90:	4a0b      	ldr	r2, [pc, #44]	; (800abc0 <USBH_HUB_KeybdDecode+0x110>)
 800ab92:	4413      	add	r3, r2
 800ab94:	460a      	mov	r2, r1
 800ab96:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(hub_keybd_info.keys); x++)
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	73fb      	strb	r3, [r7, #15]
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
 800aba0:	2b05      	cmp	r3, #5
 800aba2:	d9ed      	bls.n	800ab80 <USBH_HUB_KeybdDecode+0xd0>
    }

    return USBH_OK;
 800aba4:	2300      	movs	r3, #0
 800aba6:	e000      	b.n	800abaa <USBH_HUB_KeybdDecode+0xfa>
  }
  return   USBH_FAIL;
 800aba8:	2302      	movs	r3, #2
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	200002cc 	.word	0x200002cc
 800abb8:	01010000 	.word	0x01010000
 800abbc:	0800e308 	.word	0x0800e308
 800abc0:	200002b4 	.word	0x200002b4
 800abc4:	0800e328 	.word	0x0800e328
 800abc8:	0800e348 	.word	0x0800e348
 800abcc:	0800e368 	.word	0x0800e368
 800abd0:	0800e388 	.word	0x0800e388
 800abd4:	0800e3a8 	.word	0x0800e3a8
 800abd8:	0800e3c8 	.word	0x0800e3c8
 800abdc:	0800e3e8 	.word	0x0800e3e8
 800abe0:	0800e408 	.word	0x0800e408

0800abe4 <USBH_HUB_MouseInit>:
uint8_t                 hub_mouse_report_data[8];
uint32_t                hub_mouse_rx_report_buf[2];


USBH_StatusTypeDef USBH_HUB_MouseInit(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hub_mouse_info.x = 0U;
 800abec:	4b23      	ldr	r3, [pc, #140]	; (800ac7c <USBH_HUB_MouseInit+0x98>)
 800abee:	2200      	movs	r2, #0
 800abf0:	801a      	strh	r2, [r3, #0]
  hub_mouse_info.y = 0U;
 800abf2:	4b22      	ldr	r3, [pc, #136]	; (800ac7c <USBH_HUB_MouseInit+0x98>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	805a      	strh	r2, [r3, #2]
  hub_mouse_info.buttons[0] = 0U;
 800abf8:	4b20      	ldr	r3, [pc, #128]	; (800ac7c <USBH_HUB_MouseInit+0x98>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	711a      	strb	r2, [r3, #4]
  hub_mouse_info.buttons[1] = 0U;
 800abfe:	4b1f      	ldr	r3, [pc, #124]	; (800ac7c <USBH_HUB_MouseInit+0x98>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	715a      	strb	r2, [r3, #5]
  hub_mouse_info.buttons[2] = 0U;
 800ac04:	4b1d      	ldr	r3, [pc, #116]	; (800ac7c <USBH_HUB_MouseInit+0x98>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	719a      	strb	r2, [r3, #6]

  for (i = 0U; i < (sizeof(hub_mouse_report_data) / sizeof(uint32_t)); i++)
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	60fb      	str	r3, [r7, #12]
 800ac0e:	e00c      	b.n	800ac2a <USBH_HUB_MouseInit+0x46>
  {
    hub_mouse_report_data[i] = 0U;
 800ac10:	4a1b      	ldr	r2, [pc, #108]	; (800ac80 <USBH_HUB_MouseInit+0x9c>)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	4413      	add	r3, r2
 800ac16:	2200      	movs	r2, #0
 800ac18:	701a      	strb	r2, [r3, #0]
    hub_mouse_rx_report_buf[i] = 0U;
 800ac1a:	4a1a      	ldr	r2, [pc, #104]	; (800ac84 <USBH_HUB_MouseInit+0xa0>)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2100      	movs	r1, #0
 800ac20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(hub_mouse_report_data) / sizeof(uint32_t)); i++)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3301      	adds	r3, #1
 800ac28:	60fb      	str	r3, [r7, #12]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d9ef      	bls.n	800ac10 <USBH_HUB_MouseInit+0x2c>
  }

 
  Itf->pFIFObuf = malloc(HID_QUEUE_SIZE * Itf->length);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	88db      	ldrh	r3, [r3, #6]
 800ac34:	461a      	mov	r2, r3
 800ac36:	4613      	mov	r3, r2
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4413      	add	r3, r2
 800ac3c:	005b      	lsls	r3, r3, #1
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f003 f918 	bl	800de74 <malloc>
 800ac44:	4603      	mov	r3, r0
 800ac46:	461a      	mov	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	665a      	str	r2, [r3, #100]	; 0x64
  USBH_HID_FifoInit(&Itf->fifo, Itf->pFIFObuf, HID_QUEUE_SIZE * Itf->length);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	88db      	ldrh	r3, [r3, #6]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	0092      	lsls	r2, r2, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	461a      	mov	r2, r3
 800ac66:	f7fd fdb9 	bl	80087dc <USBH_HID_FifoInit>
  Itf->DeviceType = HUB_MOUSE;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2202      	movs	r2, #2
 800ac6e:	705a      	strb	r2, [r3, #1]

  return USBH_OK;
 800ac70:	2300      	movs	r3, #0
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	200002d4 	.word	0x200002d4
 800ac80:	200002dc 	.word	0x200002dc
 800ac84:	200002e4 	.word	0x200002e4

0800ac88 <USBH_HUB_GetMouseInfo>:


HID_MOUSE_Info_TypeDef *USBH_HUB_GetMouseInfo(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  if (USBH_HUB_MouseDecode(Itf) == USBH_OK)
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f80d 	bl	800acb0 <USBH_HUB_MouseDecode>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d101      	bne.n	800aca0 <USBH_HUB_GetMouseInfo+0x18>
  {
    return &hub_mouse_info;
 800ac9c:	4b03      	ldr	r3, [pc, #12]	; (800acac <USBH_HUB_GetMouseInfo+0x24>)
 800ac9e:	e000      	b.n	800aca2 <USBH_HUB_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 800aca0:	2300      	movs	r3, #0
  }
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	200002d4 	.word	0x200002d4

0800acb0 <USBH_HUB_MouseDecode>:


USBH_StatusTypeDef USBH_HUB_MouseDecode(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]

  if (Itf->length == 0U)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	88db      	ldrh	r3, [r3, #6]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d101      	bne.n	800acc4 <USBH_HUB_MouseDecode+0x14>
  {
    return USBH_FAIL;
 800acc0:	2302      	movs	r3, #2
 800acc2:	e0fe      	b.n	800aec2 <USBH_HUB_MouseDecode+0x212>
  }

  //Clear mouse_report_data

  memset(&hub_mouse_report_data,0,sizeof(hub_mouse_report_data));
 800acc4:	2208      	movs	r2, #8
 800acc6:	2100      	movs	r1, #0
 800acc8:	4880      	ldr	r0, [pc, #512]	; (800aecc <USBH_HUB_MouseDecode+0x21c>)
 800acca:	f003 f8e3 	bl	800de94 <memset>


  /*Fill report */
  if (USBH_HID_FifoRead(&Itf->fifo, &hub_mouse_report_data, Itf->length) !=0)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	88db      	ldrh	r3, [r3, #6]
 800acd8:	461a      	mov	r2, r3
 800acda:	497c      	ldr	r1, [pc, #496]	; (800aecc <USBH_HUB_MouseDecode+0x21c>)
 800acdc:	f7fd fd9a 	bl	8008814 <USBH_HID_FifoRead>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f000 80ec 	beq.w	800aec0 <USBH_HUB_MouseDecode+0x210>
  {

	  uint8_t btn = 0;
 800ace8:	2300      	movs	r3, #0
 800acea:	75fb      	strb	r3, [r7, #23]
	  uint8_t btn_extra = 0;
 800acec:	2300      	movs	r3, #0
 800acee:	75bb      	strb	r3, [r7, #22]
	  uint8_t i;



	  // skip report id if present
	  uint8_t *p = hub_mouse_report_data + (Itf->HIDDesc->RptDesc.report_id?1:0);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acf4:	7adb      	ldrb	r3, [r3, #11]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <USBH_HUB_MouseDecode+0x4e>
 800acfa:	4b75      	ldr	r3, [pc, #468]	; (800aed0 <USBH_HUB_MouseDecode+0x220>)
 800acfc:	e000      	b.n	800ad00 <USBH_HUB_MouseDecode+0x50>
 800acfe:	4b73      	ldr	r3, [pc, #460]	; (800aecc <USBH_HUB_MouseDecode+0x21c>)
 800ad00:	613b      	str	r3, [r7, #16]


	  //process axis
	  // two axes ...
	  		for(i=0;i<2;i++) {
 800ad02:	2300      	movs	r3, #0
 800ad04:	757b      	strb	r3, [r7, #21]
 800ad06:	e031      	b.n	800ad6c <USBH_HUB_MouseDecode+0xbc>
	  			// if logical minimum is > logical maximum then logical minimum
	  			// is signed. This means that the value itself is also signed
	  			int is_signed = Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].logical.min >
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ad0c:	7d7b      	ldrb	r3, [r7, #21]
 800ad0e:	3302      	adds	r3, #2
 800ad10:	00db      	lsls	r3, r3, #3
 800ad12:	4413      	add	r3, r2
 800ad14:	88da      	ldrh	r2, [r3, #6]
	  				Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].logical.max;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800ad1a:	7d7b      	ldrb	r3, [r7, #21]
 800ad1c:	3302      	adds	r3, #2
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	440b      	add	r3, r1
 800ad22:	891b      	ldrh	r3, [r3, #8]
	  			int is_signed = Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].logical.min >
 800ad24:	429a      	cmp	r2, r3
 800ad26:	bf8c      	ite	hi
 800ad28:	2301      	movhi	r3, #1
 800ad2a:	2300      	movls	r3, #0
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	60fb      	str	r3, [r7, #12]
	  			a[i] = collect_bits(p, Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].offset,
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ad34:	7d7b      	ldrb	r3, [r7, #21]
 800ad36:	3302      	adds	r3, #2
 800ad38:	00db      	lsls	r3, r3, #3
 800ad3a:	4413      	add	r3, r2
 800ad3c:	8859      	ldrh	r1, [r3, #2]
	  					Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].size, is_signed);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	  			a[i] = collect_bits(p, Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].offset,
 800ad42:	7d7b      	ldrb	r3, [r7, #21]
 800ad44:	3302      	adds	r3, #2
 800ad46:	00db      	lsls	r3, r3, #3
 800ad48:	4413      	add	r3, r2
 800ad4a:	791a      	ldrb	r2, [r3, #4]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6938      	ldr	r0, [r7, #16]
 800ad50:	f7fe f9d4 	bl	80090fc <collect_bits>
 800ad54:	4603      	mov	r3, r0
 800ad56:	461a      	mov	r2, r3
 800ad58:	7d7b      	ldrb	r3, [r7, #21]
 800ad5a:	b212      	sxth	r2, r2
 800ad5c:	005b      	lsls	r3, r3, #1
 800ad5e:	3318      	adds	r3, #24
 800ad60:	443b      	add	r3, r7
 800ad62:	f823 2c10 	strh.w	r2, [r3, #-16]
	  		for(i=0;i<2;i++) {
 800ad66:	7d7b      	ldrb	r3, [r7, #21]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	757b      	strb	r3, [r7, #21]
 800ad6c:	7d7b      	ldrb	r3, [r7, #21]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d9ca      	bls.n	800ad08 <USBH_HUB_MouseDecode+0x58>
	  		}

	  //process 4 first buttons
	  for(i=0;i<4;i++)
 800ad72:	2300      	movs	r3, #0
 800ad74:	757b      	strb	r3, [r7, #21]
 800ad76:	e022      	b.n	800adbe <USBH_HUB_MouseDecode+0x10e>
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ad7c:	7d7b      	ldrb	r3, [r7, #21]
 800ad7e:	3310      	adds	r3, #16
 800ad80:	005b      	lsls	r3, r3, #1
 800ad82:	4413      	add	r3, r2
 800ad84:	789b      	ldrb	r3, [r3, #2]
 800ad86:	461a      	mov	r2, r3
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	781a      	ldrb	r2, [r3, #0]
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800ad92:	7d7b      	ldrb	r3, [r7, #21]
 800ad94:	3310      	adds	r3, #16
 800ad96:	005b      	lsls	r3, r3, #1
 800ad98:	440b      	add	r3, r1
 800ad9a:	78db      	ldrb	r3, [r3, #3]
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d009      	beq.n	800adb8 <USBH_HUB_MouseDecode+0x108>
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800ada4:	7d7b      	ldrb	r3, [r7, #21]
 800ada6:	2201      	movs	r2, #1
 800ada8:	fa02 f303 	lsl.w	r3, r2, r3
 800adac:	b25a      	sxtb	r2, r3
 800adae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	b25b      	sxtb	r3, r3
 800adb6:	75fb      	strb	r3, [r7, #23]
	  for(i=0;i<4;i++)
 800adb8:	7d7b      	ldrb	r3, [r7, #21]
 800adba:	3301      	adds	r3, #1
 800adbc:	757b      	strb	r3, [r7, #21]
 800adbe:	7d7b      	ldrb	r3, [r7, #21]
 800adc0:	2b03      	cmp	r3, #3
 800adc2:	d9d9      	bls.n	800ad78 <USBH_HUB_MouseDecode+0xc8>

	  // ... and the eight extra buttons
	  for(i=4;i<12;i++)
 800adc4:	2304      	movs	r3, #4
 800adc6:	757b      	strb	r3, [r7, #21]
 800adc8:	e023      	b.n	800ae12 <USBH_HUB_MouseDecode+0x162>
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800adce:	7d7b      	ldrb	r3, [r7, #21]
 800add0:	3310      	adds	r3, #16
 800add2:	005b      	lsls	r3, r3, #1
 800add4:	4413      	add	r3, r2
 800add6:	789b      	ldrb	r3, [r3, #2]
 800add8:	461a      	mov	r2, r3
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	4413      	add	r3, r2
 800adde:	781a      	ldrb	r2, [r3, #0]
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800ade4:	7d7b      	ldrb	r3, [r7, #21]
 800ade6:	3310      	adds	r3, #16
 800ade8:	005b      	lsls	r3, r3, #1
 800adea:	440b      	add	r3, r1
 800adec:	78db      	ldrb	r3, [r3, #3]
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800adee:	4013      	ands	r3, r2
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00a      	beq.n	800ae0c <USBH_HUB_MouseDecode+0x15c>
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800adf6:	7d7b      	ldrb	r3, [r7, #21]
 800adf8:	3b04      	subs	r3, #4
 800adfa:	2201      	movs	r2, #1
 800adfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ae00:	b25a      	sxtb	r2, r3
 800ae02:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	b25b      	sxtb	r3, r3
 800ae0a:	75bb      	strb	r3, [r7, #22]
	  for(i=4;i<12;i++)
 800ae0c:	7d7b      	ldrb	r3, [r7, #21]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	757b      	strb	r3, [r7, #21]
 800ae12:	7d7b      	ldrb	r3, [r7, #21]
 800ae14:	2b0b      	cmp	r3, #11
 800ae16:	d9d8      	bls.n	800adca <USBH_HUB_MouseDecode+0x11a>

	  //process mouse
	  if(Itf->HIDDesc->RptDesc.type == REPORT_TYPE_MOUSE) {
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae1c:	7a9b      	ldrb	r3, [r3, #10]
 800ae1e:	f003 0303 	and.w	r3, r3, #3
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d149      	bne.n	800aebc <USBH_HUB_MouseDecode+0x20c>
	  		// iprintf("mouse %d %d %x\n", (int16_t)a[0], (int16_t)a[1], btn);
	  		// limit mouse movement to +/- 128
	  		for(i=0;i<2;i++) {
 800ae28:	2300      	movs	r3, #0
 800ae2a:	757b      	strb	r3, [r7, #21]
 800ae2c:	e022      	b.n	800ae74 <USBH_HUB_MouseDecode+0x1c4>
	  		if((int16_t)a[i] >  127) a[i] =  127;
 800ae2e:	7d7b      	ldrb	r3, [r7, #21]
 800ae30:	005b      	lsls	r3, r3, #1
 800ae32:	3318      	adds	r3, #24
 800ae34:	443b      	add	r3, r7
 800ae36:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800ae3a:	2b7f      	cmp	r3, #127	; 0x7f
 800ae3c:	dd06      	ble.n	800ae4c <USBH_HUB_MouseDecode+0x19c>
 800ae3e:	7d7b      	ldrb	r3, [r7, #21]
 800ae40:	005b      	lsls	r3, r3, #1
 800ae42:	3318      	adds	r3, #24
 800ae44:	443b      	add	r3, r7
 800ae46:	227f      	movs	r2, #127	; 0x7f
 800ae48:	f823 2c10 	strh.w	r2, [r3, #-16]
	  		if((int16_t)a[i] < -128) a[i] = -128;
 800ae4c:	7d7b      	ldrb	r3, [r7, #21]
 800ae4e:	005b      	lsls	r3, r3, #1
 800ae50:	3318      	adds	r3, #24
 800ae52:	443b      	add	r3, r7
 800ae54:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800ae58:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800ae5c:	da07      	bge.n	800ae6e <USBH_HUB_MouseDecode+0x1be>
 800ae5e:	7d7b      	ldrb	r3, [r7, #21]
 800ae60:	005b      	lsls	r3, r3, #1
 800ae62:	3318      	adds	r3, #24
 800ae64:	443b      	add	r3, r7
 800ae66:	f64f 7280 	movw	r2, #65408	; 0xff80
 800ae6a:	f823 2c10 	strh.w	r2, [r3, #-16]
	  		for(i=0;i<2;i++) {
 800ae6e:	7d7b      	ldrb	r3, [r7, #21]
 800ae70:	3301      	adds	r3, #1
 800ae72:	757b      	strb	r3, [r7, #21]
 800ae74:	7d7b      	ldrb	r3, [r7, #21]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d9d9      	bls.n	800ae2e <USBH_HUB_MouseDecode+0x17e>
	  		}
	  		//btn
	  	  hub_mouse_info.x = a[0];
 800ae7a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ae7e:	4b15      	ldr	r3, [pc, #84]	; (800aed4 <USBH_HUB_MouseDecode+0x224>)
 800ae80:	801a      	strh	r2, [r3, #0]
	  	  hub_mouse_info.y = a[1];
 800ae82:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800ae86:	4b13      	ldr	r3, [pc, #76]	; (800aed4 <USBH_HUB_MouseDecode+0x224>)
 800ae88:	805a      	strh	r2, [r3, #2]
	  	  hub_mouse_info.buttons[0] = btn&0x1;
 800ae8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae8e:	f003 0301 	and.w	r3, r3, #1
 800ae92:	b25a      	sxtb	r2, r3
 800ae94:	4b0f      	ldr	r3, [pc, #60]	; (800aed4 <USBH_HUB_MouseDecode+0x224>)
 800ae96:	711a      	strb	r2, [r3, #4]
	  	  hub_mouse_info.buttons[1] = (btn>>1)&0x1;
 800ae98:	7dfb      	ldrb	r3, [r7, #23]
 800ae9a:	085b      	lsrs	r3, r3, #1
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	b25b      	sxtb	r3, r3
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	b25a      	sxtb	r2, r3
 800aea6:	4b0b      	ldr	r3, [pc, #44]	; (800aed4 <USBH_HUB_MouseDecode+0x224>)
 800aea8:	715a      	strb	r2, [r3, #5]
	  	  hub_mouse_info.buttons[2] = (btn>>2)&0x1;
 800aeaa:	7dfb      	ldrb	r3, [r7, #23]
 800aeac:	089b      	lsrs	r3, r3, #2
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	b25b      	sxtb	r3, r3
 800aeb2:	f003 0301 	and.w	r3, r3, #1
 800aeb6:	b25a      	sxtb	r2, r3
 800aeb8:	4b06      	ldr	r3, [pc, #24]	; (800aed4 <USBH_HUB_MouseDecode+0x224>)
 800aeba:	719a      	strb	r2, [r3, #6]
	  	}
    return USBH_OK;
 800aebc:	2300      	movs	r3, #0
 800aebe:	e000      	b.n	800aec2 <USBH_HUB_MouseDecode+0x212>
  }
  return   USBH_FAIL;
 800aec0:	2302      	movs	r3, #2
 800aec2:	4618      	mov	r0, r3
 800aec4:	3718      	adds	r7, #24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	200002dc 	.word	0x200002dc
 800aed0:	200002dd 	.word	0x200002dd
 800aed4:	200002d4 	.word	0x200002d4

0800aed8 <USBH_HUB_GetDescriptor>:
#include "usbh_hubctrl.h"



USBH_StatusTypeDef USBH_HUB_GetDescriptor(USBH_HandleTypeDef *phost)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  uint16_t lenght = sizeof(HUB_DescTypeDef);
 800aee0:	230a      	movs	r3, #10
 800aee2:	81fb      	strh	r3, [r7, #14]

  if (phost->RequestState == CMD_SEND)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	789b      	ldrb	r3, [r3, #2]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d111      	bne.n	800af10 <USBH_HUB_GetDescriptor+0x38>
  {
    phost->Control.setup.b.bmRequestType = 0b10100000;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	22a0      	movs	r2, #160	; 0xa0
 800aef0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;		
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2206      	movs	r2, #6
 800aef6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.bw.msb = 0;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	749a      	strb	r2, [r3, #18]
	  phost->Control.setup.b.wValue.bw.lsb = 0x29;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2229      	movs	r2, #41	; 0x29
 800af02:	74da      	strb	r2, [r3, #19]
    phost->Control.setup.b.wIndex.w = 0;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = lenght;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	89fa      	ldrh	r2, [r7, #14]
 800af0e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, phost->device.Data, lenght) ;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af16:	89fa      	ldrh	r2, [r7, #14]
 800af18:	4619      	mov	r1, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f002 f89b 	bl	800d056 <USBH_CtlReq>
 800af20:	4603      	mov	r3, r0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <USBH_HUB_GetPortStatus>:
  USBH_HUB_ParseHUBStatus(HUB_Handle,phost->device.Data);
}


USBH_StatusTypeDef USBH_HUB_GetPortStatus(USBH_HandleTypeDef *phost, uint8_t PortNum)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b086      	sub	sp, #24
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	460b      	mov	r3, r1
 800af34:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800af3c:	6a1b      	ldr	r3, [r3, #32]
 800af3e:	617b      	str	r3, [r7, #20]

  
	phost->Control.setup.b.bmRequestType = 0b10100011;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	22a3      	movs	r2, #163	; 0xa3
 800af44:	741a      	strb	r2, [r3, #16]
	phost->Control.setup.b.bRequest  	 = USB_REQUEST_GET_STATUS;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.bw.msb = HUB_FEAT_SEL_PORT_CONN;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	749a      	strb	r2, [r3, #18]
	phost->Control.setup.b.wValue.bw.lsb = 0;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	74da      	strb	r2, [r3, #19]
	phost->Control.setup.b.wIndex.bw.msb = PortNum;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	78fa      	ldrb	r2, [r7, #3]
 800af5c:	751a      	strb	r2, [r3, #20]
  phost->Control.setup.b.wIndex.bw.lsb = 0;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	755a      	strb	r2, [r3, #21]
	phost->Control.setup.b.wLength.w     =  4;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2204      	movs	r2, #4
 800af68:	82da      	strh	r2, [r3, #22]
  
	
  if ((status = USBH_CtlReq(phost, HUB_Handle->buff, 4)) == USBH_OK)
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	3328      	adds	r3, #40	; 0x28
 800af6e:	2204      	movs	r2, #4
 800af70:	4619      	mov	r1, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f002 f86f 	bl	800d056 <USBH_CtlReq>
 800af78:	4603      	mov	r3, r0
 800af7a:	74fb      	strb	r3, [r7, #19]
 800af7c:	7cfb      	ldrb	r3, [r7, #19]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d174      	bne.n	800b06c <USBH_HUB_GetPortStatus+0x142>
  {
     USB_HUB_PORT_STATUS old_status = HUB_Handle->Port[PortNum-1].PortStatus;
 800af82:	78fb      	ldrb	r3, [r7, #3]
 800af84:	3b01      	subs	r3, #1
 800af86:	697a      	ldr	r2, [r7, #20]
 800af88:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800af8c:	fb01 f303 	mul.w	r3, r1, r3
 800af90:	4413      	add	r3, r2
 800af92:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	60fb      	str	r3, [r7, #12]
    USBH_HUB_ParsePortStatus(HUB_Handle,HUB_Handle->buff,&HUB_Handle->Port[PortNum-1]);
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800afa0:	78fb      	ldrb	r3, [r7, #3]
 800afa2:	3b01      	subs	r3, #1
 800afa4:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800afa8:	fb02 f303 	mul.w	r3, r2, r3
 800afac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	4413      	add	r3, r2
 800afb4:	461a      	mov	r2, r3
 800afb6:	6978      	ldr	r0, [r7, #20]
 800afb8:	f000 f9af 	bl	800b31a <USBH_HUB_ParsePortStatus>

    if (HUB_Handle->Port[PortNum-1].PortStatus.wPortStatus.val != old_status.wPortStatus.val)
 800afbc:	78fb      	ldrb	r3, [r7, #3]
 800afbe:	3b01      	subs	r3, #1
 800afc0:	697a      	ldr	r2, [r7, #20]
 800afc2:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800afc6:	fb01 f303 	mul.w	r3, r1, r3
 800afca:	4413      	add	r3, r2
 800afcc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800afd0:	881a      	ldrh	r2, [r3, #0]
 800afd2:	89bb      	ldrh	r3, [r7, #12]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d049      	beq.n	800b06c <USBH_HUB_GetPortStatus+0x142>
    {
      HUB_Handle->PortStatusChangeFlag = 1;
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if ((old_status.wPortStatus.PORT_CONNECTION == 1) && (HUB_Handle->Port[PortNum-1].PortStatus.wPortStatus.PORT_CONNECTION == 0))
 800afe4:	7b3b      	ldrb	r3, [r7, #12]
 800afe6:	f003 0301 	and.w	r3, r3, #1
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b00      	cmp	r3, #0
 800afee:	d01b      	beq.n	800b028 <USBH_HUB_GetPortStatus+0xfe>
 800aff0:	78fb      	ldrb	r3, [r7, #3]
 800aff2:	3b01      	subs	r3, #1
 800aff4:	697a      	ldr	r2, [r7, #20]
 800aff6:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800affa:	fb01 f303 	mul.w	r3, r1, r3
 800affe:	4413      	add	r3, r2
 800b000:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10b      	bne.n	800b028 <USBH_HUB_GetPortStatus+0xfe>
      {
        HUB_Handle->Port[PortNum-1].Disconnected = 1;
 800b010:	78fb      	ldrb	r3, [r7, #3]
 800b012:	3b01      	subs	r3, #1
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800b01a:	fb01 f303 	mul.w	r3, r1, r3
 800b01e:	4413      	add	r3, r2
 800b020:	f203 132d 	addw	r3, r3, #301	; 0x12d
 800b024:	2201      	movs	r2, #1
 800b026:	701a      	strb	r2, [r3, #0]
      }

      if ((old_status.wPortStatus.PORT_CONNECTION == 0) && (HUB_Handle->Port[PortNum-1].PortStatus.wPortStatus.PORT_CONNECTION == 1))
 800b028:	7b3b      	ldrb	r3, [r7, #12]
 800b02a:	f003 0301 	and.w	r3, r3, #1
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	2b00      	cmp	r3, #0
 800b032:	d11b      	bne.n	800b06c <USBH_HUB_GetPortStatus+0x142>
 800b034:	78fb      	ldrb	r3, [r7, #3]
 800b036:	3b01      	subs	r3, #1
 800b038:	697a      	ldr	r2, [r7, #20]
 800b03a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800b03e:	fb01 f303 	mul.w	r3, r1, r3
 800b042:	4413      	add	r3, r2
 800b044:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	2b01      	cmp	r3, #1
 800b052:	d10b      	bne.n	800b06c <USBH_HUB_GetPortStatus+0x142>
      {
        HUB_Handle->Port[PortNum-1].Connected = 1;
 800b054:	78fb      	ldrb	r3, [r7, #3]
 800b056:	3b01      	subs	r3, #1
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800b05e:	fb01 f303 	mul.w	r3, r1, r3
 800b062:	4413      	add	r3, r2
 800b064:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800b068:	2201      	movs	r2, #1
 800b06a:	701a      	strb	r2, [r3, #0]


    }
  }

  return status;
 800b06c:	7cfb      	ldrb	r3, [r7, #19]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3718      	adds	r7, #24
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <USBH_HUB_SetPortFeature>:



USBH_StatusTypeDef USBH_HUB_SetPortFeature(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t PortNum)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b082      	sub	sp, #8
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	460b      	mov	r3, r1
 800b080:	70fb      	strb	r3, [r7, #3]
 800b082:	4613      	mov	r3, r2
 800b084:	70bb      	strb	r3, [r7, #2]

  if (phost->RequestState == CMD_SEND)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	789b      	ldrb	r3, [r3, #2]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d114      	bne.n	800b0b8 <USBH_HUB_SetPortFeature+0x42>
  {
    phost->Control.setup.b.bmRequestType = 0b00100011; 
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2223      	movs	r2, #35	; 0x23
 800b092:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQUEST_SET_FEATURE;		
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2203      	movs	r2, #3
 800b098:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.bw.msb = feature;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	78fa      	ldrb	r2, [r7, #3]
 800b09e:	749a      	strb	r2, [r3, #18]
	  phost->Control.setup.b.wValue.bw.lsb = 0x0;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	74da      	strb	r2, [r3, #19]
    phost->Control.setup.b.wIndex.bw.msb = PortNum;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	78ba      	ldrb	r2, [r7, #2]
 800b0aa:	751a      	strb	r2, [r3, #20]
    phost->Control.setup.b.wIndex.bw.lsb = 0x0;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	755a      	strb	r2, [r3, #21]
    phost->Control.setup.b.wLength.w = 0;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	82da      	strh	r2, [r3, #22]
  }    

   return USBH_CtlReq(phost, 0, 0);
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f001 ffca 	bl	800d056 <USBH_CtlReq>
 800b0c2:	4603      	mov	r3, r0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3708      	adds	r7, #8
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <USBH_HUB_Get_DevDesc>:
   return USBH_CtlReq(phost, 0, 0);
}


USBH_StatusTypeDef USBH_HUB_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length,HUB_Port_HandleTypeDef *Port)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b088      	sub	sp, #32
 800b0d0:	af02      	add	r7, sp, #8
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	607a      	str	r2, [r7, #4]
 800b0d8:	72fb      	strb	r3, [r7, #11]
      USBH_StatusTypeDef status;

   status = USBH_GetDescriptor(phost,USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,USB_DESC_DEVICE, 0U,Port->buff, (uint16_t)length);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b0e0:	7afa      	ldrb	r2, [r7, #11]
 800b0e2:	b292      	uxth	r2, r2
 800b0e4:	9201      	str	r2, [sp, #4]
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f001 fd2b 	bl	800cb4c <USBH_GetDescriptor>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	75fb      	strb	r3, [r7, #23]
  if (status == USBH_OK)                                  
 800b0fa:	7dfb      	ldrb	r3, [r7, #23]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10a      	bne.n	800b116 <USBH_HUB_Get_DevDesc+0x4a>
 { 
    /* Commands successfully sent and Response Received */
    USBH_HUB_ParseDevDesc(&Port->DevDesc, Port->buff, (uint16_t)length);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f103 0014 	add.w	r0, r3, #20
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b10c:	7afa      	ldrb	r2, [r7, #11]
 800b10e:	b292      	uxth	r2, r2
 800b110:	4619      	mov	r1, r3
 800b112:	f000 f85d 	bl	800b1d0 <USBH_HUB_ParseDevDesc>
 }


 return status;
 800b116:	7dfb      	ldrb	r3, [r7, #23]

}
 800b118:	4618      	mov	r0, r3
 800b11a:	3718      	adds	r7, #24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBH_HUB_Get_CfgDesc>:


USBH_StatusTypeDef USBH_HUB_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length, HUB_Port_HandleTypeDef *Port)

{
 800b120:	b580      	push	{r7, lr}
 800b122:	b088      	sub	sp, #32
 800b124:	af02      	add	r7, sp, #8
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	460b      	mov	r3, r1
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	817b      	strh	r3, [r7, #10]
  USBH_StatusTypeDef status;
        HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b134:	6a1b      	ldr	r3, [r3, #32]
 800b136:	617b      	str	r3, [r7, #20]


  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
                                   USB_DESC_CONFIGURATION,0U,HUB_Handle->buff, length)) == USBH_OK)
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	3328      	adds	r3, #40	; 0x28
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b13c:	897a      	ldrh	r2, [r7, #10]
 800b13e:	9201      	str	r2, [sp, #4]
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	2300      	movs	r3, #0
 800b144:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b148:	2100      	movs	r1, #0
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f001 fcfe 	bl	800cb4c <USBH_GetDescriptor>
 800b150:	4603      	mov	r3, r0
 800b152:	74fb      	strb	r3, [r7, #19]
 800b154:	7cfb      	ldrb	r3, [r7, #19]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d108      	bne.n	800b16c <USBH_HUB_Get_CfgDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&Port->CfgDesc, HUB_Handle->buff, length);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	3328      	adds	r3, #40	; 0x28
 800b164:	897a      	ldrh	r2, [r7, #10]
 800b166:	4619      	mov	r1, r3
 800b168:	f001 fe29 	bl	800cdbe <USBH_ParseCfgDesc>
  }

  return status;
 800b16c:	7cfb      	ldrb	r3, [r7, #19]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3718      	adds	r7, #24
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <USBH_HUB_Get_StringDesc>:


USBH_StatusTypeDef USBH_HUB_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length, HUB_Port_HandleTypeDef *Port)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b088      	sub	sp, #32
 800b17a:	af02      	add	r7, sp, #8
 800b17c:	60f8      	str	r0, [r7, #12]
 800b17e:	607a      	str	r2, [r7, #4]
 800b180:	461a      	mov	r2, r3
 800b182:	460b      	mov	r3, r1
 800b184:	72fb      	strb	r3, [r7, #11]
 800b186:	4613      	mov	r3, r2
 800b188:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b18a:	7afb      	ldrb	r3, [r7, #11]
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b192:	b299      	uxth	r1, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,0U,
                                   Port->buff, length)) == USBH_OK)
 800b194:	6a3b      	ldr	r3, [r7, #32]
 800b196:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
  if ((status = USBH_GetDescriptor(phost,
 800b19a:	893a      	ldrh	r2, [r7, #8]
 800b19c:	9201      	str	r2, [sp, #4]
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	460a      	mov	r2, r1
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f001 fcd0 	bl	800cb4c <USBH_GetDescriptor>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	75fb      	strb	r3, [r7, #23]
 800b1b0:	7dfb      	ldrb	r3, [r7, #23]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d107      	bne.n	800b1c6 <USBH_HUB_Get_StringDesc+0x50>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(Port->buff, buff, length);
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b1bc:	893a      	ldrh	r2, [r7, #8]
 800b1be:	6879      	ldr	r1, [r7, #4]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f001 fefa 	bl	800cfba <USBH_ParseStringDesc>
  }

  return status;
 800b1c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3718      	adds	r7, #24
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <USBH_HUB_ParseDevDesc>:



void  USBH_HUB_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	781a      	ldrb	r2, [r3, #0]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	785a      	ldrb	r2, [r3, #1]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	3302      	adds	r3, #2
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	3303      	adds	r3, #3
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	021b      	lsls	r3, r3, #8
 800b200:	b29b      	uxth	r3, r3
 800b202:	4313      	orrs	r3, r2
 800b204:	b29a      	uxth	r2, r3
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	791a      	ldrb	r2, [r3, #4]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	795a      	ldrb	r2, [r3, #5]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	799a      	ldrb	r2, [r3, #6]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	79da      	ldrb	r2, [r3, #7]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b22a:	88fb      	ldrh	r3, [r7, #6]
 800b22c:	2b08      	cmp	r3, #8
 800b22e:	d939      	bls.n	800b2a4 <USBH_HUB_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	3308      	adds	r3, #8
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	b29a      	uxth	r2, r3
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	3309      	adds	r3, #9
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	b29b      	uxth	r3, r3
 800b240:	021b      	lsls	r3, r3, #8
 800b242:	b29b      	uxth	r3, r3
 800b244:	4313      	orrs	r3, r2
 800b246:	b29a      	uxth	r2, r3
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	330a      	adds	r3, #10
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	b29a      	uxth	r2, r3
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	330b      	adds	r3, #11
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	021b      	lsls	r3, r3, #8
 800b25e:	b29b      	uxth	r3, r3
 800b260:	4313      	orrs	r3, r2
 800b262:	b29a      	uxth	r2, r3
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	330c      	adds	r3, #12
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	b29a      	uxth	r2, r3
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	330d      	adds	r3, #13
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	b29b      	uxth	r3, r3
 800b278:	021b      	lsls	r3, r3, #8
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	4313      	orrs	r3, r2
 800b27e:	b29a      	uxth	r2, r3
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	7b9a      	ldrb	r2, [r3, #14]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	7bda      	ldrb	r2, [r3, #15]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	7c1a      	ldrb	r2, [r3, #16]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	7c5a      	ldrb	r2, [r3, #17]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	745a      	strb	r2, [r3, #17]
  }
}
 800b2a4:	bf00      	nop
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <USBH_HUB_ParseHubDescriptor>:



void  USBH_HUB_ParseHubDescriptor(HUB_DescTypeDef  *hub_descriptor,
                              uint8_t *buf)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  hub_descriptor->bDescLength         = *(uint8_t *)(buf + 0);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	781a      	ldrb	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	701a      	strb	r2, [r3, #0]
  hub_descriptor->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	785a      	ldrb	r2, [r3, #1]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	705a      	strb	r2, [r3, #1]
  hub_descriptor->bNbrPorts           = *(uint8_t *)(buf + 2);
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	789a      	ldrb	r2, [r3, #2]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	709a      	strb	r2, [r3, #2]
  hub_descriptor->wHubCharacteristics = LE16(buf + 3);
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	3303      	adds	r3, #3
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	3304      	adds	r3, #4
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	021b      	lsls	r3, r3, #8
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	809a      	strh	r2, [r3, #4]
  hub_descriptor->bPwrOn2PwrGood      = *(uint8_t *)(buf + 5);
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	795a      	ldrb	r2, [r3, #5]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	719a      	strb	r2, [r3, #6]
  hub_descriptor->bHubContrCurrent    = *(uint8_t *)(buf + 6);
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	799a      	ldrb	r2, [r3, #6]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	71da      	strb	r2, [r3, #7]
  hub_descriptor->DeviceRemovable     = *(uint8_t *)(buf + 7);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	79da      	ldrb	r2, [r3, #7]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	721a      	strb	r2, [r3, #8]
  hub_descriptor->PortPwrCtrlMask     = *(uint8_t *)(buf + 8);
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	7a1a      	ldrb	r2, [r3, #8]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	725a      	strb	r2, [r3, #9]

}
 800b30e:	bf00      	nop
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <USBH_HUB_ParsePortStatus>:
  HUB_Handle->HubStatus[2]         = *(uint8_t *)(buf + 2);
  HUB_Handle->HubStatus[3]         = *(uint8_t *)(buf + 3);
}

 void  USBH_HUB_ParsePortStatus(HUB_HandleTypeDef *HUB_Handle,uint8_t *buf,HUB_Port_HandleTypeDef *Port)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b085      	sub	sp, #20
 800b31e:	af00      	add	r7, sp, #0
 800b320:	60f8      	str	r0, [r7, #12]
 800b322:	60b9      	str	r1, [r7, #8]
 800b324:	607a      	str	r2, [r7, #4]
  Port->PortStatus= *(USB_HUB_PORT_STATUS *)(buf);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68ba      	ldr	r2, [r7, #8]
 800b32a:	6810      	ldr	r0, [r2, #0]
 800b32c:	6018      	str	r0, [r3, #0]
}
 800b32e:	bf00      	nop
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <USBH_HUB_GetHIDDescriptor>:


USBH_StatusTypeDef USBH_HUB_GetHIDDescriptor(USBH_HandleTypeDef *phost,
		uint16_t length, uint8_t iface_idx, uint8_t *buf) {
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b088      	sub	sp, #32
 800b33e:	af02      	add	r7, sp, #8
 800b340:	60f8      	str	r0, [r7, #12]
 800b342:	607b      	str	r3, [r7, #4]
 800b344:	460b      	mov	r3, r1
 800b346:	817b      	strh	r3, [r7, #10]
 800b348:	4613      	mov	r3, r2
 800b34a:	727b      	strb	r3, [r7, #9]
	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID, iface_idx, phost->device.Data, length);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
	status = USBH_GetDescriptor(phost,
 800b352:	7a79      	ldrb	r1, [r7, #9]
 800b354:	897a      	ldrh	r2, [r7, #10]
 800b356:	9201      	str	r2, [sp, #4]
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	460b      	mov	r3, r1
 800b35c:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 800b360:	2101      	movs	r1, #1
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f001 fbf2 	bl	800cb4c <USBH_GetDescriptor>
 800b368:	4603      	mov	r3, r0
 800b36a:	75fb      	strb	r3, [r7, #23]

	return status;
 800b36c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3718      	adds	r7, #24
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <USBH_HUB_GetHIDReportDescriptor>:


USBH_StatusTypeDef USBH_HUB_GetHIDReportDescriptor(USBH_HandleTypeDef *phost, uint16_t length, uint8_t iface_idx,uint8_t *buf)
  {
 800b376:	b580      	push	{r7, lr}
 800b378:	b088      	sub	sp, #32
 800b37a:	af02      	add	r7, sp, #8
 800b37c:	60f8      	str	r0, [r7, #12]
 800b37e:	607b      	str	r3, [r7, #4]
 800b380:	460b      	mov	r3, r1
 800b382:	817b      	strh	r3, [r7, #10]
 800b384:	4613      	mov	r3, r2
 800b386:	727b      	strb	r3, [r7, #9]

	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
 800b388:	7a7a      	ldrb	r2, [r7, #9]
 800b38a:	897b      	ldrh	r3, [r7, #10]
 800b38c:	9301      	str	r3, [sp, #4]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	4613      	mov	r3, r2
 800b394:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800b398:	2101      	movs	r1, #1
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f001 fbd6 	bl	800cb4c <USBH_GetDescriptor>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	75fb      	strb	r3, [r7, #23]
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID_REPORT, iface_idx, buf, length);

	return status;
 800b3a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
	...

0800b3b0 <USBH_HUB_Device_Enum>:
#include "usbh_hub_keybd.h"
#include "usbh_hub_mouse.h"
#include "usbh_hub_gamepad.h"

USBH_StatusTypeDef USBH_HUB_Device_Enum(USBH_HandleTypeDef *phost, HUB_Port_HandleTypeDef *port)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b08a      	sub	sp, #40	; 0x28
 800b3b4:	af04      	add	r7, sp, #16
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
    USBH_StatusTypeDef status = USBH_BUSY;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	75fb      	strb	r3, [r7, #23]
    HUB_HandleTypeDef *HUB_Handle = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0];
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b3c4:	6a1b      	ldr	r3, [r3, #32]
 800b3c6:	613b      	str	r3, [r7, #16]

    uint8_t max_ep = 0U;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	73fb      	strb	r3, [r7, #15]
    uint8_t num = 0U;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	75bb      	strb	r3, [r7, #22]

    switch (port->EnumState)
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	799b      	ldrb	r3, [r3, #6]
 800b3d4:	2b16      	cmp	r3, #22
 800b3d6:	f200 84cc 	bhi.w	800bd72 <USBH_HUB_Device_Enum+0x9c2>
 800b3da:	a201      	add	r2, pc, #4	; (adr r2, 800b3e0 <USBH_HUB_Device_Enum+0x30>)
 800b3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e0:	0800b43d 	.word	0x0800b43d
 800b3e4:	0800b501 	.word	0x0800b501
 800b3e8:	0800b533 	.word	0x0800b533
 800b3ec:	0800b5a3 	.word	0x0800b5a3
 800b3f0:	0800b67f 	.word	0x0800b67f
 800b3f4:	0800b613 	.word	0x0800b613
 800b3f8:	0800b6a5 	.word	0x0800b6a5
 800b3fc:	0800b6c7 	.word	0x0800b6c7
 800b400:	0800b6ed 	.word	0x0800b6ed
 800b404:	0800b71b 	.word	0x0800b71b
 800b408:	0800b7b1 	.word	0x0800b7b1
 800b40c:	0800b7f3 	.word	0x0800b7f3
 800b410:	0800b851 	.word	0x0800b851
 800b414:	0800b88d 	.word	0x0800b88d
 800b418:	0800b749 	.word	0x0800b749
 800b41c:	0800b777 	.word	0x0800b777
 800b420:	0800b8cf 	.word	0x0800b8cf
 800b424:	0800b8f7 	.word	0x0800b8f7
 800b428:	0800b987 	.word	0x0800b987
 800b42c:	0800b9af 	.word	0x0800b9af
 800b430:	0800ba13 	.word	0x0800ba13
 800b434:	0800bba7 	.word	0x0800bba7
 800b438:	0800bd23 	.word	0x0800bd23
   {
    case HUB_ENUM_INIT:
            USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80,
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	7919      	ldrb	r1, [r3, #4]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
            phost->device.address, phost->device.speed,
            USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	7992      	ldrb	r2, [r2, #6]
            USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80,
 800b450:	b292      	uxth	r2, r2
 800b452:	9202      	str	r2, [sp, #8]
 800b454:	2200      	movs	r2, #0
 800b456:	9201      	str	r2, [sp, #4]
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	4603      	mov	r3, r0
 800b45c:	2280      	movs	r2, #128	; 0x80
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f002 f826 	bl	800d4b0 <USBH_OpenPipe>

            USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	7959      	ldrb	r1, [r3, #5]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
            phost->device.address, phost->device.speed,
            USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	7992      	ldrb	r2, [r2, #6]
            USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b478:	b292      	uxth	r2, r2
 800b47a:	9202      	str	r2, [sp, #8]
 800b47c:	2200      	movs	r2, #0
 800b47e:	9201      	str	r2, [sp, #4]
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	4603      	mov	r3, r0
 800b484:	2200      	movs	r2, #0
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f002 f812 	bl	800d4b0 <USBH_OpenPipe>

            port->EnumTime = phost->Timer;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
            port->DevDescNum = 0;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	2200      	movs	r2, #0
 800b49c:	71da      	strb	r2, [r3, #7]

            port->MFC = (uint8_t *)malloc(0xFF);
 800b49e:	20ff      	movs	r0, #255	; 0xff
 800b4a0:	f002 fce8 	bl	800de74 <malloc>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	60da      	str	r2, [r3, #12]
            port->Product = (uint8_t *)malloc(0xFF);
 800b4ac:	20ff      	movs	r0, #255	; 0xff
 800b4ae:	f002 fce1 	bl	800de74 <malloc>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	611a      	str	r2, [r3, #16]

            //No HS support
            if (port->PortStatus.wPortStatus.PORT_LOW_SPEED)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	785b      	ldrb	r3, [r3, #1]
 800b4be:	f003 0302 	and.w	r3, r3, #2
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d003      	beq.n	800b4d0 <USBH_HUB_Device_Enum+0x120>
            {
                port->speed = USBH_SPEED_LOW;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	2202      	movs	r2, #2
 800b4cc:	725a      	strb	r2, [r3, #9]
 800b4ce:	e002      	b.n	800b4d6 <USBH_HUB_Device_Enum+0x126>
            }
            else
            {
                port->speed = USBH_SPEED_FULL;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	725a      	strb	r2, [r3, #9]
            }
              port->address = HUB_Handle->portNumber+10;
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b4e0:	330a      	adds	r3, #10
 800b4e2:	b2da      	uxtb	r2, r3
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	721a      	strb	r2, [r3, #8]
              phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	719a      	strb	r2, [r3, #6]
              status = USBH_BUSY;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	75fb      	strb	r3, [r7, #23]
              port->EnumState = HUB_ENUM_RESET_PORT;
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	719a      	strb	r2, [r3, #6]
    break;
 800b4fc:	f000 bc39 	b.w	800bd72 <USBH_HUB_Device_Enum+0x9c2>

        case HUB_ENUM_RESET_PORT:
        status = USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_RESET,HUB_Handle->portNumber);
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b506:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b50a:	461a      	mov	r2, r3
 800b50c:	2104      	movs	r1, #4
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f7ff fdb1 	bl	800b076 <USBH_HUB_SetPortFeature>
 800b514:	4603      	mov	r3, r0
 800b516:	75fb      	strb	r3, [r7, #23]
        if (status == USBH_OK)
 800b518:	7dfb      	ldrb	r3, [r7, #23]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f040 8404 	bne.w	800bd28 <USBH_HUB_Device_Enum+0x978>
        {
              HAL_Delay(100);
 800b520:	2064      	movs	r0, #100	; 0x64
 800b522:	f7f6 fb61 	bl	8001be8 <HAL_Delay>
              status = USBH_BUSY;
 800b526:	2301      	movs	r3, #1
 800b528:	75fb      	strb	r3, [r7, #23]
              port->EnumState = HUB_ENUM_RESET_PORT2;              
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	2202      	movs	r2, #2
 800b52e:	719a      	strb	r2, [r3, #6]
        }

    break;
 800b530:	e3fa      	b.n	800bd28 <USBH_HUB_Device_Enum+0x978>

        case HUB_ENUM_RESET_PORT2:
        status = USBH_HUB_SetPortFeature(phost,HUB_FEAT_SEL_PORT_RESET,HUB_Handle->portNumber);
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b538:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b53c:	461a      	mov	r2, r3
 800b53e:	2104      	movs	r1, #4
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff fd98 	bl	800b076 <USBH_HUB_SetPortFeature>
 800b546:	4603      	mov	r3, r0
 800b548:	75fb      	strb	r3, [r7, #23]
        if (status == USBH_OK)
 800b54a:	7dfb      	ldrb	r3, [r7, #23]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f040 83ed 	bne.w	800bd2c <USBH_HUB_Device_Enum+0x97c>
        {
            HAL_Delay(200);
 800b552:	20c8      	movs	r0, #200	; 0xc8
 800b554:	f7f6 fb48 	bl	8001be8 <HAL_Delay>

            USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, 0U, port->speed, USBH_EP_CONTROL, (uint16_t)0x40U);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	7919      	ldrb	r1, [r3, #4]
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	7a5b      	ldrb	r3, [r3, #9]
 800b560:	2240      	movs	r2, #64	; 0x40
 800b562:	9202      	str	r2, [sp, #8]
 800b564:	2200      	movs	r2, #0
 800b566:	9201      	str	r2, [sp, #4]
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	2300      	movs	r3, #0
 800b56c:	2280      	movs	r2, #128	; 0x80
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f001 ff9e 	bl	800d4b0 <USBH_OpenPipe>
            USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, 0U, port->speed, USBH_EP_CONTROL, (uint16_t)0x40U);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	7959      	ldrb	r1, [r3, #5]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	7a5b      	ldrb	r3, [r3, #9]
 800b57c:	2240      	movs	r2, #64	; 0x40
 800b57e:	9202      	str	r2, [sp, #8]
 800b580:	2200      	movs	r2, #0
 800b582:	9201      	str	r2, [sp, #4]
 800b584:	9300      	str	r3, [sp, #0]
 800b586:	2300      	movs	r3, #0
 800b588:	2200      	movs	r2, #0
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f001 ff90 	bl	800d4b0 <USBH_OpenPipe>
            phost->Control.pipe_size = 0x40U;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2240      	movs	r2, #64	; 0x40
 800b594:	719a      	strb	r2, [r3, #6]
        
            status = USBH_BUSY;
 800b596:	2301      	movs	r3, #1
 800b598:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_DEV_DESC;             
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2203      	movs	r2, #3
 800b59e:	719a      	strb	r2, [r3, #6]
        }
    break;
 800b5a0:	e3c4      	b.n	800bd2c <USBH_HUB_Device_Enum+0x97c>
    
    case HUB_ENUM_GET_DEV_DESC:
    status = USBH_HUB_Get_DevDesc(phost, 8U,port);
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	2108      	movs	r1, #8
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f7ff fd90 	bl	800b0cc <USBH_HUB_Get_DevDesc>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	75fb      	strb	r3, [r7, #23]
        if (status == USBH_OK)
 800b5b0:	7dfb      	ldrb	r3, [r7, #23]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f040 83bc 	bne.w	800bd30 <USBH_HUB_Device_Enum+0x980>
        {
        port->DevDescNum = 0;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	71da      	strb	r2, [r3, #7]
        phost->Control.pipe_size = port->DevDesc.bMaxPacketSize;
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	7eda      	ldrb	r2, [r3, #27]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	719a      	strb	r2, [r3, #6]

                    USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	7919      	ldrb	r1, [r3, #4]
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	7a5b      	ldrb	r3, [r3, #9]
                    0U, port->speed,
                    USBH_EP_CONTROL, (uint16_t)port->DevDesc.bMaxPacketSize);
 800b5ce:	683a      	ldr	r2, [r7, #0]
 800b5d0:	7ed2      	ldrb	r2, [r2, #27]
                    USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b5d2:	b292      	uxth	r2, r2
 800b5d4:	9202      	str	r2, [sp, #8]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	9201      	str	r2, [sp, #4]
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	2300      	movs	r3, #0
 800b5de:	2280      	movs	r2, #128	; 0x80
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f001 ff65 	bl	800d4b0 <USBH_OpenPipe>

                    USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	7959      	ldrb	r1, [r3, #5]
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	7a5b      	ldrb	r3, [r3, #9]
                    0U, port->speed,
                    USBH_EP_CONTROL, (uint16_t)port->DevDesc.bMaxPacketSize);
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	7ed2      	ldrb	r2, [r2, #27]
                    USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b5f2:	b292      	uxth	r2, r2
 800b5f4:	9202      	str	r2, [sp, #8]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	9201      	str	r2, [sp, #4]
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	2200      	movs	r2, #0
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f001 ff55 	bl	800d4b0 <USBH_OpenPipe>

            status = USBH_BUSY;
 800b606:	2301      	movs	r3, #1
 800b608:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_SET_ADDR;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	2205      	movs	r2, #5
 800b60e:	719a      	strb	r2, [r3, #6]
        } 
    break;
 800b610:	e38e      	b.n	800bd30 <USBH_HUB_Device_Enum+0x980>

    case HUB_ENUM_SET_ADDR:
           status = USBH_SetAddress(phost,port->address);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	7a1b      	ldrb	r3, [r3, #8]
 800b616:	4619      	mov	r1, r3
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f001 fad1 	bl	800cbc0 <USBH_SetAddress>
 800b61e:	4603      	mov	r3, r0
 800b620:	75fb      	strb	r3, [r7, #23]
           if (status == USBH_OK)
 800b622:	7dfb      	ldrb	r3, [r7, #23]
 800b624:	2b00      	cmp	r3, #0
 800b626:	f040 8385 	bne.w	800bd34 <USBH_HUB_Device_Enum+0x984>
           {
                    USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	7919      	ldrb	r1, [r3, #4]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	7a18      	ldrb	r0, [r3, #8]
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	7a5b      	ldrb	r3, [r3, #9]
                    port->address, port->speed,
                    USBH_EP_CONTROL, (uint16_t)port->DevDesc.bMaxPacketSize);
 800b636:	683a      	ldr	r2, [r7, #0]
 800b638:	7ed2      	ldrb	r2, [r2, #27]
                    USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b63a:	b292      	uxth	r2, r2
 800b63c:	9202      	str	r2, [sp, #8]
 800b63e:	2200      	movs	r2, #0
 800b640:	9201      	str	r2, [sp, #4]
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	4603      	mov	r3, r0
 800b646:	2280      	movs	r2, #128	; 0x80
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f001 ff31 	bl	800d4b0 <USBH_OpenPipe>

                    USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	7959      	ldrb	r1, [r3, #5]
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	7a18      	ldrb	r0, [r3, #8]
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	7a5b      	ldrb	r3, [r3, #9]
                    port->address, port->speed,
                    USBH_EP_CONTROL, (uint16_t)port->DevDesc.bMaxPacketSize);
 800b65a:	683a      	ldr	r2, [r7, #0]
 800b65c:	7ed2      	ldrb	r2, [r2, #27]
                    USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b65e:	b292      	uxth	r2, r2
 800b660:	9202      	str	r2, [sp, #8]
 800b662:	2200      	movs	r2, #0
 800b664:	9201      	str	r2, [sp, #4]
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	4603      	mov	r3, r0
 800b66a:	2200      	movs	r2, #0
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f001 ff1f 	bl	800d4b0 <USBH_OpenPipe>

            status = USBH_BUSY;
 800b672:	2301      	movs	r3, #1
 800b674:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_FULL_DEV_DESC; //HUB_ENUM_GET_CFG_DESC;
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	2204      	movs	r2, #4
 800b67a:	719a      	strb	r2, [r3, #6]
           }
    break;
 800b67c:	e35a      	b.n	800bd34 <USBH_HUB_Device_Enum+0x984>

        case HUB_ENUM_GET_FULL_DEV_DESC:
       status = USBH_HUB_Get_DevDesc(phost, port->DevDesc.bLength,port);
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	7d1b      	ldrb	r3, [r3, #20]
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	4619      	mov	r1, r3
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff fd20 	bl	800b0cc <USBH_HUB_Get_DevDesc>
 800b68c:	4603      	mov	r3, r0
 800b68e:	75fb      	strb	r3, [r7, #23]
        if (status == USBH_OK)
 800b690:	7dfb      	ldrb	r3, [r7, #23]
 800b692:	2b00      	cmp	r3, #0
 800b694:	f040 8350 	bne.w	800bd38 <USBH_HUB_Device_Enum+0x988>
        {
            status = USBH_BUSY;
 800b698:	2301      	movs	r3, #1
 800b69a:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_CFG_DESC;
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	2206      	movs	r2, #6
 800b6a0:	719a      	strb	r2, [r3, #6]
        }
        break;
 800b6a2:	e349      	b.n	800bd38 <USBH_HUB_Device_Enum+0x988>

    case HUB_ENUM_GET_CFG_DESC:
          status = USBH_HUB_Get_CfgDesc(phost,USB_CONFIGURATION_DESC_SIZE,port);
 800b6a4:	683a      	ldr	r2, [r7, #0]
 800b6a6:	2109      	movs	r1, #9
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7ff fd39 	bl	800b120 <USBH_HUB_Get_CfgDesc>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	75fb      	strb	r3, [r7, #23]
          if (status == USBH_OK)
 800b6b2:	7dfb      	ldrb	r3, [r7, #23]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f040 8341 	bne.w	800bd3c <USBH_HUB_Device_Enum+0x98c>
          {
            status = USBH_BUSY;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_FULL_CFG_DESC;
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	2207      	movs	r2, #7
 800b6c2:	719a      	strb	r2, [r3, #6]
          }
    break;
 800b6c4:	e33a      	b.n	800bd3c <USBH_HUB_Device_Enum+0x98c>

    case HUB_ENUM_GET_FULL_CFG_DESC:
          status = USBH_HUB_Get_CfgDesc(phost,port->CfgDesc.wTotalLength,port);
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7ff fd26 	bl	800b120 <USBH_HUB_Get_CfgDesc>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	75fb      	strb	r3, [r7, #23]

          if (status == USBH_OK)
 800b6d8:	7dfb      	ldrb	r3, [r7, #23]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f040 8330 	bne.w	800bd40 <USBH_HUB_Device_Enum+0x990>
          {
            status = USBH_BUSY;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_MFC_STRING_DESC;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	2208      	movs	r2, #8
 800b6e8:	719a      	strb	r2, [r3, #6]
          }

    break;
 800b6ea:	e329      	b.n	800bd40 <USBH_HUB_Device_Enum+0x990>

    case HUB_ENUM_GET_MFC_STRING_DESC:
          status = USBH_HUB_Get_StringDesc(phost, port->DevDesc.iManufacturer,port->MFC, 0xFFU,port);
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	68da      	ldr	r2, [r3, #12]
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	23ff      	movs	r3, #255	; 0xff
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f7ff fd3a 	bl	800b176 <USBH_HUB_Get_StringDesc>
 800b702:	4603      	mov	r3, r0
 800b704:	75fb      	strb	r3, [r7, #23]

          if (status == USBH_OK)
 800b706:	7dfb      	ldrb	r3, [r7, #23]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f040 831b 	bne.w	800bd44 <USBH_HUB_Device_Enum+0x994>
          {
            status = USBH_BUSY;
 800b70e:	2301      	movs	r3, #1
 800b710:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_GET_PRODUCT_STRING_DESC;
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	2209      	movs	r2, #9
 800b716:	719a      	strb	r2, [r3, #6]
          }
    break;
 800b718:	e314      	b.n	800bd44 <USBH_HUB_Device_Enum+0x994>

    case HUB_ENUM_GET_PRODUCT_STRING_DESC:
         status = USBH_HUB_Get_StringDesc(phost, port->DevDesc.iProduct,port->Product, 0xFFU,port);
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	691a      	ldr	r2, [r3, #16]
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	23ff      	movs	r3, #255	; 0xff
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f7ff fd23 	bl	800b176 <USBH_HUB_Get_StringDesc>
 800b730:	4603      	mov	r3, r0
 800b732:	75fb      	strb	r3, [r7, #23]
          if (status == USBH_OK)
 800b734:	7dfb      	ldrb	r3, [r7, #23]
 800b736:	2b00      	cmp	r3, #0
 800b738:	f040 8306 	bne.w	800bd48 <USBH_HUB_Device_Enum+0x998>
          {
            status = USBH_BUSY;
 800b73c:	2301      	movs	r3, #1
 800b73e:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_SET_CONFIGURATION;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	220e      	movs	r2, #14
 800b744:	719a      	strb	r2, [r3, #6]
          }
    break;
 800b746:	e2ff      	b.n	800bd48 <USBH_HUB_Device_Enum+0x998>

    //ENABLE DEVICE
        case HUB_ENUM_SET_CONFIGURATION:
            status = USBH_SetCfg(phost, (uint16_t)port->CfgDesc.bConfigurationValue);
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b74e:	b29b      	uxth	r3, r3
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f001 fa58 	bl	800cc08 <USBH_SetCfg>
 800b758:	4603      	mov	r3, r0
 800b75a:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK)
 800b75c:	7dfb      	ldrb	r3, [r7, #23]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f040 82f4 	bne.w	800bd4c <USBH_HUB_Device_Enum+0x99c>
            {
                HAL_Delay(5);
 800b764:	2005      	movs	r0, #5
 800b766:	f7f6 fa3f 	bl	8001be8 <HAL_Delay>
                port->EnumState = HUB_ENUM_SET_WAKEUP_FEATURE;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	220f      	movs	r2, #15
 800b76e:	719a      	strb	r2, [r3, #6]
                status = USBH_BUSY;
 800b770:	2301      	movs	r3, #1
 800b772:	75fb      	strb	r3, [r7, #23]
            }
    break;
 800b774:	e2ea      	b.n	800bd4c <USBH_HUB_Device_Enum+0x99c>

      case HUB_ENUM_SET_WAKEUP_FEATURE:
      if ((port->CfgDesc.bmAttributes) & (1U << 5))
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b77c:	f003 0320 	and.w	r3, r3, #32
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00f      	beq.n	800b7a4 <USBH_HUB_Device_Enum+0x3f4>
      {
            status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b784:	2101      	movs	r1, #1
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f001 fa61 	bl	800cc4e <USBH_SetFeature>
 800b78c:	4603      	mov	r3, r0
 800b78e:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK)
 800b790:	7dfb      	ldrb	r3, [r7, #23]
 800b792:	2b00      	cmp	r3, #0
 800b794:	f040 82dc 	bne.w	800bd50 <USBH_HUB_Device_Enum+0x9a0>
            {

                port->EnumState = HUB_ENUM_GET_HID_DESC;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	220a      	movs	r2, #10
 800b79c:	719a      	strb	r2, [r3, #6]
                status = USBH_BUSY;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	75fb      	strb	r3, [r7, #23]
      else
      {
        port->EnumState = HUB_ENUM_GET_HID_DESC;
        status = USBH_BUSY;
      }
    break;
 800b7a2:	e2d5      	b.n	800bd50 <USBH_HUB_Device_Enum+0x9a0>
        port->EnumState = HUB_ENUM_GET_HID_DESC;
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	220a      	movs	r2, #10
 800b7a8:	719a      	strb	r2, [r3, #6]
        status = USBH_BUSY;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	75fb      	strb	r3, [r7, #23]
    break;
 800b7ae:	e2cf      	b.n	800bd50 <USBH_HUB_Device_Enum+0x9a0>

    case HUB_ENUM_GET_HID_DESC:
        status = USBH_HUB_GetHIDDescriptor(phost, USB_HID_DESC_SIZE, 0U,port->buff);
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	2109      	movs	r1, #9
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7ff fdbd 	bl	800b33a <USBH_HUB_GetHIDDescriptor>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	75fb      	strb	r3, [r7, #23]
                if (status == USBH_OK)
 800b7c4:	7dfb      	ldrb	r3, [r7, #23]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f040 82c4 	bne.w	800bd54 <USBH_HUB_Device_Enum+0x9a4>
                {
			        USBH_HID_ParseHIDDesc(&port->HIDDesc[0], port->buff);
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b7d8:	4619      	mov	r1, r3
 800b7da:	4610      	mov	r0, r2
 800b7dc:	f7fc ffc3 	bl	8008766 <USBH_HID_ParseHIDDesc>
                    status = USBH_BUSY;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	75fb      	strb	r3, [r7, #23]
                    port->EnumState = HUB_ENUM_GET_HID_REPORT_DESC;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	220b      	movs	r2, #11
 800b7e8:	719a      	strb	r2, [r3, #6]
                    HAL_Delay(5);
 800b7ea:	2005      	movs	r0, #5
 800b7ec:	f7f6 f9fc 	bl	8001be8 <HAL_Delay>
                }
    break;
 800b7f0:	e2b0      	b.n	800bd54 <USBH_HUB_Device_Enum+0x9a4>

    case HUB_ENUM_GET_HID_REPORT_DESC:
        	status = USBH_HUB_GetHIDReportDescriptor(phost, port->HIDDesc[0].wItemLength, 0U,port->buff);
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	f8b3 106c 	ldrh.w	r1, [r3, #108]	; 0x6c
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b7fe:	2200      	movs	r2, #0
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff fdb8 	bl	800b376 <USBH_HUB_GetHIDReportDescriptor>
 800b806:	4603      	mov	r3, r0
 800b808:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK)
 800b80a:	7dfb      	ldrb	r3, [r7, #23]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f040 82a3 	bne.w	800bd58 <USBH_HUB_Device_Enum+0x9a8>
            {
                HAL_Delay(5);
 800b812:	2005      	movs	r0, #5
 800b814:	f7f6 f9e8 	bl	8001be8 <HAL_Delay>
			    parse_report_descriptor(port->buff, port->HIDDesc[0].wItemLength, &port->HIDDesc[0].RptDesc);
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	f503 70de 	add.w	r0, r3, #444	; 0x1bc
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	f8b3 106c 	ldrh.w	r1, [r3, #108]	; 0x6c
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	336e      	adds	r3, #110	; 0x6e
 800b828:	461a      	mov	r2, r3
 800b82a:	f7fd ff53 	bl	80096d4 <parse_report_descriptor>
                if (port->CfgDesc.bNumInterfaces>1)
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b834:	2b01      	cmp	r3, #1
 800b836:	d905      	bls.n	800b844 <USBH_HUB_Device_Enum+0x494>
                {
                    //read second interface HID Descriptor if exist
                    status = USBH_BUSY;
 800b838:	2301      	movs	r3, #1
 800b83a:	75fb      	strb	r3, [r7, #23]
                    port->EnumState = HUB_ENUM_GET_HID_DESC_INTER2;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	220c      	movs	r2, #12
 800b840:	719a      	strb	r2, [r3, #6]
                {
			        port->EnumState = HUB_ENUM_SET_PROTOCOL;
                    status = USBH_BUSY;
                }
		    }
    break;
 800b842:	e289      	b.n	800bd58 <USBH_HUB_Device_Enum+0x9a8>
			        port->EnumState = HUB_ENUM_SET_PROTOCOL;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	2210      	movs	r2, #16
 800b848:	719a      	strb	r2, [r3, #6]
                    status = USBH_BUSY;
 800b84a:	2301      	movs	r3, #1
 800b84c:	75fb      	strb	r3, [r7, #23]
    break;
 800b84e:	e283      	b.n	800bd58 <USBH_HUB_Device_Enum+0x9a8>

    case HUB_ENUM_GET_HID_DESC_INTER2:

        status = USBH_HUB_GetHIDDescriptor(phost, USB_HID_DESC_SIZE, 1U,port->buff);
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b856:	2201      	movs	r2, #1
 800b858:	2109      	movs	r1, #9
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f7ff fd6d 	bl	800b33a <USBH_HUB_GetHIDDescriptor>
 800b860:	4603      	mov	r3, r0
 800b862:	75fb      	strb	r3, [r7, #23]
                if (status == USBH_OK)
 800b864:	7dfb      	ldrb	r3, [r7, #23]
 800b866:	2b00      	cmp	r3, #0
 800b868:	f040 8278 	bne.w	800bd5c <USBH_HUB_Device_Enum+0x9ac>
                {
			        USBH_HID_ParseHIDDesc(&port->HIDDesc[1], port->buff);
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b878:	4619      	mov	r1, r3
 800b87a:	4610      	mov	r0, r2
 800b87c:	f7fc ff73 	bl	8008766 <USBH_HID_ParseHIDDesc>
                    status = USBH_BUSY;
 800b880:	2301      	movs	r3, #1
 800b882:	75fb      	strb	r3, [r7, #23]
                    port->EnumState = HUB_ENUM_GET_HID_REPORT_DESC_INTER2;
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	220d      	movs	r2, #13
 800b888:	719a      	strb	r2, [r3, #6]
                }
    break;
 800b88a:	e267      	b.n	800bd5c <USBH_HUB_Device_Enum+0x9ac>

    case HUB_ENUM_GET_HID_REPORT_DESC_INTER2:
        	status = USBH_HUB_GetHIDReportDescriptor(phost, port->HIDDesc[1].wItemLength, 1U,port->buff);
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	f8b3 10ac 	ldrh.w	r1, [r3, #172]	; 0xac
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b898:	2201      	movs	r2, #1
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f7ff fd6b 	bl	800b376 <USBH_HUB_GetHIDReportDescriptor>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK)
 800b8a4:	7dfb      	ldrb	r3, [r7, #23]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f040 825a 	bne.w	800bd60 <USBH_HUB_Device_Enum+0x9b0>
            {
			    parse_report_descriptor(port->buff, port->HIDDesc[1].wItemLength, &port->HIDDesc[1].RptDesc);
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	f503 70de 	add.w	r0, r3, #444	; 0x1bc
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	f8b3 10ac 	ldrh.w	r1, [r3, #172]	; 0xac
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	33ae      	adds	r3, #174	; 0xae
 800b8bc:	461a      	mov	r2, r3
 800b8be:	f7fd ff09 	bl	80096d4 <parse_report_descriptor>
			    port->EnumState = HUB_ENUM_SET_PROTOCOL;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	2210      	movs	r2, #16
 800b8c6:	719a      	strb	r2, [r3, #6]
                status = USBH_BUSY;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	75fb      	strb	r3, [r7, #23]
		    }
    break;
 800b8cc:	e248      	b.n	800bd60 <USBH_HUB_Device_Enum+0x9b0>

    case HUB_ENUM_SET_PROTOCOL:
            status = USBH_HID_SetProtocol(phost, 1U, 0U);
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f7fc ff25 	bl	8008722 <USBH_HID_SetProtocol>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK || status == USBH_NOT_SUPPORTED)
 800b8dc:	7dfb      	ldrb	r3, [r7, #23]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d003      	beq.n	800b8ea <USBH_HUB_Device_Enum+0x53a>
 800b8e2:	7dfb      	ldrb	r3, [r7, #23]
 800b8e4:	2b03      	cmp	r3, #3
 800b8e6:	f040 823d 	bne.w	800bd64 <USBH_HUB_Device_Enum+0x9b4>
            {
                port->EnumState = HUB_ENUM_SET_IDLE;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	2211      	movs	r2, #17
 800b8ee:	719a      	strb	r2, [r3, #6]
                status = USBH_BUSY;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	75fb      	strb	r3, [r7, #23]
            }
    break;
 800b8f4:	e236      	b.n	800bd64 <USBH_HUB_Device_Enum+0x9b4>

    case HUB_ENUM_SET_IDLE:
            if(port->CfgDesc.Itf_Desc[0].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[0].bInterfaceSubClass == 0x01 && (port->CfgDesc.Itf_Desc[0].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE || port->HIDDesc[0].RptDesc.type == REPORT_TYPE_KEYBOARD) )
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	d11a      	bne.n	800b936 <USBH_HUB_Device_Enum+0x586>
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b906:	2b01      	cmp	r3, #1
 800b908:	d115      	bne.n	800b936 <USBH_HUB_Device_Enum+0x586>
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800b910:	2b01      	cmp	r3, #1
 800b912:	d007      	beq.n	800b924 <USBH_HUB_Device_Enum+0x574>
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800b91a:	f003 0303 	and.w	r3, r3, #3
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	2b02      	cmp	r3, #2
 800b922:	d108      	bne.n	800b936 <USBH_HUB_Device_Enum+0x586>
            {
			    status = USBH_HID_SetIdle(phost, 0U, 0U, 0U);
 800b924:	2300      	movs	r3, #0
 800b926:	2200      	movs	r2, #0
 800b928:	2100      	movs	r1, #0
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f7fc fecb 	bl	80086c6 <USBH_HID_SetIdle>
 800b930:	4603      	mov	r3, r0
 800b932:	75fb      	strb	r3, [r7, #23]
 800b934:	e00f      	b.n	800b956 <USBH_HUB_Device_Enum+0x5a6>
            }
            else
            {
                if (port->CfgDesc.bNumInterfaces>1)
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d905      	bls.n	800b94c <USBH_HUB_Device_Enum+0x59c>
                {
                    //read second interface HID Descriptor if exist
                    status = USBH_BUSY;
 800b940:	2301      	movs	r3, #1
 800b942:	75fb      	strb	r3, [r7, #23]
                    port->EnumState = HUB_ENUM_SET_PROTOCOL_INTER2;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	2212      	movs	r2, #18
 800b948:	719a      	strb	r2, [r3, #6]
 800b94a:	e004      	b.n	800b956 <USBH_HUB_Device_Enum+0x5a6>
                }
                else
                {
			        port->EnumState = HUB_ENUM_INTERFACE_INIT;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	2214      	movs	r2, #20
 800b950:	719a      	strb	r2, [r3, #6]
                    status = USBH_BUSY;
 800b952:	2301      	movs	r3, #1
 800b954:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (status == USBH_OK || status == USBH_NOT_SUPPORTED)
 800b956:	7dfb      	ldrb	r3, [r7, #23]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <USBH_HUB_Device_Enum+0x5b4>
 800b95c:	7dfb      	ldrb	r3, [r7, #23]
 800b95e:	2b03      	cmp	r3, #3
 800b960:	f040 8202 	bne.w	800bd68 <USBH_HUB_Device_Enum+0x9b8>
            {
                if (port->CfgDesc.bNumInterfaces>1)
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d905      	bls.n	800b97a <USBH_HUB_Device_Enum+0x5ca>
                {
                    //read second interface HID Descriptor if exist
                    status = USBH_BUSY;
 800b96e:	2301      	movs	r3, #1
 800b970:	75fb      	strb	r3, [r7, #23]
                    port->EnumState = HUB_ENUM_SET_PROTOCOL_INTER2;
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	2212      	movs	r2, #18
 800b976:	719a      	strb	r2, [r3, #6]
                {
			        port->EnumState = HUB_ENUM_INTERFACE_INIT;
                    status = USBH_BUSY;
                }
            }
    break;
 800b978:	e1f6      	b.n	800bd68 <USBH_HUB_Device_Enum+0x9b8>
			        port->EnumState = HUB_ENUM_INTERFACE_INIT;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	2214      	movs	r2, #20
 800b97e:	719a      	strb	r2, [r3, #6]
                    status = USBH_BUSY;
 800b980:	2301      	movs	r3, #1
 800b982:	75fb      	strb	r3, [r7, #23]
    break;
 800b984:	e1f0      	b.n	800bd68 <USBH_HUB_Device_Enum+0x9b8>

    case HUB_ENUM_SET_PROTOCOL_INTER2:
            status = USBH_HID_SetProtocol(phost, 1U, 1U);
 800b986:	2201      	movs	r2, #1
 800b988:	2101      	movs	r1, #1
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f7fc fec9 	bl	8008722 <USBH_HID_SetProtocol>
 800b990:	4603      	mov	r3, r0
 800b992:	75fb      	strb	r3, [r7, #23]
            if (status == USBH_OK || status == USBH_NOT_SUPPORTED)
 800b994:	7dfb      	ldrb	r3, [r7, #23]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d003      	beq.n	800b9a2 <USBH_HUB_Device_Enum+0x5f2>
 800b99a:	7dfb      	ldrb	r3, [r7, #23]
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	f040 81e5 	bne.w	800bd6c <USBH_HUB_Device_Enum+0x9bc>
            {
                port->EnumState = HUB_ENUM_SET_IDLE_INTER2;
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	2213      	movs	r2, #19
 800b9a6:	719a      	strb	r2, [r3, #6]
                status = USBH_BUSY;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	75fb      	strb	r3, [r7, #23]
            }
    break;
 800b9ac:	e1de      	b.n	800bd6c <USBH_HUB_Device_Enum+0x9bc>

    case HUB_ENUM_SET_IDLE_INTER2:
            if(port->CfgDesc.Itf_Desc[1].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[1].bInterfaceSubClass == 0x01 && (port->CfgDesc.Itf_Desc[1].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE || port->HIDDesc[1].RptDesc.type == REPORT_TYPE_KEYBOARD))
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d11a      	bne.n	800b9ee <USBH_HUB_Device_Enum+0x63e>
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d115      	bne.n	800b9ee <USBH_HUB_Device_Enum+0x63e>
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d007      	beq.n	800b9dc <USBH_HUB_Device_Enum+0x62c>
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800b9d2:	f003 0303 	and.w	r3, r3, #3
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	2b02      	cmp	r3, #2
 800b9da:	d108      	bne.n	800b9ee <USBH_HUB_Device_Enum+0x63e>
            {
			    status = USBH_HID_SetIdle(phost, 0U, 0U, 1U);
 800b9dc:	2301      	movs	r3, #1
 800b9de:	2200      	movs	r2, #0
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7fc fe6f 	bl	80086c6 <USBH_HID_SetIdle>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	75fb      	strb	r3, [r7, #23]
 800b9ec:	e004      	b.n	800b9f8 <USBH_HUB_Device_Enum+0x648>
            }
            else
            {
               // status = USBH_HID_SetIdle(phost, 0U, 0U, 1U);
               		port->EnumState = HUB_ENUM_INTERFACE_INIT;
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	2214      	movs	r2, #20
 800b9f2:	719a      	strb	r2, [r3, #6]
                    status = USBH_BUSY;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	75fb      	strb	r3, [r7, #23]
            }

            if (status == USBH_OK||status == USBH_NOT_SUPPORTED)
 800b9f8:	7dfb      	ldrb	r3, [r7, #23]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d003      	beq.n	800ba06 <USBH_HUB_Device_Enum+0x656>
 800b9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ba00:	2b03      	cmp	r3, #3
 800ba02:	f040 81b5 	bne.w	800bd70 <USBH_HUB_Device_Enum+0x9c0>
            {
                    port->EnumState = HUB_ENUM_INTERFACE_INIT;
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	2214      	movs	r2, #20
 800ba0a:	719a      	strb	r2, [r3, #6]
                    status = USBH_BUSY;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	75fb      	strb	r3, [r7, #23]
            }
    break;
 800ba10:	e1ae      	b.n	800bd70 <USBH_HUB_Device_Enum+0x9c0>

    case HUB_ENUM_INTERFACE_INIT:
        port->Interface[0].Id = 0;
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        port->Interface[0].length = port->HIDDesc[0].RptDesc.report_size;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
        port->Interface[0].poll   = port->CfgDesc.Itf_Desc[0].Ep_Desc[0].bInterval;
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba2e:	b29a      	uxth	r2, r3
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
        port->Interface[0].ep_addr = port->CfgDesc.Itf_Desc[0].Ep_Desc[0].bEndpointAddress;
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

        max_ep = port->CfgDesc.Itf_Desc[0].bNumEndpoints;
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba48:	73fb      	strb	r3, [r7, #15]
        num = 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	75bb      	strb	r3, [r7, #22]
        
        for (; num < max_ep; num++) {
 800ba4e:	e014      	b.n	800ba7a <USBH_HUB_Device_Enum+0x6ca>
            
            if (port->CfgDesc.Itf_Desc[0].Ep_Desc[num].bEndpointAddress & 0x80U) 
 800ba50:	7dbb      	ldrb	r3, [r7, #22]
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	3306      	adds	r3, #6
 800ba56:	00db      	lsls	r3, r3, #3
 800ba58:	4413      	add	r3, r2
 800ba5a:	7b1b      	ldrb	r3, [r3, #12]
 800ba5c:	b25b      	sxtb	r3, r3
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	da08      	bge.n	800ba74 <USBH_HUB_Device_Enum+0x6c4>
            {
				port->Interface[0].InEp = port->CfgDesc.Itf_Desc[0].Ep_Desc[num].bEndpointAddress;
 800ba62:	7dbb      	ldrb	r3, [r7, #22]
 800ba64:	683a      	ldr	r2, [r7, #0]
 800ba66:	3306      	adds	r3, #6
 800ba68:	00db      	lsls	r3, r3, #3
 800ba6a:	4413      	add	r3, r2
 800ba6c:	7b1a      	ldrb	r2, [r3, #12]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
        for (; num < max_ep; num++) {
 800ba74:	7dbb      	ldrb	r3, [r7, #22]
 800ba76:	3301      	adds	r3, #1
 800ba78:	75bb      	strb	r3, [r7, #22]
 800ba7a:	7dba      	ldrb	r2, [r7, #22]
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d3e6      	bcc.n	800ba50 <USBH_HUB_Device_Enum+0x6a0>
            } 
        }

        port->Interface[0].Pipe_in  = USBH_AllocPipe(phost,port->Interface[0].InEp);
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 800ba88:	4619      	mov	r1, r3
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f001 fd3f 	bl	800d50e <USBH_AllocPipe>
 800ba90:	4603      	mov	r3, r0
 800ba92:	461a      	mov	r2, r3
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6

        if ((port->CfgDesc.Itf_Desc[0].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[0].bInterfaceSubClass == 0x01 && port->CfgDesc.Itf_Desc[0].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE ) || (port->HIDDesc[0].RptDesc.type == REPORT_TYPE_KEYBOARD))
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800baa0:	2b03      	cmp	r3, #3
 800baa2:	d109      	bne.n	800bab8 <USBH_HUB_Device_Enum+0x708>
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d104      	bne.n	800bab8 <USBH_HUB_Device_Enum+0x708>
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d007      	beq.n	800bac8 <USBH_HUB_Device_Enum+0x718>
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800babe:	f003 0303 	and.w	r3, r3, #3
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	2b02      	cmp	r3, #2
 800bac6:	d104      	bne.n	800bad2 <USBH_HUB_Device_Enum+0x722>
        {       
            USBH_HUB_KeybdInit(&port->Interface[0]);
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	33e4      	adds	r3, #228	; 0xe4
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fe ff7b 	bl	800a9c8 <USBH_HUB_KeybdInit>
        }

        if ((port->CfgDesc.Itf_Desc[1].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[0].bInterfaceSubClass == 0x01 && port->CfgDesc.Itf_Desc[0].bInterfaceProtocol == HID_MOUSE_BOOT_CODE )|| (port->HIDDesc[0].RptDesc.type == REPORT_TYPE_MOUSE))
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800bad8:	2b03      	cmp	r3, #3
 800bada:	d109      	bne.n	800baf0 <USBH_HUB_Device_Enum+0x740>
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d104      	bne.n	800baf0 <USBH_HUB_Device_Enum+0x740>
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800baec:	2b02      	cmp	r3, #2
 800baee:	d007      	beq.n	800bb00 <USBH_HUB_Device_Enum+0x750>
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800baf6:	f003 0303 	and.w	r3, r3, #3
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d11c      	bne.n	800bb3a <USBH_HUB_Device_Enum+0x78a>
        {       
            port->Interface[0].length = port->HIDDesc[0].RptDesc.report_size + (port->HIDDesc[0].RptDesc.report_id?1:0);
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	bf14      	ite	ne
 800bb12:	2301      	movne	r3, #1
 800bb14:	2300      	moveq	r3, #0
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	4413      	add	r3, r2
 800bb1c:	b29a      	uxth	r2, r3
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
            port->Interface[0].HIDDesc = &port->HIDDesc[0];
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
            USBH_HUB_MouseInit(&port->Interface[0]);
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	33e4      	adds	r3, #228	; 0xe4
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7ff f855 	bl	800abe4 <USBH_HUB_MouseInit>
        }

        if (port->HIDDesc[0].RptDesc.type == REPORT_TYPE_JOYSTICK)
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800bb40:	f003 0303 	and.w	r3, r3, #3
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	2b03      	cmp	r3, #3
 800bb48:	d11c      	bne.n	800bb84 <USBH_HUB_Device_Enum+0x7d4>
        {       
            port->Interface[0].length = port->HIDDesc[0].RptDesc.report_size + (port->HIDDesc[0].RptDesc.report_id?1:0);
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800bb50:	b29a      	uxth	r2, r3
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	bf14      	ite	ne
 800bb5c:	2301      	movne	r3, #1
 800bb5e:	2300      	moveq	r3, #0
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	4413      	add	r3, r2
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
            port->Interface[0].HIDDesc = &port->HIDDesc[0];
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
            USBH_HUB_GamepadInit(&port->Interface[0]);
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	33e4      	adds	r3, #228	; 0xe4
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fe fc70 	bl	800a464 <USBH_HUB_GamepadInit>
        }

        if (port->CfgDesc.bNumInterfaces>1)
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d905      	bls.n	800bb9a <USBH_HUB_Device_Enum+0x7ea>
        {
            //read second interface HID Descriptor if exist
            status = USBH_BUSY;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	75fb      	strb	r3, [r7, #23]
            port->EnumState = HUB_ENUM_INTERFACE_2_INIT;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2215      	movs	r2, #21
 800bb96:	719a      	strb	r2, [r3, #6]
        } else
        {
		    port->EnumState = HUB_ENUM_READY;
            status = USBH_BUSY;
        }
    break;
 800bb98:	e0eb      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
		    port->EnumState = HUB_ENUM_READY;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	2216      	movs	r2, #22
 800bb9e:	719a      	strb	r2, [r3, #6]
            status = USBH_BUSY;
 800bba0:	2301      	movs	r3, #1
 800bba2:	75fb      	strb	r3, [r7, #23]
    break;
 800bba4:	e0e5      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>

    case HUB_ENUM_INTERFACE_2_INIT:
        port->Interface[1].Id = 1;
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        port->Interface[1].length = port->HIDDesc[1].RptDesc.report_size;
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800bbb4:	b29a      	uxth	r2, r3
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
        port->Interface[1].poll   = port->CfgDesc.Itf_Desc[1].Ep_Desc[0].bInterval;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
        port->Interface[1].ep_addr = port->CfgDesc.Itf_Desc[1].Ep_Desc[0].bEndpointAddress;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158

        max_ep = port->CfgDesc.Itf_Desc[1].bNumEndpoints;
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bbdc:	73fb      	strb	r3, [r7, #15]
        num = 0;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	75bb      	strb	r3, [r7, #22]

        for (; num < max_ep; num++) {
 800bbe2:	e016      	b.n	800bc12 <USBH_HUB_Device_Enum+0x862>
            
        if (port->CfgDesc.Itf_Desc[1].Ep_Desc[num].bEndpointAddress & 0x80U) 
 800bbe4:	7dbb      	ldrb	r3, [r7, #22]
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	00db      	lsls	r3, r3, #3
 800bbec:	4413      	add	r3, r2
 800bbee:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bbf2:	b25b      	sxtb	r3, r3
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	da09      	bge.n	800bc0c <USBH_HUB_Device_Enum+0x85c>
        {
	    	port->Interface[1].InEp = port->CfgDesc.Itf_Desc[1].Ep_Desc[num].bEndpointAddress;
 800bbf8:	7dbb      	ldrb	r3, [r7, #22]
 800bbfa:	683a      	ldr	r2, [r7, #0]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	00db      	lsls	r3, r3, #3
 800bc00:	4413      	add	r3, r2
 800bc02:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
        for (; num < max_ep; num++) {
 800bc0c:	7dbb      	ldrb	r3, [r7, #22]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	75bb      	strb	r3, [r7, #22]
 800bc12:	7dba      	ldrb	r2, [r7, #22]
 800bc14:	7bfb      	ldrb	r3, [r7, #15]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d3e4      	bcc.n	800bbe4 <USBH_HUB_Device_Enum+0x834>
        } 
        }
            port->Interface[1].Pipe_in =  USBH_AllocPipe(phost,port->Interface[1].InEp);
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800bc20:	4619      	mov	r1, r3
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f001 fc73 	bl	800d50e <USBH_AllocPipe>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152

        if ((port->CfgDesc.Itf_Desc[1].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[1].bInterfaceSubClass == 0x01 && port->CfgDesc.Itf_Desc[1].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE) || (port->HIDDesc[1].RptDesc.type == REPORT_TYPE_KEYBOARD))
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800bc38:	2b03      	cmp	r3, #3
 800bc3a:	d109      	bne.n	800bc50 <USBH_HUB_Device_Enum+0x8a0>
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d104      	bne.n	800bc50 <USBH_HUB_Device_Enum+0x8a0>
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d007      	beq.n	800bc60 <USBH_HUB_Device_Enum+0x8b0>
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800bc56:	f003 0303 	and.w	r3, r3, #3
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d105      	bne.n	800bc6c <USBH_HUB_Device_Enum+0x8bc>
        {       
            USBH_HUB_KeybdInit(&port->Interface[1]);
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7fe feae 	bl	800a9c8 <USBH_HUB_KeybdInit>
        }

        if ((port->CfgDesc.Itf_Desc[1].bInterfaceClass == 0x03 && port->CfgDesc.Itf_Desc[1].bInterfaceSubClass == 0x01 && port->CfgDesc.Itf_Desc[1].bInterfaceProtocol == HID_MOUSE_BOOT_CODE ) || (port->HIDDesc[1].RptDesc.type == REPORT_TYPE_MOUSE))
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	d109      	bne.n	800bc8a <USBH_HUB_Device_Enum+0x8da>
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d104      	bne.n	800bc8a <USBH_HUB_Device_Enum+0x8da>
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc86:	2b02      	cmp	r3, #2
 800bc88:	d007      	beq.n	800bc9a <USBH_HUB_Device_Enum+0x8ea>
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800bc90:	f003 0303 	and.w	r3, r3, #3
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d11d      	bne.n	800bcd6 <USBH_HUB_Device_Enum+0x926>
        {       
            port->Interface[1].length = port->HIDDesc[1].RptDesc.report_size + (port->HIDDesc[1].RptDesc.report_id?1:0);
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	bf14      	ite	ne
 800bcac:	2301      	movne	r3, #1
 800bcae:	2300      	moveq	r3, #0
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	4413      	add	r3, r2
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
            port->Interface[1].HIDDesc = &port->HIDDesc[1];
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
            USBH_HUB_MouseInit(&port->Interface[1]);
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7fe ff87 	bl	800abe4 <USBH_HUB_MouseInit>
        }

        if (port->HIDDesc[1].RptDesc.type == REPORT_TYPE_JOYSTICK)
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800bcdc:	f003 0303 	and.w	r3, r3, #3
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2b03      	cmp	r3, #3
 800bce4:	d117      	bne.n	800bd16 <USBH_HUB_Device_Enum+0x966>
        {       
            port->Interface[1].length = port->HIDDesc[1].RptDesc.report_size + (port->HIDDesc[1].RptDesc.report_id?1:0);
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	bf14      	ite	ne
 800bcf8:	2301      	movne	r3, #1
 800bcfa:	2300      	moveq	r3, #0
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	4413      	add	r3, r2
 800bd02:	b29a      	uxth	r2, r3
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
            USBH_HUB_GamepadInit(&port->Interface[1]);
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fe fba7 	bl	800a464 <USBH_HUB_GamepadInit>
        }
    		port->EnumState = HUB_ENUM_READY;
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	2216      	movs	r2, #22
 800bd1a:	719a      	strb	r2, [r3, #6]
            status = USBH_BUSY;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	75fb      	strb	r3, [r7, #23]
    break;
 800bd20:	e027      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>

    case HUB_ENUM_READY:
        status = USBH_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	75fb      	strb	r3, [r7, #23]
    break;
 800bd26:	e024      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd28:	bf00      	nop
 800bd2a:	e022      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd2c:	bf00      	nop
 800bd2e:	e020      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd30:	bf00      	nop
 800bd32:	e01e      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd34:	bf00      	nop
 800bd36:	e01c      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
        break;
 800bd38:	bf00      	nop
 800bd3a:	e01a      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd3c:	bf00      	nop
 800bd3e:	e018      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd40:	bf00      	nop
 800bd42:	e016      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd44:	bf00      	nop
 800bd46:	e014      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd48:	bf00      	nop
 800bd4a:	e012      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd4c:	bf00      	nop
 800bd4e:	e010      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd50:	bf00      	nop
 800bd52:	e00e      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd54:	bf00      	nop
 800bd56:	e00c      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd58:	bf00      	nop
 800bd5a:	e00a      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd5c:	bf00      	nop
 800bd5e:	e008      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd60:	bf00      	nop
 800bd62:	e006      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd64:	bf00      	nop
 800bd66:	e004      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd68:	bf00      	nop
 800bd6a:	e002      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd6c:	bf00      	nop
 800bd6e:	e000      	b.n	800bd72 <USBH_HUB_Device_Enum+0x9c2>
    break;
 800bd70:	bf00      	nop

   }
    return status;
 800bd72:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3718      	adds	r7, #24
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <USBH_HUB_Device_Process>:


USBH_StatusTypeDef USBH_HUB_Device_Process(USBH_HandleTypeDef *phost)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b088      	sub	sp, #32
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
uint8_t XferSize;
USBH_StatusTypeDef status = USBH_BUSY;
 800bd84:	2301      	movs	r3, #1
 800bd86:	77fb      	strb	r3, [r7, #31]
HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bd8e:	6a1b      	ldr	r3, [r3, #32]
 800bd90:	61bb      	str	r3, [r7, #24]
HUB_Port_Interface_HandleTypeDef *Itf; 


USBH_URBStateTypeDef URBStatus;

uint8_t interfaceNumber =  HUB_Handle->current_Itf_number ;
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd98:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800bd9c:	75fb      	strb	r3, [r7, #23]
uint8_t portNumber = HUB_Handle->current_port_number ;
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bda4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bda8:	75bb      	strb	r3, [r7, #22]

    port = (HUB_Port_HandleTypeDef *) &HUB_Handle->Port[portNumber];
 800bdaa:	7dbb      	ldrb	r3, [r7, #22]
 800bdac:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 800bdb0:	fb02 f303 	mul.w	r3, r2, r3
 800bdb4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bdb8:	69ba      	ldr	r2, [r7, #24]
 800bdba:	4413      	add	r3, r2
 800bdbc:	613b      	str	r3, [r7, #16]
    if (port->EnumState != HUB_ENUM_READY) 
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	799b      	ldrb	r3, [r3, #6]
 800bdc2:	2b16      	cmp	r3, #22
 800bdc4:	d01b      	beq.n	800bdfe <USBH_HUB_Device_Process+0x82>
    {
        if(HUB_Handle->current_port_number == 3)
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdcc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bdd0:	2b03      	cmp	r3, #3
 800bdd2:	d106      	bne.n	800bde2 <USBH_HUB_Device_Process+0x66>
        {
            HUB_Handle->current_port_number = 0;
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdda:	2200      	movs	r2, #0
 800bddc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800bde0:	e00b      	b.n	800bdfa <USBH_HUB_Device_Process+0x7e>
        } 
        else
        {
            HUB_Handle->current_port_number++;
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bde8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bdec:	3301      	adds	r3, #1
 800bdee:	b2da      	uxtb	r2, r3
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdf6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        }
     return status;
 800bdfa:	7ffb      	ldrb	r3, [r7, #31]
 800bdfc:	e07d      	b.n	800befa <USBH_HUB_Device_Process+0x17e>
    }

    Itf = (HUB_Port_Interface_HandleTypeDef *) &port->Interface[interfaceNumber];
 800bdfe:	7dfb      	ldrb	r3, [r7, #23]
 800be00:	226c      	movs	r2, #108	; 0x6c
 800be02:	fb02 f303 	mul.w	r3, r2, r3
 800be06:	33e0      	adds	r3, #224	; 0xe0
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	4413      	add	r3, r2
 800be0c:	3304      	adds	r3, #4
 800be0e:	60fb      	str	r3, [r7, #12]

    switch(Itf->state)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	791b      	ldrb	r3, [r3, #4]
 800be14:	2b02      	cmp	r3, #2
 800be16:	d027      	beq.n	800be68 <USBH_HUB_Device_Process+0xec>
 800be18:	2b02      	cmp	r3, #2
 800be1a:	dc6d      	bgt.n	800bef8 <USBH_HUB_Device_Process+0x17c>
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d002      	beq.n	800be26 <USBH_HUB_Device_Process+0xaa>
 800be20:	2b01      	cmp	r3, #1
 800be22:	d00a      	beq.n	800be3a <USBH_HUB_Device_Process+0xbe>
 800be24:	e068      	b.n	800bef8 <USBH_HUB_Device_Process+0x17c>
    {
        case HUB_DEVICE_INIT:
        USBH_HUB_SETUP_PIPES(phost,HUB_Handle,port,Itf);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	693a      	ldr	r2, [r7, #16]
 800be2a:	69b9      	ldr	r1, [r7, #24]
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 f868 	bl	800bf02 <USBH_HUB_SETUP_PIPES>
        Itf->state = HUB_DEVICE_GET_DATA;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2201      	movs	r2, #1
 800be36:	711a      	strb	r2, [r3, #4]
        break;
 800be38:	e05e      	b.n	800bef8 <USBH_HUB_Device_Process+0x17c>
        case HUB_DEVICE_GET_DATA:
                
                USBH_InterruptReceiveData(phost, Itf->pData, (uint8_t) Itf->length, Itf->Pipe_in);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f103 0118 	add.w	r1, r3, #24
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	88db      	ldrh	r3, [r3, #6]
 800be44:	b2da      	uxtb	r2, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	789b      	ldrb	r3, [r3, #2]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f001 fb11 	bl	800d472 <USBH_InterruptReceiveData>
                Itf->timer = phost->Timer;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	60da      	str	r2, [r3, #12]
	            Itf->DataReady = 0U;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2200      	movs	r2, #0
 800be5e:	741a      	strb	r2, [r3, #16]
                Itf->state = HUB_DEVICE_POLL;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2202      	movs	r2, #2
 800be64:	711a      	strb	r2, [r3, #4]
        break;
 800be66:	e047      	b.n	800bef8 <USBH_HUB_Device_Process+0x17c>

        case HUB_DEVICE_POLL:
                    URBStatus = USBH_LL_GetURBState(phost, Itf->Pipe_in);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	789b      	ldrb	r3, [r3, #2]
 800be6c:	4619      	mov	r1, r3
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f001 ff4e 	bl	800dd10 <USBH_LL_GetURBState>
 800be74:	4603      	mov	r3, r0
 800be76:	72fb      	strb	r3, [r7, #11]
                    if (URBStatus== USBH_URB_DONE)
 800be78:	7afb      	ldrb	r3, [r7, #11]
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d124      	bne.n	800bec8 <USBH_HUB_Device_Process+0x14c>
                    {
			            XferSize = USBH_LL_GetLastXferSize(phost, Itf->Pipe_in);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	789b      	ldrb	r3, [r3, #2]
 800be82:	4619      	mov	r1, r3
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f001 feb1 	bl	800dbec <USBH_LL_GetLastXferSize>
 800be8a:	4603      	mov	r3, r0
 800be8c:	72bb      	strb	r3, [r7, #10]

                        if (Itf->DataReady == 0U && XferSize != 0U) 
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	7c1b      	ldrb	r3, [r3, #16]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d118      	bne.n	800bec8 <USBH_HUB_Device_Process+0x14c>
 800be96:	7abb      	ldrb	r3, [r7, #10]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d015      	beq.n	800bec8 <USBH_HUB_Device_Process+0x14c>
                        { 
                            USBH_HID_FifoWrite(&Itf->fifo, Itf->pData, Itf->length);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f103 0118 	add.w	r1, r3, #24
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	88db      	ldrh	r3, [r3, #6]
 800beac:	461a      	mov	r2, r3
 800beae:	f7fc fcfa 	bl	80088a6 <USBH_HID_FifoWrite>
				            Itf->DataReady = 1U;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2201      	movs	r2, #1
 800beb6:	741a      	strb	r2, [r3, #16]
                            
                            Itf->state = HUB_DEVICE_GET_DATA;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2201      	movs	r2, #1
 800bebc:	711a      	strb	r2, [r3, #4]

                            USBH_Next_Interface_Port(phost,port);
 800bebe:	6939      	ldr	r1, [r7, #16]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7fe fa71 	bl	800a3a8 <USBH_Next_Interface_Port>

                            break;
 800bec6:	e017      	b.n	800bef8 <USBH_HUB_Device_Process+0x17c>
                        }
			        }
                    if (URBStatus == USBH_URB_STALL)
 800bec8:	7afb      	ldrb	r3, [r7, #11]
 800beca:	2b05      	cmp	r3, #5
 800becc:	d10d      	bne.n	800beea <USBH_HUB_Device_Process+0x16e>
                    {
                           while (USBH_ClrFeature(phost, Itf->ep_addr) == USBH_OK);
 800bece:	bf00      	nop
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	7a1b      	ldrb	r3, [r3, #8]
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fedd 	bl	800cc96 <USBH_ClrFeature>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d0f6      	beq.n	800bed0 <USBH_HUB_Device_Process+0x154>
                           Itf->state = HUB_DEVICE_GET_DATA;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2201      	movs	r2, #1
 800bee6:	711a      	strb	r2, [r3, #4]
                           break;
 800bee8:	e006      	b.n	800bef8 <USBH_HUB_Device_Process+0x17c>
                    }

                    if (URBStatus == USBH_URB_ERROR)
 800beea:	7afb      	ldrb	r3, [r7, #11]
 800beec:	2b04      	cmp	r3, #4
 800beee:	d103      	bne.n	800bef8 <USBH_HUB_Device_Process+0x17c>
                    {
                        Itf->state = HUB_DEVICE_GET_DATA;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2201      	movs	r2, #1
 800bef4:	711a      	strb	r2, [r3, #4]
                        break;
 800bef6:	bf00      	nop
                    }
    }

return status;
 800bef8:	7ffb      	ldrb	r3, [r7, #31]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3720      	adds	r7, #32
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <USBH_HUB_SETUP_PIPES>:

void USBH_HUB_SETUP_PIPES(USBH_HandleTypeDef *phost,HUB_HandleTypeDef *HUB_Handle,HUB_Port_HandleTypeDef *port,HUB_Port_Interface_HandleTypeDef *Itf)
{
 800bf02:	b590      	push	{r4, r7, lr}
 800bf04:	b089      	sub	sp, #36	; 0x24
 800bf06:	af04      	add	r7, sp, #16
 800bf08:	60f8      	str	r0, [r7, #12]
 800bf0a:	60b9      	str	r1, [r7, #8]
 800bf0c:	607a      	str	r2, [r7, #4]
 800bf0e:	603b      	str	r3, [r7, #0]
	USBH_OpenPipe(phost, Itf->Pipe_in, Itf->InEp, port->address, port->speed, USB_EP_TYPE_INTR, Itf->length);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	7899      	ldrb	r1, [r3, #2]
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	78d8      	ldrb	r0, [r3, #3]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	7a1c      	ldrb	r4, [r3, #8]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	7a5b      	ldrb	r3, [r3, #9]
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	88d2      	ldrh	r2, [r2, #6]
 800bf24:	9202      	str	r2, [sp, #8]
 800bf26:	2203      	movs	r2, #3
 800bf28:	9201      	str	r2, [sp, #4]
 800bf2a:	9300      	str	r3, [sp, #0]
 800bf2c:	4623      	mov	r3, r4
 800bf2e:	4602      	mov	r2, r0
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f001 fabd 	bl	800d4b0 <USBH_OpenPipe>
	USBH_LL_SetToggle(phost, Itf->Pipe_in, 0U);
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	789b      	ldrb	r3, [r3, #2]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	f001 ff07 	bl	800dd52 <USBH_LL_SetToggle>
 800bf44:	bf00      	nop
 800bf46:	3714      	adds	r7, #20
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd90      	pop	{r4, r7, pc}

0800bf4c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	4613      	mov	r3, r2
 800bf58:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d101      	bne.n	800bf64 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bf60:	2302      	movs	r3, #2
 800bf62:	e029      	b.n	800bfb8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	79fa      	ldrb	r2, [r7, #7]
 800bf68:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
  phost->ClassNumber = 0U;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2200      	movs	r2, #0
 800bf78:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f000 f81f 	bl	800bfc0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2200      	movs	r2, #0
 800bf96:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d003      	beq.n	800bfb0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	f001 fd2b 	bl	800da0c <USBH_LL_Init>

  return USBH_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bfcc:	2300      	movs	r3, #0
 800bfce:	60fb      	str	r3, [r7, #12]
 800bfd0:	e008      	b.n	800bfe4 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	32e2      	adds	r2, #226	; 0xe2
 800bfd8:	2100      	movs	r1, #0
 800bfda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	60fb      	str	r3, [r7, #12]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2b0e      	cmp	r3, #14
 800bfe8:	d9f3      	bls.n	800bfd2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bfea:	2300      	movs	r3, #0
 800bfec:	60fb      	str	r3, [r7, #12]
 800bfee:	e009      	b.n	800c004 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	4413      	add	r3, r2
 800bff6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bffa:	2200      	movs	r2, #0
 800bffc:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	3301      	adds	r3, #1
 800c002:	60fb      	str	r3, [r7, #12]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c00a:	d3f1      	bcc.n	800bff0 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  phost->Control.state = CTRL_SETUP;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2201      	movs	r2, #1
 800c02a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2240      	movs	r2, #64	; 0x40
 800c030:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c058:	2300      	movs	r3, #0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3714      	adds	r7, #20
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c066:	b480      	push	{r7}
 800c068:	b085      	sub	sp, #20
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c070:	2300      	movs	r3, #0
 800c072:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d016      	beq.n	800c0a8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800c080:	2b01      	cmp	r3, #1
 800c082:	d80e      	bhi.n	800c0a2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800c08a:	1c59      	adds	r1, r3, #1
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	f8c2 1384 	str.w	r1, [r2, #900]	; 0x384
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	33de      	adds	r3, #222	; 0xde
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c09c:	2300      	movs	r3, #0
 800c09e:	73fb      	strb	r3, [r7, #15]
 800c0a0:	e004      	b.n	800c0ac <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c0a2:	2302      	movs	r3, #2
 800c0a4:	73fb      	strb	r3, [r7, #15]
 800c0a6:	e001      	b.n	800c0ac <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c0a8:	2302      	movs	r3, #2
 800c0aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	b085      	sub	sp, #20
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c0d0:	78fa      	ldrb	r2, [r7, #3]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d204      	bcs.n	800c0e0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	78fa      	ldrb	r2, [r7, #3]
 800c0da:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c0de:	e001      	b.n	800c0e4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3714      	adds	r7, #20
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr

0800c0f2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c0f2:	b480      	push	{r7}
 800c0f4:	b087      	sub	sp, #28
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
 800c0fa:	4608      	mov	r0, r1
 800c0fc:	4611      	mov	r1, r2
 800c0fe:	461a      	mov	r2, r3
 800c100:	4603      	mov	r3, r0
 800c102:	70fb      	strb	r3, [r7, #3]
 800c104:	460b      	mov	r3, r1
 800c106:	70bb      	strb	r3, [r7, #2]
 800c108:	4613      	mov	r3, r2
 800c10a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c10c:	2300      	movs	r3, #0
 800c10e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c110:	2300      	movs	r3, #0
 800c112:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c11a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c11c:	e025      	b.n	800c16a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c11e:	7dfb      	ldrb	r3, [r7, #23]
 800c120:	221a      	movs	r2, #26
 800c122:	fb02 f303 	mul.w	r3, r2, r3
 800c126:	3308      	adds	r3, #8
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	4413      	add	r3, r2
 800c12c:	3302      	adds	r3, #2
 800c12e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	795b      	ldrb	r3, [r3, #5]
 800c134:	78fa      	ldrb	r2, [r7, #3]
 800c136:	429a      	cmp	r2, r3
 800c138:	d002      	beq.n	800c140 <USBH_FindInterface+0x4e>
 800c13a:	78fb      	ldrb	r3, [r7, #3]
 800c13c:	2bff      	cmp	r3, #255	; 0xff
 800c13e:	d111      	bne.n	800c164 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c144:	78ba      	ldrb	r2, [r7, #2]
 800c146:	429a      	cmp	r2, r3
 800c148:	d002      	beq.n	800c150 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c14a:	78bb      	ldrb	r3, [r7, #2]
 800c14c:	2bff      	cmp	r3, #255	; 0xff
 800c14e:	d109      	bne.n	800c164 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c154:	787a      	ldrb	r2, [r7, #1]
 800c156:	429a      	cmp	r2, r3
 800c158:	d002      	beq.n	800c160 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c15a:	787b      	ldrb	r3, [r7, #1]
 800c15c:	2bff      	cmp	r3, #255	; 0xff
 800c15e:	d101      	bne.n	800c164 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c160:	7dfb      	ldrb	r3, [r7, #23]
 800c162:	e006      	b.n	800c172 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c164:	7dfb      	ldrb	r3, [r7, #23]
 800c166:	3301      	adds	r3, #1
 800c168:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c16a:	7dfb      	ldrb	r3, [r7, #23]
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d9d6      	bls.n	800c11e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c170:	23ff      	movs	r3, #255	; 0xff
}
 800c172:	4618      	mov	r0, r3
 800c174:	371c      	adds	r7, #28
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b082      	sub	sp, #8
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f001 fcb8 	bl	800dafc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c18c:	2101      	movs	r1, #1
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f001 fdd1 	bl	800dd36 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	3708      	adds	r7, #8
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
	...

0800c1a0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b088      	sub	sp, #32
 800c1a4:	af04      	add	r7, sp, #16
 800c1a6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c1a8:	2302      	movs	r3, #2
 800c1aa:	737b      	strb	r3, [r7, #13]
  uint8_t idx = 0U;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d102      	bne.n	800c1c2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2203      	movs	r2, #3
 800c1c0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	2b0b      	cmp	r3, #11
 800c1ca:	f200 81b8 	bhi.w	800c53e <USBH_Process+0x39e>
 800c1ce:	a201      	add	r2, pc, #4	; (adr r2, 800c1d4 <USBH_Process+0x34>)
 800c1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d4:	0800c205 	.word	0x0800c205
 800c1d8:	0800c237 	.word	0x0800c237
 800c1dc:	0800c29f 	.word	0x0800c29f
 800c1e0:	0800c4d9 	.word	0x0800c4d9
 800c1e4:	0800c53f 	.word	0x0800c53f
 800c1e8:	0800c343 	.word	0x0800c343
 800c1ec:	0800c47f 	.word	0x0800c47f
 800c1f0:	0800c379 	.word	0x0800c379
 800c1f4:	0800c399 	.word	0x0800c399
 800c1f8:	0800c3b9 	.word	0x0800c3b9
 800c1fc:	0800c3e7 	.word	0x0800c3e7
 800c200:	0800c4c1 	.word	0x0800c4c1
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 8198 	beq.w	800c542 <USBH_Process+0x3a2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2201      	movs	r2, #1
 800c216:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c218:	20c8      	movs	r0, #200	; 0xc8
 800c21a:	f001 fdca 	bl	800ddb2 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f001 fcc9 	bl	800dbb6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c234:	e185      	b.n	800c542 <USBH_Process+0x3a2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d107      	bne.n	800c250 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2202      	movs	r2, #2
 800c24c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c24e:	e187      	b.n	800c560 <USBH_Process+0x3c0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800c256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c25a:	d914      	bls.n	800c286 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c262:	3301      	adds	r3, #1
 800c264:	b2da      	uxtb	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c272:	2b03      	cmp	r3, #3
 800c274:	d903      	bls.n	800c27e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	220d      	movs	r2, #13
 800c27a:	701a      	strb	r2, [r3, #0]
      break;
 800c27c:	e170      	b.n	800c560 <USBH_Process+0x3c0>
            phost->gState = HOST_IDLE;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	701a      	strb	r2, [r3, #0]
      break;
 800c284:	e16c      	b.n	800c560 <USBH_Process+0x3c0>
          phost->Timeout += 10U;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800c28c:	f103 020a 	add.w	r2, r3, #10
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
          USBH_Delay(10U);
 800c296:	200a      	movs	r0, #10
 800c298:	f001 fd8b 	bl	800ddb2 <USBH_Delay>
      break;
 800c29c:	e160      	b.n	800c560 <USBH_Process+0x3c0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d005      	beq.n	800c2b4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c2ae:	2104      	movs	r1, #4
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c2b4:	2064      	movs	r0, #100	; 0x64
 800c2b6:	f001 fd7c 	bl	800ddb2 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f001 fc54 	bl	800db68 <USBH_LL_GetSpeed>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2205      	movs	r2, #5
 800c2ce:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f001 f91b 	bl	800d50e <USBH_AllocPipe>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	461a      	mov	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c2e0:	2180      	movs	r1, #128	; 0x80
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f001 f913 	bl	800d50e <USBH_AllocPipe>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	7919      	ldrb	r1, [r3, #4]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c304:	b292      	uxth	r2, r2
 800c306:	9202      	str	r2, [sp, #8]
 800c308:	2200      	movs	r2, #0
 800c30a:	9201      	str	r2, [sp, #4]
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	4603      	mov	r3, r0
 800c310:	2280      	movs	r2, #128	; 0x80
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f001 f8cc 	bl	800d4b0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	7959      	ldrb	r1, [r3, #5]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c32c:	b292      	uxth	r2, r2
 800c32e:	9202      	str	r2, [sp, #8]
 800c330:	2200      	movs	r2, #0
 800c332:	9201      	str	r2, [sp, #4]
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	4603      	mov	r3, r0
 800c338:	2200      	movs	r2, #0
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f001 f8b8 	bl	800d4b0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c340:	e10e      	b.n	800c560 <USBH_Process+0x3c0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f912 	bl	800c56c <USBH_HandleEnum>
 800c348:	4603      	mov	r3, r0
 800c34a:	737b      	strb	r3, [r7, #13]
      if (status == USBH_OK)
 800c34c:	7b7b      	ldrb	r3, [r7, #13]
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	2b00      	cmp	r3, #0
 800c352:	f040 80f8 	bne.w	800c546 <USBH_Process+0x3a6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c364:	2b01      	cmp	r3, #1
 800c366:	d103      	bne.n	800c370 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2208      	movs	r2, #8
 800c36c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c36e:	e0ea      	b.n	800c546 <USBH_Process+0x3a6>
          phost->gState = HOST_INPUT;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2207      	movs	r2, #7
 800c374:	701a      	strb	r2, [r3, #0]
      break;
 800c376:	e0e6      	b.n	800c546 <USBH_Process+0x3a6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f000 80e3 	beq.w	800c54a <USBH_Process+0x3aa>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c38a:	2101      	movs	r1, #1
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2208      	movs	r2, #8
 800c394:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c396:	e0d8      	b.n	800c54a <USBH_Process+0x3aa>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fc30 	bl	800cc08 <USBH_SetCfg>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f040 80cf 	bne.w	800c54e <USBH_Process+0x3ae>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2209      	movs	r2, #9
 800c3b4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c3b6:	e0ca      	b.n	800c54e <USBH_Process+0x3ae>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c3be:	f003 0320 	and.w	r3, r3, #32
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00b      	beq.n	800c3de <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c3c6:	2101      	movs	r1, #1
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fc40 	bl	800cc4e <USBH_SetFeature>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f040 80be 	bne.w	800c552 <USBH_Process+0x3b2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	220a      	movs	r2, #10
 800c3da:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c3dc:	e0b9      	b.n	800c552 <USBH_Process+0x3b2>
        phost->gState = HOST_CHECK_CLASS;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	220a      	movs	r2, #10
 800c3e2:	701a      	strb	r2, [r3, #0]
      break;
 800c3e4:	e0b5      	b.n	800c552 <USBH_Process+0x3b2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f000 80b2 	beq.w	800c556 <USBH_Process+0x3b6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	73fb      	strb	r3, [r7, #15]
 800c3fe:	e016      	b.n	800c42e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c400:	7bfa      	ldrb	r2, [r7, #15]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	32de      	adds	r2, #222	; 0xde
 800c406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c40a:	791a      	ldrb	r2, [r3, #4]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c412:	429a      	cmp	r2, r3
 800c414:	d108      	bne.n	800c428 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c416:	7bfa      	ldrb	r2, [r7, #15]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	32de      	adds	r2, #222	; 0xde
 800c41c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
            break;
 800c426:	e005      	b.n	800c434 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c428:	7bfb      	ldrb	r3, [r7, #15]
 800c42a:	3301      	adds	r3, #1
 800c42c:	73fb      	strb	r3, [r7, #15]
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
 800c430:	2b01      	cmp	r3, #1
 800c432:	d9e5      	bls.n	800c400 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d01b      	beq.n	800c476 <USBH_Process+0x2d6>
        {
         USBH_StatusTypeDef init_status = phost->pActiveClass->Init(phost);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	4798      	blx	r3
 800c44a:	4603      	mov	r3, r0
 800c44c:	73bb      	strb	r3, [r7, #14]
          if (init_status == USBH_OK)
 800c44e:	7bbb      	ldrb	r3, [r7, #14]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d109      	bne.n	800c468 <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2206      	movs	r2, #6
 800c458:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c460:	2103      	movs	r1, #3
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c466:	e076      	b.n	800c556 <USBH_Process+0x3b6>
          else if (init_status!= USBH_BUSY)
 800c468:	7bbb      	ldrb	r3, [r7, #14]
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d073      	beq.n	800c556 <USBH_Process+0x3b6>
            phost->gState = HOST_ABORT_STATE;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	220d      	movs	r2, #13
 800c472:	701a      	strb	r2, [r3, #0]
      break;
 800c474:	e06f      	b.n	800c556 <USBH_Process+0x3b6>
          phost->gState = HOST_ABORT_STATE;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	220d      	movs	r2, #13
 800c47a:	701a      	strb	r2, [r3, #0]
      break;
 800c47c:	e06b      	b.n	800c556 <USBH_Process+0x3b6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c484:	2b00      	cmp	r3, #0
 800c486:	d017      	beq.n	800c4b8 <USBH_Process+0x318>
      {
        status = phost->pActiveClass->Requests(phost);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	4798      	blx	r3
 800c494:	4603      	mov	r3, r0
 800c496:	737b      	strb	r3, [r7, #13]

        if (status == USBH_OK)
 800c498:	7b7b      	ldrb	r3, [r7, #13]
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d103      	bne.n	800c4a8 <USBH_Process+0x308>
        {
          phost->gState = HOST_CLASS;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	220b      	movs	r2, #11
 800c4a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c4a6:	e058      	b.n	800c55a <USBH_Process+0x3ba>
        else if (status == USBH_FAIL)
 800c4a8:	7b7b      	ldrb	r3, [r7, #13]
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	d154      	bne.n	800c55a <USBH_Process+0x3ba>
          phost->gState = HOST_ABORT_STATE;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	220d      	movs	r2, #13
 800c4b4:	701a      	strb	r2, [r3, #0]
      break;
 800c4b6:	e050      	b.n	800c55a <USBH_Process+0x3ba>
        phost->gState = HOST_ABORT_STATE;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	220d      	movs	r2, #13
 800c4bc:	701a      	strb	r2, [r3, #0]
      break;
 800c4be:	e04c      	b.n	800c55a <USBH_Process+0x3ba>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d049      	beq.n	800c55e <USBH_Process+0x3be>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c4d0:	695b      	ldr	r3, [r3, #20]
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	4798      	blx	r3
      }
      break;
 800c4d6:	e042      	b.n	800c55e <USBH_Process+0x3be>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f7ff fd6d 	bl	800bfc0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d009      	beq.n	800c504 <USBH_Process+0x364>
      {
        phost->pActiveClass->DeInit(phost);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
      }

      if (phost->pUser != NULL)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d005      	beq.n	800c51a <USBH_Process+0x37a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800c514:	2105      	movs	r1, #5
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c520:	b2db      	uxtb	r3, r3
 800c522:	2b01      	cmp	r3, #1
 800c524:	d107      	bne.n	800c536 <USBH_Process+0x396>
      {
        phost->device.is_ReEnumerated = 0U;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f7ff fe25 	bl	800c17e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c534:	e014      	b.n	800c560 <USBH_Process+0x3c0>
        USBH_LL_Start(phost);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f001 fae0 	bl	800dafc <USBH_LL_Start>
      break;
 800c53c:	e010      	b.n	800c560 <USBH_Process+0x3c0>

    case HOST_ABORT_STATE:
    default :
      break;
 800c53e:	bf00      	nop
 800c540:	e00e      	b.n	800c560 <USBH_Process+0x3c0>
      break;
 800c542:	bf00      	nop
 800c544:	e00c      	b.n	800c560 <USBH_Process+0x3c0>
      break;
 800c546:	bf00      	nop
 800c548:	e00a      	b.n	800c560 <USBH_Process+0x3c0>
    break;
 800c54a:	bf00      	nop
 800c54c:	e008      	b.n	800c560 <USBH_Process+0x3c0>
      break;
 800c54e:	bf00      	nop
 800c550:	e006      	b.n	800c560 <USBH_Process+0x3c0>
      break;
 800c552:	bf00      	nop
 800c554:	e004      	b.n	800c560 <USBH_Process+0x3c0>
      break;
 800c556:	bf00      	nop
 800c558:	e002      	b.n	800c560 <USBH_Process+0x3c0>
      break;
 800c55a:	bf00      	nop
 800c55c:	e000      	b.n	800c560 <USBH_Process+0x3c0>
      break;
 800c55e:	bf00      	nop
  }
  return USBH_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop

0800c56c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b088      	sub	sp, #32
 800c570:	af04      	add	r7, sp, #16
 800c572:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c574:	2301      	movs	r3, #1
 800c576:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c578:	2301      	movs	r3, #1
 800c57a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	785b      	ldrb	r3, [r3, #1]
 800c580:	2b07      	cmp	r3, #7
 800c582:	f200 81c1 	bhi.w	800c908 <USBH_HandleEnum+0x39c>
 800c586:	a201      	add	r2, pc, #4	; (adr r2, 800c58c <USBH_HandleEnum+0x20>)
 800c588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c58c:	0800c5ad 	.word	0x0800c5ad
 800c590:	0800c66b 	.word	0x0800c66b
 800c594:	0800c6d5 	.word	0x0800c6d5
 800c598:	0800c763 	.word	0x0800c763
 800c59c:	0800c7cd 	.word	0x0800c7cd
 800c5a0:	0800c83d 	.word	0x0800c83d
 800c5a4:	0800c883 	.word	0x0800c883
 800c5a8:	0800c8c9 	.word	0x0800c8c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c5ac:	2108      	movs	r1, #8
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fa50 	bl	800ca54 <USBH_Get_DevDesc>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c5b8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d130      	bne.n	800c620 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	7919      	ldrb	r1, [r3, #4]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c5e2:	b292      	uxth	r2, r2
 800c5e4:	9202      	str	r2, [sp, #8]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	9201      	str	r2, [sp, #4]
 800c5ea:	9300      	str	r3, [sp, #0]
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2280      	movs	r2, #128	; 0x80
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 ff5d 	bl	800d4b0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	7959      	ldrb	r1, [r3, #5]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c60a:	b292      	uxth	r2, r2
 800c60c:	9202      	str	r2, [sp, #8]
 800c60e:	2200      	movs	r2, #0
 800c610:	9201      	str	r2, [sp, #4]
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	4603      	mov	r3, r0
 800c616:	2200      	movs	r2, #0
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 ff49 	bl	800d4b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c61e:	e175      	b.n	800c90c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c620:	7bbb      	ldrb	r3, [r7, #14]
 800c622:	2b03      	cmp	r3, #3
 800c624:	f040 8172 	bne.w	800c90c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c62e:	3301      	adds	r3, #1
 800c630:	b2da      	uxtb	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c63e:	2b03      	cmp	r3, #3
 800c640:	d903      	bls.n	800c64a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	220d      	movs	r2, #13
 800c646:	701a      	strb	r2, [r3, #0]
      break;
 800c648:	e160      	b.n	800c90c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	795b      	ldrb	r3, [r3, #5]
 800c64e:	4619      	mov	r1, r3
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 ff7c 	bl	800d54e <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	791b      	ldrb	r3, [r3, #4]
 800c65a:	4619      	mov	r1, r3
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 ff76 	bl	800d54e <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	701a      	strb	r2, [r3, #0]
      break;
 800c668:	e150      	b.n	800c90c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c66a:	2112      	movs	r1, #18
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 f9f1 	bl	800ca54 <USBH_Get_DevDesc>
 800c672:	4603      	mov	r3, r0
 800c674:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c676:	7bbb      	ldrb	r3, [r7, #14]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d103      	bne.n	800c684 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2202      	movs	r2, #2
 800c680:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c682:	e145      	b.n	800c910 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c684:	7bbb      	ldrb	r3, [r7, #14]
 800c686:	2b03      	cmp	r3, #3
 800c688:	f040 8142 	bne.w	800c910 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c692:	3301      	adds	r3, #1
 800c694:	b2da      	uxtb	r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c6a2:	2b03      	cmp	r3, #3
 800c6a4:	d903      	bls.n	800c6ae <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	220d      	movs	r2, #13
 800c6aa:	701a      	strb	r2, [r3, #0]
      break;
 800c6ac:	e130      	b.n	800c910 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	795b      	ldrb	r3, [r3, #5]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 ff4a 	bl	800d54e <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	791b      	ldrb	r3, [r3, #4]
 800c6be:	4619      	mov	r1, r3
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 ff44 	bl	800d54e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	701a      	strb	r2, [r3, #0]
      break;
 800c6d2:	e11d      	b.n	800c910 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c6d4:	2101      	movs	r1, #1
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fa72 	bl	800cbc0 <USBH_SetAddress>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c6e0:	7bbb      	ldrb	r3, [r7, #14]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d132      	bne.n	800c74c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c6e6:	2002      	movs	r0, #2
 800c6e8:	f001 fb63 	bl	800ddb2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2203      	movs	r2, #3
 800c6f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	7919      	ldrb	r1, [r3, #4]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c70e:	b292      	uxth	r2, r2
 800c710:	9202      	str	r2, [sp, #8]
 800c712:	2200      	movs	r2, #0
 800c714:	9201      	str	r2, [sp, #4]
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	4603      	mov	r3, r0
 800c71a:	2280      	movs	r2, #128	; 0x80
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 fec7 	bl	800d4b0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	7959      	ldrb	r1, [r3, #5]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c736:	b292      	uxth	r2, r2
 800c738:	9202      	str	r2, [sp, #8]
 800c73a:	2200      	movs	r2, #0
 800c73c:	9201      	str	r2, [sp, #4]
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	4603      	mov	r3, r0
 800c742:	2200      	movs	r2, #0
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 feb3 	bl	800d4b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c74a:	e0e3      	b.n	800c914 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c74c:	7bbb      	ldrb	r3, [r7, #14]
 800c74e:	2b03      	cmp	r3, #3
 800c750:	f040 80e0 	bne.w	800c914 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	220d      	movs	r2, #13
 800c758:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	705a      	strb	r2, [r3, #1]
      break;
 800c760:	e0d8      	b.n	800c914 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c762:	2109      	movs	r1, #9
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 f99e 	bl	800caa6 <USBH_Get_CfgDesc>
 800c76a:	4603      	mov	r3, r0
 800c76c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c76e:	7bbb      	ldrb	r3, [r7, #14]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d103      	bne.n	800c77c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2204      	movs	r2, #4
 800c778:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c77a:	e0cd      	b.n	800c918 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c77c:	7bbb      	ldrb	r3, [r7, #14]
 800c77e:	2b03      	cmp	r3, #3
 800c780:	f040 80ca 	bne.w	800c918 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c78a:	3301      	adds	r3, #1
 800c78c:	b2da      	uxtb	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c79a:	2b03      	cmp	r3, #3
 800c79c:	d903      	bls.n	800c7a6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	220d      	movs	r2, #13
 800c7a2:	701a      	strb	r2, [r3, #0]
      break;
 800c7a4:	e0b8      	b.n	800c918 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	795b      	ldrb	r3, [r3, #5]
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fece 	bl	800d54e <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	791b      	ldrb	r3, [r3, #4]
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 fec8 	bl	800d54e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	701a      	strb	r2, [r3, #0]
      break;
 800c7ca:	e0a5      	b.n	800c918 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f966 	bl	800caa6 <USBH_Get_CfgDesc>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c7de:	7bbb      	ldrb	r3, [r7, #14]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d103      	bne.n	800c7ec <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2205      	movs	r2, #5
 800c7e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c7ea:	e097      	b.n	800c91c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c7ec:	7bbb      	ldrb	r3, [r7, #14]
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	f040 8094 	bne.w	800c91c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	b2da      	uxtb	r2, r3
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c80a:	2b03      	cmp	r3, #3
 800c80c:	d903      	bls.n	800c816 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	220d      	movs	r2, #13
 800c812:	701a      	strb	r2, [r3, #0]
      break;
 800c814:	e082      	b.n	800c91c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	795b      	ldrb	r3, [r3, #5]
 800c81a:	4619      	mov	r1, r3
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fe96 	bl	800d54e <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	791b      	ldrb	r3, [r3, #4]
 800c826:	4619      	mov	r1, r3
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 fe90 	bl	800d54e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2200      	movs	r2, #0
 800c838:	701a      	strb	r2, [r3, #0]
      break;
 800c83a:	e06f      	b.n	800c91c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c842:	2b00      	cmp	r3, #0
 800c844:	d019      	beq.n	800c87a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c852:	23ff      	movs	r3, #255	; 0xff
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f94c 	bl	800caf2 <USBH_Get_StringDesc>
 800c85a:	4603      	mov	r3, r0
 800c85c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c85e:	7bbb      	ldrb	r3, [r7, #14]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d103      	bne.n	800c86c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2206      	movs	r2, #6
 800c868:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c86a:	e059      	b.n	800c920 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c86c:	7bbb      	ldrb	r3, [r7, #14]
 800c86e:	2b03      	cmp	r3, #3
 800c870:	d156      	bne.n	800c920 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2206      	movs	r2, #6
 800c876:	705a      	strb	r2, [r3, #1]
      break;
 800c878:	e052      	b.n	800c920 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2206      	movs	r2, #6
 800c87e:	705a      	strb	r2, [r3, #1]
      break;
 800c880:	e04e      	b.n	800c920 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d019      	beq.n	800c8c0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c898:	23ff      	movs	r3, #255	; 0xff
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 f929 	bl	800caf2 <USBH_Get_StringDesc>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c8a4:	7bbb      	ldrb	r3, [r7, #14]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d103      	bne.n	800c8b2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2207      	movs	r2, #7
 800c8ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c8b0:	e038      	b.n	800c924 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8b2:	7bbb      	ldrb	r3, [r7, #14]
 800c8b4:	2b03      	cmp	r3, #3
 800c8b6:	d135      	bne.n	800c924 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2207      	movs	r2, #7
 800c8bc:	705a      	strb	r2, [r3, #1]
      break;
 800c8be:	e031      	b.n	800c924 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2207      	movs	r2, #7
 800c8c4:	705a      	strb	r2, [r3, #1]
      break;
 800c8c6:	e02d      	b.n	800c924 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d017      	beq.n	800c902 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c8de:	23ff      	movs	r3, #255	; 0xff
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 f906 	bl	800caf2 <USBH_Get_StringDesc>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c8ea:	7bbb      	ldrb	r3, [r7, #14]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d102      	bne.n	800c8f6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c8f4:	e018      	b.n	800c928 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8f6:	7bbb      	ldrb	r3, [r7, #14]
 800c8f8:	2b03      	cmp	r3, #3
 800c8fa:	d115      	bne.n	800c928 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	73fb      	strb	r3, [r7, #15]
      break;
 800c900:	e012      	b.n	800c928 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c902:	2300      	movs	r3, #0
 800c904:	73fb      	strb	r3, [r7, #15]
      break;
 800c906:	e00f      	b.n	800c928 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c908:	bf00      	nop
 800c90a:	e00e      	b.n	800c92a <USBH_HandleEnum+0x3be>
      break;
 800c90c:	bf00      	nop
 800c90e:	e00c      	b.n	800c92a <USBH_HandleEnum+0x3be>
      break;
 800c910:	bf00      	nop
 800c912:	e00a      	b.n	800c92a <USBH_HandleEnum+0x3be>
      break;
 800c914:	bf00      	nop
 800c916:	e008      	b.n	800c92a <USBH_HandleEnum+0x3be>
      break;
 800c918:	bf00      	nop
 800c91a:	e006      	b.n	800c92a <USBH_HandleEnum+0x3be>
      break;
 800c91c:	bf00      	nop
 800c91e:	e004      	b.n	800c92a <USBH_HandleEnum+0x3be>
      break;
 800c920:	bf00      	nop
 800c922:	e002      	b.n	800c92a <USBH_HandleEnum+0x3be>
      break;
 800c924:	bf00      	nop
 800c926:	e000      	b.n	800c92a <USBH_HandleEnum+0x3be>
      break;
 800c928:	bf00      	nop
  }
  return Status;
 800c92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3710      	adds	r7, #16
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	683a      	ldr	r2, [r7, #0]
 800c942:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
}
 800c946:	bf00      	nop
 800c948:	370c      	adds	r7, #12
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr

0800c952 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b082      	sub	sp, #8
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c960:	1c5a      	adds	r2, r3, #1
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
  USBH_HandleSof(phost);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 f804 	bl	800c976 <USBH_HandleSof>
}
 800c96e:	bf00      	nop
 800c970:	3708      	adds	r7, #8
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b082      	sub	sp, #8
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	b2db      	uxtb	r3, r3
 800c984:	2b0b      	cmp	r3, #11
 800c986:	d10a      	bne.n	800c99e <USBH_HandleSof+0x28>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d005      	beq.n	800c99e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c998:	699b      	ldr	r3, [r3, #24]
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	4798      	blx	r3
  }
}
 800c99e:	bf00      	nop
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c9a6:	b480      	push	{r7}
 800c9a8:	b083      	sub	sp, #12
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800c9b6:	bf00      	nop
}
 800c9b8:	370c      	adds	r7, #12
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr

0800c9c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c9c2:	b480      	push	{r7}
 800c9c4:	b083      	sub	sp, #12
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c9d2:	bf00      	nop
}
 800c9d4:	370c      	adds	r7, #12
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr

0800c9de <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c9de:	b480      	push	{r7}
 800c9e0:	b083      	sub	sp, #12
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c9fe:	2300      	movs	r3, #0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f001 f880 	bl	800db32 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	791b      	ldrb	r3, [r3, #4]
 800ca36:	4619      	mov	r1, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 fd88 	bl	800d54e <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	795b      	ldrb	r3, [r3, #5]
 800ca42:	4619      	mov	r1, r3
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 fd82 	bl	800d54e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3708      	adds	r7, #8
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b086      	sub	sp, #24
 800ca58:	af02      	add	r7, sp, #8
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, 0U,phost->device.Data,
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ca66:	78fa      	ldrb	r2, [r7, #3]
 800ca68:	b292      	uxth	r2, r2
 800ca6a:	9201      	str	r2, [sp, #4]
 800ca6c:	9300      	str	r3, [sp, #0]
 800ca6e:	2300      	movs	r3, #0
 800ca70:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca74:	2100      	movs	r1, #0
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 f868 	bl	800cb4c <USBH_GetDescriptor>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	73fb      	strb	r3, [r7, #15]
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10a      	bne.n	800ca9c <USBH_Get_DevDesc+0x48>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ca92:	78fa      	ldrb	r2, [r7, #3]
 800ca94:	b292      	uxth	r2, r2
 800ca96:	4619      	mov	r1, r3
 800ca98:	f000 f921 	bl	800ccde <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ca9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b086      	sub	sp, #24
 800caaa:	af02      	add	r7, sp, #8
 800caac:	6078      	str	r0, [r7, #4]
 800caae:	460b      	mov	r3, r1
 800cab0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	331c      	adds	r3, #28
 800cab6:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800cab8:	887b      	ldrh	r3, [r7, #2]
 800caba:	9301      	str	r3, [sp, #4]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	2300      	movs	r3, #0
 800cac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cac6:	2100      	movs	r1, #0
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f000 f83f 	bl	800cb4c <USBH_GetDescriptor>
 800cace:	4603      	mov	r3, r0
 800cad0:	72fb      	strb	r3, [r7, #11]
 800cad2:	7afb      	ldrb	r3, [r7, #11]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d107      	bne.n	800cae8 <USBH_Get_CfgDesc+0x42>
                                   USB_DESC_CONFIGURATION,0U,pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cade:	887a      	ldrh	r2, [r7, #2]
 800cae0:	68f9      	ldr	r1, [r7, #12]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 f96b 	bl	800cdbe <USBH_ParseCfgDesc>
  }

  return status;
 800cae8:	7afb      	ldrb	r3, [r7, #11]
}
 800caea:	4618      	mov	r0, r3
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}

0800caf2 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b088      	sub	sp, #32
 800caf6:	af02      	add	r7, sp, #8
 800caf8:	60f8      	str	r0, [r7, #12]
 800cafa:	607a      	str	r2, [r7, #4]
 800cafc:	461a      	mov	r2, r3
 800cafe:	460b      	mov	r3, r1
 800cb00:	72fb      	strb	r3, [r7, #11]
 800cb02:	4613      	mov	r3, r2
 800cb04:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800cb06:	7afb      	ldrb	r3, [r7, #11]
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800cb0e:	b299      	uxth	r1, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,0U,
                                   phost->device.Data, length)) == USBH_OK)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800cb16:	893a      	ldrh	r2, [r7, #8]
 800cb18:	9201      	str	r2, [sp, #4]
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	460a      	mov	r2, r1
 800cb20:	2100      	movs	r1, #0
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f000 f812 	bl	800cb4c <USBH_GetDescriptor>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	75fb      	strb	r3, [r7, #23]
 800cb2c:	7dfb      	ldrb	r3, [r7, #23]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d107      	bne.n	800cb42 <USBH_Get_StringDesc+0x50>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cb38:	893a      	ldrh	r2, [r7, #8]
 800cb3a:	6879      	ldr	r1, [r7, #4]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f000 fa3c 	bl	800cfba <USBH_ParseStringDesc>
  }

  return status;
 800cb42:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3718      	adds	r7, #24
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <USBH_GetDescriptor>:
                                      uint8_t  req_type,
                                      uint16_t value_idx,
									  uint8_t iface_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	4608      	mov	r0, r1
 800cb56:	4611      	mov	r1, r2
 800cb58:	461a      	mov	r2, r3
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	70fb      	strb	r3, [r7, #3]
 800cb5e:	460b      	mov	r3, r1
 800cb60:	803b      	strh	r3, [r7, #0]
 800cb62:	4613      	mov	r3, r2
 800cb64:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	789b      	ldrb	r3, [r3, #2]
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d11d      	bne.n	800cbaa <USBH_GetDescriptor+0x5e>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cb6e:	78fb      	ldrb	r3, [r7, #3]
 800cb70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb74:	b2da      	uxtb	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2206      	movs	r2, #6
 800cb7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	883a      	ldrh	r2, [r7, #0]
 800cb84:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cb86:	883b      	ldrh	r3, [r7, #0]
 800cb88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cb8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb90:	d104      	bne.n	800cb9c <USBH_GetDescriptor+0x50>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f240 4209 	movw	r2, #1033	; 0x409
 800cb98:	829a      	strh	r2, [r3, #20]
 800cb9a:	e003      	b.n	800cba4 <USBH_GetDescriptor+0x58>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = iface_idx;
 800cb9c:	78bb      	ldrb	r3, [r7, #2]
 800cb9e:	b29a      	uxth	r2, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	8aba      	ldrh	r2, [r7, #20]
 800cba8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cbaa:	8abb      	ldrh	r3, [r7, #20]
 800cbac:	461a      	mov	r2, r3
 800cbae:	6939      	ldr	r1, [r7, #16]
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 fa50 	bl	800d056 <USBH_CtlReq>
 800cbb6:	4603      	mov	r3, r0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3708      	adds	r7, #8
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	460b      	mov	r3, r1
 800cbca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	789b      	ldrb	r3, [r3, #2]
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d10f      	bne.n	800cbf4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2205      	movs	r2, #5
 800cbde:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cbe0:	78fb      	ldrb	r3, [r7, #3]
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2200      	movs	r2, #0
 800cbec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	2100      	movs	r1, #0
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 fa2c 	bl	800d056 <USBH_CtlReq>
 800cbfe:	4603      	mov	r3, r0
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3708      	adds	r7, #8
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	460b      	mov	r3, r1
 800cc12:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	789b      	ldrb	r3, [r3, #2]
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d10e      	bne.n	800cc3a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2209      	movs	r2, #9
 800cc26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	887a      	ldrh	r2, [r7, #2]
 800cc2c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 fa09 	bl	800d056 <USBH_CtlReq>
 800cc44:	4603      	mov	r3, r0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3708      	adds	r7, #8
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b082      	sub	sp, #8
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
 800cc56:	460b      	mov	r3, r1
 800cc58:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	789b      	ldrb	r3, [r3, #2]
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	d10f      	bne.n	800cc82 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2203      	movs	r2, #3
 800cc6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800cc6e:	78fb      	ldrb	r3, [r7, #3]
 800cc70:	b29a      	uxth	r2, r3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cc82:	2200      	movs	r2, #0
 800cc84:	2100      	movs	r1, #0
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 f9e5 	bl	800d056 <USBH_CtlReq>
 800cc8c:	4603      	mov	r3, r0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b082      	sub	sp, #8
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
 800cc9e:	460b      	mov	r3, r1
 800cca0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	789b      	ldrb	r3, [r3, #2]
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d10f      	bne.n	800ccca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2202      	movs	r2, #2
 800ccae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ccbc:	78fb      	ldrb	r3, [r7, #3]
 800ccbe:	b29a      	uxth	r2, r3
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ccca:	2200      	movs	r2, #0
 800cccc:	2100      	movs	r1, #0
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 f9c1 	bl	800d056 <USBH_CtlReq>
 800ccd4:	4603      	mov	r3, r0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ccde:	b480      	push	{r7}
 800cce0:	b085      	sub	sp, #20
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	60f8      	str	r0, [r7, #12]
 800cce6:	60b9      	str	r1, [r7, #8]
 800cce8:	4613      	mov	r3, r2
 800ccea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	781a      	ldrb	r2, [r3, #0]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	785a      	ldrb	r2, [r3, #1]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	3302      	adds	r3, #2
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	3303      	adds	r3, #3
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	021b      	lsls	r3, r3, #8
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	4313      	orrs	r3, r2
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	791a      	ldrb	r2, [r3, #4]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	795a      	ldrb	r2, [r3, #5]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	799a      	ldrb	r2, [r3, #6]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	79da      	ldrb	r2, [r3, #7]
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800cd38:	88fb      	ldrh	r3, [r7, #6]
 800cd3a:	2b08      	cmp	r3, #8
 800cd3c:	d939      	bls.n	800cdb2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	3308      	adds	r3, #8
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	b29a      	uxth	r2, r3
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	3309      	adds	r3, #9
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	021b      	lsls	r3, r3, #8
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	4313      	orrs	r3, r2
 800cd54:	b29a      	uxth	r2, r3
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	330a      	adds	r3, #10
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	b29a      	uxth	r2, r3
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	330b      	adds	r3, #11
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	021b      	lsls	r3, r3, #8
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	330c      	adds	r3, #12
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	330d      	adds	r3, #13
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	021b      	lsls	r3, r3, #8
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	b29a      	uxth	r2, r3
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	7b9a      	ldrb	r2, [r3, #14]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	7bda      	ldrb	r2, [r3, #15]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	7c1a      	ldrb	r2, [r3, #16]
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	7c5a      	ldrb	r2, [r3, #17]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	745a      	strb	r2, [r3, #17]
  }
}
 800cdb2:	bf00      	nop
 800cdb4:	3714      	adds	r7, #20
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b08a      	sub	sp, #40	; 0x28
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	60f8      	str	r0, [r7, #12]
 800cdc6:	60b9      	str	r1, [r7, #8]
 800cdc8:	4613      	mov	r3, r2
 800cdca:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	781a      	ldrb	r2, [r3, #0]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	785a      	ldrb	r2, [r3, #1]
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	3302      	adds	r3, #2
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	b29a      	uxth	r2, r3
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	3303      	adds	r3, #3
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	021b      	lsls	r3, r3, #8
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	4313      	orrs	r3, r2
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	791a      	ldrb	r2, [r3, #4]
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	795a      	ldrb	r2, [r3, #5]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	799a      	ldrb	r2, [r3, #6]
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	79da      	ldrb	r2, [r3, #7]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	7a1a      	ldrb	r2, [r3, #8]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ce34:	88fb      	ldrh	r3, [r7, #6]
 800ce36:	2b09      	cmp	r3, #9
 800ce38:	d95f      	bls.n	800cefa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ce3a:	2309      	movs	r3, #9
 800ce3c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ce42:	e051      	b.n	800cee8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ce44:	f107 0316 	add.w	r3, r7, #22
 800ce48:	4619      	mov	r1, r3
 800ce4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce4c:	f000 f8e8 	bl	800d020 <USBH_GetNextDesc>
 800ce50:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ce52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce54:	785b      	ldrb	r3, [r3, #1]
 800ce56:	2b04      	cmp	r3, #4
 800ce58:	d146      	bne.n	800cee8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ce5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce5e:	221a      	movs	r2, #26
 800ce60:	fb02 f303 	mul.w	r3, r2, r3
 800ce64:	3308      	adds	r3, #8
 800ce66:	68fa      	ldr	r2, [r7, #12]
 800ce68:	4413      	add	r3, r2
 800ce6a:	3302      	adds	r3, #2
 800ce6c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ce6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce70:	69f8      	ldr	r0, [r7, #28]
 800ce72:	f000 f846 	bl	800cf02 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ce76:	2300      	movs	r3, #0
 800ce78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ce80:	e022      	b.n	800cec8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ce82:	f107 0316 	add.w	r3, r7, #22
 800ce86:	4619      	mov	r1, r3
 800ce88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce8a:	f000 f8c9 	bl	800d020 <USBH_GetNextDesc>
 800ce8e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ce90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce92:	785b      	ldrb	r3, [r3, #1]
 800ce94:	2b05      	cmp	r3, #5
 800ce96:	d117      	bne.n	800cec8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ce98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce9c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cea0:	3201      	adds	r2, #1
 800cea2:	00d2      	lsls	r2, r2, #3
 800cea4:	211a      	movs	r1, #26
 800cea6:	fb01 f303 	mul.w	r3, r1, r3
 800ceaa:	4413      	add	r3, r2
 800ceac:	3308      	adds	r3, #8
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	3304      	adds	r3, #4
 800ceb4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ceb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ceb8:	69b8      	ldr	r0, [r7, #24]
 800ceba:	f000 f851 	bl	800cf60 <USBH_ParseEPDesc>
            ep_ix++;
 800cebe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cec2:	3301      	adds	r3, #1
 800cec4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	791b      	ldrb	r3, [r3, #4]
 800cecc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d204      	bcs.n	800cede <USBH_ParseCfgDesc+0x120>
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	885a      	ldrh	r2, [r3, #2]
 800ced8:	8afb      	ldrh	r3, [r7, #22]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d8d1      	bhi.n	800ce82 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800cede:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cee2:	3301      	adds	r3, #1
 800cee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d804      	bhi.n	800cefa <USBH_ParseCfgDesc+0x13c>
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	885a      	ldrh	r2, [r3, #2]
 800cef4:	8afb      	ldrh	r3, [r7, #22]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d8a4      	bhi.n	800ce44 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800cefa:	bf00      	nop
 800cefc:	3728      	adds	r7, #40	; 0x28
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800cf02:	b480      	push	{r7}
 800cf04:	b083      	sub	sp, #12
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
 800cf0a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	781a      	ldrb	r2, [r3, #0]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	785a      	ldrb	r2, [r3, #1]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	789a      	ldrb	r2, [r3, #2]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	78da      	ldrb	r2, [r3, #3]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	791a      	ldrb	r2, [r3, #4]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	795a      	ldrb	r2, [r3, #5]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	799a      	ldrb	r2, [r3, #6]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	79da      	ldrb	r2, [r3, #7]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	7a1a      	ldrb	r2, [r3, #8]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	721a      	strb	r2, [r3, #8]
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	781a      	ldrb	r2, [r3, #0]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	785a      	ldrb	r2, [r3, #1]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	789a      	ldrb	r2, [r3, #2]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	78da      	ldrb	r2, [r3, #3]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	b29a      	uxth	r2, r3
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	3305      	adds	r3, #5
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	b29b      	uxth	r3, r3
 800cf9a:	021b      	lsls	r3, r3, #8
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	799a      	ldrb	r2, [r3, #6]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	719a      	strb	r2, [r3, #6]
}
 800cfae:	bf00      	nop
 800cfb0:	370c      	adds	r7, #12
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr

0800cfba <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cfba:	b480      	push	{r7}
 800cfbc:	b087      	sub	sp, #28
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	60f8      	str	r0, [r7, #12]
 800cfc2:	60b9      	str	r1, [r7, #8]
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	2b03      	cmp	r3, #3
 800cfd0:	d120      	bne.n	800d014 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	1e9a      	subs	r2, r3, #2
 800cfd8:	88fb      	ldrh	r3, [r7, #6]
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	bf28      	it	cs
 800cfde:	4613      	movcs	r3, r2
 800cfe0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	3302      	adds	r3, #2
 800cfe6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cfe8:	2300      	movs	r3, #0
 800cfea:	82fb      	strh	r3, [r7, #22]
 800cfec:	e00b      	b.n	800d006 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cfee:	8afb      	ldrh	r3, [r7, #22]
 800cff0:	68fa      	ldr	r2, [r7, #12]
 800cff2:	4413      	add	r3, r2
 800cff4:	781a      	ldrb	r2, [r3, #0]
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	3301      	adds	r3, #1
 800cffe:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d000:	8afb      	ldrh	r3, [r7, #22]
 800d002:	3302      	adds	r3, #2
 800d004:	82fb      	strh	r3, [r7, #22]
 800d006:	8afa      	ldrh	r2, [r7, #22]
 800d008:	8abb      	ldrh	r3, [r7, #20]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d3ef      	bcc.n	800cfee <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	2200      	movs	r2, #0
 800d012:	701a      	strb	r2, [r3, #0]
  }
}
 800d014:	bf00      	nop
 800d016:	371c      	adds	r7, #28
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	881a      	ldrh	r2, [r3, #0]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	b29b      	uxth	r3, r3
 800d034:	4413      	add	r3, r2
 800d036:	b29a      	uxth	r2, r3
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4413      	add	r3, r2
 800d046:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d048:	68fb      	ldr	r3, [r7, #12]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3714      	adds	r7, #20
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr

0800d056 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b086      	sub	sp, #24
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	60f8      	str	r0, [r7, #12]
 800d05e:	60b9      	str	r1, [r7, #8]
 800d060:	4613      	mov	r3, r2
 800d062:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d064:	2301      	movs	r3, #1
 800d066:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	789b      	ldrb	r3, [r3, #2]
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d002      	beq.n	800d076 <USBH_CtlReq+0x20>
 800d070:	2b02      	cmp	r3, #2
 800d072:	d00f      	beq.n	800d094 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d074:	e027      	b.n	800d0c6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	68ba      	ldr	r2, [r7, #8]
 800d07a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	88fa      	ldrh	r2, [r7, #6]
 800d080:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2201      	movs	r2, #1
 800d086:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2202      	movs	r2, #2
 800d08c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d08e:	2301      	movs	r3, #1
 800d090:	75fb      	strb	r3, [r7, #23]
      break;
 800d092:	e018      	b.n	800d0c6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f000 f81b 	bl	800d0d0 <USBH_HandleControl>
 800d09a:	4603      	mov	r3, r0
 800d09c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d09e:	7dfb      	ldrb	r3, [r7, #23]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d002      	beq.n	800d0aa <USBH_CtlReq+0x54>
 800d0a4:	7dfb      	ldrb	r3, [r7, #23]
 800d0a6:	2b03      	cmp	r3, #3
 800d0a8:	d106      	bne.n	800d0b8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	761a      	strb	r2, [r3, #24]
      break;
 800d0b6:	e005      	b.n	800d0c4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d0b8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	d102      	bne.n	800d0c4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	709a      	strb	r2, [r3, #2]
      break;
 800d0c4:	bf00      	nop
  }
  return status;
 800d0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3718      	adds	r7, #24
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b086      	sub	sp, #24
 800d0d4:	af02      	add	r7, sp, #8
 800d0d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	7e1b      	ldrb	r3, [r3, #24]
 800d0e4:	3b01      	subs	r3, #1
 800d0e6:	2b0a      	cmp	r3, #10
 800d0e8:	f200 8156 	bhi.w	800d398 <USBH_HandleControl+0x2c8>
 800d0ec:	a201      	add	r2, pc, #4	; (adr r2, 800d0f4 <USBH_HandleControl+0x24>)
 800d0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f2:	bf00      	nop
 800d0f4:	0800d121 	.word	0x0800d121
 800d0f8:	0800d13b 	.word	0x0800d13b
 800d0fc:	0800d1a5 	.word	0x0800d1a5
 800d100:	0800d1cb 	.word	0x0800d1cb
 800d104:	0800d203 	.word	0x0800d203
 800d108:	0800d22d 	.word	0x0800d22d
 800d10c:	0800d27f 	.word	0x0800d27f
 800d110:	0800d2a1 	.word	0x0800d2a1
 800d114:	0800d2dd 	.word	0x0800d2dd
 800d118:	0800d303 	.word	0x0800d303
 800d11c:	0800d341 	.word	0x0800d341
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f103 0110 	add.w	r1, r3, #16
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	795b      	ldrb	r3, [r3, #5]
 800d12a:	461a      	mov	r2, r3
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 f943 	bl	800d3b8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2202      	movs	r2, #2
 800d136:	761a      	strb	r2, [r3, #24]
      break;
 800d138:	e139      	b.n	800d3ae <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	795b      	ldrb	r3, [r3, #5]
 800d13e:	4619      	mov	r1, r3
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f000 fde5 	bl	800dd10 <USBH_LL_GetURBState>
 800d146:	4603      	mov	r3, r0
 800d148:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d14a:	7bbb      	ldrb	r3, [r7, #14]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d11e      	bne.n	800d18e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	7c1b      	ldrb	r3, [r3, #16]
 800d154:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d158:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	8adb      	ldrh	r3, [r3, #22]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d00a      	beq.n	800d178 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d162:	7b7b      	ldrb	r3, [r7, #13]
 800d164:	2b80      	cmp	r3, #128	; 0x80
 800d166:	d103      	bne.n	800d170 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2203      	movs	r2, #3
 800d16c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d16e:	e115      	b.n	800d39c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2205      	movs	r2, #5
 800d174:	761a      	strb	r2, [r3, #24]
      break;
 800d176:	e111      	b.n	800d39c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d178:	7b7b      	ldrb	r3, [r7, #13]
 800d17a:	2b80      	cmp	r3, #128	; 0x80
 800d17c:	d103      	bne.n	800d186 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2209      	movs	r2, #9
 800d182:	761a      	strb	r2, [r3, #24]
      break;
 800d184:	e10a      	b.n	800d39c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2207      	movs	r2, #7
 800d18a:	761a      	strb	r2, [r3, #24]
      break;
 800d18c:	e106      	b.n	800d39c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d18e:	7bbb      	ldrb	r3, [r7, #14]
 800d190:	2b04      	cmp	r3, #4
 800d192:	d003      	beq.n	800d19c <USBH_HandleControl+0xcc>
 800d194:	7bbb      	ldrb	r3, [r7, #14]
 800d196:	2b02      	cmp	r3, #2
 800d198:	f040 8100 	bne.w	800d39c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	220b      	movs	r2, #11
 800d1a0:	761a      	strb	r2, [r3, #24]
      break;
 800d1a2:	e0fb      	b.n	800d39c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d1aa:	b29a      	uxth	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6899      	ldr	r1, [r3, #8]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	899a      	ldrh	r2, [r3, #12]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	791b      	ldrb	r3, [r3, #4]
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 f93a 	bl	800d436 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2204      	movs	r2, #4
 800d1c6:	761a      	strb	r2, [r3, #24]
      break;
 800d1c8:	e0f1      	b.n	800d3ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	791b      	ldrb	r3, [r3, #4]
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 fd9d 	bl	800dd10 <USBH_LL_GetURBState>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d1da:	7bbb      	ldrb	r3, [r7, #14]
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d102      	bne.n	800d1e6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2209      	movs	r2, #9
 800d1e4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d1e6:	7bbb      	ldrb	r3, [r7, #14]
 800d1e8:	2b05      	cmp	r3, #5
 800d1ea:	d102      	bne.n	800d1f2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d1ec:	2303      	movs	r3, #3
 800d1ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d1f0:	e0d6      	b.n	800d3a0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d1f2:	7bbb      	ldrb	r3, [r7, #14]
 800d1f4:	2b04      	cmp	r3, #4
 800d1f6:	f040 80d3 	bne.w	800d3a0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	220b      	movs	r2, #11
 800d1fe:	761a      	strb	r2, [r3, #24]
      break;
 800d200:	e0ce      	b.n	800d3a0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6899      	ldr	r1, [r3, #8]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	899a      	ldrh	r2, [r3, #12]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	795b      	ldrb	r3, [r3, #5]
 800d20e:	2001      	movs	r0, #1
 800d210:	9000      	str	r0, [sp, #0]
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 f8ea 	bl	800d3ec <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d21e:	b29a      	uxth	r2, r3
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2206      	movs	r2, #6
 800d228:	761a      	strb	r2, [r3, #24]
      break;
 800d22a:	e0c0      	b.n	800d3ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	795b      	ldrb	r3, [r3, #5]
 800d230:	4619      	mov	r1, r3
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f000 fd6c 	bl	800dd10 <USBH_LL_GetURBState>
 800d238:	4603      	mov	r3, r0
 800d23a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d23c:	7bbb      	ldrb	r3, [r7, #14]
 800d23e:	2b01      	cmp	r3, #1
 800d240:	d103      	bne.n	800d24a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2207      	movs	r2, #7
 800d246:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d248:	e0ac      	b.n	800d3a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d24a:	7bbb      	ldrb	r3, [r7, #14]
 800d24c:	2b05      	cmp	r3, #5
 800d24e:	d105      	bne.n	800d25c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	220c      	movs	r2, #12
 800d254:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d256:	2303      	movs	r3, #3
 800d258:	73fb      	strb	r3, [r7, #15]
      break;
 800d25a:	e0a3      	b.n	800d3a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d25c:	7bbb      	ldrb	r3, [r7, #14]
 800d25e:	2b02      	cmp	r3, #2
 800d260:	d103      	bne.n	800d26a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2205      	movs	r2, #5
 800d266:	761a      	strb	r2, [r3, #24]
      break;
 800d268:	e09c      	b.n	800d3a4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d26a:	7bbb      	ldrb	r3, [r7, #14]
 800d26c:	2b04      	cmp	r3, #4
 800d26e:	f040 8099 	bne.w	800d3a4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	220b      	movs	r2, #11
 800d276:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d278:	2302      	movs	r3, #2
 800d27a:	73fb      	strb	r3, [r7, #15]
      break;
 800d27c:	e092      	b.n	800d3a4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	791b      	ldrb	r3, [r3, #4]
 800d282:	2200      	movs	r2, #0
 800d284:	2100      	movs	r1, #0
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 f8d5 	bl	800d436 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d292:	b29a      	uxth	r2, r3
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2208      	movs	r2, #8
 800d29c:	761a      	strb	r2, [r3, #24]

      break;
 800d29e:	e086      	b.n	800d3ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	791b      	ldrb	r3, [r3, #4]
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 fd32 	bl	800dd10 <USBH_LL_GetURBState>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d2b0:	7bbb      	ldrb	r3, [r7, #14]
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d105      	bne.n	800d2c2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	220d      	movs	r2, #13
 800d2ba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d2c0:	e072      	b.n	800d3a8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d2c2:	7bbb      	ldrb	r3, [r7, #14]
 800d2c4:	2b04      	cmp	r3, #4
 800d2c6:	d103      	bne.n	800d2d0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	220b      	movs	r2, #11
 800d2cc:	761a      	strb	r2, [r3, #24]
      break;
 800d2ce:	e06b      	b.n	800d3a8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d2d0:	7bbb      	ldrb	r3, [r7, #14]
 800d2d2:	2b05      	cmp	r3, #5
 800d2d4:	d168      	bne.n	800d3a8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d2d6:	2303      	movs	r3, #3
 800d2d8:	73fb      	strb	r3, [r7, #15]
      break;
 800d2da:	e065      	b.n	800d3a8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	795b      	ldrb	r3, [r3, #5]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	9200      	str	r2, [sp, #0]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 f87f 	bl	800d3ec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	220a      	movs	r2, #10
 800d2fe:	761a      	strb	r2, [r3, #24]
      break;
 800d300:	e055      	b.n	800d3ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	795b      	ldrb	r3, [r3, #5]
 800d306:	4619      	mov	r1, r3
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 fd01 	bl	800dd10 <USBH_LL_GetURBState>
 800d30e:	4603      	mov	r3, r0
 800d310:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d312:	7bbb      	ldrb	r3, [r7, #14]
 800d314:	2b01      	cmp	r3, #1
 800d316:	d105      	bne.n	800d324 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d318:	2300      	movs	r3, #0
 800d31a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	220d      	movs	r2, #13
 800d320:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d322:	e043      	b.n	800d3ac <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d324:	7bbb      	ldrb	r3, [r7, #14]
 800d326:	2b02      	cmp	r3, #2
 800d328:	d103      	bne.n	800d332 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2209      	movs	r2, #9
 800d32e:	761a      	strb	r2, [r3, #24]
      break;
 800d330:	e03c      	b.n	800d3ac <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d332:	7bbb      	ldrb	r3, [r7, #14]
 800d334:	2b04      	cmp	r3, #4
 800d336:	d139      	bne.n	800d3ac <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	220b      	movs	r2, #11
 800d33c:	761a      	strb	r2, [r3, #24]
      break;
 800d33e:	e035      	b.n	800d3ac <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	7e5b      	ldrb	r3, [r3, #25]
 800d344:	3301      	adds	r3, #1
 800d346:	b2da      	uxtb	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	765a      	strb	r2, [r3, #25]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	7e5b      	ldrb	r3, [r3, #25]
 800d350:	2b02      	cmp	r3, #2
 800d352:	d806      	bhi.n	800d362 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2201      	movs	r2, #1
 800d358:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2201      	movs	r2, #1
 800d35e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d360:	e025      	b.n	800d3ae <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d368:	2106      	movs	r1, #6
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	795b      	ldrb	r3, [r3, #5]
 800d378:	4619      	mov	r1, r3
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 f8e7 	bl	800d54e <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	791b      	ldrb	r3, [r3, #4]
 800d384:	4619      	mov	r1, r3
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 f8e1 	bl	800d54e <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d392:	2302      	movs	r3, #2
 800d394:	73fb      	strb	r3, [r7, #15]
      break;
 800d396:	e00a      	b.n	800d3ae <USBH_HandleControl+0x2de>

    default:
      break;
 800d398:	bf00      	nop
 800d39a:	e008      	b.n	800d3ae <USBH_HandleControl+0x2de>
      break;
 800d39c:	bf00      	nop
 800d39e:	e006      	b.n	800d3ae <USBH_HandleControl+0x2de>
      break;
 800d3a0:	bf00      	nop
 800d3a2:	e004      	b.n	800d3ae <USBH_HandleControl+0x2de>
      break;
 800d3a4:	bf00      	nop
 800d3a6:	e002      	b.n	800d3ae <USBH_HandleControl+0x2de>
      break;
 800d3a8:	bf00      	nop
 800d3aa:	e000      	b.n	800d3ae <USBH_HandleControl+0x2de>
      break;
 800d3ac:	bf00      	nop
  }

  return status;
 800d3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3710      	adds	r7, #16
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b088      	sub	sp, #32
 800d3bc:	af04      	add	r7, sp, #16
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d3c6:	79f9      	ldrb	r1, [r7, #7]
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	9303      	str	r3, [sp, #12]
 800d3cc:	2308      	movs	r3, #8
 800d3ce:	9302      	str	r3, [sp, #8]
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	9301      	str	r3, [sp, #4]
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	2300      	movs	r3, #0
 800d3da:	2200      	movs	r2, #0
 800d3dc:	68f8      	ldr	r0, [r7, #12]
 800d3de:	f000 fc66 	bl	800dcae <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3710      	adds	r7, #16
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b088      	sub	sp, #32
 800d3f0:	af04      	add	r7, sp, #16
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	4611      	mov	r1, r2
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	80fb      	strh	r3, [r7, #6]
 800d3fe:	4613      	mov	r3, r2
 800d400:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d001      	beq.n	800d410 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d40c:	2300      	movs	r3, #0
 800d40e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d410:	7979      	ldrb	r1, [r7, #5]
 800d412:	7e3b      	ldrb	r3, [r7, #24]
 800d414:	9303      	str	r3, [sp, #12]
 800d416:	88fb      	ldrh	r3, [r7, #6]
 800d418:	9302      	str	r3, [sp, #8]
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	9301      	str	r3, [sp, #4]
 800d41e:	2301      	movs	r3, #1
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	2300      	movs	r3, #0
 800d424:	2200      	movs	r2, #0
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f000 fc41 	bl	800dcae <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d436:	b580      	push	{r7, lr}
 800d438:	b088      	sub	sp, #32
 800d43a:	af04      	add	r7, sp, #16
 800d43c:	60f8      	str	r0, [r7, #12]
 800d43e:	60b9      	str	r1, [r7, #8]
 800d440:	4611      	mov	r1, r2
 800d442:	461a      	mov	r2, r3
 800d444:	460b      	mov	r3, r1
 800d446:	80fb      	strh	r3, [r7, #6]
 800d448:	4613      	mov	r3, r2
 800d44a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d44c:	7979      	ldrb	r1, [r7, #5]
 800d44e:	2300      	movs	r3, #0
 800d450:	9303      	str	r3, [sp, #12]
 800d452:	88fb      	ldrh	r3, [r7, #6]
 800d454:	9302      	str	r3, [sp, #8]
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	9301      	str	r3, [sp, #4]
 800d45a:	2301      	movs	r3, #1
 800d45c:	9300      	str	r3, [sp, #0]
 800d45e:	2300      	movs	r3, #0
 800d460:	2201      	movs	r2, #1
 800d462:	68f8      	ldr	r0, [r7, #12]
 800d464:	f000 fc23 	bl	800dcae <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d468:	2300      	movs	r3, #0

}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3710      	adds	r7, #16
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800d472:	b580      	push	{r7, lr}
 800d474:	b088      	sub	sp, #32
 800d476:	af04      	add	r7, sp, #16
 800d478:	60f8      	str	r0, [r7, #12]
 800d47a:	60b9      	str	r1, [r7, #8]
 800d47c:	4611      	mov	r1, r2
 800d47e:	461a      	mov	r2, r3
 800d480:	460b      	mov	r3, r1
 800d482:	71fb      	strb	r3, [r7, #7]
 800d484:	4613      	mov	r3, r2
 800d486:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d488:	79fb      	ldrb	r3, [r7, #7]
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	79b9      	ldrb	r1, [r7, #6]
 800d48e:	2200      	movs	r2, #0
 800d490:	9203      	str	r2, [sp, #12]
 800d492:	9302      	str	r3, [sp, #8]
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	9301      	str	r3, [sp, #4]
 800d498:	2301      	movs	r3, #1
 800d49a:	9300      	str	r3, [sp, #0]
 800d49c:	2303      	movs	r3, #3
 800d49e:	2201      	movs	r2, #1
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f000 fc04 	bl	800dcae <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800d4a6:	2300      	movs	r3, #0
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b086      	sub	sp, #24
 800d4b4:	af04      	add	r7, sp, #16
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	4608      	mov	r0, r1
 800d4ba:	4611      	mov	r1, r2
 800d4bc:	461a      	mov	r2, r3
 800d4be:	4603      	mov	r3, r0
 800d4c0:	70fb      	strb	r3, [r7, #3]
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	70bb      	strb	r3, [r7, #2]
 800d4c6:	4613      	mov	r3, r2
 800d4c8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d4ca:	7878      	ldrb	r0, [r7, #1]
 800d4cc:	78ba      	ldrb	r2, [r7, #2]
 800d4ce:	78f9      	ldrb	r1, [r7, #3]
 800d4d0:	8b3b      	ldrh	r3, [r7, #24]
 800d4d2:	9302      	str	r3, [sp, #8]
 800d4d4:	7d3b      	ldrb	r3, [r7, #20]
 800d4d6:	9301      	str	r3, [sp, #4]
 800d4d8:	7c3b      	ldrb	r3, [r7, #16]
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	4603      	mov	r3, r0
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 fb97 	bl	800dc12 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d4e4:	2300      	movs	r3, #0
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3708      	adds	r7, #8
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b082      	sub	sp, #8
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
 800d4f6:	460b      	mov	r3, r1
 800d4f8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d4fa:	78fb      	ldrb	r3, [r7, #3]
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 fbb6 	bl	800dc70 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d504:	2300      	movs	r3, #0
}
 800d506:	4618      	mov	r0, r3
 800d508:	3708      	adds	r7, #8
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b084      	sub	sp, #16
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
 800d516:	460b      	mov	r3, r1
 800d518:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 f833 	bl	800d586 <USBH_GetFreePipe>
 800d520:	4603      	mov	r3, r0
 800d522:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d524:	89fb      	ldrh	r3, [r7, #14]
 800d526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d009      	beq.n	800d542 <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d52e:	78fb      	ldrb	r3, [r7, #3]
 800d530:	89fa      	ldrh	r2, [r7, #14]
 800d532:	f002 020f 	and.w	r2, r2, #15
 800d536:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	32e2      	adds	r2, #226	; 0xe2
 800d53e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800d542:	89fb      	ldrh	r3, [r7, #14]
 800d544:	b2db      	uxtb	r3, r3
}
 800d546:	4618      	mov	r0, r3
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}

0800d54e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d54e:	b480      	push	{r7}
 800d550:	b083      	sub	sp, #12
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
 800d556:	460b      	mov	r3, r1
 800d558:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d55a:	78fb      	ldrb	r3, [r7, #3]
 800d55c:	2b0a      	cmp	r3, #10
 800d55e:	d80b      	bhi.n	800d578 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d560:	78fa      	ldrb	r2, [r7, #3]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	32e2      	adds	r2, #226	; 0xe2
 800d566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d56a:	78fa      	ldrb	r2, [r7, #3]
 800d56c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	32e2      	adds	r2, #226	; 0xe2
 800d574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	370c      	adds	r7, #12
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr

0800d586 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d586:	b480      	push	{r7}
 800d588:	b085      	sub	sp, #20
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d58e:	2300      	movs	r3, #0
 800d590:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d592:	2300      	movs	r3, #0
 800d594:	73fb      	strb	r3, [r7, #15]
 800d596:	e00e      	b.n	800d5b6 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d598:	7bfa      	ldrb	r2, [r7, #15]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	32e2      	adds	r2, #226	; 0xe2
 800d59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d102      	bne.n	800d5b0 <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800d5aa:	7bfb      	ldrb	r3, [r7, #15]
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	e007      	b.n	800d5c0 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800d5b0:	7bfb      	ldrb	r3, [r7, #15]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	73fb      	strb	r3, [r7, #15]
 800d5b6:	7bfb      	ldrb	r3, [r7, #15]
 800d5b8:	2b0a      	cmp	r3, #10
 800d5ba:	d9ed      	bls.n	800d598 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d5bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <LL_GPIO_SetOutputPin>:
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	683a      	ldr	r2, [r7, #0]
 800d5da:	619a      	str	r2, [r3, #24]
}
 800d5dc:	bf00      	nop
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <LL_GPIO_ResetOutputPin>:
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b083      	sub	sp, #12
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	041a      	lsls	r2, r3, #16
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	619a      	str	r2, [r3, #24]
}
 800d5fa:	bf00      	nop
 800d5fc:	370c      	adds	r7, #12
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr
	...

0800d608 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess1, HOST_HS) != USBH_OK)
 800d60c:	2200      	movs	r2, #0
 800d60e:	4920      	ldr	r1, [pc, #128]	; (800d690 <MX_USB_HOST_Init+0x88>)
 800d610:	4820      	ldr	r0, [pc, #128]	; (800d694 <MX_USB_HOST_Init+0x8c>)
 800d612:	f7fe fc9b 	bl	800bf4c <USBH_Init>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d001      	beq.n	800d620 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d61c:	f7f3 fc8c 	bl	8000f38 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_HID_CLASSHS) != USBH_OK)
 800d620:	491d      	ldr	r1, [pc, #116]	; (800d698 <MX_USB_HOST_Init+0x90>)
 800d622:	481c      	ldr	r0, [pc, #112]	; (800d694 <MX_USB_HOST_Init+0x8c>)
 800d624:	f7fe fd1f 	bl	800c066 <USBH_RegisterClass>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d001      	beq.n	800d632 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d62e:	f7f3 fc83 	bl	8000f38 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800d632:	4818      	ldr	r0, [pc, #96]	; (800d694 <MX_USB_HOST_Init+0x8c>)
 800d634:	f7fe fda3 	bl	800c17e <USBH_Start>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d001      	beq.n	800d642 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d63e:	f7f3 fc7b 	bl	8000f38 <Error_Handler>
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess2, HOST_FS) != USBH_OK)
 800d642:	2201      	movs	r2, #1
 800d644:	4915      	ldr	r1, [pc, #84]	; (800d69c <MX_USB_HOST_Init+0x94>)
 800d646:	4816      	ldr	r0, [pc, #88]	; (800d6a0 <MX_USB_HOST_Init+0x98>)
 800d648:	f7fe fc80 	bl	800bf4c <USBH_Init>
 800d64c:	4603      	mov	r3, r0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d001      	beq.n	800d656 <MX_USB_HOST_Init+0x4e>
  {
    Error_Handler();
 800d652:	f7f3 fc71 	bl	8000f38 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800d656:	4913      	ldr	r1, [pc, #76]	; (800d6a4 <MX_USB_HOST_Init+0x9c>)
 800d658:	4811      	ldr	r0, [pc, #68]	; (800d6a0 <MX_USB_HOST_Init+0x98>)
 800d65a:	f7fe fd04 	bl	800c066 <USBH_RegisterClass>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d001      	beq.n	800d668 <MX_USB_HOST_Init+0x60>
  {
    Error_Handler();
 800d664:	f7f3 fc68 	bl	8000f38 <Error_Handler>
  }

  if (USBH_RegisterClass(&hUsbHostFS, USBH_HUB_CLASS) != USBH_OK)
 800d668:	490f      	ldr	r1, [pc, #60]	; (800d6a8 <MX_USB_HOST_Init+0xa0>)
 800d66a:	480d      	ldr	r0, [pc, #52]	; (800d6a0 <MX_USB_HOST_Init+0x98>)
 800d66c:	f7fe fcfb 	bl	800c066 <USBH_RegisterClass>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d001      	beq.n	800d67a <MX_USB_HOST_Init+0x72>
{
  Error_Handler();
 800d676:	f7f3 fc5f 	bl	8000f38 <Error_Handler>
}

  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d67a:	4809      	ldr	r0, [pc, #36]	; (800d6a0 <MX_USB_HOST_Init+0x98>)
 800d67c:	f7fe fd7f 	bl	800c17e <USBH_Start>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <MX_USB_HOST_Init+0x82>
  {
    Error_Handler();
 800d686:	f7f3 fc57 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d68a:	bf00      	nop
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	0800d6c9 	.word	0x0800d6c9
 800d694:	200002ec 	.word	0x200002ec
 800d698:	20000034 	.word	0x20000034
 800d69c:	0800d739 	.word	0x0800d739
 800d6a0:	200006c8 	.word	0x200006c8
 800d6a4:	2000000c 	.word	0x2000000c
 800d6a8:	2000005c 	.word	0x2000005c

0800d6ac <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800d6b0:	4803      	ldr	r0, [pc, #12]	; (800d6c0 <MX_USB_HOST_Process+0x14>)
 800d6b2:	f7fe fd75 	bl	800c1a0 <USBH_Process>
  USBH_Process(&hUsbHostFS);
 800d6b6:	4803      	ldr	r0, [pc, #12]	; (800d6c4 <MX_USB_HOST_Process+0x18>)
 800d6b8:	f7fe fd72 	bl	800c1a0 <USBH_Process>
}
 800d6bc:	bf00      	nop
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	200002ec 	.word	0x200002ec
 800d6c4:	200006c8 	.word	0x200006c8

0800d6c8 <USBH_UserProcess1>:
/*
 * user callback definition
 */
static void USBH_UserProcess1  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_2 */
  switch(id)
 800d6d4:	78fb      	ldrb	r3, [r7, #3]
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	2b04      	cmp	r3, #4
 800d6da:	d823      	bhi.n	800d724 <USBH_UserProcess1+0x5c>
 800d6dc:	a201      	add	r2, pc, #4	; (adr r2, 800d6e4 <USBH_UserProcess1+0x1c>)
 800d6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e2:	bf00      	nop
 800d6e4:	0800d725 	.word	0x0800d725
 800d6e8:	0800d70b 	.word	0x0800d70b
 800d6ec:	0800d725 	.word	0x0800d725
 800d6f0:	0800d71d 	.word	0x0800d71d
 800d6f4:	0800d6f9 	.word	0x0800d6f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d6f8:	4b0d      	ldr	r3, [pc, #52]	; (800d730 <USBH_UserProcess1+0x68>)
 800d6fa:	2203      	movs	r2, #3
 800d6fc:	701a      	strb	r2, [r3, #0]
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 800d6fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d702:	480c      	ldr	r0, [pc, #48]	; (800d734 <USBH_UserProcess1+0x6c>)
 800d704:	f7ff ff62 	bl	800d5cc <LL_GPIO_SetOutputPin>
  break;
 800d708:	e00d      	b.n	800d726 <USBH_UserProcess1+0x5e>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d70a:	4b09      	ldr	r3, [pc, #36]	; (800d730 <USBH_UserProcess1+0x68>)
 800d70c:	2202      	movs	r2, #2
 800d70e:	701a      	strb	r2, [r3, #0]
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_13);
 800d710:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d714:	4807      	ldr	r0, [pc, #28]	; (800d734 <USBH_UserProcess1+0x6c>)
 800d716:	f7ff ff67 	bl	800d5e8 <LL_GPIO_ResetOutputPin>
  break;
 800d71a:	e004      	b.n	800d726 <USBH_UserProcess1+0x5e>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d71c:	4b04      	ldr	r3, [pc, #16]	; (800d730 <USBH_UserProcess1+0x68>)
 800d71e:	2201      	movs	r2, #1
 800d720:	701a      	strb	r2, [r3, #0]
  break;
 800d722:	e000      	b.n	800d726 <USBH_UserProcess1+0x5e>

  default:
  break;
 800d724:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_2 */
}
 800d726:	bf00      	nop
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	20000aa4 	.word	0x20000aa4
 800d734:	40020400 	.word	0x40020400

0800d738 <USBH_UserProcess2>:

static void USBH_UserProcess2  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	460b      	mov	r3, r1
 800d742:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_21 */
  switch(id)
 800d744:	78fb      	ldrb	r3, [r7, #3]
 800d746:	3b01      	subs	r3, #1
 800d748:	2b04      	cmp	r3, #4
 800d74a:	d823      	bhi.n	800d794 <USBH_UserProcess2+0x5c>
 800d74c:	a201      	add	r2, pc, #4	; (adr r2, 800d754 <USBH_UserProcess2+0x1c>)
 800d74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d752:	bf00      	nop
 800d754:	0800d795 	.word	0x0800d795
 800d758:	0800d77b 	.word	0x0800d77b
 800d75c:	0800d795 	.word	0x0800d795
 800d760:	0800d78d 	.word	0x0800d78d
 800d764:	0800d769 	.word	0x0800d769
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d768:	4b0d      	ldr	r3, [pc, #52]	; (800d7a0 <USBH_UserProcess2+0x68>)
 800d76a:	2203      	movs	r2, #3
 800d76c:	701a      	strb	r2, [r3, #0]
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 800d76e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d772:	480c      	ldr	r0, [pc, #48]	; (800d7a4 <USBH_UserProcess2+0x6c>)
 800d774:	f7ff ff2a 	bl	800d5cc <LL_GPIO_SetOutputPin>
  break;
 800d778:	e00d      	b.n	800d796 <USBH_UserProcess2+0x5e>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d77a:	4b09      	ldr	r3, [pc, #36]	; (800d7a0 <USBH_UserProcess2+0x68>)
 800d77c:	2202      	movs	r2, #2
 800d77e:	701a      	strb	r2, [r3, #0]
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_13);
 800d780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d784:	4807      	ldr	r0, [pc, #28]	; (800d7a4 <USBH_UserProcess2+0x6c>)
 800d786:	f7ff ff2f 	bl	800d5e8 <LL_GPIO_ResetOutputPin>


  break;
 800d78a:	e004      	b.n	800d796 <USBH_UserProcess2+0x5e>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d78c:	4b04      	ldr	r3, [pc, #16]	; (800d7a0 <USBH_UserProcess2+0x68>)
 800d78e:	2201      	movs	r2, #1
 800d790:	701a      	strb	r2, [r3, #0]
  break;
 800d792:	e000      	b.n	800d796 <USBH_UserProcess2+0x5e>

  default:
  break;
 800d794:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_21 */
}
 800d796:	bf00      	nop
 800d798:	3708      	adds	r7, #8
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	20000aa4 	.word	0x20000aa4
 800d7a4:	40020400 	.word	0x40020400

0800d7a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b0ae      	sub	sp, #184	; 0xb8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	601a      	str	r2, [r3, #0]
 800d7b8:	605a      	str	r2, [r3, #4]
 800d7ba:	609a      	str	r2, [r3, #8]
 800d7bc:	60da      	str	r2, [r3, #12]
 800d7be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d7c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7c4:	2280      	movs	r2, #128	; 0x80
 800d7c6:	2100      	movs	r1, #0
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f000 fb63 	bl	800de94 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d7d6:	d152      	bne.n	800d87e <HAL_HCD_MspInit+0xd6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d7d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d7dc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d7e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7f7 fa0d 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d001      	beq.n	800d7f8 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 800d7f4:	f7f3 fba0 	bl	8000f38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d7f8:	4b56      	ldr	r3, [pc, #344]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7fc:	4a55      	ldr	r2, [pc, #340]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d7fe:	f043 0301 	orr.w	r3, r3, #1
 800d802:	6313      	str	r3, [r2, #48]	; 0x30
 800d804:	4b53      	ldr	r3, [pc, #332]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d808:	f003 0301 	and.w	r3, r3, #1
 800d80c:	623b      	str	r3, [r7, #32]
 800d80e:	6a3b      	ldr	r3, [r7, #32]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d810:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d814:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d818:	2302      	movs	r3, #2
 800d81a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d81e:	2300      	movs	r3, #0
 800d820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d824:	2303      	movs	r3, #3
 800d826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d82a:	230a      	movs	r3, #10
 800d82c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d830:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d834:	4619      	mov	r1, r3
 800d836:	4848      	ldr	r0, [pc, #288]	; (800d958 <HAL_HCD_MspInit+0x1b0>)
 800d838:	f7f4 fdbc 	bl	80023b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d83c:	4b45      	ldr	r3, [pc, #276]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d840:	4a44      	ldr	r2, [pc, #272]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d846:	6353      	str	r3, [r2, #52]	; 0x34
 800d848:	4b42      	ldr	r3, [pc, #264]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d84c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d850:	61fb      	str	r3, [r7, #28]
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	4b3f      	ldr	r3, [pc, #252]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d858:	4a3e      	ldr	r2, [pc, #248]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d85a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d85e:	6453      	str	r3, [r2, #68]	; 0x44
 800d860:	4b3c      	ldr	r3, [pc, #240]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d868:	61bb      	str	r3, [r7, #24]
 800d86a:	69bb      	ldr	r3, [r7, #24]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 800d86c:	2200      	movs	r2, #0
 800d86e:	2101      	movs	r1, #1
 800d870:	2043      	movs	r0, #67	; 0x43
 800d872:	f7f4 fa95 	bl	8001da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d876:	2043      	movs	r0, #67	; 0x43
 800d878:	f7f4 faae 	bl	8001dd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d87c:	e066      	b.n	800d94c <HAL_HCD_MspInit+0x1a4>
  else if(hcdHandle->Instance==USB_OTG_HS)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a36      	ldr	r2, [pc, #216]	; (800d95c <HAL_HCD_MspInit+0x1b4>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d161      	bne.n	800d94c <HAL_HCD_MspInit+0x1a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d888:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d88c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d88e:	2300      	movs	r3, #0
 800d890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d898:	4618      	mov	r0, r3
 800d89a:	f7f7 f9b5 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d001      	beq.n	800d8a8 <HAL_HCD_MspInit+0x100>
      Error_Handler();
 800d8a4:	f7f3 fb48 	bl	8000f38 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d8a8:	4b2a      	ldr	r3, [pc, #168]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ac:	4a29      	ldr	r2, [pc, #164]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d8ae:	f043 0302 	orr.w	r3, r3, #2
 800d8b2:	6313      	str	r3, [r2, #48]	; 0x30
 800d8b4:	4b27      	ldr	r3, [pc, #156]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b8:	f003 0302 	and.w	r3, r3, #2
 800d8bc:	617b      	str	r3, [r7, #20]
 800d8be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800d8c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800d8c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8d4:	2303      	movs	r3, #3
 800d8d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d8da:	230c      	movs	r3, #12
 800d8dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d8e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	481e      	ldr	r0, [pc, #120]	; (800d960 <HAL_HCD_MspInit+0x1b8>)
 800d8e8:	f7f4 fd64 	bl	80023b4 <HAL_GPIO_Init>
    __HAL_RCC_OTGPHYC_CLK_ENABLE();
 800d8ec:	4b19      	ldr	r3, [pc, #100]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d8ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8f0:	4a18      	ldr	r2, [pc, #96]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d8f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d8f6:	6453      	str	r3, [r2, #68]	; 0x44
 800d8f8:	4b16      	ldr	r3, [pc, #88]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d900:	613b      	str	r3, [r7, #16]
 800d902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d904:	4b13      	ldr	r3, [pc, #76]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d908:	4a12      	ldr	r2, [pc, #72]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d90a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d90e:	6313      	str	r3, [r2, #48]	; 0x30
 800d910:	4b10      	ldr	r3, [pc, #64]	; (800d954 <HAL_HCD_MspInit+0x1ac>)
 800d912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d918:	60fb      	str	r3, [r7, #12]
 800d91a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 1, 0);
 800d91c:	2200      	movs	r2, #0
 800d91e:	2101      	movs	r1, #1
 800d920:	204a      	movs	r0, #74	; 0x4a
 800d922:	f7f4 fa3d 	bl	8001da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800d926:	204a      	movs	r0, #74	; 0x4a
 800d928:	f7f4 fa56 	bl	8001dd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 1, 0);
 800d92c:	2200      	movs	r2, #0
 800d92e:	2101      	movs	r1, #1
 800d930:	204b      	movs	r0, #75	; 0x4b
 800d932:	f7f4 fa35 	bl	8001da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800d936:	204b      	movs	r0, #75	; 0x4b
 800d938:	f7f4 fa4e 	bl	8001dd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 0);
 800d93c:	2200      	movs	r2, #0
 800d93e:	2101      	movs	r1, #1
 800d940:	204d      	movs	r0, #77	; 0x4d
 800d942:	f7f4 fa2d 	bl	8001da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d946:	204d      	movs	r0, #77	; 0x4d
 800d948:	f7f4 fa46 	bl	8001dd8 <HAL_NVIC_EnableIRQ>
}
 800d94c:	bf00      	nop
 800d94e:	37b8      	adds	r7, #184	; 0xb8
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	40023800 	.word	0x40023800
 800d958:	40020000 	.word	0x40020000
 800d95c:	40040000 	.word	0x40040000
 800d960:	40020400 	.word	0x40020400

0800d964 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d972:	4618      	mov	r0, r3
 800d974:	f7fe ffed 	bl	800c952 <USBH_LL_IncTimer>
}
 800d978:	bf00      	nop
 800d97a:	3708      	adds	r7, #8
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d98e:	4618      	mov	r0, r3
 800d990:	f7ff f825 	bl	800c9de <USBH_LL_Connect>
}
 800d994:	bf00      	nop
 800d996:	3708      	adds	r7, #8
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7ff f82e 	bl	800ca0c <USBH_LL_Disconnect>
}
 800d9b0:	bf00      	nop
 800d9b2:	3708      	adds	r7, #8
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	70fb      	strb	r3, [r7, #3]
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d9c8:	bf00      	nop
 800d9ca:	370c      	adds	r7, #12
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7fe ffdf 	bl	800c9a6 <USBH_LL_PortEnabled>
}
 800d9e8:	bf00      	nop
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7fe ffdf 	bl	800c9c2 <USBH_LL_PortDisabled>
}
 800da04:	bf00      	nop
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d12d      	bne.n	800da7a <USBH_LL_Init+0x6e>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800da1e:	4a34      	ldr	r2, [pc, #208]	; (800daf0 <USBH_LL_Init+0xe4>)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	4a31      	ldr	r2, [pc, #196]	; (800daf0 <USBH_LL_Init+0xe4>)
 800da2a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800da2e:	4b30      	ldr	r3, [pc, #192]	; (800daf0 <USBH_LL_Init+0xe4>)
 800da30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800da34:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800da36:	4b2e      	ldr	r3, [pc, #184]	; (800daf0 <USBH_LL_Init+0xe4>)
 800da38:	220c      	movs	r2, #12
 800da3a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = USB_OTG_SPEED_FULL;
 800da3c:	4b2c      	ldr	r3, [pc, #176]	; (800daf0 <USBH_LL_Init+0xe4>)
 800da3e:	2203      	movs	r2, #3
 800da40:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800da42:	4b2b      	ldr	r3, [pc, #172]	; (800daf0 <USBH_LL_Init+0xe4>)
 800da44:	2200      	movs	r2, #0
 800da46:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800da48:	4b29      	ldr	r3, [pc, #164]	; (800daf0 <USBH_LL_Init+0xe4>)
 800da4a:	2202      	movs	r2, #2
 800da4c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800da4e:	4b28      	ldr	r3, [pc, #160]	; (800daf0 <USBH_LL_Init+0xe4>)
 800da50:	2200      	movs	r2, #0
 800da52:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800da54:	4b26      	ldr	r3, [pc, #152]	; (800daf0 <USBH_LL_Init+0xe4>)
 800da56:	2200      	movs	r2, #0
 800da58:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800da5a:	4825      	ldr	r0, [pc, #148]	; (800daf0 <USBH_LL_Init+0xe4>)
 800da5c:	f7f4 fe46 	bl	80026ec <HAL_HCD_Init>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	d001      	beq.n	800da6a <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 800da66:	f7f3 fa67 	bl	8000f38 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800da6a:	4821      	ldr	r0, [pc, #132]	; (800daf0 <USBH_LL_Init+0xe4>)
 800da6c:	f7f5 fa29 	bl	8002ec2 <HAL_HCD_GetCurrentFrame>
 800da70:	4603      	mov	r3, r0
 800da72:	4619      	mov	r1, r3
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f7fe ff5d 	bl	800c934 <USBH_LL_SetTimer>
  }
  if (phost->id == HOST_HS) {
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d12f      	bne.n	800dae4 <USBH_LL_Init+0xd8>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800da84:	4a1b      	ldr	r2, [pc, #108]	; (800daf4 <USBH_LL_Init+0xe8>)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4a19      	ldr	r2, [pc, #100]	; (800daf4 <USBH_LL_Init+0xe8>)
 800da90:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800da94:	4b17      	ldr	r3, [pc, #92]	; (800daf4 <USBH_LL_Init+0xe8>)
 800da96:	4a18      	ldr	r2, [pc, #96]	; (800daf8 <USBH_LL_Init+0xec>)
 800da98:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 800da9a:	4b16      	ldr	r3, [pc, #88]	; (800daf4 <USBH_LL_Init+0xe8>)
 800da9c:	2210      	movs	r2, #16
 800da9e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800daa0:	4b14      	ldr	r3, [pc, #80]	; (800daf4 <USBH_LL_Init+0xe8>)
 800daa2:	2200      	movs	r2, #0
 800daa4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800daa6:	4b13      	ldr	r3, [pc, #76]	; (800daf4 <USBH_LL_Init+0xe8>)
 800daa8:	2202      	movs	r2, #2
 800daaa:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800daac:	4b11      	ldr	r3, [pc, #68]	; (800daf4 <USBH_LL_Init+0xe8>)
 800daae:	2200      	movs	r2, #0
 800dab0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800dab2:	4b10      	ldr	r3, [pc, #64]	; (800daf4 <USBH_LL_Init+0xe8>)
 800dab4:	2200      	movs	r2, #0
 800dab6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800dab8:	4b0e      	ldr	r3, [pc, #56]	; (800daf4 <USBH_LL_Init+0xe8>)
 800daba:	2200      	movs	r2, #0
 800dabc:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 800dabe:	4b0d      	ldr	r3, [pc, #52]	; (800daf4 <USBH_LL_Init+0xe8>)
 800dac0:	2201      	movs	r2, #1
 800dac2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800dac4:	480b      	ldr	r0, [pc, #44]	; (800daf4 <USBH_LL_Init+0xe8>)
 800dac6:	f7f4 fe11 	bl	80026ec <HAL_HCD_Init>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d001      	beq.n	800dad4 <USBH_LL_Init+0xc8>
  {
    Error_Handler( );
 800dad0:	f7f3 fa32 	bl	8000f38 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800dad4:	4807      	ldr	r0, [pc, #28]	; (800daf4 <USBH_LL_Init+0xe8>)
 800dad6:	f7f5 f9f4 	bl	8002ec2 <HAL_HCD_GetCurrentFrame>
 800dada:	4603      	mov	r3, r0
 800dadc:	4619      	mov	r1, r3
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f7fe ff28 	bl	800c934 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800dae4:	2300      	movs	r3, #0
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3708      	adds	r7, #8
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	20000aa8 	.word	0x20000aa8
 800daf4:	20000dac 	.word	0x20000dac
 800daf8:	40040000 	.word	0x40040000

0800dafc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db04:	2300      	movs	r3, #0
 800db06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db08:	2300      	movs	r3, #0
 800db0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db12:	4618      	mov	r0, r3
 800db14:	f7f5 f95f 	bl	8002dd6 <HAL_HCD_Start>
 800db18:	4603      	mov	r3, r0
 800db1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800db1c:	7bfb      	ldrb	r3, [r7, #15]
 800db1e:	4618      	mov	r0, r3
 800db20:	f000 f952 	bl	800ddc8 <USBH_Get_USB_Status>
 800db24:	4603      	mov	r3, r0
 800db26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db28:	7bbb      	ldrb	r3, [r7, #14]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}

0800db32 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800db32:	b580      	push	{r7, lr}
 800db34:	b084      	sub	sp, #16
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db3a:	2300      	movs	r3, #0
 800db3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db3e:	2300      	movs	r3, #0
 800db40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db48:	4618      	mov	r0, r3
 800db4a:	f7f5 f967 	bl	8002e1c <HAL_HCD_Stop>
 800db4e:	4603      	mov	r3, r0
 800db50:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800db52:	7bfb      	ldrb	r3, [r7, #15]
 800db54:	4618      	mov	r0, r3
 800db56:	f000 f937 	bl	800ddc8 <USBH_Get_USB_Status>
 800db5a:	4603      	mov	r3, r0
 800db5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3710      	adds	r7, #16
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800db70:	2301      	movs	r3, #1
 800db72:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db7a:	4618      	mov	r0, r3
 800db7c:	f7f5 f9af 	bl	8002ede <HAL_HCD_GetCurrentSpeed>
 800db80:	4603      	mov	r3, r0
 800db82:	2b02      	cmp	r3, #2
 800db84:	d00c      	beq.n	800dba0 <USBH_LL_GetSpeed+0x38>
 800db86:	2b02      	cmp	r3, #2
 800db88:	d80d      	bhi.n	800dba6 <USBH_LL_GetSpeed+0x3e>
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d002      	beq.n	800db94 <USBH_LL_GetSpeed+0x2c>
 800db8e:	2b01      	cmp	r3, #1
 800db90:	d003      	beq.n	800db9a <USBH_LL_GetSpeed+0x32>
 800db92:	e008      	b.n	800dba6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800db94:	2300      	movs	r3, #0
 800db96:	73fb      	strb	r3, [r7, #15]
    break;
 800db98:	e008      	b.n	800dbac <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800db9a:	2301      	movs	r3, #1
 800db9c:	73fb      	strb	r3, [r7, #15]
    break;
 800db9e:	e005      	b.n	800dbac <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dba0:	2302      	movs	r3, #2
 800dba2:	73fb      	strb	r3, [r7, #15]
    break;
 800dba4:	e002      	b.n	800dbac <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800dba6:	2301      	movs	r3, #1
 800dba8:	73fb      	strb	r3, [r7, #15]
    break;
 800dbaa:	bf00      	nop
  }
  return  speed;
 800dbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b084      	sub	sp, #16
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f7f5 f942 	bl	8002e56 <HAL_HCD_ResetPort>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dbd6:	7bfb      	ldrb	r3, [r7, #15]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f000 f8f5 	bl	800ddc8 <USBH_Get_USB_Status>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3710      	adds	r7, #16
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dbfe:	78fa      	ldrb	r2, [r7, #3]
 800dc00:	4611      	mov	r1, r2
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7f5 f949 	bl	8002e9a <HAL_HCD_HC_GetXferCount>
 800dc08:	4603      	mov	r3, r0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3708      	adds	r7, #8
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dc12:	b590      	push	{r4, r7, lr}
 800dc14:	b089      	sub	sp, #36	; 0x24
 800dc16:	af04      	add	r7, sp, #16
 800dc18:	6078      	str	r0, [r7, #4]
 800dc1a:	4608      	mov	r0, r1
 800dc1c:	4611      	mov	r1, r2
 800dc1e:	461a      	mov	r2, r3
 800dc20:	4603      	mov	r3, r0
 800dc22:	70fb      	strb	r3, [r7, #3]
 800dc24:	460b      	mov	r3, r1
 800dc26:	70bb      	strb	r3, [r7, #2]
 800dc28:	4613      	mov	r3, r2
 800dc2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc30:	2300      	movs	r3, #0
 800dc32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800dc3a:	787c      	ldrb	r4, [r7, #1]
 800dc3c:	78ba      	ldrb	r2, [r7, #2]
 800dc3e:	78f9      	ldrb	r1, [r7, #3]
 800dc40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dc42:	9302      	str	r3, [sp, #8]
 800dc44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dc48:	9301      	str	r3, [sp, #4]
 800dc4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	4623      	mov	r3, r4
 800dc52:	f7f4 fdad 	bl	80027b0 <HAL_HCD_HC_Init>
 800dc56:	4603      	mov	r3, r0
 800dc58:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dc5a:	7bfb      	ldrb	r3, [r7, #15]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f000 f8b3 	bl	800ddc8 <USBH_Get_USB_Status>
 800dc62:	4603      	mov	r3, r0
 800dc64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc66:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3714      	adds	r7, #20
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd90      	pop	{r4, r7, pc}

0800dc70 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc80:	2300      	movs	r3, #0
 800dc82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc8a:	78fa      	ldrb	r2, [r7, #3]
 800dc8c:	4611      	mov	r1, r2
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7f4 fe1d 	bl	80028ce <HAL_HCD_HC_Halt>
 800dc94:	4603      	mov	r3, r0
 800dc96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dc98:	7bfb      	ldrb	r3, [r7, #15]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 f894 	bl	800ddc8 <USBH_Get_USB_Status>
 800dca0:	4603      	mov	r3, r0
 800dca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dca4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dcae:	b590      	push	{r4, r7, lr}
 800dcb0:	b089      	sub	sp, #36	; 0x24
 800dcb2:	af04      	add	r7, sp, #16
 800dcb4:	6078      	str	r0, [r7, #4]
 800dcb6:	4608      	mov	r0, r1
 800dcb8:	4611      	mov	r1, r2
 800dcba:	461a      	mov	r2, r3
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	70fb      	strb	r3, [r7, #3]
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	70bb      	strb	r3, [r7, #2]
 800dcc4:	4613      	mov	r3, r2
 800dcc6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800dcd6:	787c      	ldrb	r4, [r7, #1]
 800dcd8:	78ba      	ldrb	r2, [r7, #2]
 800dcda:	78f9      	ldrb	r1, [r7, #3]
 800dcdc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dce0:	9303      	str	r3, [sp, #12]
 800dce2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dce4:	9302      	str	r3, [sp, #8]
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce8:	9301      	str	r3, [sp, #4]
 800dcea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	4623      	mov	r3, r4
 800dcf2:	f7f4 fe0f 	bl	8002914 <HAL_HCD_HC_SubmitRequest>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800dcfa:	7bfb      	ldrb	r3, [r7, #15]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f000 f863 	bl	800ddc8 <USBH_Get_USB_Status>
 800dd02:	4603      	mov	r3, r0
 800dd04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd06:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3714      	adds	r7, #20
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd90      	pop	{r4, r7, pc}

0800dd10 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	460b      	mov	r3, r1
 800dd1a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd22:	78fa      	ldrb	r2, [r7, #3]
 800dd24:	4611      	mov	r1, r2
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7f5 f8a3 	bl	8002e72 <HAL_HCD_HC_GetURBState>
 800dd2c:	4603      	mov	r3, r0
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3708      	adds	r7, #8
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b082      	sub	sp, #8
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	460b      	mov	r3, r1
 800dd40:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 800dd42:	20c8      	movs	r0, #200	; 0xc8
 800dd44:	f7f3 ff50 	bl	8001be8 <HAL_Delay>
  return USBH_OK;
 800dd48:	2300      	movs	r3, #0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800dd52:	b480      	push	{r7}
 800dd54:	b085      	sub	sp, #20
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	70fb      	strb	r3, [r7, #3]
 800dd5e:	4613      	mov	r3, r2
 800dd60:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd68:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800dd6a:	78fb      	ldrb	r3, [r7, #3]
 800dd6c:	68fa      	ldr	r2, [r7, #12]
 800dd6e:	212c      	movs	r1, #44	; 0x2c
 800dd70:	fb01 f303 	mul.w	r3, r1, r3
 800dd74:	4413      	add	r3, r2
 800dd76:	333b      	adds	r3, #59	; 0x3b
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d009      	beq.n	800dd92 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800dd7e:	78fb      	ldrb	r3, [r7, #3]
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	212c      	movs	r1, #44	; 0x2c
 800dd84:	fb01 f303 	mul.w	r3, r1, r3
 800dd88:	4413      	add	r3, r2
 800dd8a:	3354      	adds	r3, #84	; 0x54
 800dd8c:	78ba      	ldrb	r2, [r7, #2]
 800dd8e:	701a      	strb	r2, [r3, #0]
 800dd90:	e008      	b.n	800dda4 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800dd92:	78fb      	ldrb	r3, [r7, #3]
 800dd94:	68fa      	ldr	r2, [r7, #12]
 800dd96:	212c      	movs	r1, #44	; 0x2c
 800dd98:	fb01 f303 	mul.w	r3, r1, r3
 800dd9c:	4413      	add	r3, r2
 800dd9e:	3355      	adds	r3, #85	; 0x55
 800dda0:	78ba      	ldrb	r2, [r7, #2]
 800dda2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800dda4:	2300      	movs	r3, #0
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3714      	adds	r7, #20
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr

0800ddb2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b082      	sub	sp, #8
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f7f3 ff14 	bl	8001be8 <HAL_Delay>
}
 800ddc0:	bf00      	nop
 800ddc2:	3708      	adds	r7, #8
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ddd6:	79fb      	ldrb	r3, [r7, #7]
 800ddd8:	2b03      	cmp	r3, #3
 800ddda:	d817      	bhi.n	800de0c <USBH_Get_USB_Status+0x44>
 800dddc:	a201      	add	r2, pc, #4	; (adr r2, 800dde4 <USBH_Get_USB_Status+0x1c>)
 800ddde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde2:	bf00      	nop
 800dde4:	0800ddf5 	.word	0x0800ddf5
 800dde8:	0800ddfb 	.word	0x0800ddfb
 800ddec:	0800de01 	.word	0x0800de01
 800ddf0:	0800de07 	.word	0x0800de07
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf8:	e00b      	b.n	800de12 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ddfa:	2302      	movs	r3, #2
 800ddfc:	73fb      	strb	r3, [r7, #15]
    break;
 800ddfe:	e008      	b.n	800de12 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800de00:	2301      	movs	r3, #1
 800de02:	73fb      	strb	r3, [r7, #15]
    break;
 800de04:	e005      	b.n	800de12 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800de06:	2302      	movs	r3, #2
 800de08:	73fb      	strb	r3, [r7, #15]
    break;
 800de0a:	e002      	b.n	800de12 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800de0c:	2302      	movs	r3, #2
 800de0e:	73fb      	strb	r3, [r7, #15]
    break;
 800de10:	bf00      	nop
  }
  return usb_status;
 800de12:	7bfb      	ldrb	r3, [r7, #15]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3714      	adds	r7, #20
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <__errno>:
 800de20:	4b01      	ldr	r3, [pc, #4]	; (800de28 <__errno+0x8>)
 800de22:	6818      	ldr	r0, [r3, #0]
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	20000088 	.word	0x20000088

0800de2c <__libc_init_array>:
 800de2c:	b570      	push	{r4, r5, r6, lr}
 800de2e:	4d0d      	ldr	r5, [pc, #52]	; (800de64 <__libc_init_array+0x38>)
 800de30:	4c0d      	ldr	r4, [pc, #52]	; (800de68 <__libc_init_array+0x3c>)
 800de32:	1b64      	subs	r4, r4, r5
 800de34:	10a4      	asrs	r4, r4, #2
 800de36:	2600      	movs	r6, #0
 800de38:	42a6      	cmp	r6, r4
 800de3a:	d109      	bne.n	800de50 <__libc_init_array+0x24>
 800de3c:	4d0b      	ldr	r5, [pc, #44]	; (800de6c <__libc_init_array+0x40>)
 800de3e:	4c0c      	ldr	r4, [pc, #48]	; (800de70 <__libc_init_array+0x44>)
 800de40:	f000 f92e 	bl	800e0a0 <_init>
 800de44:	1b64      	subs	r4, r4, r5
 800de46:	10a4      	asrs	r4, r4, #2
 800de48:	2600      	movs	r6, #0
 800de4a:	42a6      	cmp	r6, r4
 800de4c:	d105      	bne.n	800de5a <__libc_init_array+0x2e>
 800de4e:	bd70      	pop	{r4, r5, r6, pc}
 800de50:	f855 3b04 	ldr.w	r3, [r5], #4
 800de54:	4798      	blx	r3
 800de56:	3601      	adds	r6, #1
 800de58:	e7ee      	b.n	800de38 <__libc_init_array+0xc>
 800de5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800de5e:	4798      	blx	r3
 800de60:	3601      	adds	r6, #1
 800de62:	e7f2      	b.n	800de4a <__libc_init_array+0x1e>
 800de64:	0800e430 	.word	0x0800e430
 800de68:	0800e430 	.word	0x0800e430
 800de6c:	0800e430 	.word	0x0800e430
 800de70:	0800e434 	.word	0x0800e434

0800de74 <malloc>:
 800de74:	4b02      	ldr	r3, [pc, #8]	; (800de80 <malloc+0xc>)
 800de76:	4601      	mov	r1, r0
 800de78:	6818      	ldr	r0, [r3, #0]
 800de7a:	f000 b87f 	b.w	800df7c <_malloc_r>
 800de7e:	bf00      	nop
 800de80:	20000088 	.word	0x20000088

0800de84 <free>:
 800de84:	4b02      	ldr	r3, [pc, #8]	; (800de90 <free+0xc>)
 800de86:	4601      	mov	r1, r0
 800de88:	6818      	ldr	r0, [r3, #0]
 800de8a:	f000 b80b 	b.w	800dea4 <_free_r>
 800de8e:	bf00      	nop
 800de90:	20000088 	.word	0x20000088

0800de94 <memset>:
 800de94:	4402      	add	r2, r0
 800de96:	4603      	mov	r3, r0
 800de98:	4293      	cmp	r3, r2
 800de9a:	d100      	bne.n	800de9e <memset+0xa>
 800de9c:	4770      	bx	lr
 800de9e:	f803 1b01 	strb.w	r1, [r3], #1
 800dea2:	e7f9      	b.n	800de98 <memset+0x4>

0800dea4 <_free_r>:
 800dea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dea6:	2900      	cmp	r1, #0
 800dea8:	d044      	beq.n	800df34 <_free_r+0x90>
 800deaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deae:	9001      	str	r0, [sp, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f1a1 0404 	sub.w	r4, r1, #4
 800deb6:	bfb8      	it	lt
 800deb8:	18e4      	addlt	r4, r4, r3
 800deba:	f000 f8e3 	bl	800e084 <__malloc_lock>
 800debe:	4a1e      	ldr	r2, [pc, #120]	; (800df38 <_free_r+0x94>)
 800dec0:	9801      	ldr	r0, [sp, #4]
 800dec2:	6813      	ldr	r3, [r2, #0]
 800dec4:	b933      	cbnz	r3, 800ded4 <_free_r+0x30>
 800dec6:	6063      	str	r3, [r4, #4]
 800dec8:	6014      	str	r4, [r2, #0]
 800deca:	b003      	add	sp, #12
 800decc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ded0:	f000 b8de 	b.w	800e090 <__malloc_unlock>
 800ded4:	42a3      	cmp	r3, r4
 800ded6:	d908      	bls.n	800deea <_free_r+0x46>
 800ded8:	6825      	ldr	r5, [r4, #0]
 800deda:	1961      	adds	r1, r4, r5
 800dedc:	428b      	cmp	r3, r1
 800dede:	bf01      	itttt	eq
 800dee0:	6819      	ldreq	r1, [r3, #0]
 800dee2:	685b      	ldreq	r3, [r3, #4]
 800dee4:	1949      	addeq	r1, r1, r5
 800dee6:	6021      	streq	r1, [r4, #0]
 800dee8:	e7ed      	b.n	800dec6 <_free_r+0x22>
 800deea:	461a      	mov	r2, r3
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	b10b      	cbz	r3, 800def4 <_free_r+0x50>
 800def0:	42a3      	cmp	r3, r4
 800def2:	d9fa      	bls.n	800deea <_free_r+0x46>
 800def4:	6811      	ldr	r1, [r2, #0]
 800def6:	1855      	adds	r5, r2, r1
 800def8:	42a5      	cmp	r5, r4
 800defa:	d10b      	bne.n	800df14 <_free_r+0x70>
 800defc:	6824      	ldr	r4, [r4, #0]
 800defe:	4421      	add	r1, r4
 800df00:	1854      	adds	r4, r2, r1
 800df02:	42a3      	cmp	r3, r4
 800df04:	6011      	str	r1, [r2, #0]
 800df06:	d1e0      	bne.n	800deca <_free_r+0x26>
 800df08:	681c      	ldr	r4, [r3, #0]
 800df0a:	685b      	ldr	r3, [r3, #4]
 800df0c:	6053      	str	r3, [r2, #4]
 800df0e:	4421      	add	r1, r4
 800df10:	6011      	str	r1, [r2, #0]
 800df12:	e7da      	b.n	800deca <_free_r+0x26>
 800df14:	d902      	bls.n	800df1c <_free_r+0x78>
 800df16:	230c      	movs	r3, #12
 800df18:	6003      	str	r3, [r0, #0]
 800df1a:	e7d6      	b.n	800deca <_free_r+0x26>
 800df1c:	6825      	ldr	r5, [r4, #0]
 800df1e:	1961      	adds	r1, r4, r5
 800df20:	428b      	cmp	r3, r1
 800df22:	bf04      	itt	eq
 800df24:	6819      	ldreq	r1, [r3, #0]
 800df26:	685b      	ldreq	r3, [r3, #4]
 800df28:	6063      	str	r3, [r4, #4]
 800df2a:	bf04      	itt	eq
 800df2c:	1949      	addeq	r1, r1, r5
 800df2e:	6021      	streq	r1, [r4, #0]
 800df30:	6054      	str	r4, [r2, #4]
 800df32:	e7ca      	b.n	800deca <_free_r+0x26>
 800df34:	b003      	add	sp, #12
 800df36:	bd30      	pop	{r4, r5, pc}
 800df38:	200010b0 	.word	0x200010b0

0800df3c <sbrk_aligned>:
 800df3c:	b570      	push	{r4, r5, r6, lr}
 800df3e:	4e0e      	ldr	r6, [pc, #56]	; (800df78 <sbrk_aligned+0x3c>)
 800df40:	460c      	mov	r4, r1
 800df42:	6831      	ldr	r1, [r6, #0]
 800df44:	4605      	mov	r5, r0
 800df46:	b911      	cbnz	r1, 800df4e <sbrk_aligned+0x12>
 800df48:	f000 f88c 	bl	800e064 <_sbrk_r>
 800df4c:	6030      	str	r0, [r6, #0]
 800df4e:	4621      	mov	r1, r4
 800df50:	4628      	mov	r0, r5
 800df52:	f000 f887 	bl	800e064 <_sbrk_r>
 800df56:	1c43      	adds	r3, r0, #1
 800df58:	d00a      	beq.n	800df70 <sbrk_aligned+0x34>
 800df5a:	1cc4      	adds	r4, r0, #3
 800df5c:	f024 0403 	bic.w	r4, r4, #3
 800df60:	42a0      	cmp	r0, r4
 800df62:	d007      	beq.n	800df74 <sbrk_aligned+0x38>
 800df64:	1a21      	subs	r1, r4, r0
 800df66:	4628      	mov	r0, r5
 800df68:	f000 f87c 	bl	800e064 <_sbrk_r>
 800df6c:	3001      	adds	r0, #1
 800df6e:	d101      	bne.n	800df74 <sbrk_aligned+0x38>
 800df70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800df74:	4620      	mov	r0, r4
 800df76:	bd70      	pop	{r4, r5, r6, pc}
 800df78:	200010b4 	.word	0x200010b4

0800df7c <_malloc_r>:
 800df7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df80:	1ccd      	adds	r5, r1, #3
 800df82:	f025 0503 	bic.w	r5, r5, #3
 800df86:	3508      	adds	r5, #8
 800df88:	2d0c      	cmp	r5, #12
 800df8a:	bf38      	it	cc
 800df8c:	250c      	movcc	r5, #12
 800df8e:	2d00      	cmp	r5, #0
 800df90:	4607      	mov	r7, r0
 800df92:	db01      	blt.n	800df98 <_malloc_r+0x1c>
 800df94:	42a9      	cmp	r1, r5
 800df96:	d905      	bls.n	800dfa4 <_malloc_r+0x28>
 800df98:	230c      	movs	r3, #12
 800df9a:	603b      	str	r3, [r7, #0]
 800df9c:	2600      	movs	r6, #0
 800df9e:	4630      	mov	r0, r6
 800dfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa4:	4e2e      	ldr	r6, [pc, #184]	; (800e060 <_malloc_r+0xe4>)
 800dfa6:	f000 f86d 	bl	800e084 <__malloc_lock>
 800dfaa:	6833      	ldr	r3, [r6, #0]
 800dfac:	461c      	mov	r4, r3
 800dfae:	bb34      	cbnz	r4, 800dffe <_malloc_r+0x82>
 800dfb0:	4629      	mov	r1, r5
 800dfb2:	4638      	mov	r0, r7
 800dfb4:	f7ff ffc2 	bl	800df3c <sbrk_aligned>
 800dfb8:	1c43      	adds	r3, r0, #1
 800dfba:	4604      	mov	r4, r0
 800dfbc:	d14d      	bne.n	800e05a <_malloc_r+0xde>
 800dfbe:	6834      	ldr	r4, [r6, #0]
 800dfc0:	4626      	mov	r6, r4
 800dfc2:	2e00      	cmp	r6, #0
 800dfc4:	d140      	bne.n	800e048 <_malloc_r+0xcc>
 800dfc6:	6823      	ldr	r3, [r4, #0]
 800dfc8:	4631      	mov	r1, r6
 800dfca:	4638      	mov	r0, r7
 800dfcc:	eb04 0803 	add.w	r8, r4, r3
 800dfd0:	f000 f848 	bl	800e064 <_sbrk_r>
 800dfd4:	4580      	cmp	r8, r0
 800dfd6:	d13a      	bne.n	800e04e <_malloc_r+0xd2>
 800dfd8:	6821      	ldr	r1, [r4, #0]
 800dfda:	3503      	adds	r5, #3
 800dfdc:	1a6d      	subs	r5, r5, r1
 800dfde:	f025 0503 	bic.w	r5, r5, #3
 800dfe2:	3508      	adds	r5, #8
 800dfe4:	2d0c      	cmp	r5, #12
 800dfe6:	bf38      	it	cc
 800dfe8:	250c      	movcc	r5, #12
 800dfea:	4629      	mov	r1, r5
 800dfec:	4638      	mov	r0, r7
 800dfee:	f7ff ffa5 	bl	800df3c <sbrk_aligned>
 800dff2:	3001      	adds	r0, #1
 800dff4:	d02b      	beq.n	800e04e <_malloc_r+0xd2>
 800dff6:	6823      	ldr	r3, [r4, #0]
 800dff8:	442b      	add	r3, r5
 800dffa:	6023      	str	r3, [r4, #0]
 800dffc:	e00e      	b.n	800e01c <_malloc_r+0xa0>
 800dffe:	6822      	ldr	r2, [r4, #0]
 800e000:	1b52      	subs	r2, r2, r5
 800e002:	d41e      	bmi.n	800e042 <_malloc_r+0xc6>
 800e004:	2a0b      	cmp	r2, #11
 800e006:	d916      	bls.n	800e036 <_malloc_r+0xba>
 800e008:	1961      	adds	r1, r4, r5
 800e00a:	42a3      	cmp	r3, r4
 800e00c:	6025      	str	r5, [r4, #0]
 800e00e:	bf18      	it	ne
 800e010:	6059      	strne	r1, [r3, #4]
 800e012:	6863      	ldr	r3, [r4, #4]
 800e014:	bf08      	it	eq
 800e016:	6031      	streq	r1, [r6, #0]
 800e018:	5162      	str	r2, [r4, r5]
 800e01a:	604b      	str	r3, [r1, #4]
 800e01c:	4638      	mov	r0, r7
 800e01e:	f104 060b 	add.w	r6, r4, #11
 800e022:	f000 f835 	bl	800e090 <__malloc_unlock>
 800e026:	f026 0607 	bic.w	r6, r6, #7
 800e02a:	1d23      	adds	r3, r4, #4
 800e02c:	1af2      	subs	r2, r6, r3
 800e02e:	d0b6      	beq.n	800df9e <_malloc_r+0x22>
 800e030:	1b9b      	subs	r3, r3, r6
 800e032:	50a3      	str	r3, [r4, r2]
 800e034:	e7b3      	b.n	800df9e <_malloc_r+0x22>
 800e036:	6862      	ldr	r2, [r4, #4]
 800e038:	42a3      	cmp	r3, r4
 800e03a:	bf0c      	ite	eq
 800e03c:	6032      	streq	r2, [r6, #0]
 800e03e:	605a      	strne	r2, [r3, #4]
 800e040:	e7ec      	b.n	800e01c <_malloc_r+0xa0>
 800e042:	4623      	mov	r3, r4
 800e044:	6864      	ldr	r4, [r4, #4]
 800e046:	e7b2      	b.n	800dfae <_malloc_r+0x32>
 800e048:	4634      	mov	r4, r6
 800e04a:	6876      	ldr	r6, [r6, #4]
 800e04c:	e7b9      	b.n	800dfc2 <_malloc_r+0x46>
 800e04e:	230c      	movs	r3, #12
 800e050:	603b      	str	r3, [r7, #0]
 800e052:	4638      	mov	r0, r7
 800e054:	f000 f81c 	bl	800e090 <__malloc_unlock>
 800e058:	e7a1      	b.n	800df9e <_malloc_r+0x22>
 800e05a:	6025      	str	r5, [r4, #0]
 800e05c:	e7de      	b.n	800e01c <_malloc_r+0xa0>
 800e05e:	bf00      	nop
 800e060:	200010b0 	.word	0x200010b0

0800e064 <_sbrk_r>:
 800e064:	b538      	push	{r3, r4, r5, lr}
 800e066:	4d06      	ldr	r5, [pc, #24]	; (800e080 <_sbrk_r+0x1c>)
 800e068:	2300      	movs	r3, #0
 800e06a:	4604      	mov	r4, r0
 800e06c:	4608      	mov	r0, r1
 800e06e:	602b      	str	r3, [r5, #0]
 800e070:	f7f3 fa26 	bl	80014c0 <_sbrk>
 800e074:	1c43      	adds	r3, r0, #1
 800e076:	d102      	bne.n	800e07e <_sbrk_r+0x1a>
 800e078:	682b      	ldr	r3, [r5, #0]
 800e07a:	b103      	cbz	r3, 800e07e <_sbrk_r+0x1a>
 800e07c:	6023      	str	r3, [r4, #0]
 800e07e:	bd38      	pop	{r3, r4, r5, pc}
 800e080:	200010b8 	.word	0x200010b8

0800e084 <__malloc_lock>:
 800e084:	4801      	ldr	r0, [pc, #4]	; (800e08c <__malloc_lock+0x8>)
 800e086:	f000 b809 	b.w	800e09c <__retarget_lock_acquire_recursive>
 800e08a:	bf00      	nop
 800e08c:	200010bc 	.word	0x200010bc

0800e090 <__malloc_unlock>:
 800e090:	4801      	ldr	r0, [pc, #4]	; (800e098 <__malloc_unlock+0x8>)
 800e092:	f000 b804 	b.w	800e09e <__retarget_lock_release_recursive>
 800e096:	bf00      	nop
 800e098:	200010bc 	.word	0x200010bc

0800e09c <__retarget_lock_acquire_recursive>:
 800e09c:	4770      	bx	lr

0800e09e <__retarget_lock_release_recursive>:
 800e09e:	4770      	bx	lr

0800e0a0 <_init>:
 800e0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a2:	bf00      	nop
 800e0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0a6:	bc08      	pop	{r3}
 800e0a8:	469e      	mov	lr, r3
 800e0aa:	4770      	bx	lr

0800e0ac <_fini>:
 800e0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ae:	bf00      	nop
 800e0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0b2:	bc08      	pop	{r3}
 800e0b4:	469e      	mov	lr, r3
 800e0b6:	4770      	bx	lr
