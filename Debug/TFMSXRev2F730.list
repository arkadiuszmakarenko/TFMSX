
TFMSXRev2F730.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7c4  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800c9a4  0800c9a4  0001c9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd1c  0800cd1c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd1c  0800cd1c  0001cd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd24  0800cd24  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd24  0800cd24  0001cd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd28  0800cd28  0001cd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800cd2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001150  2000009c  0800cdc8  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  200011ec  0800cdc8  000211ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b2ca  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006cbd  00000000  00000000  0004b396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  00052058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001910  00000000  00000000  00053c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e025  00000000  00000000  00055528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b1a3  00000000  00000000  0008354d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6225  00000000  00000000  000ae6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a4915  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071b4  00000000  00000000  001a4968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000009c 	.word	0x2000009c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c98c 	.word	0x0800c98c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a0 	.word	0x200000a0
 800021c:	0800c98c 	.word	0x0800c98c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800052a:	463b      	mov	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_DAC_Init+0x4c>)
 8000534:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <MX_DAC_Init+0x50>)
 8000536:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <MX_DAC_Init+0x4c>)
 800053a:	f001 fda5 	bl	8002088 <HAL_DAC_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000544:	f000 fd3c 	bl	8000fc0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000548:	2300      	movs	r3, #0
 800054a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	4619      	mov	r1, r3
 8000556:	4806      	ldr	r0, [pc, #24]	; (8000570 <MX_DAC_Init+0x4c>)
 8000558:	f001 fe1c 	bl	8002194 <HAL_DAC_ConfigChannel>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000562:	f000 fd2d 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200000b8 	.word	0x200000b8
 8000574:	40007400 	.word	0x40007400

08000578 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a19      	ldr	r2, [pc, #100]	; (80005fc <HAL_DAC_MspInit+0x84>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d12b      	bne.n	80005f2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <HAL_DAC_MspInit+0x88>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059e:	4a18      	ldr	r2, [pc, #96]	; (8000600 <HAL_DAC_MspInit+0x88>)
 80005a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80005a4:	6413      	str	r3, [r2, #64]	; 0x40
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_DAC_MspInit+0x88>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <HAL_DAC_MspInit+0x88>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <HAL_DAC_MspInit+0x88>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <HAL_DAC_MspInit+0x88>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005ca:	2310      	movs	r3, #16
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ce:	2303      	movs	r3, #3
 80005d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <HAL_DAC_MspInit+0x8c>)
 80005de:	f002 f833 	bl	8002648 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2103      	movs	r1, #3
 80005e6:	2036      	movs	r0, #54	; 0x36
 80005e8:	f001 fd24 	bl	8002034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005ec:	2036      	movs	r0, #54	; 0x36
 80005ee:	f001 fd3d 	bl	800206c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	; 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40007400 	.word	0x40007400
 8000600:	40023800 	.word	0x40023800
 8000604:	40020000 	.word	0x40020000

08000608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <__NVIC_GetPriorityGrouping+0x18>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	0a1b      	lsrs	r3, r3, #8
 8000612:	f003 0307 	and.w	r3, r3, #7
}
 8000616:	4618      	mov	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	2b00      	cmp	r3, #0
 8000634:	db0b      	blt.n	800064e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f003 021f 	and.w	r2, r3, #31
 800063c:	4907      	ldr	r1, [pc, #28]	; (800065c <__NVIC_EnableIRQ+0x38>)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	095b      	lsrs	r3, r3, #5
 8000644:	2001      	movs	r0, #1
 8000646:	fa00 f202 	lsl.w	r2, r0, r2
 800064a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000e100 	.word	0xe000e100

08000660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	db0a      	blt.n	800068a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	490c      	ldr	r1, [pc, #48]	; (80006ac <__NVIC_SetPriority+0x4c>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	0112      	lsls	r2, r2, #4
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	440b      	add	r3, r1
 8000684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000688:	e00a      	b.n	80006a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4908      	ldr	r1, [pc, #32]	; (80006b0 <__NVIC_SetPriority+0x50>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f003 030f 	and.w	r3, r3, #15
 8000696:	3b04      	subs	r3, #4
 8000698:	0112      	lsls	r2, r2, #4
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	440b      	add	r3, r1
 800069e:	761a      	strb	r2, [r3, #24]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000e100 	.word	0xe000e100
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	; 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	f1c3 0307 	rsb	r3, r3, #7
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	bf28      	it	cs
 80006d2:	2304      	movcs	r3, #4
 80006d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3304      	adds	r3, #4
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d902      	bls.n	80006e4 <NVIC_EncodePriority+0x30>
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3b03      	subs	r3, #3
 80006e2:	e000      	b.n	80006e6 <NVIC_EncodePriority+0x32>
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	43da      	mvns	r2, r3
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	401a      	ands	r2, r3
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	43d9      	mvns	r1, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	4313      	orrs	r3, r2
         );
}
 800070e:	4618      	mov	r0, r3
 8000710:	3724      	adds	r7, #36	; 0x24
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <LL_SYSCFG_SetEXTISource+0x58>)
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	3302      	adds	r3, #2
 800072e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	0c1b      	lsrs	r3, r3, #16
 8000736:	43db      	mvns	r3, r3
 8000738:	ea02 0103 	and.w	r1, r2, r3
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	0c1b      	lsrs	r3, r3, #16
 8000740:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	fa93 f3a3 	rbit	r3, r3
 8000748:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	fab3 f383 	clz	r3, r3
 8000750:	b2db      	uxtb	r3, r3
 8000752:	461a      	mov	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	fa03 f202 	lsl.w	r2, r3, r2
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <LL_SYSCFG_SetEXTISource+0x58>)
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	430a      	orrs	r2, r1
 8000762:	3302      	adds	r3, #2
 8000764:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000768:	bf00      	nop
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	40013800 	.word	0x40013800

08000778 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000778:	b480      	push	{r7}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	fa93 f3a3 	rbit	r3, r3
 8000792:	613b      	str	r3, [r7, #16]
  return result;
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	fab3 f383 	clz	r3, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	2103      	movs	r1, #3
 80007a0:	fa01 f303 	lsl.w	r3, r1, r3
 80007a4:	43db      	mvns	r3, r3
 80007a6:	401a      	ands	r2, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	fa93 f3a3 	rbit	r3, r3
 80007b2:	61bb      	str	r3, [r7, #24]
  return result;
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	fab3 f383 	clz	r3, r3
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	fa01 f303 	lsl.w	r3, r1, r3
 80007c4:	431a      	orrs	r2, r3
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	601a      	str	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	3724      	adds	r7, #36	; 0x24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b089      	sub	sp, #36	; 0x24
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	68da      	ldr	r2, [r3, #12]
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	fa93 f3a3 	rbit	r3, r3
 80007f0:	613b      	str	r3, [r7, #16]
  return result;
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	fab3 f383 	clz	r3, r3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	2103      	movs	r1, #3
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	43db      	mvns	r3, r3
 8000804:	401a      	ands	r2, r3
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	fa93 f3a3 	rbit	r3, r3
 8000810:	61bb      	str	r3, [r7, #24]
  return result;
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	fab3 f383 	clz	r3, r3
 8000818:	b2db      	uxtb	r3, r3
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	6879      	ldr	r1, [r7, #4]
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	431a      	orrs	r2, r3
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	60da      	str	r2, [r3, #12]
}
 8000828:	bf00      	nop
 800082a:	3724      	adds	r7, #36	; 0x24
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	683a      	ldr	r2, [r7, #0]
 8000842:	619a      	str	r2, [r3, #24]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	041a      	lsls	r2, r3, #16
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	619a      	str	r2, [r3, #24]
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800087a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800087c:	4907      	ldr	r1, [pc, #28]	; (800089c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4013      	ands	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800088e:	68fb      	ldr	r3, [r7, #12]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	40023800 	.word	0x40023800

080008a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	463b      	mov	r3, r7
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
 80008be:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80008c0:	2004      	movs	r0, #4
 80008c2:	f7ff ffd5 	bl	8000870 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80008c6:	2080      	movs	r0, #128	; 0x80
 80008c8:	f7ff ffd2 	bl	8000870 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff ffcf 	bl	8000870 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80008d2:	2002      	movs	r0, #2
 80008d4:	f7ff ffcc 	bl	8000870 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80008d8:	2008      	movs	r0, #8
 80008da:	f7ff ffc9 	bl	8000870 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80008de:	2101      	movs	r1, #1
 80008e0:	48bb      	ldr	r0, [pc, #748]	; (8000bd0 <MX_GPIO_Init+0x330>)
 80008e2:	f7ff ffb5 	bl	8000850 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 80008e6:	2102      	movs	r1, #2
 80008e8:	48b9      	ldr	r0, [pc, #740]	; (8000bd0 <MX_GPIO_Init+0x330>)
 80008ea:	f7ff ffb1 	bl	8000850 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_2);
 80008ee:	2104      	movs	r1, #4
 80008f0:	48b7      	ldr	r0, [pc, #732]	; (8000bd0 <MX_GPIO_Init+0x330>)
 80008f2:	f7ff ffad 	bl	8000850 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80008f6:	2108      	movs	r1, #8
 80008f8:	48b5      	ldr	r0, [pc, #724]	; (8000bd0 <MX_GPIO_Init+0x330>)
 80008fa:	f7ff ffa9 	bl	8000850 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 80008fe:	2110      	movs	r1, #16
 8000900:	48b3      	ldr	r0, [pc, #716]	; (8000bd0 <MX_GPIO_Init+0x330>)
 8000902:	f7ff ffa5 	bl	8000850 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000906:	2120      	movs	r1, #32
 8000908:	48b1      	ldr	r0, [pc, #708]	; (8000bd0 <MX_GPIO_Init+0x330>)
 800090a:	f7ff ffa1 	bl	8000850 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 800090e:	2140      	movs	r1, #64	; 0x40
 8000910:	48af      	ldr	r0, [pc, #700]	; (8000bd0 <MX_GPIO_Init+0x330>)
 8000912:	f7ff ff9d 	bl	8000850 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_7);
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	48ad      	ldr	r0, [pc, #692]	; (8000bd0 <MX_GPIO_Init+0x330>)
 800091a:	f7ff ff99 	bl	8000850 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 800091e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000922:	48ab      	ldr	r0, [pc, #684]	; (8000bd0 <MX_GPIO_Init+0x330>)
 8000924:	f7ff ff86 	bl	8000834 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000936:	463b      	mov	r3, r7
 8000938:	4619      	mov	r1, r3
 800093a:	48a6      	ldr	r0, [pc, #664]	; (8000bd4 <MX_GPIO_Init+0x334>)
 800093c:	f006 fade 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000940:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000944:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	48a0      	ldr	r0, [pc, #640]	; (8000bd4 <MX_GPIO_Init+0x334>)
 8000954:	f006 fad2 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800095c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000966:	463b      	mov	r3, r7
 8000968:	4619      	mov	r1, r3
 800096a:	489a      	ldr	r0, [pc, #616]	; (8000bd4 <MX_GPIO_Init+0x334>)
 800096c:	f006 fac6 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000970:	2302      	movs	r3, #2
 8000972:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4894      	ldr	r0, [pc, #592]	; (8000bd4 <MX_GPIO_Init+0x334>)
 8000982:	f006 fabb 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000986:	2304      	movs	r3, #4
 8000988:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000992:	463b      	mov	r3, r7
 8000994:	4619      	mov	r1, r3
 8000996:	488f      	ldr	r0, [pc, #572]	; (8000bd4 <MX_GPIO_Init+0x334>)
 8000998:	f006 fab0 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800099c:	2301      	movs	r3, #1
 800099e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	488a      	ldr	r0, [pc, #552]	; (8000bd8 <MX_GPIO_Init+0x338>)
 80009ae:	f006 faa5 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80009b2:	2302      	movs	r3, #2
 80009b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	463b      	mov	r3, r7
 80009c0:	4619      	mov	r1, r3
 80009c2:	4885      	ldr	r0, [pc, #532]	; (8000bd8 <MX_GPIO_Init+0x338>)
 80009c4:	f006 fa9a 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80009c8:	2304      	movs	r3, #4
 80009ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	487f      	ldr	r0, [pc, #508]	; (8000bd8 <MX_GPIO_Init+0x338>)
 80009da:	f006 fa8f 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80009de:	2308      	movs	r3, #8
 80009e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	463b      	mov	r3, r7
 80009ec:	4619      	mov	r1, r3
 80009ee:	487a      	ldr	r0, [pc, #488]	; (8000bd8 <MX_GPIO_Init+0x338>)
 80009f0:	f006 fa84 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80009f4:	2320      	movs	r3, #32
 80009f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4874      	ldr	r0, [pc, #464]	; (8000bd8 <MX_GPIO_Init+0x338>)
 8000a06:	f006 fa79 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000a0a:	2340      	movs	r3, #64	; 0x40
 8000a0c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	463b      	mov	r3, r7
 8000a18:	4619      	mov	r1, r3
 8000a1a:	486f      	ldr	r0, [pc, #444]	; (8000bd8 <MX_GPIO_Init+0x338>)
 8000a1c:	f006 fa6e 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4869      	ldr	r0, [pc, #420]	; (8000bd8 <MX_GPIO_Init+0x338>)
 8000a32:	f006 fa63 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000a36:	2301      	movs	r3, #1
 8000a38:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4860      	ldr	r0, [pc, #384]	; (8000bd0 <MX_GPIO_Init+0x330>)
 8000a50:	f006 fa54 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000a54:	2302      	movs	r3, #2
 8000a56:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4858      	ldr	r0, [pc, #352]	; (8000bd0 <MX_GPIO_Init+0x330>)
 8000a6e:	f006 fa45 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000a72:	2304      	movs	r3, #4
 8000a74:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a76:	2301      	movs	r3, #1
 8000a78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	463b      	mov	r3, r7
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4851      	ldr	r0, [pc, #324]	; (8000bd0 <MX_GPIO_Init+0x330>)
 8000a8c:	f006 fa36 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a94:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	484b      	ldr	r0, [pc, #300]	; (8000bd0 <MX_GPIO_Init+0x330>)
 8000aa4:	f006 fa2a 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000aa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4845      	ldr	r0, [pc, #276]	; (8000bd0 <MX_GPIO_Init+0x330>)
 8000abc:	f006 fa1e 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4619      	mov	r1, r3
 8000ada:	483d      	ldr	r0, [pc, #244]	; (8000bd0 <MX_GPIO_Init+0x330>)
 8000adc:	f006 fa0e 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aec:	463b      	mov	r3, r7
 8000aee:	4619      	mov	r1, r3
 8000af0:	4838      	ldr	r0, [pc, #224]	; (8000bd4 <MX_GPIO_Init+0x334>)
 8000af2:	f006 fa03 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b04:	463b      	mov	r3, r7
 8000b06:	4619      	mov	r1, r3
 8000b08:	4832      	ldr	r0, [pc, #200]	; (8000bd4 <MX_GPIO_Init+0x334>)
 8000b0a:	f006 f9f7 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b12:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	4619      	mov	r1, r3
 8000b20:	482c      	ldr	r0, [pc, #176]	; (8000bd4 <MX_GPIO_Init+0x334>)
 8000b22:	f006 f9eb 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	463b      	mov	r3, r7
 8000b36:	4619      	mov	r1, r3
 8000b38:	4826      	ldr	r0, [pc, #152]	; (8000bd4 <MX_GPIO_Init+0x334>)
 8000b3a:	f006 f9df 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000b3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4820      	ldr	r0, [pc, #128]	; (8000bd4 <MX_GPIO_Init+0x334>)
 8000b52:	f006 f9d3 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b56:	2308      	movs	r3, #8
 8000b58:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <MX_GPIO_Init+0x330>)
 8000b70:	f006 f9c4 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000b74:	2310      	movs	r3, #16
 8000b76:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	463b      	mov	r3, r7
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <MX_GPIO_Init+0x330>)
 8000b8e:	f006 f9b5 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000b92:	2320      	movs	r3, #32
 8000b94:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b96:	2301      	movs	r3, #1
 8000b98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <MX_GPIO_Init+0x330>)
 8000bac:	f006 f9a6 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000bb0:	2340      	movs	r3, #64	; 0x40
 8000bb2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4801      	ldr	r0, [pc, #4]	; (8000bd0 <MX_GPIO_Init+0x330>)
 8000bca:	f006 f997 	bl	8006efc <LL_GPIO_Init>
 8000bce:	e005      	b.n	8000bdc <MX_GPIO_Init+0x33c>
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020000 	.word	0x40020000

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000be0:	2301      	movs	r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4850      	ldr	r0, [pc, #320]	; (8000d38 <MX_GPIO_Init+0x498>)
 8000bf6:	f006 f981 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bfe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	463b      	mov	r3, r7
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	484a      	ldr	r0, [pc, #296]	; (8000d38 <MX_GPIO_Init+0x498>)
 8000c0e:	f006 f975 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c16:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	463b      	mov	r3, r7
 8000c22:	4619      	mov	r1, r3
 8000c24:	4844      	ldr	r0, [pc, #272]	; (8000d38 <MX_GPIO_Init+0x498>)
 8000c26:	f006 f969 	bl	8006efc <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE0);
 8000c2a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f7ff fd74 	bl	800071c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE3);
 8000c34:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f7ff fd6f 	bl	800071c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE6);
 8000c3e:	493f      	ldr	r1, [pc, #252]	; (8000d3c <MX_GPIO_Init+0x49c>)
 8000c40:	2002      	movs	r0, #2
 8000c42:	f7ff fd6b 	bl	800071c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000c52:	2301      	movs	r3, #1
 8000c54:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f005 ffc8 	bl	8006bf0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000c60:	2308      	movs	r3, #8
 8000c62:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c64:	2301      	movs	r3, #1
 8000c66:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c70:	f107 0318 	add.w	r3, r7, #24
 8000c74:	4618      	mov	r0, r3
 8000c76:	f005 ffbb 	bl	8006bf0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8000c7a:	2340      	movs	r3, #64	; 0x40
 8000c7c:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c82:	2300      	movs	r3, #0
 8000c84:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000c86:	2303      	movs	r3, #3
 8000c88:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f005 ffae 	bl	8006bf0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_0, LL_GPIO_PULL_NO);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2101      	movs	r1, #1
 8000c98:	4829      	ldr	r0, [pc, #164]	; (8000d40 <MX_GPIO_Init+0x4a0>)
 8000c9a:	f7ff fd9c 	bl	80007d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_3, LL_GPIO_PULL_NO);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	4827      	ldr	r0, [pc, #156]	; (8000d40 <MX_GPIO_Init+0x4a0>)
 8000ca4:	f7ff fd97 	bl	80007d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	4824      	ldr	r0, [pc, #144]	; (8000d40 <MX_GPIO_Init+0x4a0>)
 8000cae:	f7ff fd92 	bl	80007d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_0, LL_GPIO_MODE_INPUT);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4822      	ldr	r0, [pc, #136]	; (8000d40 <MX_GPIO_Init+0x4a0>)
 8000cb8:	f7ff fd5e 	bl	8000778 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	481f      	ldr	r0, [pc, #124]	; (8000d40 <MX_GPIO_Init+0x4a0>)
 8000cc2:	f7ff fd59 	bl	8000778 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_6, LL_GPIO_MODE_INPUT);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2140      	movs	r1, #64	; 0x40
 8000cca:	481d      	ldr	r0, [pc, #116]	; (8000d40 <MX_GPIO_Init+0x4a0>)
 8000ccc:	f7ff fd54 	bl	8000778 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cd0:	f7ff fc9a 	bl	8000608 <__NVIC_GetPriorityGrouping>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fcea 	bl	80006b4 <NVIC_EncodePriority>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	2006      	movs	r0, #6
 8000ce6:	f7ff fcbb 	bl	8000660 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000cea:	2006      	movs	r0, #6
 8000cec:	f7ff fc9a 	bl	8000624 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cf0:	f7ff fc8a 	bl	8000608 <__NVIC_GetPriorityGrouping>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fcda 	bl	80006b4 <NVIC_EncodePriority>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4619      	mov	r1, r3
 8000d04:	2009      	movs	r0, #9
 8000d06:	f7ff fcab 	bl	8000660 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8000d0a:	2009      	movs	r0, #9
 8000d0c:	f7ff fc8a 	bl	8000624 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8000d10:	f7ff fc7a 	bl	8000608 <__NVIC_GetPriorityGrouping>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2200      	movs	r2, #0
 8000d18:	2102      	movs	r1, #2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fcca 	bl	80006b4 <NVIC_EncodePriority>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4619      	mov	r1, r3
 8000d24:	2017      	movs	r0, #23
 8000d26:	f7ff fc9b 	bl	8000660 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d2a:	2017      	movs	r0, #23
 8000d2c:	f7ff fc7a 	bl	8000624 <__NVIC_EnableIRQ>

}
 8000d30:	bf00      	nop
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40020400 	.word	0x40020400
 8000d3c:	0f000001 	.word	0x0f000001
 8000d40:	40020800 	.word	0x40020800

08000d44 <LL_GPIO_SetOutputPin>:
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	619a      	str	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <LL_GPIO_ResetOutputPin>:
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	041a      	lsls	r2, r3, #16
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	619a      	str	r2, [r3, #24]
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <ProcessJoystick>:
#include "joystick.h"

HID_gamepad_Info_TypeDef* joymap;

void ProcessJoystick() {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0

			
			SetupJoystick();
 8000d86:	f000 fec7 	bl	8001b18 <SetupJoystick>
			HID_gamepad_Info_TypeDef *joymap = (HID_gamepad_Info_TypeDef *)USBH_Get_Device_Data_Host(&hUsbHostHS,HUB_GAMEPAD);
 8000d8a:	2103      	movs	r1, #3
 8000d8c:	483c      	ldr	r0, [pc, #240]	; (8000e80 <ProcessJoystick+0x100>)
 8000d8e:	f000 fdf9 	bl	8001984 <USBH_Get_Device_Data_Host>
 8000d92:	6078      	str	r0, [r7, #4]


			if (joymap == NULL) return;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d06e      	beq.n	8000e78 <ProcessJoystick+0xf8>
			if ((joymap->gamepad_data & 0x1)) LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_10); else LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10); //RIGHT - PC7
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <ProcessJoystick+0x32>
 8000da6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000daa:	4836      	ldr	r0, [pc, #216]	; (8000e84 <ProcessJoystick+0x104>)
 8000dac:	f7ff ffca 	bl	8000d44 <LL_GPIO_SetOutputPin>
 8000db0:	e004      	b.n	8000dbc <ProcessJoystick+0x3c>
 8000db2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000db6:	4833      	ldr	r0, [pc, #204]	; (8000e84 <ProcessJoystick+0x104>)
 8000db8:	f7ff ffd2 	bl	8000d60 <LL_GPIO_ResetOutputPin>
			if ((joymap->gamepad_data >> 1 & 0x1)) LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7); else LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7); //LEFT - PC10
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	085b      	lsrs	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d004      	beq.n	8000dd6 <ProcessJoystick+0x56>
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	482d      	ldr	r0, [pc, #180]	; (8000e84 <ProcessJoystick+0x104>)
 8000dd0:	f7ff ffb8 	bl	8000d44 <LL_GPIO_SetOutputPin>
 8000dd4:	e003      	b.n	8000dde <ProcessJoystick+0x5e>
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	482a      	ldr	r0, [pc, #168]	; (8000e84 <ProcessJoystick+0x104>)
 8000dda:	f7ff ffc1 	bl	8000d60 <LL_GPIO_ResetOutputPin>
			if ((joymap->gamepad_data >> 2 & 0x1)) LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13); else LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13); //BACK - PC11
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d005      	beq.n	8000dfa <ProcessJoystick+0x7a>
 8000dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df2:	4824      	ldr	r0, [pc, #144]	; (8000e84 <ProcessJoystick+0x104>)
 8000df4:	f7ff ffa6 	bl	8000d44 <LL_GPIO_SetOutputPin>
 8000df8:	e004      	b.n	8000e04 <ProcessJoystick+0x84>
 8000dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfe:	4821      	ldr	r0, [pc, #132]	; (8000e84 <ProcessJoystick+0x104>)
 8000e00:	f7ff ffae 	bl	8000d60 <LL_GPIO_ResetOutputPin>
			if ((joymap->gamepad_data >> 3 & 0x1)) LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_11); else LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_11); //FORWARD - PC13
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	08db      	lsrs	r3, r3, #3
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d005      	beq.n	8000e20 <ProcessJoystick+0xa0>
 8000e14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e18:	481a      	ldr	r0, [pc, #104]	; (8000e84 <ProcessJoystick+0x104>)
 8000e1a:	f7ff ff93 	bl	8000d44 <LL_GPIO_SetOutputPin>
 8000e1e:	e004      	b.n	8000e2a <ProcessJoystick+0xaa>
 8000e20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e24:	4817      	ldr	r0, [pc, #92]	; (8000e84 <ProcessJoystick+0x104>)
 8000e26:	f7ff ff9b 	bl	8000d60 <LL_GPIO_ResetOutputPin>
			if ((joymap->gamepad_data >> 4 & 0x1)) LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_15); else LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_15); //TR1 - PC15
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d005      	beq.n	8000e46 <ProcessJoystick+0xc6>
 8000e3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <ProcessJoystick+0x104>)
 8000e40:	f7ff ff8e 	bl	8000d60 <LL_GPIO_ResetOutputPin>
 8000e44:	e004      	b.n	8000e50 <ProcessJoystick+0xd0>
 8000e46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e4a:	480e      	ldr	r0, [pc, #56]	; (8000e84 <ProcessJoystick+0x104>)
 8000e4c:	f7ff ff7a 	bl	8000d44 <LL_GPIO_SetOutputPin>
			if ((joymap->gamepad_data >> 5 & 0x1)) LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_14); else LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_14); //TR2 - PC14
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	095b      	lsrs	r3, r3, #5
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d005      	beq.n	8000e6c <ProcessJoystick+0xec>
 8000e60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e64:	4807      	ldr	r0, [pc, #28]	; (8000e84 <ProcessJoystick+0x104>)
 8000e66:	f7ff ff7b 	bl	8000d60 <LL_GPIO_ResetOutputPin>
 8000e6a:	e006      	b.n	8000e7a <ProcessJoystick+0xfa>
 8000e6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <ProcessJoystick+0x104>)
 8000e72:	f7ff ff67 	bl	8000d44 <LL_GPIO_SetOutputPin>
 8000e76:	e000      	b.n	8000e7a <ProcessJoystick+0xfa>
			if (joymap == NULL) return;
 8000e78:	bf00      	nop
	
}
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000420 	.word	0x20000420
 8000e84:	40020800 	.word	0x40020800

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8c:	f000 ffc9 	bl	8001e22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e90:	f000 f814 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e94:	f7ff fd04 	bl	80008a0 <MX_GPIO_Init>
  MX_UART5_Init();
 8000e98:	f000 fc90 	bl	80017bc <MX_UART5_Init>
  MX_USB_HOST_Init();
 8000e9c:	f00b f818 	bl	800bed0 <MX_USB_HOST_Init>
  MX_DAC_Init();
 8000ea0:	f7ff fb40 	bl	8000524 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  InitMSXKeyboard();
 8000ea4:	f000 f98e 	bl	80011c4 <InitMSXKeyboard>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ea8:	f00b f86a 	bl	800bf80 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
     ProcessMSXKeyboard();
 8000eac:	f000 f9e2 	bl	8001274 <ProcessMSXKeyboard>
     ProcessJoystick();
 8000eb0:	f7ff ff66 	bl	8000d80 <ProcessJoystick>
     ProcessMouse();
 8000eb4:	f000 f8b0 	bl	8001018 <ProcessMouse>
    MX_USB_HOST_Process();
 8000eb8:	e7f6      	b.n	8000ea8 <main+0x20>
	...

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b094      	sub	sp, #80	; 0x50
 8000ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 0320 	add.w	r3, r7, #32
 8000ec6:	2230      	movs	r2, #48	; 0x30
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f00b fc58 	bl	800c780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <SystemClock_Config+0xd8>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	4a2b      	ldr	r2, [pc, #172]	; (8000f94 <SystemClock_Config+0xd8>)
 8000ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eea:	6413      	str	r3, [r2, #64]	; 0x40
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <SystemClock_Config+0xd8>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <SystemClock_Config+0xdc>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a26      	ldr	r2, [pc, #152]	; (8000f98 <SystemClock_Config+0xdc>)
 8000efe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <SystemClock_Config+0xdc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f10:	2301      	movs	r3, #1
 8000f12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f24:	2319      	movs	r3, #25
 8000f26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000f28:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000f2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f32:	2309      	movs	r3, #9
 8000f34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 fac4 	bl	80044c8 <HAL_RCC_OscConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f46:	f000 f83b 	bl	8000fc0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f4a:	f003 fa6d 	bl	8004428 <HAL_PWREx_EnableOverDrive>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f54:	f000 f834 	bl	8000fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f58:	230f      	movs	r3, #15
 8000f5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2107      	movs	r1, #7
 8000f76:	4618      	mov	r0, r3
 8000f78:	f003 fd4c 	bl	8004a14 <HAL_RCC_ClockConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f82:	f000 f81d 	bl	8000fc0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000f86:	f003 fe31 	bl	8004bec <HAL_RCC_EnableCSS>
}
 8000f8a:	bf00      	nop
 8000f8c:	3750      	adds	r7, #80	; 0x50
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d101      	bne.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fae:	f000 ff45 	bl	8001e3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40002000 	.word	0x40002000

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <Error_Handler+0x8>
	...

08000fcc <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_22
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000fd6:	695a      	ldr	r2, [r3, #20]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2301      	moveq	r3, #1
 8000fe4:	2300      	movne	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	40013c00 	.word	0x40013c00

08000ff8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_22
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6153      	str	r3, [r2, #20]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40013c00 	.word	0x40013c00

08001018 <ProcessMouse>:
HID_MOUSE_Info_TypeDef* mouse_data;

uint8_t mouse_read_index = 0;


void ProcessMouse() {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0


			//SetupJoystick();
			HID_MOUSE_Info_TypeDef *mouse_data = (HID_MOUSE_Info_TypeDef *)USBH_Get_Device_Data(HUB_MOUSE);
 800101e:	2002      	movs	r0, #2
 8001020:	f000 fc86 	bl	8001930 <USBH_Get_Device_Data>
 8001024:	6078      	str	r0, [r7, #4]

			if (mouse_data == NULL) return;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <ProcessMouse+0x20>
			uint8_t a = 1;
 800102c:	2301      	movs	r3, #1
 800102e:	70fb      	strb	r3, [r7, #3]
			a++;
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	3301      	adds	r3, #1
 8001034:	70fb      	strb	r3, [r7, #3]
 8001036:	e000      	b.n	800103a <ProcessMouse+0x22>
			if (mouse_data == NULL) return;
 8001038:	bf00      	nop





}
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <MouseIRQ>:

void MouseIRQ(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
	switch(mouse_read_index) {
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MouseIRQ+0x78>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d82c      	bhi.n	80010a6 <MouseIRQ+0x66>
 800104c:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <MouseIRQ+0x14>)
 800104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001052:	bf00      	nop
 8001054:	08001065 	.word	0x08001065
 8001058:	08001073 	.word	0x08001073
 800105c:	08001089 	.word	0x08001089
 8001060:	08001097 	.word	0x08001097
	  case 0:
	    // code block
		mouse_read_index++;
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MouseIRQ+0x78>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MouseIRQ+0x78>)
 800106e:	701a      	strb	r2, [r3, #0]
	    break;
 8001070:	e01d      	b.n	80010ae <MouseIRQ+0x6e>
	  case 1:


		mouse_data->x = 0;
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <MouseIRQ+0x7c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2200      	movs	r2, #0
 8001078:	801a      	strh	r2, [r3, #0]
		mouse_read_index++;
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MouseIRQ+0x78>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <MouseIRQ+0x78>)
 8001084:	701a      	strb	r2, [r3, #0]
	    break;
 8001086:	e012      	b.n	80010ae <MouseIRQ+0x6e>
	  case 2:

		mouse_read_index++;
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MouseIRQ+0x78>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MouseIRQ+0x78>)
 8001092:	701a      	strb	r2, [r3, #0]
	    break;
 8001094:	e00b      	b.n	80010ae <MouseIRQ+0x6e>
	  case 3:

		  mouse_data->y = 0;
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MouseIRQ+0x7c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	805a      	strh	r2, [r3, #2]
		mouse_read_index = 0;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MouseIRQ+0x78>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
		break;
 80010a4:	e003      	b.n	80010ae <MouseIRQ+0x6e>
	  default:
		mouse_read_index = 0;
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <MouseIRQ+0x78>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]

	}

}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	200000d0 	.word	0x200000d0
 80010bc:	200000cc 	.word	0x200000cc

080010c0 <EXTI9_5_IRQHandler>:




void EXTI9_5_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 80010c4:	2040      	movs	r0, #64	; 0x40
 80010c6:	f7ff ff81 	bl	8000fcc <LL_EXTI_IsActiveFlag_0_31>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d004      	beq.n	80010da <EXTI9_5_IRQHandler+0x1a>
  {
	MouseIRQ();
 80010d0:	f7ff ffb6 	bl	8001040 <MouseIRQ>
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 80010d4:	2040      	movs	r0, #64	; 0x40
 80010d6:	f7ff ff8f 	bl	8000ff8 <LL_EXTI_ClearFlag_0_31>

  }

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}

080010de <LL_GPIO_ReadInputPort>:
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691b      	ldr	r3, [r3, #16]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_GPIO_WriteOutputPort>:
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, PortValue);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	615a      	str	r2, [r3, #20]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <LL_GPIO_ReadOutputPort>:
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <LL_EXTI_IsActiveFlag_0_31>:
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001136:	695a      	ldr	r2, [r3, #20]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4013      	ands	r3, r2
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	bf0c      	ite	eq
 8001142:	2301      	moveq	r3, #1
 8001144:	2300      	movne	r3, #0
 8001146:	b2db      	uxtb	r3, r3
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40013c00 	.word	0x40013c00

08001158 <LL_EXTI_ClearFlag_0_31>:
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6153      	str	r3, [r2, #20]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40013c00 	.word	0x40013c00

08001178 <USB_Keyboard_LED>:

static uint8_t PreviousCapsLockStatus = 1;
static keyboard_led_t LEDStatus = 0;


void USB_Keyboard_LED(keyboard_led_t ld) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af02      	add	r7, sp, #8
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	keyboard_led_t led = ld;
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	72bb      	strb	r3, [r7, #10]
	USBH_StatusTypeDef status;
	int retrygood = 1;
 8001186:	2301      	movs	r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
		for (;;) {
			status = USBH_HID_SetReport(&hUsbHostFS, 0x02, 0x00, &led, 1);
 800118a:	f107 030a 	add.w	r3, r7, #10
 800118e:	2201      	movs	r2, #1
 8001190:	9200      	str	r2, [sp, #0]
 8001192:	2200      	movs	r2, #0
 8001194:	2102      	movs	r1, #2
 8001196:	480a      	ldr	r0, [pc, #40]	; (80011c0 <USB_Keyboard_LED+0x48>)
 8001198:	f007 fc15 	bl	80089c6 <USBH_HID_SetReport>
 800119c:	4603      	mov	r3, r0
 800119e:	72fb      	strb	r3, [r7, #11]
			if (status == USBH_OK)
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <USB_Keyboard_LED+0x34>
				retrygood--;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
			if (retrygood <= 0)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	dd00      	ble.n	80011b4 <USB_Keyboard_LED+0x3c>
			status = USBH_HID_SetReport(&hUsbHostFS, 0x02, 0x00, &led, 1);
 80011b2:	e7ea      	b.n	800118a <USB_Keyboard_LED+0x12>
				break;
 80011b4:	bf00      	nop
		}
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200007f8 	.word	0x200007f8

080011c4 <InitMSXKeyboard>:



void InitMSXKeyboard()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

	//Reset matrix state etc
	memset(&MSX_Matrix_data, 0, sizeof(MSX_Matrix_data));
 80011c8:	2230      	movs	r2, #48	; 0x30
 80011ca:	2100      	movs	r1, #0
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <InitMSXKeyboard+0x1c>)
 80011ce:	f00b fad7 	bl	800c780 <memset>
	memset(&MSX_Matrix_temp, 0, sizeof(MSX_Matrix_data));
 80011d2:	2230      	movs	r2, #48	; 0x30
 80011d4:	2100      	movs	r1, #0
 80011d6:	4803      	ldr	r0, [pc, #12]	; (80011e4 <InitMSXKeyboard+0x20>)
 80011d8:	f00b fad2 	bl	800c780 <memset>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200000d4 	.word	0x200000d4
 80011e4:	20000104 	.word	0x20000104

080011e8 <ProcessMSXKey>:

void ProcessMSXKey(uint8_t usbkey)
{
 80011e8:	b490      	push	{r4, r7}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx=0; idx < MSX_KEYS_SIZE; idx++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	e02f      	b.n	8001258 <ProcessMSXKey+0x70>
	{
		if (msxkeymap[idx][0]==usbkey)
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	491c      	ldr	r1, [pc, #112]	; (800126c <ProcessMSXKey+0x84>)
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	440b      	add	r3, r1
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	79fa      	ldrb	r2, [r7, #7]
 8001208:	429a      	cmp	r2, r3
 800120a:	d122      	bne.n	8001252 <ProcessMSXKey+0x6a>
		{
			MSX_Matrix_temp[msxkeymap[idx][1]] |= msxkeymap[idx][2];
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	4917      	ldr	r1, [pc, #92]	; (800126c <ProcessMSXKey+0x84>)
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	440b      	add	r3, r1
 8001218:	3301      	adds	r3, #1
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <ProcessMSXKey+0x88>)
 8001220:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	4811      	ldr	r0, [pc, #68]	; (800126c <ProcessMSXKey+0x84>)
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	4403      	add	r3, r0
 8001230:	3302      	adds	r3, #2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461c      	mov	r4, r3
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <ProcessMSXKey+0x84>)
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	4403      	add	r3, r0
 8001242:	3301      	adds	r3, #1
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	ea41 0304 	orr.w	r3, r1, r4
 800124c:	4a08      	ldr	r2, [pc, #32]	; (8001270 <ProcessMSXKey+0x88>)
 800124e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	for (uint8_t idx=0; idx < MSX_KEYS_SIZE; idx++)
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	3301      	adds	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	2b5d      	cmp	r3, #93	; 0x5d
 800125c:	d9cc      	bls.n	80011f8 <ProcessMSXKey+0x10>
		}
	}

}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bc90      	pop	{r4, r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	0800c9a8 	.word	0x0800c9a8
 8001270:	20000104 	.word	0x20000104

08001274 <ProcessMSXKeyboard>:

void ProcessMSXKeyboard(){
 8001274:	b5b0      	push	{r4, r5, r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0

	HID_KEYBD_Info_TypeDef *kb_data = (HID_KEYBD_Info_TypeDef *)USBH_Get_Device_Data_Host(&hUsbHostFS, HUB_KEYBOARD);
 800127a:	2101      	movs	r1, #1
 800127c:	484f      	ldr	r0, [pc, #316]	; (80013bc <ProcessMSXKeyboard+0x148>)
 800127e:	f000 fb81 	bl	8001984 <USBH_Get_Device_Data_Host>
 8001282:	6078      	str	r0, [r7, #4]


	//keyboard hasn't return any data, so there was no change in state.
	if (kb_data==NULL) return;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 8093 	beq.w	80013b2 <ProcessMSXKeyboard+0x13e>

	//reset temp array to zero
	memset(&MSX_Matrix_temp, 0, sizeof(MSX_Matrix_temp));
 800128c:	2230      	movs	r2, #48	; 0x30
 800128e:	2100      	movs	r1, #0
 8001290:	484b      	ldr	r0, [pc, #300]	; (80013c0 <ProcessMSXKeyboard+0x14c>)
 8001292:	f00b fa75 	bl	800c780 <memset>

	//process special keys
	if (kb_data->lctrl)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	785b      	ldrb	r3, [r3, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <ProcessMSXKeyboard+0x36>
	{
		//{KEY_LEFTCONTROL,								KB_ROW_6,		B_BIT_1},
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_1;
 800129e:	4b48      	ldr	r3, [pc, #288]	; (80013c0 <ProcessMSXKeyboard+0x14c>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	4a46      	ldr	r2, [pc, #280]	; (80013c0 <ProcessMSXKeyboard+0x14c>)
 80012a8:	6193      	str	r3, [r2, #24]
	}

	if (kb_data->rctrl)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	795b      	ldrb	r3, [r3, #5]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <ProcessMSXKeyboard+0x4a>
	{
		//{KEY_LEFTCONTROL,								KB_ROW_6,		B_BIT_1},
		MSX_Matrix_temp[KB_ROW_2] |=KB_BIT_5;
 80012b2:	4b43      	ldr	r3, [pc, #268]	; (80013c0 <ProcessMSXKeyboard+0x14c>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f043 0320 	orr.w	r3, r3, #32
 80012ba:	4a41      	ldr	r2, [pc, #260]	; (80013c0 <ProcessMSXKeyboard+0x14c>)
 80012bc:	6093      	str	r3, [r2, #8]
	}

	if (kb_data->lshift|| kb_data->rshift)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	789b      	ldrb	r3, [r3, #2]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d103      	bne.n	80012ce <ProcessMSXKeyboard+0x5a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	799b      	ldrb	r3, [r3, #6]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <ProcessMSXKeyboard+0x66>
	{
		//{KEY_LEFTSHIFT,							KB_ROW_6,		KB_BIT_0},
		//{KEY_RIGHTSHIFT,					KB_ROW_6,		KB_BIT_0},
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_0;
 80012ce:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <ProcessMSXKeyboard+0x14c>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	4a3a      	ldr	r2, [pc, #232]	; (80013c0 <ProcessMSXKeyboard+0x14c>)
 80012d8:	6193      	str	r3, [r2, #24]
	}

	//{KEY_LEFTALT,						KB_ROW_6,		KB_BIT_4},
	//
	if (kb_data->ralt)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	79db      	ldrb	r3, [r3, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <ProcessMSXKeyboard+0x7a>
	{
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_4;
 80012e2:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <ProcessMSXKeyboard+0x14c>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	4a35      	ldr	r2, [pc, #212]	; (80013c0 <ProcessMSXKeyboard+0x14c>)
 80012ec:	6193      	str	r3, [r2, #24]
	}

	if (kb_data->lalt)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	78db      	ldrb	r3, [r3, #3]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <ProcessMSXKeyboard+0x8e>
	{
		MSX_Matrix_temp[KB_ROW_6] |=KB_BIT_2;
 80012f6:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <ProcessMSXKeyboard+0x14c>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f043 0304 	orr.w	r3, r3, #4
 80012fe:	4a30      	ldr	r2, [pc, #192]	; (80013c0 <ProcessMSXKeyboard+0x14c>)
 8001300:	6193      	str	r3, [r2, #24]
	}

	//Interate over all keys - max 6 pressed keys at once
	for (int i = 0; i < 6; i++)
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	e011      	b.n	800132c <ProcessMSXKeyboard+0xb8>
	{
		if(kb_data->keys[i]!=0x00) ProcessMSXKey(kb_data->keys[i]);
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	3309      	adds	r3, #9
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <ProcessMSXKeyboard+0xb2>
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	3309      	adds	r3, #9
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff61 	bl	80011e8 <ProcessMSXKey>
	for (int i = 0; i < 6; i++)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b05      	cmp	r3, #5
 8001330:	ddea      	ble.n	8001308 <ProcessMSXKeyboard+0x94>
	}

	memcpy(MSX_Matrix_data,MSX_Matrix_temp,sizeof(MSX_Matrix_data));
 8001332:	4a24      	ldr	r2, [pc, #144]	; (80013c4 <ProcessMSXKeyboard+0x150>)
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <ProcessMSXKeyboard+0x14c>)
 8001336:	4614      	mov	r4, r2
 8001338:	461d      	mov	r5, r3
 800133a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001342:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001346:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	//handle capslock

	for (int i = 0; i < 6; i++)
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	e02c      	b.n	80013aa <ProcessMSXKeyboard+0x136>
	{
		//CAPSLOCK	pressed
		if(kb_data->keys[i]==0x39)
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	4413      	add	r3, r2
 8001356:	3309      	adds	r3, #9
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b39      	cmp	r3, #57	; 0x39
 800135c:	d122      	bne.n	80013a4 <ProcessMSXKeyboard+0x130>
		{
			//check previous capslock status
			if (PreviousCapsLockStatus == 0)
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <ProcessMSXKeyboard+0x154>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10f      	bne.n	8001386 <ProcessMSXKeyboard+0x112>
			{
				LEDStatus |= CAPS_LOCK_LED;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <ProcessMSXKeyboard+0x158>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	f043 0302 	orr.w	r3, r3, #2
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <ProcessMSXKeyboard+0x158>)
 8001372:	701a      	strb	r2, [r3, #0]

				USB_Keyboard_LED(LEDStatus);
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <ProcessMSXKeyboard+0x158>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fefd 	bl	8001178 <USB_Keyboard_LED>
				PreviousCapsLockStatus = 1;
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <ProcessMSXKeyboard+0x154>)
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	e00e      	b.n	80013a4 <ProcessMSXKeyboard+0x130>
			}

		//capslock not pressed
			else
			{
					LEDStatus &= ~CAPS_LOCK_LED;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <ProcessMSXKeyboard+0x158>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	f023 0302 	bic.w	r3, r3, #2
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <ProcessMSXKeyboard+0x158>)
 8001392:	701a      	strb	r2, [r3, #0]
					USB_Keyboard_LED(LEDStatus);
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <ProcessMSXKeyboard+0x158>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff feed 	bl	8001178 <USB_Keyboard_LED>
					PreviousCapsLockStatus = 0;
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <ProcessMSXKeyboard+0x154>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; i++)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3301      	adds	r3, #1
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	ddcf      	ble.n	8001350 <ProcessMSXKeyboard+0xdc>
 80013b0:	e000      	b.n	80013b4 <ProcessMSXKeyboard+0x140>
	if (kb_data==NULL) return;
 80013b2:	bf00      	nop
			}
		}
	}


}
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bdb0      	pop	{r4, r5, r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200007f8 	.word	0x200007f8
 80013c0:	20000104 	.word	0x20000104
 80013c4:	200000d4 	.word	0x200000d4
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000134 	.word	0x20000134

080013d0 <ProcessIRQ>:

void ProcessIRQ()
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	uint8_t row = LL_GPIO_ReadInputPort(GPIOA)&0xF;
 80013d6:	4813      	ldr	r0, [pc, #76]	; (8001424 <ProcessIRQ+0x54>)
 80013d8:	f7ff fe81 	bl	80010de <LL_GPIO_ReadInputPort>
 80013dc:	4603      	mov	r3, r0
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	71fb      	strb	r3, [r7, #7]
	uint16_t value = ~MSX_Matrix_data[row] & 0x00FF;
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <ProcessIRQ+0x58>)
 80013ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	80bb      	strh	r3, [r7, #4]
	uint16_t PortValue = LL_GPIO_ReadOutputPort(GPIOB)& 0xFF00;
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <ProcessIRQ+0x5c>)
 80013fa:	f7ff fe8a 	bl	8001112 <LL_GPIO_ReadOutputPort>
 80013fe:	4603      	mov	r3, r0
 8001400:	b29b      	uxth	r3, r3
 8001402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001406:	807b      	strh	r3, [r7, #2]
	value = value | PortValue;
 8001408:	88ba      	ldrh	r2, [r7, #4]
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	4313      	orrs	r3, r2
 800140e:	80bb      	strh	r3, [r7, #4]
	LL_GPIO_WriteOutputPort(GPIOB, value);
 8001410:	88bb      	ldrh	r3, [r7, #4]
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <ProcessIRQ+0x5c>)
 8001416:	f7ff fe6e 	bl	80010f6 <LL_GPIO_WriteOutputPort>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40020000 	.word	0x40020000
 8001428:	200000d4 	.word	0x200000d4
 800142c:	40020400 	.word	0x40020400

08001430 <EXTI0_IRQHandler>:

//System IRQ handler. It reset flag and executes ProcessIRQ
void EXTI0_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff fe79 	bl	800112c <LL_EXTI_IsActiveFlag_0_31>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <EXTI0_IRQHandler+0x1a>
  {
    ProcessIRQ();
 8001440:	f7ff ffc6 	bl	80013d0 <ProcessIRQ>
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fe87 	bl	8001158 <LL_EXTI_ClearFlag_0_31>
  }

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b30      	ldr	r3, [pc, #192]	; (8001518 <HAL_MspInit+0xc8>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a2f      	ldr	r2, [pc, #188]	; (8001518 <HAL_MspInit+0xc8>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <HAL_MspInit+0xc8>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <HAL_MspInit+0xc8>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a29      	ldr	r2, [pc, #164]	; (8001518 <HAL_MspInit+0xc8>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_MspInit+0xc8>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2101      	movs	r1, #1
 800148a:	f06f 000b 	mvn.w	r0, #11
 800148e:	f000 fdd1 	bl	8002034 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2101      	movs	r1, #1
 8001496:	f06f 000a 	mvn.w	r0, #10
 800149a:	f000 fdcb 	bl	8002034 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2101      	movs	r1, #1
 80014a2:	f06f 0009 	mvn.w	r0, #9
 80014a6:	f000 fdc5 	bl	8002034 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2101      	movs	r1, #1
 80014ae:	f06f 0004 	mvn.w	r0, #4
 80014b2:	f000 fdbf 	bl	8002034 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2101      	movs	r1, #1
 80014ba:	f06f 0003 	mvn.w	r0, #3
 80014be:	f000 fdb9 	bl	8002034 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2101      	movs	r1, #1
 80014c6:	f06f 0001 	mvn.w	r0, #1
 80014ca:	f000 fdb3 	bl	8002034 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	2001      	movs	r0, #1
 80014d4:	f000 fdae 	bl	8002034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80014d8:	2001      	movs	r0, #1
 80014da:	f000 fdc7 	bl	800206c <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2004      	movs	r0, #4
 80014e4:	f000 fda6 	bl	8002034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80014e8:	2004      	movs	r0, #4
 80014ea:	f000 fdbf 	bl	800206c <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	2005      	movs	r0, #5
 80014f4:	f000 fd9e 	bl	8002034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80014f8:	2005      	movs	r0, #5
 80014fa:	f000 fdb7 	bl	800206c <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2051      	movs	r0, #81	; 0x51
 8001504:	f000 fd96 	bl	8002034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001508:	2051      	movs	r0, #81	; 0x51
 800150a:	f000 fdaf 	bl	800206c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08e      	sub	sp, #56	; 0x38
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800152c:	4b33      	ldr	r3, [pc, #204]	; (80015fc <HAL_InitTick+0xe0>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	4a32      	ldr	r2, [pc, #200]	; (80015fc <HAL_InitTick+0xe0>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001536:	6413      	str	r3, [r2, #64]	; 0x40
 8001538:	4b30      	ldr	r3, [pc, #192]	; (80015fc <HAL_InitTick+0xe0>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001544:	f107 0210 	add.w	r2, r7, #16
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f003 fc56 	bl	8004e00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155a:	2b00      	cmp	r3, #0
 800155c:	d103      	bne.n	8001566 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800155e:	f003 fc27 	bl	8004db0 <HAL_RCC_GetPCLK1Freq>
 8001562:	6378      	str	r0, [r7, #52]	; 0x34
 8001564:	e004      	b.n	8001570 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001566:	f003 fc23 	bl	8004db0 <HAL_RCC_GetPCLK1Freq>
 800156a:	4603      	mov	r3, r0
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001572:	4a23      	ldr	r2, [pc, #140]	; (8001600 <HAL_InitTick+0xe4>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	0c9b      	lsrs	r3, r3, #18
 800157a:	3b01      	subs	r3, #1
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <HAL_InitTick+0xe8>)
 8001580:	4a21      	ldr	r2, [pc, #132]	; (8001608 <HAL_InitTick+0xec>)
 8001582:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HAL_InitTick+0xe8>)
 8001586:	f240 32e7 	movw	r2, #999	; 0x3e7
 800158a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_InitTick+0xe8>)
 800158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001590:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <HAL_InitTick+0xe8>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <HAL_InitTick+0xe8>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_InitTick+0xe8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80015a4:	4817      	ldr	r0, [pc, #92]	; (8001604 <HAL_InitTick+0xe8>)
 80015a6:	f003 ffc3 	bl	8005530 <HAL_TIM_Base_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d11b      	bne.n	80015f0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80015b8:	4812      	ldr	r0, [pc, #72]	; (8001604 <HAL_InitTick+0xe8>)
 80015ba:	f004 f81b 	bl	80055f4 <HAL_TIM_Base_Start_IT>
 80015be:	4603      	mov	r3, r0
 80015c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d111      	bne.n	80015f0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80015cc:	202d      	movs	r0, #45	; 0x2d
 80015ce:	f000 fd4d 	bl	800206c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d808      	bhi.n	80015ea <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	202d      	movs	r0, #45	; 0x2d
 80015de:	f000 fd29 	bl	8002034 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_InitTick+0xf0>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e002      	b.n	80015f0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3738      	adds	r7, #56	; 0x38
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40023800 	.word	0x40023800
 8001600:	431bde83 	.word	0x431bde83
 8001604:	20000138 	.word	0x20000138
 8001608:	40002000 	.word	0x40002000
 800160c:	20000008 	.word	0x20000008

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001614:	f003 fc26 	bl	8004e64 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <NMI_Handler+0x8>

0800161a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800166e:	f002 fec1 	bl	80043f4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}

08001676 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800167a:	f000 fe77 	bl	800236c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}

08001682 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001696:	f004 f825 	bl	80056e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000138 	.word	0x20000138

080016a4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <UART5_IRQHandler+0x10>)
 80016aa:	f004 fa6f 	bl	8005b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000188 	.word	0x20000188

080016b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <TIM6_DAC_IRQHandler+0x10>)
 80016be:	f000 fd05 	bl	80020cc <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200000b8 	.word	0x200000b8

080016cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <OTG_FS_IRQHandler+0x10>)
 80016d2:	f001 fbbf 	bl	8002e54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000bd4 	.word	0x20000bd4

080016e0 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 80016e6:	f001 fbb5 	bl	8002e54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000ed8 	.word	0x20000ed8

080016f4 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 80016fa:	f001 fbab 	bl	8002e54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000ed8 	.word	0x20000ed8

08001708 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <OTG_HS_IRQHandler+0x10>)
 800170e:	f001 fba1 	bl	8002e54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000ed8 	.word	0x20000ed8

0800171c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <_sbrk+0x5c>)
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <_sbrk+0x60>)
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <_sbrk+0x64>)
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <_sbrk+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	d207      	bcs.n	800176c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800175c:	f00a ffd6 	bl	800c70c <__errno>
 8001760:	4603      	mov	r3, r0
 8001762:	220c      	movs	r2, #12
 8001764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800176a:	e009      	b.n	8001780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	4a05      	ldr	r2, [pc, #20]	; (8001790 <_sbrk+0x64>)
 800177c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20040000 	.word	0x20040000
 800178c:	00002000 	.word	0x00002000
 8001790:	20000184 	.word	0x20000184
 8001794:	200011f0 	.word	0x200011f0

08001798 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <SystemInit+0x20>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <SystemInit+0x20>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_UART5_Init+0x58>)
 80017c2:	4a15      	ldr	r2, [pc, #84]	; (8001818 <MX_UART5_Init+0x5c>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <MX_UART5_Init+0x58>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_UART5_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_UART5_Init+0x58>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_UART5_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_UART5_Init+0x58>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <MX_UART5_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_UART5_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <MX_UART5_Init+0x58>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_UART5_Init+0x58>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_UART5_Init+0x58>)
 8001800:	f004 f976 	bl	8005af0 <HAL_UART_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800180a:	f7ff fbd9 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000188 	.word	0x20000188
 8001818:	40005000 	.word	0x40005000

0800181c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b0aa      	sub	sp, #168	; 0xa8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2280      	movs	r2, #128	; 0x80
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f00a ff9f 	bl	800c780 <memset>
  if(uartHandle->Instance==UART5)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a36      	ldr	r2, [pc, #216]	; (8001920 <HAL_UART_MspInit+0x104>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d165      	bne.n	8001918 <HAL_UART_MspInit+0xfc>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800184c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001850:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001852:	2300      	movs	r3, #0
 8001854:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4618      	mov	r0, r3
 800185c:	f003 fb1e 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001866:	f7ff fbab 	bl	8000fc0 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800186a:	4b2e      	ldr	r3, [pc, #184]	; (8001924 <HAL_UART_MspInit+0x108>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a2d      	ldr	r2, [pc, #180]	; (8001924 <HAL_UART_MspInit+0x108>)
 8001870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_UART_MspInit+0x108>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	4b28      	ldr	r3, [pc, #160]	; (8001924 <HAL_UART_MspInit+0x108>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a27      	ldr	r2, [pc, #156]	; (8001924 <HAL_UART_MspInit+0x108>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b25      	ldr	r3, [pc, #148]	; (8001924 <HAL_UART_MspInit+0x108>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800189a:	4b22      	ldr	r3, [pc, #136]	; (8001924 <HAL_UART_MspInit+0x108>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a21      	ldr	r2, [pc, #132]	; (8001924 <HAL_UART_MspInit+0x108>)
 80018a0:	f043 0308 	orr.w	r3, r3, #8
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <HAL_UART_MspInit+0x108>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80018cc:	2308      	movs	r3, #8
 80018ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018d6:	4619      	mov	r1, r3
 80018d8:	4813      	ldr	r0, [pc, #76]	; (8001928 <HAL_UART_MspInit+0x10c>)
 80018da:	f000 feb5 	bl	8002648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018de:	2304      	movs	r3, #4
 80018e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80018f6:	2308      	movs	r3, #8
 80018f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001900:	4619      	mov	r1, r3
 8001902:	480a      	ldr	r0, [pc, #40]	; (800192c <HAL_UART_MspInit+0x110>)
 8001904:	f000 fea0 	bl	8002648 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	2035      	movs	r0, #53	; 0x35
 800190e:	f000 fb91 	bl	8002034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001912:	2035      	movs	r0, #53	; 0x35
 8001914:	f000 fbaa 	bl	800206c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001918:	bf00      	nop
 800191a:	37a8      	adds	r7, #168	; 0xa8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40005000 	.word	0x40005000
 8001924:	40023800 	.word	0x40023800
 8001928:	40020800 	.word	0x40020800
 800192c:	40020c00 	.word	0x40020c00

08001930 <USBH_Get_Device_Data>:
#include "utils.h"
#include "usbh_hub.h"

uint8_t *USBH_Get_Device_Data(HUB_DEVICETypeDef deviceType)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
	USBH_HandleTypeDef *phost = &hUsbHostFS;
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <USBH_Get_Device_Data+0x4c>)
 800193c:	613b      	str	r3, [r7, #16]
	USBH_HandleTypeDef *phostHS = &hUsbHostHS;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <USBH_Get_Device_Data+0x50>)
 8001940:	60fb      	str	r3, [r7, #12]
	uint8_t *pnt = NULL;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]

	if(phost->gState == HOST_CLASS)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b0b      	cmp	r3, #11
 800194e:	d105      	bne.n	800195c <USBH_Get_Device_Data+0x2c>
	{
		pnt = USBH_Get_Device_Data_Host(phost,deviceType);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	4619      	mov	r1, r3
 8001954:	6938      	ldr	r0, [r7, #16]
 8001956:	f000 f815 	bl	8001984 <USBH_Get_Device_Data_Host>
 800195a:	6178      	str	r0, [r7, #20]
	}

	if(phostHS->gState == HOST_CLASS)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b0b      	cmp	r3, #11
 8001964:	d105      	bne.n	8001972 <USBH_Get_Device_Data+0x42>
	{
		pnt = USBH_Get_Device_Data_Host(phostHS,deviceType);
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	4619      	mov	r1, r3
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 f80a 	bl	8001984 <USBH_Get_Device_Data_Host>
 8001970:	6178      	str	r0, [r7, #20]
	}

	return pnt;
 8001972:	697b      	ldr	r3, [r7, #20]


}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200007f8 	.word	0x200007f8
 8001980:	20000420 	.word	0x20000420

08001984 <USBH_Get_Device_Data_Host>:

uint8_t *USBH_Get_Device_Data_Host(USBH_HandleTypeDef *phost,HUB_DEVICETypeDef deviceType)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	70fb      	strb	r3, [r7, #3]

  //handle device when connected to Hub
  if (phost->device.DevDesc.bDeviceClass == 9 && Appli_state == APPLICATION_READY)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
 8001996:	2b09      	cmp	r3, #9
 8001998:	d172      	bne.n	8001a80 <USBH_Get_Device_Data_Host+0xfc>
 800199a:	4b5e      	ldr	r3, [pc, #376]	; (8001b14 <USBH_Get_Device_Data_Host+0x190>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d16e      	bne.n	8001a80 <USBH_Get_Device_Data_Host+0xfc>
  {
    HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	613b      	str	r3, [r7, #16]

    for (int port = 0; port <4; port++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	e062      	b.n	8001a78 <USBH_Get_Device_Data_Host+0xf4>
    {
      for (int interface = 0; interface <2; interface ++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	e059      	b.n	8001a6c <USBH_Get_Device_Data_Host+0xe8>
      {
        if (HUB_Handle->Port[port].Interface[interface].DeviceType == deviceType)
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	69b9      	ldr	r1, [r7, #24]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	206c      	movs	r0, #108	; 0x6c
 80019c0:	fb00 f101 	mul.w	r1, r0, r1
 80019c4:	f44f 7071 	mov.w	r0, #964	; 0x3c4
 80019c8:	fb00 f303 	mul.w	r3, r0, r3
 80019cc:	440b      	add	r3, r1
 80019ce:	4413      	add	r3, r2
 80019d0:	f203 230d 	addw	r3, r3, #525	; 0x20d
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d144      	bne.n	8001a66 <USBH_Get_Device_Data_Host+0xe2>
        {
            if (deviceType == HUB_KEYBOARD) return (uint8_t *)USBH_HUB_GetKeybdInfo(&HUB_Handle->Port[port].Interface[interface]);
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d113      	bne.n	8001a0a <USBH_Get_Device_Data_Host+0x86>
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	226c      	movs	r2, #108	; 0x6c
 80019e6:	fb03 f202 	mul.w	r2, r3, r2
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4413      	add	r3, r2
 80019fe:	3304      	adds	r3, #4
 8001a00:	4618      	mov	r0, r3
 8001a02:	f008 fd73 	bl	800a4ec <USBH_HUB_GetKeybdInfo>
 8001a06:	4603      	mov	r3, r0
 8001a08:	e080      	b.n	8001b0c <USBH_Get_Device_Data_Host+0x188>
            if (deviceType == HUB_MOUSE)    return (uint8_t *)USBH_HUB_GetMouseInfo(&HUB_Handle->Port[port].Interface[interface]);
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d113      	bne.n	8001a38 <USBH_Get_Device_Data_Host+0xb4>
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	226c      	movs	r2, #108	; 0x6c
 8001a14:	fb03 f202 	mul.w	r2, r3, r2
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f008 fe0a 	bl	800a648 <USBH_HUB_GetMouseInfo>
 8001a34:	4603      	mov	r3, r0
 8001a36:	e069      	b.n	8001b0c <USBH_Get_Device_Data_Host+0x188>
            if (deviceType == HUB_GAMEPAD)  return (uint8_t *)USBH_HUB_GetGamepadInfo(&HUB_Handle->Port[port].Interface[interface]);
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d113      	bne.n	8001a66 <USBH_Get_Device_Data_Host+0xe2>
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	226c      	movs	r2, #108	; 0x6c
 8001a42:	fb03 f202 	mul.w	r2, r3, r2
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8001a4c:	fb01 f303 	mul.w	r3, r1, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4413      	add	r3, r2
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f008 fac7 	bl	8009ff0 <USBH_HUB_GetGamepadInfo>
 8001a62:	4603      	mov	r3, r0
 8001a64:	e052      	b.n	8001b0c <USBH_Get_Device_Data_Host+0x188>
      for (int interface = 0; interface <2; interface ++)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	dda2      	ble.n	80019b8 <USBH_Get_Device_Data_Host+0x34>
    for (int port = 0; port <4; port++)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3301      	adds	r3, #1
 8001a76:	61fb      	str	r3, [r7, #28]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	dd99      	ble.n	80019b2 <USBH_Get_Device_Data_Host+0x2e>
  {
 8001a7e:	e044      	b.n	8001b0a <USBH_Get_Device_Data_Host+0x186>


    }
    
  }
  else if (Appli_state == APPLICATION_READY)
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <USBH_Get_Device_Data_Host+0x190>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d140      	bne.n	8001b0a <USBH_Get_Device_Data_Host+0x186>
  {
      for (int interface = 0; interface <2; interface ++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e03a      	b.n	8001b04 <USBH_Get_Device_Data_Host+0x180>
      {
        HID_HandleTypeDef *HID_Handle  = (HID_HandleTypeDef *) phost->pActiveClass->pData[interface]; 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	3208      	adds	r2, #8
 8001a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9c:	60fb      	str	r3, [r7, #12]
        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d107      	bne.n	8001abe <USBH_Get_Device_Data_Host+0x13a>
        {
          if (deviceType == HUB_KEYBOARD)
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d104      	bne.n	8001abe <USBH_Get_Device_Data_Host+0x13a>
          {
            return (uint8_t *)USBH_HID_GetKeybdInfo(phost);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f007 fbe9 	bl	800928c <USBH_HID_GetKeybdInfo>
 8001aba:	4603      	mov	r3, r0
 8001abc:	e026      	b.n	8001b0c <USBH_Get_Device_Data_Host+0x188>
          }

        }

        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d107      	bne.n	8001ade <USBH_Get_Device_Data_Host+0x15a>
        {
          if (deviceType == HUB_MOUSE)
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d104      	bne.n	8001ade <USBH_Get_Device_Data_Host+0x15a>
          {
            return (uint8_t *)USBH_HID_GetMouseInfo(phost);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f007 fd85 	bl	80095e4 <USBH_HID_GetMouseInfo>
 8001ada:	4603      	mov	r3, r0
 8001adc:	e016      	b.n	8001b0c <USBH_Get_Device_Data_Host+0x188>
          }

        }

        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_JOYSTICK)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d107      	bne.n	8001afe <USBH_Get_Device_Data_Host+0x17a>
        {

          if (deviceType == HUB_GAMEPAD)
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d104      	bne.n	8001afe <USBH_Get_Device_Data_Host+0x17a>
          {
            return (uint8_t *)USBH_HID_GetGamepadInfo(phost);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f007 f8ef 	bl	8008cd8 <USBH_HID_GetGamepadInfo>
 8001afa:	4603      	mov	r3, r0
 8001afc:	e006      	b.n	8001b0c <USBH_Get_Device_Data_Host+0x188>
      for (int interface = 0; interface <2; interface ++)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	3301      	adds	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	ddc1      	ble.n	8001a8e <USBH_Get_Device_Data_Host+0x10a>

      }

  }

return NULL;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000bd0 	.word	0x20000bd0

08001b18 <SetupJoystick>:



void SetupJoystick()
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0

	uint8_t JoystickFound = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73fb      	strb	r3, [r7, #15]
	USBH_HandleTypeDef *phost = &hUsbHostFS;
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <SetupJoystick+0x54>)
 8001b24:	60bb      	str	r3, [r7, #8]
	USBH_HandleTypeDef *phostHS = &hUsbHostHS;
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <SetupJoystick+0x58>)
 8001b28:	607b      	str	r3, [r7, #4]

	if(phost->gState == HOST_CLASS)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b0b      	cmp	r3, #11
 8001b32:	d104      	bne.n	8001b3e <SetupJoystick+0x26>
	{
		JoystickFound = SetupJoystick_Host(phost);
 8001b34:	68b8      	ldr	r0, [r7, #8]
 8001b36:	f000 f81d 	bl	8001b74 <SetupJoystick_Host>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	73fb      	strb	r3, [r7, #15]
	}

	if(phostHS->gState == HOST_CLASS)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b0b      	cmp	r3, #11
 8001b46:	d104      	bne.n	8001b52 <SetupJoystick+0x3a>
	{
		JoystickFound = SetupJoystick_Host(phostHS);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f813 	bl	8001b74 <SetupJoystick_Host>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	73fb      	strb	r3, [r7, #15]
	}

	if (JoystickFound == 1)
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d102      	bne.n	8001b5e <SetupJoystick+0x46>
	{
		SetPinsOnGamepad();
 8001b58:	f000 f872 	bl	8001c40 <SetPinsOnGamepad>
	else
	{
		SetPinsOffGamepad();
	}

}
 8001b5c:	e001      	b.n	8001b62 <SetupJoystick+0x4a>
		SetPinsOffGamepad();
 8001b5e:	f000 f8df 	bl	8001d20 <SetPinsOffGamepad>
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200007f8 	.word	0x200007f8
 8001b70:	20000420 	.word	0x20000420

08001b74 <SetupJoystick_Host>:



uint8_t SetupJoystick_Host(USBH_HandleTypeDef *phost)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint8_t JoystickFound = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	74fb      	strb	r3, [r7, #19]
  //handle device when connected to Hub
  if (phost->device.DevDesc.bDeviceClass == 9 && Appli_state == APPLICATION_READY)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
 8001b86:	2b09      	cmp	r3, #9
 8001b88:	d130      	bne.n	8001bec <SetupJoystick_Host+0x78>
 8001b8a:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <SetupJoystick_Host+0xc8>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d12c      	bne.n	8001bec <SetupJoystick_Host+0x78>
  {
    HUB_HandleTypeDef *HUB_Handle  = (HUB_HandleTypeDef *) phost->pActiveClass->pData[0]; 
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	60fb      	str	r3, [r7, #12]

    for (int port = 0; port <4; port++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
 8001ba0:	e020      	b.n	8001be4 <SetupJoystick_Host+0x70>
    {
      for (int interface = 0; interface <2; interface ++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
 8001ba6:	e017      	b.n	8001bd8 <SetupJoystick_Host+0x64>
      {
        if (HUB_Handle->Port[port].Interface[interface].DeviceType == HUB_GAMEPAD)
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	69b9      	ldr	r1, [r7, #24]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	206c      	movs	r0, #108	; 0x6c
 8001bb0:	fb00 f101 	mul.w	r1, r0, r1
 8001bb4:	f44f 7071 	mov.w	r0, #964	; 0x3c4
 8001bb8:	fb00 f303 	mul.w	r3, r0, r3
 8001bbc:	440b      	add	r3, r1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d103      	bne.n	8001bd2 <SetupJoystick_Host+0x5e>
        {
        	JoystickFound = 1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	74fb      	strb	r3, [r7, #19]
            return JoystickFound;
 8001bce:	7cfb      	ldrb	r3, [r7, #19]
 8001bd0:	e02e      	b.n	8001c30 <SetupJoystick_Host+0xbc>
      for (int interface = 0; interface <2; interface ++)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	61bb      	str	r3, [r7, #24]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	dde4      	ble.n	8001ba8 <SetupJoystick_Host+0x34>
    for (int port = 0; port <4; port++)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3301      	adds	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	dddb      	ble.n	8001ba2 <SetupJoystick_Host+0x2e>
  {
 8001bea:	e020      	b.n	8001c2e <SetupJoystick_Host+0xba>


    }
    
  }
  else if (Appli_state == APPLICATION_READY)
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <SetupJoystick_Host+0xc8>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d11c      	bne.n	8001c2e <SetupJoystick_Host+0xba>
  {
      for (int interface = 0; interface <2; interface ++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e016      	b.n	8001c28 <SetupJoystick_Host+0xb4>
      {
        HID_HandleTypeDef *HID_Handle  = (HID_HandleTypeDef *) phost->pActiveClass->pData[interface]; 
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	3208      	adds	r2, #8
 8001c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c08:	60bb      	str	r3, [r7, #8]


        if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_JOYSTICK)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d103      	bne.n	8001c22 <SetupJoystick_Host+0xae>
        {

            //TURN ON PINS and return
        	JoystickFound = 1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	74fb      	strb	r3, [r7, #19]
            return JoystickFound;
 8001c1e:	7cfb      	ldrb	r3, [r7, #19]
 8001c20:	e006      	b.n	8001c30 <SetupJoystick_Host+0xbc>
      for (int interface = 0; interface <2; interface ++)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3301      	adds	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	dde5      	ble.n	8001bfa <SetupJoystick_Host+0x86>
      }

  }

  //If we are here, no joystick detected change pins back to Input
  return JoystickFound;
 8001c2e:	7cfb      	ldrb	r3, [r7, #19]


}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3724      	adds	r7, #36	; 0x24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	20000bd0 	.word	0x20000bd0

08001c40 <SetPinsOnGamepad>:


void SetPinsOnGamepad()
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c46:	463b      	mov	r3, r7
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
 8001c54:	615a      	str	r2, [r3, #20]
    /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	482b      	ldr	r0, [pc, #172]	; (8001d1c <SetPinsOnGamepad+0xdc>)
 8001c70:	f005 f944 	bl	8006efc <LL_GPIO_Init>

    /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c78:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4823      	ldr	r0, [pc, #140]	; (8001d1c <SetPinsOnGamepad+0xdc>)
 8001c90:	f005 f934 	bl	8006efc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001c94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c98:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001caa:	463b      	mov	r3, r7
 8001cac:	4619      	mov	r1, r3
 8001cae:	481b      	ldr	r0, [pc, #108]	; (8001d1c <SetPinsOnGamepad+0xdc>)
 8001cb0:	f005 f924 	bl	8006efc <LL_GPIO_Init>
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8001cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cca:	463b      	mov	r3, r7
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4813      	ldr	r0, [pc, #76]	; (8001d1c <SetPinsOnGamepad+0xdc>)
 8001cd0:	f005 f914 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8001cd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cd8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cea:	463b      	mov	r3, r7
 8001cec:	4619      	mov	r1, r3
 8001cee:	480b      	ldr	r0, [pc, #44]	; (8001d1c <SetPinsOnGamepad+0xdc>)
 8001cf0:	f005 f904 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cf8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4803      	ldr	r0, [pc, #12]	; (8001d1c <SetPinsOnGamepad+0xdc>)
 8001d10:	f005 f8f4 	bl	8006efc <LL_GPIO_Init>


}
 8001d14:	bf00      	nop
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40020800 	.word	0x40020800

08001d20 <SetPinsOffGamepad>:


void SetPinsOffGamepad()
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d26:	463b      	mov	r3, r7
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
 8001d34:	615a      	str	r2, [r3, #20]
    /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d42:	463b      	mov	r3, r7
 8001d44:	4619      	mov	r1, r3
 8001d46:	4821      	ldr	r0, [pc, #132]	; (8001dcc <SetPinsOffGamepad+0xac>)
 8001d48:	f005 f8d8 	bl	8006efc <LL_GPIO_Init>

    /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d50:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	481b      	ldr	r0, [pc, #108]	; (8001dcc <SetPinsOffGamepad+0xac>)
 8001d60:	f005 f8cc 	bl	8006efc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d68:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d72:	463b      	mov	r3, r7
 8001d74:	4619      	mov	r1, r3
 8001d76:	4815      	ldr	r0, [pc, #84]	; (8001dcc <SetPinsOffGamepad+0xac>)
 8001d78:	f005 f8c0 	bl	8006efc <LL_GPIO_Init>
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8001d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d80:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480f      	ldr	r0, [pc, #60]	; (8001dcc <SetPinsOffGamepad+0xac>)
 8001d90:	f005 f8b4 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8001d94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d98:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da2:	463b      	mov	r3, r7
 8001da4:	4619      	mov	r1, r3
 8001da6:	4809      	ldr	r0, [pc, #36]	; (8001dcc <SetPinsOffGamepad+0xac>)
 8001da8:	f005 f8a8 	bl	8006efc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001db0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dba:	463b      	mov	r3, r7
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4803      	ldr	r0, [pc, #12]	; (8001dcc <SetPinsOffGamepad+0xac>)
 8001dc0:	f005 f89c 	bl	8006efc <LL_GPIO_Init>
}
 8001dc4:	bf00      	nop
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40020800 	.word	0x40020800

08001dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dd4:	480d      	ldr	r0, [pc, #52]	; (8001e0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dd6:	490e      	ldr	r1, [pc, #56]	; (8001e10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dd8:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ddc:	e002      	b.n	8001de4 <LoopCopyDataInit>

08001dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de2:	3304      	adds	r3, #4

08001de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de8:	d3f9      	bcc.n	8001dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dea:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dec:	4c0b      	ldr	r4, [pc, #44]	; (8001e1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df0:	e001      	b.n	8001df6 <LoopFillZerobss>

08001df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df4:	3204      	adds	r2, #4

08001df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df8:	d3fb      	bcc.n	8001df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dfa:	f7ff fccd 	bl	8001798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dfe:	f00a fc8b 	bl	800c718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e02:	f7ff f841 	bl	8000e88 <main>
  bx  lr    
 8001e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e08:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e10:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001e14:	0800cd2c 	.word	0x0800cd2c
  ldr r2, =_sbss
 8001e18:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001e1c:	200011ec 	.word	0x200011ec

08001e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e20:	e7fe      	b.n	8001e20 <ADC_IRQHandler>

08001e22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e26:	2003      	movs	r0, #3
 8001e28:	f000 f8f9 	bl	800201e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2c:	200f      	movs	r0, #15
 8001e2e:	f7ff fb75 	bl	800151c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e32:	f7ff fb0d 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_IncTick+0x20>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_IncTick+0x24>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <HAL_IncTick+0x24>)
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	2000000c 	.word	0x2000000c
 8001e60:	20000210 	.word	0x20000210

08001e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return uwTick;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_GetTick+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000210 	.word	0x20000210

08001e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff ffee 	bl	8001e64 <HAL_GetTick>
 8001e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e94:	d005      	beq.n	8001ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_Delay+0x44>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ea2:	bf00      	nop
 8001ea4:	f7ff ffde 	bl	8001e64 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d8f7      	bhi.n	8001ea4 <HAL_Delay+0x28>
  {
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000000c 	.word	0x2000000c

08001ec4 <__NVIC_SetPriorityGrouping>:
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <__NVIC_SetPriorityGrouping+0x40>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <__NVIC_SetPriorityGrouping+0x40>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00
 8001f08:	05fa0000 	.word	0x05fa0000

08001f0c <__NVIC_GetPriorityGrouping>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_EnableIRQ>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db0b      	blt.n	8001f52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4907      	ldr	r1, [pc, #28]	; (8001f60 <__NVIC_EnableIRQ+0x38>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	2001      	movs	r0, #1
 8001f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <__NVIC_SetPriority>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	db0a      	blt.n	8001f8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	490c      	ldr	r1, [pc, #48]	; (8001fb0 <__NVIC_SetPriority+0x4c>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	440b      	add	r3, r1
 8001f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f8c:	e00a      	b.n	8001fa4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4908      	ldr	r1, [pc, #32]	; (8001fb4 <__NVIC_SetPriority+0x50>)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	3b04      	subs	r3, #4
 8001f9c:	0112      	lsls	r2, r2, #4
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	761a      	strb	r2, [r3, #24]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000e100 	.word	0xe000e100
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <NVIC_EncodePriority>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f1c3 0307 	rsb	r3, r3, #7
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	bf28      	it	cs
 8001fd6:	2304      	movcs	r3, #4
 8001fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d902      	bls.n	8001fe8 <NVIC_EncodePriority+0x30>
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3b03      	subs	r3, #3
 8001fe6:	e000      	b.n	8001fea <NVIC_EncodePriority+0x32>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002000:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43d9      	mvns	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	4313      	orrs	r3, r2
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	; 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ff4c 	bl	8001ec4 <__NVIC_SetPriorityGrouping>
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002046:	f7ff ff61 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 800204a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	68b9      	ldr	r1, [r7, #8]
 8002050:	6978      	ldr	r0, [r7, #20]
 8002052:	f7ff ffb1 	bl	8001fb8 <NVIC_EncodePriority>
 8002056:	4602      	mov	r2, r0
 8002058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff80 	bl	8001f64 <__NVIC_SetPriority>
}
 8002064:	bf00      	nop
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff54 	bl	8001f28 <__NVIC_EnableIRQ>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e014      	b.n	80020c4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	791b      	ldrb	r3, [r3, #4]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d105      	bne.n	80020b0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fa64 	bl	8000578 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e2:	d120      	bne.n	8002126 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f2:	d118      	bne.n	8002126 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2204      	movs	r2, #4
 80020f8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f043 0201 	orr.w	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800210e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800211e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f82d 	bl	8002180 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002134:	d120      	bne.n	8002178 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002144:	d118      	bne.n	8002178 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2204      	movs	r2, #4
 800214a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f043 0202 	orr.w	r2, r3, #2
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002160:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002170:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f85d 	bl	8002232 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	795b      	ldrb	r3, [r3, #5]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_DAC_ConfigChannel+0x18>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e03c      	b.n	8002226 <HAL_DAC_ConfigChannel+0x92>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2202      	movs	r2, #2
 80021b6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	4013      	ands	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6819      	ldr	r1, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	22c0      	movs	r2, #192	; 0xc0
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	400a      	ands	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff fe06 	bl	8001e64 <HAL_GetTick>
 8002258:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d008      	beq.n	8002278 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2280      	movs	r2, #128	; 0x80
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e052      	b.n	800231e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0216 	bic.w	r2, r2, #22
 8002286:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002296:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	2b00      	cmp	r3, #0
 800229e:	d103      	bne.n	80022a8 <HAL_DMA_Abort+0x62>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0208 	bic.w	r2, r2, #8
 80022b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0201 	bic.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c8:	e013      	b.n	80022f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ca:	f7ff fdcb 	bl	8001e64 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d90c      	bls.n	80022f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2203      	movs	r2, #3
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e015      	b.n	800231e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e4      	bne.n	80022ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	223f      	movs	r2, #63	; 0x3f
 8002306:	409a      	lsls	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d004      	beq.n	8002344 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2280      	movs	r2, #128	; 0x80
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e00c      	b.n	800235e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2205      	movs	r2, #5
 8002348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0201 	bic.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
 8002376:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <HAL_FLASH_IRQHandler+0x164>)
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	4a55      	ldr	r2, [pc, #340]	; (80024d0 <HAL_FLASH_IRQHandler+0x164>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
 8002382:	4b53      	ldr	r3, [pc, #332]	; (80024d0 <HAL_FLASH_IRQHandler+0x164>)
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	4a52      	ldr	r2, [pc, #328]	; (80024d0 <HAL_FLASH_IRQHandler+0x164>)
 8002388:	f023 0302 	bic.w	r3, r3, #2
 800238c:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
 800238e:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <HAL_FLASH_IRQHandler+0x164>)
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	4a4f      	ldr	r2, [pc, #316]	; (80024d0 <HAL_FLASH_IRQHandler+0x164>)
 8002394:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002398:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
 800239a:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <HAL_FLASH_IRQHandler+0x164>)
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	4a4c      	ldr	r2, [pc, #304]	; (80024d0 <HAL_FLASH_IRQHandler+0x164>)
 80023a0:	f023 0304 	bic.w	r3, r3, #4
 80023a4:	6113      	str	r3, [r2, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80023a6:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <HAL_FLASH_IRQHandler+0x164>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d048      	beq.n	8002444 <HAL_FLASH_IRQHandler+0xd8>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <HAL_FLASH_IRQHandler+0x164>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
 80023b8:	4b46      	ldr	r3, [pc, #280]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d037      	beq.n	8002432 <HAL_FLASH_IRQHandler+0xc6>
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	dc40      	bgt.n	8002448 <HAL_FLASH_IRQHandler+0xdc>
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d002      	beq.n	80023d0 <HAL_FLASH_IRQHandler+0x64>
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d02a      	beq.n	8002424 <HAL_FLASH_IRQHandler+0xb8>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
 80023ce:	e03b      	b.n	8002448 <HAL_FLASH_IRQHandler+0xdc>
        pFlash.NbSectorsToErase--;
 80023d0:	4b40      	ldr	r3, [pc, #256]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	4a3f      	ldr	r2, [pc, #252]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 80023d8:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
 80023da:	4b3e      	ldr	r3, [pc, #248]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d013      	beq.n	800240a <HAL_FLASH_IRQHandler+0x9e>
          temp = pFlash.Sector;
 80023e2:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f875 	bl	80024d8 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 80023ee:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	3301      	adds	r3, #1
 80023f4:	4a37      	ldr	r2, [pc, #220]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 80023f6:	60d3      	str	r3, [r2, #12]
 80023f8:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 80023fa:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 80023fc:	7a1b      	ldrb	r3, [r3, #8]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	4619      	mov	r1, r3
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f8d4 	bl	80025b0 <FLASH_Erase_Sector>
        break;
 8002408:	e01f      	b.n	800244a <HAL_FLASH_IRQHandler+0xde>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 800240a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	4a30      	ldr	r2, [pc, #192]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f85e 	bl	80024d8 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800241c:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
        break;
 8002422:	e012      	b.n	800244a <HAL_FLASH_IRQHandler+0xde>
        HAL_FLASH_EndOfOperationCallback(0);
 8002424:	2000      	movs	r0, #0
 8002426:	f000 f857 	bl	80024d8 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
        break;
 8002430:	e00b      	b.n	800244a <HAL_FLASH_IRQHandler+0xde>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002432:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f84e 	bl	80024d8 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
        break;
 8002442:	e002      	b.n	800244a <HAL_FLASH_IRQHandler+0xde>
    }
  }
 8002444:	bf00      	nop
 8002446:	e000      	b.n	800244a <HAL_FLASH_IRQHandler+0xde>
        break;
 8002448:	bf00      	nop
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800244a:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <HAL_FLASH_IRQHandler+0x164>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d023      	beq.n	800249e <HAL_FLASH_IRQHandler+0x132>
  {
    switch (pFlash.ProcedureOnGoing)
 8002456:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b03      	cmp	r3, #3
 800245e:	d011      	beq.n	8002484 <HAL_FLASH_IRQHandler+0x118>
 8002460:	2b03      	cmp	r3, #3
 8002462:	dc13      	bgt.n	800248c <HAL_FLASH_IRQHandler+0x120>
 8002464:	2b01      	cmp	r3, #1
 8002466:	d002      	beq.n	800246e <HAL_FLASH_IRQHandler+0x102>
 8002468:	2b02      	cmp	r3, #2
 800246a:	d008      	beq.n	800247e <HAL_FLASH_IRQHandler+0x112>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
 800246c:	e00e      	b.n	800248c <HAL_FLASH_IRQHandler+0x120>
        temp = pFlash.Sector;
 800246e:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
 8002474:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 8002476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800247a:	60da      	str	r2, [r3, #12]
        break;
 800247c:	e007      	b.n	800248e <HAL_FLASH_IRQHandler+0x122>
        temp = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
        break;
 8002482:	e004      	b.n	800248e <HAL_FLASH_IRQHandler+0x122>
        temp = pFlash.Address;
 8002484:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	607b      	str	r3, [r7, #4]
        break;
 800248a:	e000      	b.n	800248e <HAL_FLASH_IRQHandler+0x122>
      break;
 800248c:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800248e:	f000 f837 	bl	8002500 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f82a 	bl	80024ec <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002498:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10e      	bne.n	80024c6 <HAL_FLASH_IRQHandler+0x15a>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_FLASH_IRQHandler+0x164>)
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	4a08      	ldr	r2, [pc, #32]	; (80024d0 <HAL_FLASH_IRQHandler+0x164>)
 80024ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b2:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_FLASH_IRQHandler+0x164>)
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <HAL_FLASH_IRQHandler+0x164>)
 80024ba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80024be:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_FLASH_IRQHandler+0x168>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	751a      	strb	r2, [r3, #20]
  }
  
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00
 80024d4:	20000214 	.word	0x20000214

080024d8 <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
  */ 
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002504:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <FLASH_SetErrorCode+0xa8>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002510:	4b26      	ldr	r3, [pc, #152]	; (80025ac <FLASH_SetErrorCode+0xac>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f043 0320 	orr.w	r3, r3, #32
 8002518:	4a24      	ldr	r2, [pc, #144]	; (80025ac <FLASH_SetErrorCode+0xac>)
 800251a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800251c:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <FLASH_SetErrorCode+0xa8>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002528:	4b20      	ldr	r3, [pc, #128]	; (80025ac <FLASH_SetErrorCode+0xac>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f043 0310 	orr.w	r3, r3, #16
 8002530:	4a1e      	ldr	r2, [pc, #120]	; (80025ac <FLASH_SetErrorCode+0xac>)
 8002532:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002534:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <FLASH_SetErrorCode+0xa8>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <FLASH_SetErrorCode+0xac>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f043 0308 	orr.w	r3, r3, #8
 8002548:	4a18      	ldr	r2, [pc, #96]	; (80025ac <FLASH_SetErrorCode+0xac>)
 800254a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800254c:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <FLASH_SetErrorCode+0xa8>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <FLASH_SetErrorCode+0xac>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	4a12      	ldr	r2, [pc, #72]	; (80025ac <FLASH_SetErrorCode+0xac>)
 8002562:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002564:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <FLASH_SetErrorCode+0xa8>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <FLASH_SetErrorCode+0xac>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <FLASH_SetErrorCode+0xac>)
 800257a:	6193      	str	r3, [r2, #24]
  }
  
#if defined (FLASH_OPTCR2_PCROP)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <FLASH_SetErrorCode+0xa8>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <FLASH_SetErrorCode+0x94>
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <FLASH_SetErrorCode+0xac>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002590:	4a06      	ldr	r2, [pc, #24]	; (80025ac <FLASH_SetErrorCode+0xac>)
 8002592:	6193      	str	r3, [r2, #24]
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <FLASH_SetErrorCode+0xa8>)
 8002596:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 800259a:	60da      	str	r2, [r3, #12]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40023c00 	.word	0x40023c00
 80025ac:	20000214 	.word	0x20000214

080025b0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d102      	bne.n	80025cc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	e010      	b.n	80025ee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d103      	bne.n	80025da <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80025d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	e009      	b.n	80025ee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d103      	bne.n	80025e8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80025e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	e002      	b.n	80025ee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80025e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <FLASH_Erase_Sector+0x94>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	4a14      	ldr	r2, [pc, #80]	; (8002644 <FLASH_Erase_Sector+0x94>)
 80025f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <FLASH_Erase_Sector+0x94>)
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	4911      	ldr	r1, [pc, #68]	; (8002644 <FLASH_Erase_Sector+0x94>)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <FLASH_Erase_Sector+0x94>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <FLASH_Erase_Sector+0x94>)
 800260c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002610:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <FLASH_Erase_Sector+0x94>)
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4313      	orrs	r3, r2
 800261c:	4a09      	ldr	r2, [pc, #36]	; (8002644 <FLASH_Erase_Sector+0x94>)
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <FLASH_Erase_Sector+0x94>)
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	4a06      	ldr	r2, [pc, #24]	; (8002644 <FLASH_Erase_Sector+0x94>)
 800262a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002630:	f3bf 8f4f 	dsb	sy
}
 8002634:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40023c00 	.word	0x40023c00

08002648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	e169      	b.n	800293c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002668:	2201      	movs	r2, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	429a      	cmp	r2, r3
 8002682:	f040 8158 	bne.w	8002936 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d005      	beq.n	800269e <HAL_GPIO_Init+0x56>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d130      	bne.n	8002700 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d4:	2201      	movs	r2, #1
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 0201 	and.w	r2, r3, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b03      	cmp	r3, #3
 800270a:	d017      	beq.n	800273c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d123      	bne.n	8002790 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	08da      	lsrs	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3208      	adds	r2, #8
 8002750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	220f      	movs	r2, #15
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	08da      	lsrs	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3208      	adds	r2, #8
 800278a:	69b9      	ldr	r1, [r7, #24]
 800278c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0203 	and.w	r2, r3, #3
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80b2 	beq.w	8002936 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d2:	4b60      	ldr	r3, [pc, #384]	; (8002954 <HAL_GPIO_Init+0x30c>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	4a5f      	ldr	r2, [pc, #380]	; (8002954 <HAL_GPIO_Init+0x30c>)
 80027d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027dc:	6453      	str	r3, [r2, #68]	; 0x44
 80027de:	4b5d      	ldr	r3, [pc, #372]	; (8002954 <HAL_GPIO_Init+0x30c>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027ea:	4a5b      	ldr	r2, [pc, #364]	; (8002958 <HAL_GPIO_Init+0x310>)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	089b      	lsrs	r3, r3, #2
 80027f0:	3302      	adds	r3, #2
 80027f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	220f      	movs	r2, #15
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a52      	ldr	r2, [pc, #328]	; (800295c <HAL_GPIO_Init+0x314>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d02b      	beq.n	800286e <HAL_GPIO_Init+0x226>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a51      	ldr	r2, [pc, #324]	; (8002960 <HAL_GPIO_Init+0x318>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d025      	beq.n	800286a <HAL_GPIO_Init+0x222>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a50      	ldr	r2, [pc, #320]	; (8002964 <HAL_GPIO_Init+0x31c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01f      	beq.n	8002866 <HAL_GPIO_Init+0x21e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a4f      	ldr	r2, [pc, #316]	; (8002968 <HAL_GPIO_Init+0x320>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d019      	beq.n	8002862 <HAL_GPIO_Init+0x21a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a4e      	ldr	r2, [pc, #312]	; (800296c <HAL_GPIO_Init+0x324>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <HAL_GPIO_Init+0x216>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4d      	ldr	r2, [pc, #308]	; (8002970 <HAL_GPIO_Init+0x328>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00d      	beq.n	800285a <HAL_GPIO_Init+0x212>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4c      	ldr	r2, [pc, #304]	; (8002974 <HAL_GPIO_Init+0x32c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d007      	beq.n	8002856 <HAL_GPIO_Init+0x20e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4b      	ldr	r2, [pc, #300]	; (8002978 <HAL_GPIO_Init+0x330>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d101      	bne.n	8002852 <HAL_GPIO_Init+0x20a>
 800284e:	2307      	movs	r3, #7
 8002850:	e00e      	b.n	8002870 <HAL_GPIO_Init+0x228>
 8002852:	2308      	movs	r3, #8
 8002854:	e00c      	b.n	8002870 <HAL_GPIO_Init+0x228>
 8002856:	2306      	movs	r3, #6
 8002858:	e00a      	b.n	8002870 <HAL_GPIO_Init+0x228>
 800285a:	2305      	movs	r3, #5
 800285c:	e008      	b.n	8002870 <HAL_GPIO_Init+0x228>
 800285e:	2304      	movs	r3, #4
 8002860:	e006      	b.n	8002870 <HAL_GPIO_Init+0x228>
 8002862:	2303      	movs	r3, #3
 8002864:	e004      	b.n	8002870 <HAL_GPIO_Init+0x228>
 8002866:	2302      	movs	r3, #2
 8002868:	e002      	b.n	8002870 <HAL_GPIO_Init+0x228>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_GPIO_Init+0x228>
 800286e:	2300      	movs	r3, #0
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	f002 0203 	and.w	r2, r2, #3
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	4093      	lsls	r3, r2
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002880:	4935      	ldr	r1, [pc, #212]	; (8002958 <HAL_GPIO_Init+0x310>)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288e:	4b3b      	ldr	r3, [pc, #236]	; (800297c <HAL_GPIO_Init+0x334>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028b2:	4a32      	ldr	r2, [pc, #200]	; (800297c <HAL_GPIO_Init+0x334>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b8:	4b30      	ldr	r3, [pc, #192]	; (800297c <HAL_GPIO_Init+0x334>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028dc:	4a27      	ldr	r2, [pc, #156]	; (800297c <HAL_GPIO_Init+0x334>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028e2:	4b26      	ldr	r3, [pc, #152]	; (800297c <HAL_GPIO_Init+0x334>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002906:	4a1d      	ldr	r2, [pc, #116]	; (800297c <HAL_GPIO_Init+0x334>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_GPIO_Init+0x334>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002930:	4a12      	ldr	r2, [pc, #72]	; (800297c <HAL_GPIO_Init+0x334>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3301      	adds	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b0f      	cmp	r3, #15
 8002940:	f67f ae92 	bls.w	8002668 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40013800 	.word	0x40013800
 800295c:	40020000 	.word	0x40020000
 8002960:	40020400 	.word	0x40020400
 8002964:	40020800 	.word	0x40020800
 8002968:	40020c00 	.word	0x40020c00
 800296c:	40021000 	.word	0x40021000
 8002970:	40021400 	.word	0x40021400
 8002974:	40021800 	.word	0x40021800
 8002978:	40021c00 	.word	0x40021c00
 800297c:	40013c00 	.word	0x40013c00

08002980 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b08f      	sub	sp, #60	; 0x3c
 8002984:	af0a      	add	r7, sp, #40	; 0x28
 8002986:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e054      	b.n	8002a3c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d106      	bne.n	80029b2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f009 fb65 	bl	800c07c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2203      	movs	r2, #3
 80029b6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f004 fbae 	bl	8007132 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	687e      	ldr	r6, [r7, #4]
 80029de:	466d      	mov	r5, sp
 80029e0:	f106 0410 	add.w	r4, r6, #16
 80029e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80029f4:	1d33      	adds	r3, r6, #4
 80029f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f8:	6838      	ldr	r0, [r7, #0]
 80029fa:	f004 faf3 	bl	8006fe4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2101      	movs	r1, #1
 8002a04:	4618      	mov	r0, r3
 8002a06:	f004 fba5 	bl	8007154 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	687e      	ldr	r6, [r7, #4]
 8002a12:	466d      	mov	r5, sp
 8002a14:	f106 0410 	add.w	r4, r6, #16
 8002a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a24:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a28:	1d33      	adds	r3, r6, #4
 8002a2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a2c:	6838      	ldr	r0, [r7, #0]
 8002a2e:	f004 fd85 	bl	800753c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a44 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af04      	add	r7, sp, #16
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	4608      	mov	r0, r1
 8002a4e:	4611      	mov	r1, r2
 8002a50:	461a      	mov	r2, r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	70fb      	strb	r3, [r7, #3]
 8002a56:	460b      	mov	r3, r1
 8002a58:	70bb      	strb	r3, [r7, #2]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_HCD_HC_Init+0x28>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e076      	b.n	8002b5a <HAL_HCD_HC_Init+0x116>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	333d      	adds	r3, #61	; 0x3d
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3338      	adds	r3, #56	; 0x38
 8002a94:	787a      	ldrb	r2, [r7, #1]
 8002a96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3340      	adds	r3, #64	; 0x40
 8002aa6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002aa8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3339      	adds	r3, #57	; 0x39
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	333f      	adds	r3, #63	; 0x3f
 8002aca:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ace:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	78ba      	ldrb	r2, [r7, #2]
 8002ad4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ad8:	b2d0      	uxtb	r0, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	333a      	adds	r3, #58	; 0x3a
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002aea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	da09      	bge.n	8002b06 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	333b      	adds	r3, #59	; 0x3b
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e008      	b.n	8002b18 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	212c      	movs	r1, #44	; 0x2c
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	333b      	adds	r3, #59	; 0x3b
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	333c      	adds	r3, #60	; 0x3c
 8002b26:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b2a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	787c      	ldrb	r4, [r7, #1]
 8002b32:	78ba      	ldrb	r2, [r7, #2]
 8002b34:	78f9      	ldrb	r1, [r7, #3]
 8002b36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b38:	9302      	str	r3, [sp, #8]
 8002b3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b3e:	9301      	str	r3, [sp, #4]
 8002b40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	4623      	mov	r3, r4
 8002b48:	f004 fe72 	bl	8007830 <USB_HC_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd90      	pop	{r4, r7, pc}

08002b62 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_HCD_HC_Halt+0x1e>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e00f      	b.n	8002ba0 <HAL_HCD_HC_Halt+0x3e>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f005 f8c2 	bl	8007d1a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	4608      	mov	r0, r1
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	70fb      	strb	r3, [r7, #3]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	70bb      	strb	r3, [r7, #2]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	333b      	adds	r3, #59	; 0x3b
 8002bd0:	78ba      	ldrb	r2, [r7, #2]
 8002bd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	333f      	adds	r3, #63	; 0x3f
 8002be2:	787a      	ldrb	r2, [r7, #1]
 8002be4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002be6:	7c3b      	ldrb	r3, [r7, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d112      	bne.n	8002c12 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	212c      	movs	r1, #44	; 0x2c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3342      	adds	r3, #66	; 0x42
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	333d      	adds	r3, #61	; 0x3d
 8002c0c:	7f3a      	ldrb	r2, [r7, #28]
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	e008      	b.n	8002c24 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3342      	adds	r3, #66	; 0x42
 8002c20:	2202      	movs	r2, #2
 8002c22:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002c24:	787b      	ldrb	r3, [r7, #1]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	f200 80c6 	bhi.w	8002db8 <HAL_HCD_HC_SubmitRequest+0x210>
 8002c2c:	a201      	add	r2, pc, #4	; (adr r2, 8002c34 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c32:	bf00      	nop
 8002c34:	08002c45 	.word	0x08002c45
 8002c38:	08002da5 	.word	0x08002da5
 8002c3c:	08002ca9 	.word	0x08002ca9
 8002c40:	08002d27 	.word	0x08002d27
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002c44:	7c3b      	ldrb	r3, [r7, #16]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	f040 80b8 	bne.w	8002dbc <HAL_HCD_HC_SubmitRequest+0x214>
 8002c4c:	78bb      	ldrb	r3, [r7, #2]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f040 80b4 	bne.w	8002dbc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002c54:	8b3b      	ldrh	r3, [r7, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d108      	bne.n	8002c6c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	3355      	adds	r3, #85	; 0x55
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3355      	adds	r3, #85	; 0x55
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d109      	bne.n	8002c94 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3342      	adds	r3, #66	; 0x42
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c92:	e093      	b.n	8002dbc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3342      	adds	r3, #66	; 0x42
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	701a      	strb	r2, [r3, #0]
      break;
 8002ca6:	e089      	b.n	8002dbc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002ca8:	78bb      	ldrb	r3, [r7, #2]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d11d      	bne.n	8002cea <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3355      	adds	r3, #85	; 0x55
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d109      	bne.n	8002cd6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	3342      	adds	r3, #66	; 0x42
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002cd4:	e073      	b.n	8002dbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3342      	adds	r3, #66	; 0x42
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	701a      	strb	r2, [r3, #0]
      break;
 8002ce8:	e069      	b.n	8002dbe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3354      	adds	r3, #84	; 0x54
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3342      	adds	r3, #66	; 0x42
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
      break;
 8002d10:	e055      	b.n	8002dbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3342      	adds	r3, #66	; 0x42
 8002d20:	2202      	movs	r2, #2
 8002d22:	701a      	strb	r2, [r3, #0]
      break;
 8002d24:	e04b      	b.n	8002dbe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002d26:	78bb      	ldrb	r3, [r7, #2]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d11d      	bne.n	8002d68 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3355      	adds	r3, #85	; 0x55
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3342      	adds	r3, #66	; 0x42
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d52:	e034      	b.n	8002dbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3342      	adds	r3, #66	; 0x42
 8002d62:	2202      	movs	r2, #2
 8002d64:	701a      	strb	r2, [r3, #0]
      break;
 8002d66:	e02a      	b.n	8002dbe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3354      	adds	r3, #84	; 0x54
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	3342      	adds	r3, #66	; 0x42
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
      break;
 8002d8e:	e016      	b.n	8002dbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3342      	adds	r3, #66	; 0x42
 8002d9e:	2202      	movs	r2, #2
 8002da0:	701a      	strb	r2, [r3, #0]
      break;
 8002da2:	e00c      	b.n	8002dbe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	3342      	adds	r3, #66	; 0x42
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
      break;
 8002db6:	e002      	b.n	8002dbe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002db8:	bf00      	nop
 8002dba:	e000      	b.n	8002dbe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002dbc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	3344      	adds	r3, #68	; 0x44
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	8b3a      	ldrh	r2, [r7, #24]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	202c      	movs	r0, #44	; 0x2c
 8002dd8:	fb00 f303 	mul.w	r3, r0, r3
 8002ddc:	440b      	add	r3, r1
 8002dde:	334c      	adds	r3, #76	; 0x4c
 8002de0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	3360      	adds	r3, #96	; 0x60
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3350      	adds	r3, #80	; 0x50
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	212c      	movs	r1, #44	; 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	3339      	adds	r3, #57	; 0x39
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3361      	adds	r3, #97	; 0x61
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	222c      	movs	r2, #44	; 0x2c
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	3338      	adds	r3, #56	; 0x38
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	18d1      	adds	r1, r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	f004 fe16 	bl	8007a74 <USB_HC_StartXfer>
 8002e48:	4603      	mov	r3, r0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop

08002e54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f004 faec 	bl	8007448 <USB_GetMode>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	f040 80f6 	bne.w	8003064 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f004 faaf 	bl	80073e0 <USB_ReadInterrupts>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80ec 	beq.w	8003062 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f004 faa6 	bl	80073e0 <USB_ReadInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e9e:	d104      	bne.n	8002eaa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ea8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f004 fa96 	bl	80073e0 <USB_ReadInterrupts>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ebe:	d104      	bne.n	8002eca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ec8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f004 fa86 	bl	80073e0 <USB_ReadInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ede:	d104      	bne.n	8002eea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ee8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f004 fa76 	bl	80073e0 <USB_ReadInterrupts>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d103      	bne.n	8002f06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2202      	movs	r2, #2
 8002f04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f004 fa68 	bl	80073e0 <USB_ReadInterrupts>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f1a:	d11c      	bne.n	8002f56 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002f24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10f      	bne.n	8002f56 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f36:	2110      	movs	r1, #16
 8002f38:	6938      	ldr	r0, [r7, #16]
 8002f3a:	f004 f957 	bl	80071ec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002f3e:	6938      	ldr	r0, [r7, #16]
 8002f40:	f004 f988 	bl	8007254 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f004 fbaa 	bl	80076a4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f009 f999 	bl	800c288 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f004 fa40 	bl	80073e0 <USB_ReadInterrupts>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f6a:	d102      	bne.n	8002f72 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f001 f9ce 	bl	800430e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f004 fa32 	bl	80073e0 <USB_ReadInterrupts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d106      	bne.n	8002f94 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f009 f962 	bl	800c250 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2208      	movs	r2, #8
 8002f92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f004 fa21 	bl	80073e0 <USB_ReadInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d101      	bne.n	8002fac <HAL_HCD_IRQHandler+0x158>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <HAL_HCD_IRQHandler+0x15a>
 8002fac:	2300      	movs	r3, #0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d012      	beq.n	8002fd8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699a      	ldr	r2, [r3, #24]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0210 	bic.w	r2, r2, #16
 8002fc0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f001 f8d1 	bl	800416a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0210 	orr.w	r2, r2, #16
 8002fd6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f004 f9ff 	bl	80073e0 <USB_ReadInterrupts>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fec:	d13a      	bne.n	8003064 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f004 fe80 	bl	8007cf8 <USB_HC_ReadInterrupt>
 8002ff8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e025      	b.n	800304c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d018      	beq.n	8003046 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800302a:	d106      	bne.n	800303a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	4619      	mov	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f8ab 	bl	800318e <HCD_HC_IN_IRQHandler>
 8003038:	e005      	b.n	8003046 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	4619      	mov	r1, r3
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fcc6 	bl	80039d2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	3301      	adds	r3, #1
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	429a      	cmp	r2, r3
 8003054:	d3d4      	bcc.n	8003000 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800305e:	615a      	str	r2, [r3, #20]
 8003060:	e000      	b.n	8003064 <HAL_HCD_IRQHandler+0x210>
      return;
 8003062:	bf00      	nop
    }
  }
}
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_HCD_Start+0x16>
 800307c:	2302      	movs	r3, #2
 800307e:	e013      	b.n	80030a8 <HAL_HCD_Start+0x3e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2101      	movs	r1, #1
 800308e:	4618      	mov	r0, r3
 8003090:	f004 fb6c 	bl	800776c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f004 f839 	bl	8007110 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_HCD_Stop+0x16>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e00d      	b.n	80030e2 <HAL_HCD_Stop+0x32>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f004 ff5a 	bl	8007f8c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f004 fb0e 	bl	8007718 <USB_ResetPort>
 80030fc:	4603      	mov	r3, r0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	460b      	mov	r3, r1
 8003110:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	3360      	adds	r3, #96	; 0x60
 8003120:	781b      	ldrb	r3, [r3, #0]
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	3350      	adds	r3, #80	; 0x50
 8003148:	681b      	ldr	r3, [r3, #0]
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f004 fb52 	bl	800780c <USB_GetCurrentFrame>
 8003168:	4603      	mov	r3, r0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f004 fb2d 	bl	80077de <USB_GetHostSpeed>
 8003184:	4603      	mov	r3, r0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	4611      	mov	r1, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f004 f927 	bl	8007406 <USB_ReadChInterrupts>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d11a      	bne.n	80031f8 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ce:	461a      	mov	r2, r3
 80031d0:	2304      	movs	r3, #4
 80031d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	212c      	movs	r1, #44	; 0x2c
 80031da:	fb01 f303 	mul.w	r3, r1, r3
 80031de:	4413      	add	r3, r2
 80031e0:	3361      	adds	r3, #97	; 0x61
 80031e2:	2207      	movs	r2, #7
 80031e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f004 fd92 	bl	8007d1a <USB_HC_Halt>
 80031f6:	e0a2      	b.n	800333e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	4611      	mov	r1, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f004 f8ff 	bl	8007406 <USB_ReadChInterrupts>
 8003208:	4603      	mov	r3, r0
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003212:	d11b      	bne.n	800324c <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003220:	461a      	mov	r2, r3
 8003222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003226:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	212c      	movs	r1, #44	; 0x2c
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	4413      	add	r3, r2
 8003234:	3361      	adds	r3, #97	; 0x61
 8003236:	2208      	movs	r2, #8
 8003238:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f004 fd68 	bl	8007d1a <USB_HC_Halt>
 800324a:	e078      	b.n	800333e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	4611      	mov	r1, r2
 8003256:	4618      	mov	r0, r3
 8003258:	f004 f8d5 	bl	8007406 <USB_ReadChInterrupts>
 800325c:	4603      	mov	r3, r0
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b08      	cmp	r3, #8
 8003264:	d11a      	bne.n	800329c <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4413      	add	r3, r2
 800326e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003272:	461a      	mov	r2, r3
 8003274:	2308      	movs	r3, #8
 8003276:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	212c      	movs	r1, #44	; 0x2c
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	3361      	adds	r3, #97	; 0x61
 8003286:	2206      	movs	r2, #6
 8003288:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f004 fd40 	bl	8007d1a <USB_HC_Halt>
 800329a:	e050      	b.n	800333e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	4611      	mov	r1, r2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 f8ad 	bl	8007406 <USB_ReadChInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b6:	d11b      	bne.n	80032f0 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c4:	461a      	mov	r2, r3
 80032c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	3361      	adds	r3, #97	; 0x61
 80032da:	2209      	movs	r2, #9
 80032dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f004 fd16 	bl	8007d1a <USB_HC_Halt>
 80032ee:	e026      	b.n	800333e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f004 f883 	bl	8007406 <USB_ReadChInterrupts>
 8003300:	4603      	mov	r3, r0
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d119      	bne.n	800333e <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4413      	add	r3, r2
 8003312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003316:	461a      	mov	r2, r3
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	212c      	movs	r1, #44	; 0x2c
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	4413      	add	r3, r2
 8003328:	3361      	adds	r3, #97	; 0x61
 800332a:	2207      	movs	r2, #7
 800332c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f004 fcee 	bl	8007d1a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f004 f85c 	bl	8007406 <USB_ReadChInterrupts>
 800334e:	4603      	mov	r3, r0
 8003350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003358:	d112      	bne.n	8003380 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	4611      	mov	r1, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f004 fcd8 	bl	8007d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4413      	add	r3, r2
 8003372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003376:	461a      	mov	r2, r3
 8003378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800337c:	6093      	str	r3, [r2, #8]
 800337e:	e325      	b.n	80039cc <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	4611      	mov	r1, r2
 800338a:	4618      	mov	r0, r3
 800338c:	f004 f83b 	bl	8007406 <USB_ReadChInterrupts>
 8003390:	4603      	mov	r3, r0
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	f040 80e8 	bne.w	800356c <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a8:	461a      	mov	r2, r3
 80033aa:	2320      	movs	r3, #32
 80033ac:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d019      	beq.n	80033ea <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	3348      	adds	r3, #72	; 0x48
 80033c4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	0159      	lsls	r1, r3, #5
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	440b      	add	r3, r1
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80033d8:	1ad2      	subs	r2, r2, r3
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	202c      	movs	r0, #44	; 0x2c
 80033e0:	fb00 f303 	mul.w	r3, r0, r3
 80033e4:	440b      	add	r3, r1
 80033e6:	3350      	adds	r3, #80	; 0x50
 80033e8:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	212c      	movs	r1, #44	; 0x2c
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	3361      	adds	r3, #97	; 0x61
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	335c      	adds	r3, #92	; 0x5c
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4413      	add	r3, r2
 8003416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341a:	461a      	mov	r2, r3
 800341c:	2301      	movs	r3, #1
 800341e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	212c      	movs	r1, #44	; 0x2c
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	4413      	add	r3, r2
 800342c:	333f      	adds	r3, #63	; 0x3f
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	fb01 f303 	mul.w	r3, r1, r3
 800343e:	4413      	add	r3, r2
 8003440:	333f      	adds	r3, #63	; 0x3f
 8003442:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003444:	2b02      	cmp	r3, #2
 8003446:	d111      	bne.n	800346c <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	4611      	mov	r1, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f004 fc61 	bl	8007d1a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003464:	461a      	mov	r2, r3
 8003466:	2310      	movs	r3, #16
 8003468:	6093      	str	r3, [r2, #8]
 800346a:	e03a      	b.n	80034e2 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	333f      	adds	r3, #63	; 0x3f
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b03      	cmp	r3, #3
 800347e:	d009      	beq.n	8003494 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	333f      	adds	r3, #63	; 0x3f
 800348e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003490:	2b01      	cmp	r3, #1
 8003492:	d126      	bne.n	80034e2 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4413      	add	r3, r2
 800349c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	0151      	lsls	r1, r2, #5
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	440a      	add	r2, r1
 80034aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034b2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	212c      	movs	r1, #44	; 0x2c
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	3360      	adds	r3, #96	; 0x60
 80034c2:	2201      	movs	r2, #1
 80034c4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	b2d9      	uxtb	r1, r3
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	202c      	movs	r0, #44	; 0x2c
 80034d0:	fb00 f303 	mul.w	r3, r0, r3
 80034d4:	4413      	add	r3, r2
 80034d6:	3360      	adds	r3, #96	; 0x60
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f008 fee1 	bl	800c2a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d12b      	bne.n	8003542 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	3348      	adds	r3, #72	; 0x48
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	202c      	movs	r0, #44	; 0x2c
 8003500:	fb00 f202 	mul.w	r2, r0, r2
 8003504:	440a      	add	r2, r1
 8003506:	3240      	adds	r2, #64	; 0x40
 8003508:	8812      	ldrh	r2, [r2, #0]
 800350a:	fbb3 f3f2 	udiv	r3, r3, r2
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 825a 	beq.w	80039cc <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	212c      	movs	r1, #44	; 0x2c
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	4413      	add	r3, r2
 8003524:	3354      	adds	r3, #84	; 0x54
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	f083 0301 	eor.w	r3, r3, #1
 800352c:	b2d8      	uxtb	r0, r3
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	3354      	adds	r3, #84	; 0x54
 800353c:	4602      	mov	r2, r0
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e244      	b.n	80039cc <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	3354      	adds	r3, #84	; 0x54
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	f083 0301 	eor.w	r3, r3, #1
 8003556:	b2d8      	uxtb	r0, r3
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3354      	adds	r3, #84	; 0x54
 8003566:	4602      	mov	r2, r0
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e22f      	b.n	80039cc <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f003 ff45 	bl	8007406 <USB_ReadChInterrupts>
 800357c:	4603      	mov	r3, r0
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b20      	cmp	r3, #32
 8003584:	d109      	bne.n	800359a <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4413      	add	r3, r2
 800358e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003592:	461a      	mov	r2, r3
 8003594:	2320      	movs	r3, #32
 8003596:	6093      	str	r3, [r2, #8]
 8003598:	e218      	b.n	80039cc <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f003 ff2e 	bl	8007406 <USB_ReadChInterrupts>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	f040 816b 	bne.w	800388c <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c2:	461a      	mov	r2, r3
 80035c4:	2302      	movs	r3, #2
 80035c6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	212c      	movs	r1, #44	; 0x2c
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	3361      	adds	r3, #97	; 0x61
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d112      	bne.n	8003602 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	3361      	adds	r3, #97	; 0x61
 80035ea:	2202      	movs	r2, #2
 80035ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	212c      	movs	r1, #44	; 0x2c
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	3360      	adds	r3, #96	; 0x60
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e135      	b.n	800386e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	212c      	movs	r1, #44	; 0x2c
 8003608:	fb01 f303 	mul.w	r3, r1, r3
 800360c:	4413      	add	r3, r2
 800360e:	3361      	adds	r3, #97	; 0x61
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b06      	cmp	r3, #6
 8003614:	d112      	bne.n	800363c <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	212c      	movs	r1, #44	; 0x2c
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	4413      	add	r3, r2
 8003622:	3361      	adds	r3, #97	; 0x61
 8003624:	2202      	movs	r2, #2
 8003626:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	212c      	movs	r1, #44	; 0x2c
 800362e:	fb01 f303 	mul.w	r3, r1, r3
 8003632:	4413      	add	r3, r2
 8003634:	3360      	adds	r3, #96	; 0x60
 8003636:	2205      	movs	r2, #5
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e118      	b.n	800386e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	212c      	movs	r1, #44	; 0x2c
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	4413      	add	r3, r2
 8003648:	3361      	adds	r3, #97	; 0x61
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b07      	cmp	r3, #7
 800364e:	d009      	beq.n	8003664 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	212c      	movs	r1, #44	; 0x2c
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	4413      	add	r3, r2
 800365c:	3361      	adds	r3, #97	; 0x61
 800365e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003660:	2b09      	cmp	r3, #9
 8003662:	d159      	bne.n	8003718 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	212c      	movs	r1, #44	; 0x2c
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	4413      	add	r3, r2
 8003670:	3361      	adds	r3, #97	; 0x61
 8003672:	2202      	movs	r2, #2
 8003674:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	212c      	movs	r1, #44	; 0x2c
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	4413      	add	r3, r2
 8003682:	335c      	adds	r3, #92	; 0x5c
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	202c      	movs	r0, #44	; 0x2c
 800368e:	fb00 f303 	mul.w	r3, r0, r3
 8003692:	440b      	add	r3, r1
 8003694:	335c      	adds	r3, #92	; 0x5c
 8003696:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	212c      	movs	r1, #44	; 0x2c
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	335c      	adds	r3, #92	; 0x5c
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d912      	bls.n	80036d2 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	212c      	movs	r1, #44	; 0x2c
 80036b2:	fb01 f303 	mul.w	r3, r1, r3
 80036b6:	4413      	add	r3, r2
 80036b8:	335c      	adds	r3, #92	; 0x5c
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	3360      	adds	r3, #96	; 0x60
 80036cc:	2204      	movs	r2, #4
 80036ce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036d0:	e0cd      	b.n	800386e <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	212c      	movs	r1, #44	; 0x2c
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	4413      	add	r3, r2
 80036de:	3360      	adds	r3, #96	; 0x60
 80036e0:	2202      	movs	r2, #2
 80036e2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036fa:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003702:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4413      	add	r3, r2
 800370c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003710:	461a      	mov	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003716:	e0aa      	b.n	800386e <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	212c      	movs	r1, #44	; 0x2c
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	4413      	add	r3, r2
 8003724:	3361      	adds	r3, #97	; 0x61
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b05      	cmp	r3, #5
 800372a:	d109      	bne.n	8003740 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	212c      	movs	r1, #44	; 0x2c
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	4413      	add	r3, r2
 8003738:	3361      	adds	r3, #97	; 0x61
 800373a:	2202      	movs	r2, #2
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e096      	b.n	800386e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	212c      	movs	r1, #44	; 0x2c
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4413      	add	r3, r2
 800374c:	3361      	adds	r3, #97	; 0x61
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d109      	bne.n	8003768 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	212c      	movs	r1, #44	; 0x2c
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	3361      	adds	r3, #97	; 0x61
 8003762:	2202      	movs	r2, #2
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	e082      	b.n	800386e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	212c      	movs	r1, #44	; 0x2c
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	4413      	add	r3, r2
 8003774:	3361      	adds	r3, #97	; 0x61
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b04      	cmp	r3, #4
 800377a:	d13f      	bne.n	80037fc <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3361      	adds	r3, #97	; 0x61
 800378a:	2202      	movs	r2, #2
 800378c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	212c      	movs	r1, #44	; 0x2c
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	4413      	add	r3, r2
 800379a:	3360      	adds	r3, #96	; 0x60
 800379c:	2202      	movs	r2, #2
 800379e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	212c      	movs	r1, #44	; 0x2c
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	333f      	adds	r3, #63	; 0x3f
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	212c      	movs	r1, #44	; 0x2c
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	4413      	add	r3, r2
 80037c0:	333f      	adds	r3, #63	; 0x3f
 80037c2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d152      	bne.n	800386e <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037de:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037e6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f4:	461a      	mov	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e038      	b.n	800386e <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	4413      	add	r3, r2
 8003808:	3361      	adds	r3, #97	; 0x61
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d123      	bne.n	8003858 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	212c      	movs	r1, #44	; 0x2c
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	4413      	add	r3, r2
 800381c:	3361      	adds	r3, #97	; 0x61
 800381e:	2202      	movs	r2, #2
 8003820:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	212c      	movs	r1, #44	; 0x2c
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	4413      	add	r3, r2
 800382e:	335c      	adds	r3, #92	; 0x5c
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	202c      	movs	r0, #44	; 0x2c
 800383a:	fb00 f303 	mul.w	r3, r0, r3
 800383e:	440b      	add	r3, r1
 8003840:	335c      	adds	r3, #92	; 0x5c
 8003842:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	212c      	movs	r1, #44	; 0x2c
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	3360      	adds	r3, #96	; 0x60
 8003852:	2204      	movs	r2, #4
 8003854:	701a      	strb	r2, [r3, #0]
 8003856:	e00a      	b.n	800386e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	212c      	movs	r1, #44	; 0x2c
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	4413      	add	r3, r2
 8003864:	3361      	adds	r3, #97	; 0x61
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b02      	cmp	r3, #2
 800386a:	f000 80ae 	beq.w	80039ca <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	b2d9      	uxtb	r1, r3
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	202c      	movs	r0, #44	; 0x2c
 8003878:	fb00 f303 	mul.w	r3, r0, r3
 800387c:	4413      	add	r3, r2
 800387e:	3360      	adds	r3, #96	; 0x60
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f008 fd0d 	bl	800c2a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800388a:	e09f      	b.n	80039cc <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	4611      	mov	r1, r2
 8003896:	4618      	mov	r0, r3
 8003898:	f003 fdb5 	bl	8007406 <USB_ReadChInterrupts>
 800389c:	4603      	mov	r3, r0
 800389e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a2:	2b40      	cmp	r3, #64	; 0x40
 80038a4:	d123      	bne.n	80038ee <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b2:	461a      	mov	r2, r3
 80038b4:	2340      	movs	r3, #64	; 0x40
 80038b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	212c      	movs	r1, #44	; 0x2c
 80038be:	fb01 f303 	mul.w	r3, r1, r3
 80038c2:	4413      	add	r3, r2
 80038c4:	3361      	adds	r3, #97	; 0x61
 80038c6:	2205      	movs	r2, #5
 80038c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	212c      	movs	r1, #44	; 0x2c
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	4413      	add	r3, r2
 80038d6:	335c      	adds	r3, #92	; 0x5c
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	4611      	mov	r1, r2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f004 fa17 	bl	8007d1a <USB_HC_Halt>
 80038ec:	e06e      	b.n	80039cc <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 fd84 	bl	8007406 <USB_ReadChInterrupts>
 80038fe:	4603      	mov	r3, r0
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b10      	cmp	r3, #16
 8003906:	d161      	bne.n	80039cc <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	212c      	movs	r1, #44	; 0x2c
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	4413      	add	r3, r2
 8003914:	333f      	adds	r3, #63	; 0x3f
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d11a      	bne.n	8003952 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	212c      	movs	r1, #44	; 0x2c
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	4413      	add	r3, r2
 8003928:	335c      	adds	r3, #92	; 0x5c
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	212c      	movs	r1, #44	; 0x2c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	3361      	adds	r3, #97	; 0x61
 800393c:	2204      	movs	r2, #4
 800393e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	4611      	mov	r1, r2
 800394a:	4618      	mov	r0, r3
 800394c:	f004 f9e5 	bl	8007d1a <USB_HC_Halt>
 8003950:	e031      	b.n	80039b6 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	212c      	movs	r1, #44	; 0x2c
 8003958:	fb01 f303 	mul.w	r3, r1, r3
 800395c:	4413      	add	r3, r2
 800395e:	333f      	adds	r3, #63	; 0x3f
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	212c      	movs	r1, #44	; 0x2c
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	4413      	add	r3, r2
 8003972:	333f      	adds	r3, #63	; 0x3f
 8003974:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003976:	2b02      	cmp	r3, #2
 8003978:	d11d      	bne.n	80039b6 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	335c      	adds	r3, #92	; 0x5c
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d110      	bne.n	80039b6 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	3361      	adds	r3, #97	; 0x61
 80039a2:	2204      	movs	r2, #4
 80039a4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f004 f9b2 	bl	8007d1a <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c2:	461a      	mov	r2, r3
 80039c4:	2310      	movs	r3, #16
 80039c6:	6093      	str	r3, [r2, #8]
 80039c8:	e000      	b.n	80039cc <HCD_HC_IN_IRQHandler+0x83e>
        return;
 80039ca:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b088      	sub	sp, #32
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	4611      	mov	r1, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 fd05 	bl	8007406 <USB_ReadChInterrupts>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d11a      	bne.n	8003a3c <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a12:	461a      	mov	r2, r3
 8003a14:	2304      	movs	r3, #4
 8003a16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	212c      	movs	r1, #44	; 0x2c
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	3361      	adds	r3, #97	; 0x61
 8003a26:	2207      	movs	r2, #7
 8003a28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f004 f970 	bl	8007d1a <USB_HC_Halt>
 8003a3a:	e393      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 fcdd 	bl	8007406 <USB_ReadChInterrupts>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d137      	bne.n	8003ac6 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a62:	461a      	mov	r2, r3
 8003a64:	2320      	movs	r3, #32
 8003a66:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	212c      	movs	r1, #44	; 0x2c
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	4413      	add	r3, r2
 8003a74:	333d      	adds	r3, #61	; 0x3d
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	f040 8373 	bne.w	8004164 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	212c      	movs	r1, #44	; 0x2c
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	333d      	adds	r3, #61	; 0x3d
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	212c      	movs	r1, #44	; 0x2c
 8003a96:	fb01 f303 	mul.w	r3, r1, r3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3360      	adds	r3, #96	; 0x60
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	212c      	movs	r1, #44	; 0x2c
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	4413      	add	r3, r2
 8003aae:	3361      	adds	r3, #97	; 0x61
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	4611      	mov	r1, r2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f004 f92b 	bl	8007d1a <USB_HC_Halt>
 8003ac4:	e34e      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f003 fc98 	bl	8007406 <USB_ReadChInterrupts>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae0:	d112      	bne.n	8003b08 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aee:	461a      	mov	r2, r3
 8003af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003af4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f004 f90a 	bl	8007d1a <USB_HC_Halt>
 8003b06:	e32d      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f003 fc77 	bl	8007406 <USB_ReadChInterrupts>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d142      	bne.n	8003ba8 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	212c      	movs	r1, #44	; 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	335c      	adds	r3, #92	; 0x5c
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f003 fc61 	bl	8007406 <USB_ReadChInterrupts>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4a:	2b40      	cmp	r3, #64	; 0x40
 8003b4c:	d111      	bne.n	8003b72 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	212c      	movs	r1, #44	; 0x2c
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	4413      	add	r3, r2
 8003b5a:	333d      	adds	r3, #61	; 0x3d
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2340      	movs	r3, #64	; 0x40
 8003b70:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b7e:	461a      	mov	r2, r3
 8003b80:	2301      	movs	r3, #1
 8003b82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	212c      	movs	r1, #44	; 0x2c
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	4413      	add	r3, r2
 8003b90:	3361      	adds	r3, #97	; 0x61
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f004 f8ba 	bl	8007d1a <USB_HC_Halt>
 8003ba6:	e2dd      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f003 fc27 	bl	8007406 <USB_ReadChInterrupts>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d12c      	bne.n	8003c1c <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	212c      	movs	r1, #44	; 0x2c
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	3361      	adds	r3, #97	; 0x61
 8003bd0:	2205      	movs	r2, #5
 8003bd2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	212c      	movs	r1, #44	; 0x2c
 8003bda:	fb01 f303 	mul.w	r3, r1, r3
 8003bde:	4413      	add	r3, r2
 8003be0:	333d      	adds	r3, #61	; 0x3d
 8003be2:	2201      	movs	r2, #1
 8003be4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	212c      	movs	r1, #44	; 0x2c
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	335c      	adds	r3, #92	; 0x5c
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f004 f889 	bl	8007d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c14:	461a      	mov	r2, r3
 8003c16:	2340      	movs	r3, #64	; 0x40
 8003c18:	6093      	str	r3, [r2, #8]
 8003c1a:	e2a3      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f003 fbed 	bl	8007406 <USB_ReadChInterrupts>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d11a      	bne.n	8003c6c <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c42:	461a      	mov	r2, r3
 8003c44:	2308      	movs	r3, #8
 8003c46:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	212c      	movs	r1, #44	; 0x2c
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	3361      	adds	r3, #97	; 0x61
 8003c56:	2206      	movs	r2, #6
 8003c58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	4611      	mov	r1, r2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f004 f858 	bl	8007d1a <USB_HC_Halt>
 8003c6a:	e27b      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	4611      	mov	r1, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f003 fbc5 	bl	8007406 <USB_ReadChInterrupts>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d140      	bne.n	8003d08 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	212c      	movs	r1, #44	; 0x2c
 8003c8c:	fb01 f303 	mul.w	r3, r1, r3
 8003c90:	4413      	add	r3, r2
 8003c92:	335c      	adds	r3, #92	; 0x5c
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	212c      	movs	r1, #44	; 0x2c
 8003c9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3361      	adds	r3, #97	; 0x61
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	212c      	movs	r1, #44	; 0x2c
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	333d      	adds	r3, #61	; 0x3d
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d112      	bne.n	8003ce4 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	212c      	movs	r1, #44	; 0x2c
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	4413      	add	r3, r2
 8003cca:	333c      	adds	r3, #60	; 0x3c
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d108      	bne.n	8003ce4 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	212c      	movs	r1, #44	; 0x2c
 8003cd8:	fb01 f303 	mul.w	r3, r1, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	333d      	adds	r3, #61	; 0x3d
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f004 f813 	bl	8007d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d00:	461a      	mov	r2, r3
 8003d02:	2310      	movs	r3, #16
 8003d04:	6093      	str	r3, [r2, #8]
 8003d06:	e22d      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	4611      	mov	r1, r2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f003 fb77 	bl	8007406 <USB_ReadChInterrupts>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1e:	2b80      	cmp	r3, #128	; 0x80
 8003d20:	d164      	bne.n	8003dec <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d111      	bne.n	8003d4e <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	212c      	movs	r1, #44	; 0x2c
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	4413      	add	r3, r2
 8003d36:	3361      	adds	r3, #97	; 0x61
 8003d38:	2207      	movs	r2, #7
 8003d3a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f003 ffe7 	bl	8007d1a <USB_HC_Halt>
 8003d4c:	e044      	b.n	8003dd8 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	335c      	adds	r3, #92	; 0x5c
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	202c      	movs	r0, #44	; 0x2c
 8003d66:	fb00 f303 	mul.w	r3, r0, r3
 8003d6a:	440b      	add	r3, r1
 8003d6c:	335c      	adds	r3, #92	; 0x5c
 8003d6e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	212c      	movs	r1, #44	; 0x2c
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	335c      	adds	r3, #92	; 0x5c
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d920      	bls.n	8003dc6 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	212c      	movs	r1, #44	; 0x2c
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	335c      	adds	r3, #92	; 0x5c
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	212c      	movs	r1, #44	; 0x2c
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	3360      	adds	r3, #96	; 0x60
 8003da4:	2204      	movs	r2, #4
 8003da6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	b2d9      	uxtb	r1, r3
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	202c      	movs	r0, #44	; 0x2c
 8003db2:	fb00 f303 	mul.w	r3, r0, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	3360      	adds	r3, #96	; 0x60
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f008 fa70 	bl	800c2a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003dc4:	e008      	b.n	8003dd8 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	212c      	movs	r1, #44	; 0x2c
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3360      	adds	r3, #96	; 0x60
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de4:	461a      	mov	r2, r3
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	6093      	str	r3, [r2, #8]
 8003dea:	e1bb      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	4611      	mov	r1, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f003 fb05 	bl	8007406 <USB_ReadChInterrupts>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e06:	d11b      	bne.n	8003e40 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	212c      	movs	r1, #44	; 0x2c
 8003e0e:	fb01 f303 	mul.w	r3, r1, r3
 8003e12:	4413      	add	r3, r2
 8003e14:	3361      	adds	r3, #97	; 0x61
 8003e16:	2209      	movs	r2, #9
 8003e18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f003 ff78 	bl	8007d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e36:	461a      	mov	r2, r3
 8003e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e3c:	6093      	str	r3, [r2, #8]
 8003e3e:	e191      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f003 fadb 	bl	8007406 <USB_ReadChInterrupts>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	f040 8184 	bne.w	8004164 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	3361      	adds	r3, #97	; 0x61
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	f040 8087 	bne.w	8003f92 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	212c      	movs	r1, #44	; 0x2c
 8003e8a:	fb01 f303 	mul.w	r3, r1, r3
 8003e8e:	4413      	add	r3, r2
 8003e90:	3361      	adds	r3, #97	; 0x61
 8003e92:	2202      	movs	r2, #2
 8003e94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	212c      	movs	r1, #44	; 0x2c
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3360      	adds	r3, #96	; 0x60
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	212c      	movs	r1, #44	; 0x2c
 8003eae:	fb01 f303 	mul.w	r3, r1, r3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	333f      	adds	r3, #63	; 0x3f
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d00a      	beq.n	8003ed2 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	212c      	movs	r1, #44	; 0x2c
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	333f      	adds	r3, #63	; 0x3f
 8003eca:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	f040 8139 	bne.w	8004144 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d113      	bne.n	8003f02 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	212c      	movs	r1, #44	; 0x2c
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3355      	adds	r3, #85	; 0x55
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	f083 0301 	eor.w	r3, r3, #1
 8003eee:	b2d8      	uxtb	r0, r3
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	212c      	movs	r1, #44	; 0x2c
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	3355      	adds	r3, #85	; 0x55
 8003efe:	4602      	mov	r2, r0
 8003f00:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	f040 811c 	bne.w	8004144 <HCD_HC_OUT_IRQHandler+0x772>
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	212c      	movs	r1, #44	; 0x2c
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	334c      	adds	r3, #76	; 0x4c
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8111 	beq.w	8004144 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	212c      	movs	r1, #44	; 0x2c
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	334c      	adds	r3, #76	; 0x4c
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	202c      	movs	r0, #44	; 0x2c
 8003f38:	fb00 f202 	mul.w	r2, r0, r2
 8003f3c:	440a      	add	r2, r1
 8003f3e:	3240      	adds	r2, #64	; 0x40
 8003f40:	8812      	ldrh	r2, [r2, #0]
 8003f42:	4413      	add	r3, r2
 8003f44:	3b01      	subs	r3, #1
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	202c      	movs	r0, #44	; 0x2c
 8003f4c:	fb00 f202 	mul.w	r2, r0, r2
 8003f50:	440a      	add	r2, r1
 8003f52:	3240      	adds	r2, #64	; 0x40
 8003f54:	8812      	ldrh	r2, [r2, #0]
 8003f56:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80ee 	beq.w	8004144 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	212c      	movs	r1, #44	; 0x2c
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	3355      	adds	r3, #85	; 0x55
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	f083 0301 	eor.w	r3, r3, #1
 8003f7c:	b2d8      	uxtb	r0, r3
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	212c      	movs	r1, #44	; 0x2c
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	3355      	adds	r3, #85	; 0x55
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e0d8      	b.n	8004144 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	212c      	movs	r1, #44	; 0x2c
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3361      	adds	r3, #97	; 0x61
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d109      	bne.n	8003fba <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	212c      	movs	r1, #44	; 0x2c
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3361      	adds	r3, #97	; 0x61
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e0c4      	b.n	8004144 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	212c      	movs	r1, #44	; 0x2c
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3361      	adds	r3, #97	; 0x61
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d112      	bne.n	8003ff4 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	212c      	movs	r1, #44	; 0x2c
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	4413      	add	r3, r2
 8003fda:	3361      	adds	r3, #97	; 0x61
 8003fdc:	2202      	movs	r2, #2
 8003fde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	212c      	movs	r1, #44	; 0x2c
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	4413      	add	r3, r2
 8003fec:	3360      	adds	r3, #96	; 0x60
 8003fee:	2202      	movs	r2, #2
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	e0a7      	b.n	8004144 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	212c      	movs	r1, #44	; 0x2c
 8003ffa:	fb01 f303 	mul.w	r3, r1, r3
 8003ffe:	4413      	add	r3, r2
 8004000:	3361      	adds	r3, #97	; 0x61
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b05      	cmp	r3, #5
 8004006:	d112      	bne.n	800402e <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	212c      	movs	r1, #44	; 0x2c
 800400e:	fb01 f303 	mul.w	r3, r1, r3
 8004012:	4413      	add	r3, r2
 8004014:	3361      	adds	r3, #97	; 0x61
 8004016:	2202      	movs	r2, #2
 8004018:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	212c      	movs	r1, #44	; 0x2c
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	4413      	add	r3, r2
 8004026:	3360      	adds	r3, #96	; 0x60
 8004028:	2202      	movs	r2, #2
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e08a      	b.n	8004144 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	212c      	movs	r1, #44	; 0x2c
 8004034:	fb01 f303 	mul.w	r3, r1, r3
 8004038:	4413      	add	r3, r2
 800403a:	3361      	adds	r3, #97	; 0x61
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b06      	cmp	r3, #6
 8004040:	d112      	bne.n	8004068 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	212c      	movs	r1, #44	; 0x2c
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	3361      	adds	r3, #97	; 0x61
 8004050:	2202      	movs	r2, #2
 8004052:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	212c      	movs	r1, #44	; 0x2c
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	4413      	add	r3, r2
 8004060:	3360      	adds	r3, #96	; 0x60
 8004062:	2205      	movs	r2, #5
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	e06d      	b.n	8004144 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	212c      	movs	r1, #44	; 0x2c
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	4413      	add	r3, r2
 8004074:	3361      	adds	r3, #97	; 0x61
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b07      	cmp	r3, #7
 800407a:	d009      	beq.n	8004090 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	212c      	movs	r1, #44	; 0x2c
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	4413      	add	r3, r2
 8004088:	3361      	adds	r3, #97	; 0x61
 800408a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800408c:	2b09      	cmp	r3, #9
 800408e:	d168      	bne.n	8004162 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	212c      	movs	r1, #44	; 0x2c
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	4413      	add	r3, r2
 800409c:	3361      	adds	r3, #97	; 0x61
 800409e:	2202      	movs	r2, #2
 80040a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	212c      	movs	r1, #44	; 0x2c
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	335c      	adds	r3, #92	; 0x5c
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	202c      	movs	r0, #44	; 0x2c
 80040ba:	fb00 f303 	mul.w	r3, r0, r3
 80040be:	440b      	add	r3, r1
 80040c0:	335c      	adds	r3, #92	; 0x5c
 80040c2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	212c      	movs	r1, #44	; 0x2c
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	335c      	adds	r3, #92	; 0x5c
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d912      	bls.n	80040fe <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	212c      	movs	r1, #44	; 0x2c
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	335c      	adds	r3, #92	; 0x5c
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	212c      	movs	r1, #44	; 0x2c
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	4413      	add	r3, r2
 80040f6:	3360      	adds	r3, #96	; 0x60
 80040f8:	2204      	movs	r2, #4
 80040fa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040fc:	e021      	b.n	8004142 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	212c      	movs	r1, #44	; 0x2c
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	4413      	add	r3, r2
 800410a:	3360      	adds	r3, #96	; 0x60
 800410c:	2202      	movs	r2, #2
 800410e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	4413      	add	r3, r2
 8004118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004126:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800412e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413c:	461a      	mov	r2, r3
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004142:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	b2d9      	uxtb	r1, r3
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	202c      	movs	r0, #44	; 0x2c
 800414e:	fb00 f303 	mul.w	r3, r0, r3
 8004152:	4413      	add	r3, r2
 8004154:	3360      	adds	r3, #96	; 0x60
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f008 f8a2 	bl	800c2a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004160:	e000      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8004162:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b08a      	sub	sp, #40	; 0x28
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	0c5b      	lsrs	r3, r3, #17
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800419e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d004      	beq.n	80041b0 <HCD_RXQLVL_IRQHandler+0x46>
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b05      	cmp	r3, #5
 80041aa:	f000 80a9 	beq.w	8004300 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80041ae:	e0aa      	b.n	8004306 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 80a6 	beq.w	8004304 <HCD_RXQLVL_IRQHandler+0x19a>
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	212c      	movs	r1, #44	; 0x2c
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	4413      	add	r3, r2
 80041c4:	3344      	adds	r3, #68	; 0x44
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 809b 	beq.w	8004304 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	212c      	movs	r1, #44	; 0x2c
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	4413      	add	r3, r2
 80041da:	3350      	adds	r3, #80	; 0x50
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	441a      	add	r2, r3
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	202c      	movs	r0, #44	; 0x2c
 80041e8:	fb00 f303 	mul.w	r3, r0, r3
 80041ec:	440b      	add	r3, r1
 80041ee:	334c      	adds	r3, #76	; 0x4c
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d87a      	bhi.n	80042ec <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	212c      	movs	r1, #44	; 0x2c
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	4413      	add	r3, r2
 8004206:	3344      	adds	r3, #68	; 0x44
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	b292      	uxth	r2, r2
 800420e:	4619      	mov	r1, r3
 8004210:	f003 f88e 	bl	8007330 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	212c      	movs	r1, #44	; 0x2c
 800421a:	fb01 f303 	mul.w	r3, r1, r3
 800421e:	4413      	add	r3, r2
 8004220:	3344      	adds	r3, #68	; 0x44
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	441a      	add	r2, r3
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	202c      	movs	r0, #44	; 0x2c
 800422e:	fb00 f303 	mul.w	r3, r0, r3
 8004232:	440b      	add	r3, r1
 8004234:	3344      	adds	r3, #68	; 0x44
 8004236:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	212c      	movs	r1, #44	; 0x2c
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	4413      	add	r3, r2
 8004244:	3350      	adds	r3, #80	; 0x50
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	441a      	add	r2, r3
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	202c      	movs	r0, #44	; 0x2c
 8004252:	fb00 f303 	mul.w	r3, r0, r3
 8004256:	440b      	add	r3, r1
 8004258:	3350      	adds	r3, #80	; 0x50
 800425a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	4413      	add	r3, r2
 8004264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	0cdb      	lsrs	r3, r3, #19
 800426c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004270:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	212c      	movs	r1, #44	; 0x2c
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	4413      	add	r3, r2
 800427e:	3340      	adds	r3, #64	; 0x40
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4293      	cmp	r3, r2
 8004288:	d13c      	bne.n	8004304 <HCD_RXQLVL_IRQHandler+0x19a>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d039      	beq.n	8004304 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	4413      	add	r3, r2
 8004298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042a6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042ae:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042bc:	461a      	mov	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	212c      	movs	r1, #44	; 0x2c
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	4413      	add	r3, r2
 80042ce:	3354      	adds	r3, #84	; 0x54
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	f083 0301 	eor.w	r3, r3, #1
 80042d6:	b2d8      	uxtb	r0, r3
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	212c      	movs	r1, #44	; 0x2c
 80042de:	fb01 f303 	mul.w	r3, r1, r3
 80042e2:	4413      	add	r3, r2
 80042e4:	3354      	adds	r3, #84	; 0x54
 80042e6:	4602      	mov	r2, r0
 80042e8:	701a      	strb	r2, [r3, #0]
      break;
 80042ea:	e00b      	b.n	8004304 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	212c      	movs	r1, #44	; 0x2c
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	4413      	add	r3, r2
 80042f8:	3360      	adds	r3, #96	; 0x60
 80042fa:	2204      	movs	r2, #4
 80042fc:	701a      	strb	r2, [r3, #0]
      break;
 80042fe:	e001      	b.n	8004304 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004300:	bf00      	nop
 8004302:	e000      	b.n	8004306 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004304:	bf00      	nop
  }
}
 8004306:	bf00      	nop
 8004308:	3728      	adds	r7, #40	; 0x28
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b086      	sub	sp, #24
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800433a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b02      	cmp	r3, #2
 8004344:	d10b      	bne.n	800435e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b01      	cmp	r3, #1
 800434e:	d102      	bne.n	8004356 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f007 ff8b 	bl	800c26c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f043 0302 	orr.w	r3, r3, #2
 800435c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d132      	bne.n	80043ce <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f043 0308 	orr.w	r3, r3, #8
 800436e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b04      	cmp	r3, #4
 8004378:	d126      	bne.n	80043c8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d113      	bne.n	80043aa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004388:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800438c:	d106      	bne.n	800439c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2102      	movs	r1, #2
 8004394:	4618      	mov	r0, r3
 8004396:	f003 f985 	bl	80076a4 <USB_InitFSLSPClkSel>
 800439a:	e011      	b.n	80043c0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2101      	movs	r1, #1
 80043a2:	4618      	mov	r0, r3
 80043a4:	f003 f97e 	bl	80076a4 <USB_InitFSLSPClkSel>
 80043a8:	e00a      	b.n	80043c0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d106      	bne.n	80043c0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043b8:	461a      	mov	r2, r3
 80043ba:	f64e 2360 	movw	r3, #60000	; 0xea60
 80043be:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f007 ff7d 	bl	800c2c0 <HAL_HCD_PortEnabled_Callback>
 80043c6:	e002      	b.n	80043ce <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f007 ff87 	bl	800c2dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d103      	bne.n	80043e0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f043 0320 	orr.w	r3, r3, #32
 80043de:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043e6:	461a      	mov	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	6013      	str	r3, [r2, #0]
}
 80043ec:	bf00      	nop
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <HAL_PWR_PVD_IRQHandler+0x20>)
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004404:	f000 f808 	bl	8004418 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004408:	4b02      	ldr	r3, [pc, #8]	; (8004414 <HAL_PWR_PVD_IRQHandler+0x20>)
 800440a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800440e:	615a      	str	r2, [r3, #20]
  }
}
 8004410:	bf00      	nop
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40013c00 	.word	0x40013c00

08004418 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
	...

08004428 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004432:	4b23      	ldr	r3, [pc, #140]	; (80044c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	4a22      	ldr	r2, [pc, #136]	; (80044c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	6413      	str	r3, [r2, #64]	; 0x40
 800443e:	4b20      	ldr	r3, [pc, #128]	; (80044c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800444a:	4b1e      	ldr	r3, [pc, #120]	; (80044c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004454:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004456:	f7fd fd05 	bl	8001e64 <HAL_GetTick>
 800445a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800445c:	e009      	b.n	8004472 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800445e:	f7fd fd01 	bl	8001e64 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800446c:	d901      	bls.n	8004472 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e022      	b.n	80044b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004472:	4b14      	ldr	r3, [pc, #80]	; (80044c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447e:	d1ee      	bne.n	800445e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a0f      	ldr	r2, [pc, #60]	; (80044c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800448a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800448c:	f7fd fcea 	bl	8001e64 <HAL_GetTick>
 8004490:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004492:	e009      	b.n	80044a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004494:	f7fd fce6 	bl	8001e64 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a2:	d901      	bls.n	80044a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e007      	b.n	80044b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044a8:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b4:	d1ee      	bne.n	8004494 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40007000 	.word	0x40007000

080044c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80044d0:	2300      	movs	r3, #0
 80044d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e293      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8089 	beq.w	80045fe <HAL_RCC_OscConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044ec:	4b97      	ldr	r3, [pc, #604]	; (800474c <HAL_RCC_OscConfig+0x284>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d00c      	beq.n	8004512 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f8:	4b94      	ldr	r3, [pc, #592]	; (800474c <HAL_RCC_OscConfig+0x284>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b08      	cmp	r3, #8
 8004502:	d112      	bne.n	800452a <HAL_RCC_OscConfig+0x62>
 8004504:	4b91      	ldr	r3, [pc, #580]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004510:	d10b      	bne.n	800452a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004512:	4b8e      	ldr	r3, [pc, #568]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d06e      	beq.n	80045fc <HAL_RCC_OscConfig+0x134>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d16a      	bne.n	80045fc <HAL_RCC_OscConfig+0x134>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e26d      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x7a>
 8004534:	4b85      	ldr	r3, [pc, #532]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a84      	ldr	r2, [pc, #528]	; (800474c <HAL_RCC_OscConfig+0x284>)
 800453a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	e02e      	b.n	80045a0 <HAL_RCC_OscConfig+0xd8>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10c      	bne.n	8004564 <HAL_RCC_OscConfig+0x9c>
 800454a:	4b80      	ldr	r3, [pc, #512]	; (800474c <HAL_RCC_OscConfig+0x284>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a7f      	ldr	r2, [pc, #508]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	4b7d      	ldr	r3, [pc, #500]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a7c      	ldr	r2, [pc, #496]	; (800474c <HAL_RCC_OscConfig+0x284>)
 800455c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	e01d      	b.n	80045a0 <HAL_RCC_OscConfig+0xd8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0xc0>
 800456e:	4b77      	ldr	r3, [pc, #476]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a76      	ldr	r2, [pc, #472]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4b74      	ldr	r3, [pc, #464]	; (800474c <HAL_RCC_OscConfig+0x284>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a73      	ldr	r2, [pc, #460]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0xd8>
 8004588:	4b70      	ldr	r3, [pc, #448]	; (800474c <HAL_RCC_OscConfig+0x284>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a6f      	ldr	r2, [pc, #444]	; (800474c <HAL_RCC_OscConfig+0x284>)
 800458e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	4b6d      	ldr	r3, [pc, #436]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a6c      	ldr	r2, [pc, #432]	; (800474c <HAL_RCC_OscConfig+0x284>)
 800459a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800459e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d014      	beq.n	80045d2 <HAL_RCC_OscConfig+0x10a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd fc5c 	bl	8001e64 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	e009      	b.n	80045c4 <HAL_RCC_OscConfig+0xfc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fd fc58 	bl	8001e64 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0xfc>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e220      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c4:	4b61      	ldr	r3, [pc, #388]	; (800474c <HAL_RCC_OscConfig+0x284>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ef      	beq.n	80045b0 <HAL_RCC_OscConfig+0xe8>
 80045d0:	e015      	b.n	80045fe <HAL_RCC_OscConfig+0x136>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d2:	f7fd fc47 	bl	8001e64 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d8:	e009      	b.n	80045ee <HAL_RCC_OscConfig+0x126>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045da:	f7fd fc43 	bl	8001e64 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e20b      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ee:	4b57      	ldr	r3, [pc, #348]	; (800474c <HAL_RCC_OscConfig+0x284>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1ef      	bne.n	80045da <HAL_RCC_OscConfig+0x112>
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0x136>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d069      	beq.n	80046de <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800460a:	4b50      	ldr	r3, [pc, #320]	; (800474c <HAL_RCC_OscConfig+0x284>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <HAL_RCC_OscConfig+0x166>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004616:	4b4d      	ldr	r3, [pc, #308]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b08      	cmp	r3, #8
 8004620:	d11c      	bne.n	800465c <HAL_RCC_OscConfig+0x194>
 8004622:	4b4a      	ldr	r3, [pc, #296]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d116      	bne.n	800465c <HAL_RCC_OscConfig+0x194>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462e:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_RCC_OscConfig+0x17e>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d001      	beq.n	8004646 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e1df      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004646:	4b41      	ldr	r3, [pc, #260]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	493d      	ldr	r1, [pc, #244]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465a:	e040      	b.n	80046de <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d023      	beq.n	80046ac <HAL_RCC_OscConfig+0x1e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004664:	4b39      	ldr	r3, [pc, #228]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a38      	ldr	r2, [pc, #224]	; (800474c <HAL_RCC_OscConfig+0x284>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fd fbf8 	bl	8001e64 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x1c2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004678:	f7fd fbf4 	bl	8001e64 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e1bd      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468a:	4b30      	ldr	r3, [pc, #192]	; (800474c <HAL_RCC_OscConfig+0x284>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004696:	4b2d      	ldr	r3, [pc, #180]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4929      	ldr	r1, [pc, #164]	; (800474c <HAL_RCC_OscConfig+0x284>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]
 80046aa:	e018      	b.n	80046de <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <HAL_RCC_OscConfig+0x284>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a26      	ldr	r2, [pc, #152]	; (800474c <HAL_RCC_OscConfig+0x284>)
 80046b2:	f023 0301 	bic.w	r3, r3, #1
 80046b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fd fbd4 	bl	8001e64 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x20a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c0:	f7fd fbd0 	bl	8001e64 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e199      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	4b1e      	ldr	r3, [pc, #120]	; (800474c <HAL_RCC_OscConfig+0x284>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d038      	beq.n	800475c <HAL_RCC_OscConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d019      	beq.n	8004726 <HAL_RCC_OscConfig+0x25e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f2:	4b16      	ldr	r3, [pc, #88]	; (800474c <HAL_RCC_OscConfig+0x284>)
 80046f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f6:	4a15      	ldr	r2, [pc, #84]	; (800474c <HAL_RCC_OscConfig+0x284>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fe:	f7fd fbb1 	bl	8001e64 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x250>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004706:	f7fd fbad 	bl	8001e64 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x250>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e176      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <HAL_RCC_OscConfig+0x284>)
 800471a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCC_OscConfig+0x23e>
 8004724:	e01a      	b.n	800475c <HAL_RCC_OscConfig+0x294>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCC_OscConfig+0x284>)
 8004728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472a:	4a08      	ldr	r2, [pc, #32]	; (800474c <HAL_RCC_OscConfig+0x284>)
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004732:	f7fd fb97 	bl	8001e64 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x288>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800473a:	f7fd fb93 	bl	8001e64 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d903      	bls.n	8004750 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e15c      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>
 800474c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004750:	4b91      	ldr	r3, [pc, #580]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 8004752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1ee      	bne.n	800473a <HAL_RCC_OscConfig+0x272>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80a4 	beq.w	80048b2 <HAL_RCC_OscConfig+0x3ea>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800476a:	4b8b      	ldr	r3, [pc, #556]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10d      	bne.n	8004792 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004776:	4b88      	ldr	r3, [pc, #544]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	4a87      	ldr	r2, [pc, #540]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 800477c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004780:	6413      	str	r3, [r2, #64]	; 0x40
 8004782:	4b85      	ldr	r3, [pc, #532]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478a:	60bb      	str	r3, [r7, #8]
 800478c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478e:	2301      	movs	r3, #1
 8004790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004792:	4b82      	ldr	r3, [pc, #520]	; (800499c <HAL_RCC_OscConfig+0x4d4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d118      	bne.n	80047d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800479e:	4b7f      	ldr	r3, [pc, #508]	; (800499c <HAL_RCC_OscConfig+0x4d4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a7e      	ldr	r2, [pc, #504]	; (800499c <HAL_RCC_OscConfig+0x4d4>)
 80047a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047aa:	f7fd fb5b 	bl	8001e64 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b2:	f7fd fb57 	bl	8001e64 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b64      	cmp	r3, #100	; 0x64
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e120      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c4:	4b75      	ldr	r3, [pc, #468]	; (800499c <HAL_RCC_OscConfig+0x4d4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d106      	bne.n	80047e6 <HAL_RCC_OscConfig+0x31e>
 80047d8:	4b6f      	ldr	r3, [pc, #444]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	4a6e      	ldr	r2, [pc, #440]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	6713      	str	r3, [r2, #112]	; 0x70
 80047e4:	e02d      	b.n	8004842 <HAL_RCC_OscConfig+0x37a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10c      	bne.n	8004808 <HAL_RCC_OscConfig+0x340>
 80047ee:	4b6a      	ldr	r3, [pc, #424]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	4a69      	ldr	r2, [pc, #420]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	6713      	str	r3, [r2, #112]	; 0x70
 80047fa:	4b67      	ldr	r3, [pc, #412]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	4a66      	ldr	r2, [pc, #408]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 8004800:	f023 0304 	bic.w	r3, r3, #4
 8004804:	6713      	str	r3, [r2, #112]	; 0x70
 8004806:	e01c      	b.n	8004842 <HAL_RCC_OscConfig+0x37a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b05      	cmp	r3, #5
 800480e:	d10c      	bne.n	800482a <HAL_RCC_OscConfig+0x362>
 8004810:	4b61      	ldr	r3, [pc, #388]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004814:	4a60      	ldr	r2, [pc, #384]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 8004816:	f043 0304 	orr.w	r3, r3, #4
 800481a:	6713      	str	r3, [r2, #112]	; 0x70
 800481c:	4b5e      	ldr	r3, [pc, #376]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	4a5d      	ldr	r2, [pc, #372]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	6713      	str	r3, [r2, #112]	; 0x70
 8004828:	e00b      	b.n	8004842 <HAL_RCC_OscConfig+0x37a>
 800482a:	4b5b      	ldr	r3, [pc, #364]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	4a5a      	ldr	r2, [pc, #360]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	6713      	str	r3, [r2, #112]	; 0x70
 8004836:	4b58      	ldr	r3, [pc, #352]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	4a57      	ldr	r2, [pc, #348]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 800483c:	f023 0304 	bic.w	r3, r3, #4
 8004840:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d015      	beq.n	8004876 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484a:	f7fd fb0b 	bl	8001e64 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004850:	e00a      	b.n	8004868 <HAL_RCC_OscConfig+0x3a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004852:	f7fd fb07 	bl	8001e64 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x3a0>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e0ce      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004868:	4b4b      	ldr	r3, [pc, #300]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0ee      	beq.n	8004852 <HAL_RCC_OscConfig+0x38a>
 8004874:	e014      	b.n	80048a0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004876:	f7fd faf5 	bl	8001e64 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487c:	e00a      	b.n	8004894 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487e:	f7fd faf1 	bl	8001e64 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	f241 3288 	movw	r2, #5000	; 0x1388
 800488c:	4293      	cmp	r3, r2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e0b8      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004894:	4b40      	ldr	r3, [pc, #256]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1ee      	bne.n	800487e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d105      	bne.n	80048b2 <HAL_RCC_OscConfig+0x3ea>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a6:	4b3c      	ldr	r3, [pc, #240]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	4a3b      	ldr	r2, [pc, #236]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 80048ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80a4 	beq.w	8004a04 <HAL_RCC_OscConfig+0x53c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048bc:	4b36      	ldr	r3, [pc, #216]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 030c 	and.w	r3, r3, #12
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d06b      	beq.n	80049a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d149      	bne.n	8004964 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d0:	4b31      	ldr	r3, [pc, #196]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a30      	ldr	r2, [pc, #192]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 80048d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7fd fac2 	bl	8001e64 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x42e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fd fabe 	bl	8001e64 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e087      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	4b28      	ldr	r3, [pc, #160]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x41c>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69da      	ldr	r2, [r3, #28]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	019b      	lsls	r3, r3, #6
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	085b      	lsrs	r3, r3, #1
 800491a:	3b01      	subs	r3, #1
 800491c:	041b      	lsls	r3, r3, #16
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	4313      	orrs	r3, r2
 8004928:	4a1b      	ldr	r2, [pc, #108]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 800492a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800492e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004930:	4b19      	ldr	r3, [pc, #100]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a18      	ldr	r2, [pc, #96]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 8004936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800493a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fd fa92 	bl	8001e64 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004944:	f7fd fa8e 	bl	8001e64 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e057      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0f0      	beq.n	8004944 <HAL_RCC_OscConfig+0x47c>
 8004962:	e04f      	b.n	8004a04 <HAL_RCC_OscConfig+0x53c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a0b      	ldr	r2, [pc, #44]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 800496a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800496e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fd fa78 	bl	8001e64 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004978:	f7fd fa74 	bl	8001e64 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e03d      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498a:	4b03      	ldr	r3, [pc, #12]	; (8004998 <HAL_RCC_OscConfig+0x4d0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0x4b0>
 8004996:	e035      	b.n	8004a04 <HAL_RCC_OscConfig+0x53c>
 8004998:	40023800 	.word	0x40023800
 800499c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80049a0:	4b1b      	ldr	r3, [pc, #108]	; (8004a10 <HAL_RCC_OscConfig+0x548>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d028      	beq.n	8004a00 <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d121      	bne.n	8004a00 <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d11a      	bne.n	8004a00 <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049d0:	4013      	ands	r3, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049d8:	4293      	cmp	r3, r2
 80049da:	d111      	bne.n	8004a00 <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	3b01      	subs	r3, #1
 80049ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d107      	bne.n	8004a00 <HAL_RCC_OscConfig+0x538>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_OscConfig+0x53c>
#endif
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <HAL_RCC_OscConfig+0x53e>
      }
    }
  }
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023800 	.word	0x40023800

08004a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0d0      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b6a      	ldr	r3, [pc, #424]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d910      	bls.n	8004a5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b67      	ldr	r3, [pc, #412]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f023 020f 	bic.w	r2, r3, #15
 8004a42:	4965      	ldr	r1, [pc, #404]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	4b63      	ldr	r3, [pc, #396]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0b8      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d020      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a74:	4b59      	ldr	r3, [pc, #356]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4a58      	ldr	r2, [pc, #352]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a8c:	4b53      	ldr	r3, [pc, #332]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4a52      	ldr	r2, [pc, #328]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a98:	4b50      	ldr	r3, [pc, #320]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	494d      	ldr	r1, [pc, #308]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d040      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	4b47      	ldr	r3, [pc, #284]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d115      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e07f      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad6:	4b41      	ldr	r3, [pc, #260]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e073      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae6:	4b3d      	ldr	r3, [pc, #244]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e06b      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af6:	4b39      	ldr	r3, [pc, #228]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4936      	ldr	r1, [pc, #216]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b08:	f7fd f9ac 	bl	8001e64 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b10:	f7fd f9a8 	bl	8001e64 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e053      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	4b2d      	ldr	r3, [pc, #180]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 020c 	and.w	r2, r3, #12
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1eb      	bne.n	8004b10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b38:	4b27      	ldr	r3, [pc, #156]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d210      	bcs.n	8004b68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 020f 	bic.w	r2, r3, #15
 8004b4e:	4922      	ldr	r1, [pc, #136]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b56:	4b20      	ldr	r3, [pc, #128]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e032      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b74:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4916      	ldr	r1, [pc, #88]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b92:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	490e      	ldr	r1, [pc, #56]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ba6:	f000 f831 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8004baa:	4602      	mov	r2, r0
 8004bac:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	490a      	ldr	r1, [pc, #40]	; (8004be0 <HAL_RCC_ClockConfig+0x1cc>)
 8004bb8:	5ccb      	ldrb	r3, [r1, r3]
 8004bba:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbe:	4a09      	ldr	r2, [pc, #36]	; (8004be4 <HAL_RCC_ClockConfig+0x1d0>)
 8004bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bc2:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <HAL_RCC_ClockConfig+0x1d4>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fc fca8 	bl	800151c <HAL_InitTick>

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40023c00 	.word	0x40023c00
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	0800cac4 	.word	0x0800cac4
 8004be4:	20000004 	.word	0x20000004
 8004be8:	20000008 	.word	0x20000008

08004bec <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8004bf0:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <HAL_RCC_EnableCSS+0x1c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <HAL_RCC_EnableCSS+0x1c>)
 8004bf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bfa:	6013      	str	r3, [r2, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40023800 	.word	0x40023800

08004c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c10:	b090      	sub	sp, #64	; 0x40
 8004c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34
 8004c18:	2300      	movs	r3, #0
 8004c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c24:	4b59      	ldr	r3, [pc, #356]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 030c 	and.w	r3, r3, #12
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d00d      	beq.n	8004c4c <HAL_RCC_GetSysClockFreq+0x40>
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	f200 80a1 	bhi.w	8004d78 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x34>
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d003      	beq.n	8004c46 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c3e:	e09b      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c40:	4b53      	ldr	r3, [pc, #332]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c44:	e09b      	b.n	8004d7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c46:	4b53      	ldr	r3, [pc, #332]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c4a:	e098      	b.n	8004d7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c4c:	4b4f      	ldr	r3, [pc, #316]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c54:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c56:	4b4d      	ldr	r3, [pc, #308]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d028      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c62:	4b4a      	ldr	r3, [pc, #296]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	099b      	lsrs	r3, r3, #6
 8004c68:	2200      	movs	r2, #0
 8004c6a:	623b      	str	r3, [r7, #32]
 8004c6c:	627a      	str	r2, [r7, #36]	; 0x24
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c74:	2100      	movs	r1, #0
 8004c76:	4b47      	ldr	r3, [pc, #284]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c78:	fb03 f201 	mul.w	r2, r3, r1
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	fb00 f303 	mul.w	r3, r0, r3
 8004c82:	4413      	add	r3, r2
 8004c84:	4a43      	ldr	r2, [pc, #268]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c86:	fba0 1202 	umull	r1, r2, r0, r2
 8004c8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c8c:	460a      	mov	r2, r1
 8004c8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c92:	4413      	add	r3, r2
 8004c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c98:	2200      	movs	r2, #0
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	61fa      	str	r2, [r7, #28]
 8004c9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ca2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ca6:	f7fb fabb 	bl	8000220 <__aeabi_uldivmod>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4613      	mov	r3, r2
 8004cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb2:	e053      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb4:	4b35      	ldr	r3, [pc, #212]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	099b      	lsrs	r3, r3, #6
 8004cba:	2200      	movs	r2, #0
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	617a      	str	r2, [r7, #20]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cc6:	f04f 0b00 	mov.w	fp, #0
 8004cca:	4652      	mov	r2, sl
 8004ccc:	465b      	mov	r3, fp
 8004cce:	f04f 0000 	mov.w	r0, #0
 8004cd2:	f04f 0100 	mov.w	r1, #0
 8004cd6:	0159      	lsls	r1, r3, #5
 8004cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cdc:	0150      	lsls	r0, r2, #5
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	ebb2 080a 	subs.w	r8, r2, sl
 8004ce6:	eb63 090b 	sbc.w	r9, r3, fp
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cf6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cfa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cfe:	ebb2 0408 	subs.w	r4, r2, r8
 8004d02:	eb63 0509 	sbc.w	r5, r3, r9
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	00eb      	lsls	r3, r5, #3
 8004d10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d14:	00e2      	lsls	r2, r4, #3
 8004d16:	4614      	mov	r4, r2
 8004d18:	461d      	mov	r5, r3
 8004d1a:	eb14 030a 	adds.w	r3, r4, sl
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	eb45 030b 	adc.w	r3, r5, fp
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d32:	4629      	mov	r1, r5
 8004d34:	028b      	lsls	r3, r1, #10
 8004d36:	4621      	mov	r1, r4
 8004d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	028a      	lsls	r2, r1, #10
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d46:	2200      	movs	r2, #0
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	60fa      	str	r2, [r7, #12]
 8004d4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d50:	f7fb fa66 	bl	8000220 <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4613      	mov	r3, r2
 8004d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	0c1b      	lsrs	r3, r3, #16
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	3301      	adds	r3, #1
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004d6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d76:	e002      	b.n	8004d7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d78:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d7a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3740      	adds	r7, #64	; 0x40
 8004d84:	46bd      	mov	sp, r7
 8004d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	00f42400 	.word	0x00f42400
 8004d94:	017d7840 	.word	0x017d7840

08004d98 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d9c:	4b03      	ldr	r3, [pc, #12]	; (8004dac <HAL_RCC_GetHCLKFreq+0x14>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000004 	.word	0x20000004

08004db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004db4:	f7ff fff0 	bl	8004d98 <HAL_RCC_GetHCLKFreq>
 8004db8:	4602      	mov	r2, r0
 8004dba:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	0a9b      	lsrs	r3, r3, #10
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	4903      	ldr	r1, [pc, #12]	; (8004dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dc6:	5ccb      	ldrb	r3, [r1, r3]
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	0800cad4 	.word	0x0800cad4

08004dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ddc:	f7ff ffdc 	bl	8004d98 <HAL_RCC_GetHCLKFreq>
 8004de0:	4602      	mov	r2, r0
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	0b5b      	lsrs	r3, r3, #13
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	4903      	ldr	r1, [pc, #12]	; (8004dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dee:	5ccb      	ldrb	r3, [r1, r3]
 8004df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	0800cad4 	.word	0x0800cad4

08004e00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	220f      	movs	r2, #15
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e10:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <HAL_RCC_GetClockConfig+0x5c>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 0203 	and.w	r2, r3, #3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <HAL_RCC_GetClockConfig+0x5c>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e28:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <HAL_RCC_GetClockConfig+0x5c>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004e34:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <HAL_RCC_GetClockConfig+0x5c>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	08db      	lsrs	r3, r3, #3
 8004e3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e42:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <HAL_RCC_GetClockConfig+0x60>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 020f 	and.w	r2, r3, #15
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	601a      	str	r2, [r3, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	40023c00 	.word	0x40023c00

08004e64 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e70:	2b80      	cmp	r3, #128	; 0x80
 8004e72:	d104      	bne.n	8004e7e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004e74:	f000 f80a 	bl	8004e8c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004e78:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004e7a:	2280      	movs	r2, #128	; 0x80
 8004e7c:	701a      	strb	r2, [r3, #0]
  }
}
 8004e7e:	bf00      	nop
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40023800 	.word	0x40023800
 8004e88:	4002380e 	.word	0x4002380e

08004e8c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d012      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ec0:	4b65      	ldr	r3, [pc, #404]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	4a64      	ldr	r2, [pc, #400]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ec6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004eca:	6093      	str	r3, [r2, #8]
 8004ecc:	4b62      	ldr	r3, [pc, #392]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	4960      	ldr	r1, [pc, #384]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d017      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ef2:	4b59      	ldr	r3, [pc, #356]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ef8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f00:	4955      	ldr	r1, [pc, #340]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f10:	d101      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8004f12:	2301      	movs	r3, #1
 8004f14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d017      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f2e:	4b4a      	ldr	r3, [pc, #296]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	4946      	ldr	r1, [pc, #280]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f4c:	d101      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0320 	and.w	r3, r3, #32
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 808b 	beq.w	8005082 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f6c:	4b3a      	ldr	r3, [pc, #232]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	4a39      	ldr	r2, [pc, #228]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f76:	6413      	str	r3, [r2, #64]	; 0x40
 8004f78:	4b37      	ldr	r3, [pc, #220]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f84:	4b35      	ldr	r3, [pc, #212]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a34      	ldr	r2, [pc, #208]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f90:	f7fc ff68 	bl	8001e64 <HAL_GetTick>
 8004f94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f98:	f7fc ff64 	bl	8001e64 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b64      	cmp	r3, #100	; 0x64
 8004fa4:	d901      	bls.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e2bc      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004faa:	4b2c      	ldr	r3, [pc, #176]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fb6:	4b28      	ldr	r3, [pc, #160]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fbe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d035      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d02e      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fd4:	4b20      	ldr	r3, [pc, #128]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fdc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fde:	4b1e      	ldr	r3, [pc, #120]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	4a1d      	ldr	r2, [pc, #116]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fea:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	4a1a      	ldr	r2, [pc, #104]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ff6:	4a18      	ldr	r2, [pc, #96]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ffc:	4b16      	ldr	r3, [pc, #88]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b01      	cmp	r3, #1
 8005006:	d114      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fc ff2c 	bl	8001e64 <HAL_GetTick>
 800500c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500e:	e00a      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005010:	f7fc ff28 	bl	8001e64 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	f241 3288 	movw	r2, #5000	; 0x1388
 800501e:	4293      	cmp	r3, r2
 8005020:	d901      	bls.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e27e      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005026:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0ee      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800503e:	d111      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800504c:	4b04      	ldr	r3, [pc, #16]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800504e:	400b      	ands	r3, r1
 8005050:	4901      	ldr	r1, [pc, #4]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]
 8005056:	e00b      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005058:	40023800 	.word	0x40023800
 800505c:	40007000 	.word	0x40007000
 8005060:	0ffffcff 	.word	0x0ffffcff
 8005064:	4ba4      	ldr	r3, [pc, #656]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	4aa3      	ldr	r2, [pc, #652]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800506a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800506e:	6093      	str	r3, [r2, #8]
 8005070:	4ba1      	ldr	r3, [pc, #644]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005072:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800507c:	499e      	ldr	r1, [pc, #632]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800507e:	4313      	orrs	r3, r2
 8005080:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	2b00      	cmp	r3, #0
 800508c:	d010      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800508e:	4b9a      	ldr	r3, [pc, #616]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005094:	4a98      	ldr	r2, [pc, #608]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800509a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800509e:	4b96      	ldr	r3, [pc, #600]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	4993      	ldr	r1, [pc, #588]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050bc:	4b8e      	ldr	r3, [pc, #568]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ca:	498b      	ldr	r1, [pc, #556]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050de:	4b86      	ldr	r3, [pc, #536]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ec:	4982      	ldr	r1, [pc, #520]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005100:	4b7d      	ldr	r3, [pc, #500]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005106:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800510e:	497a      	ldr	r1, [pc, #488]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005122:	4b75      	ldr	r3, [pc, #468]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005128:	f023 0203 	bic.w	r2, r3, #3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005130:	4971      	ldr	r1, [pc, #452]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005144:	4b6c      	ldr	r3, [pc, #432]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514a:	f023 020c 	bic.w	r2, r3, #12
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	4969      	ldr	r1, [pc, #420]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005166:	4b64      	ldr	r3, [pc, #400]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005174:	4960      	ldr	r1, [pc, #384]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005188:	4b5b      	ldr	r3, [pc, #364]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005196:	4958      	ldr	r1, [pc, #352]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051aa:	4b53      	ldr	r3, [pc, #332]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b8:	494f      	ldr	r1, [pc, #316]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80051cc:	4b4a      	ldr	r3, [pc, #296]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051da:	4947      	ldr	r1, [pc, #284]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80051ee:	4b42      	ldr	r3, [pc, #264]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fc:	493e      	ldr	r1, [pc, #248]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005210:	4b39      	ldr	r3, [pc, #228]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005216:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521e:	4936      	ldr	r1, [pc, #216]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d011      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005232:	4b31      	ldr	r3, [pc, #196]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005238:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005240:	492d      	ldr	r1, [pc, #180]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005250:	d101      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8005252:	2301      	movs	r3, #1
 8005254:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005262:	4b25      	ldr	r3, [pc, #148]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005268:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005270:	4921      	ldr	r1, [pc, #132]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005284:	4b1c      	ldr	r3, [pc, #112]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005292:	4919      	ldr	r1, [pc, #100]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80052a6:	4b14      	ldr	r3, [pc, #80]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80052a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ac:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b4:	4910      	ldr	r1, [pc, #64]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d006      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 809d 	beq.w	800540a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052d0:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a08      	ldr	r2, [pc, #32]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80052d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052dc:	f7fc fdc2 	bl	8001e64 <HAL_GetTick>
 80052e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052e2:	e00b      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052e4:	f7fc fdbe 	bl	8001e64 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b64      	cmp	r3, #100	; 0x64
 80052f0:	d904      	bls.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e116      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80052f6:	bf00      	nop
 80052f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052fc:	4b8b      	ldr	r3, [pc, #556]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1ed      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d017      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	2b00      	cmp	r3, #0
 800531a:	d113      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800531c:	4b83      	ldr	r3, [pc, #524]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800531e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005322:	0e1b      	lsrs	r3, r3, #24
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	019a      	lsls	r2, r3, #6
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	061b      	lsls	r3, r3, #24
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	071b      	lsls	r3, r3, #28
 800533c:	497b      	ldr	r1, [pc, #492]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005358:	d00a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005362:	2b00      	cmp	r3, #0
 8005364:	d024      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800536e:	d11f      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005370:	4b6e      	ldr	r3, [pc, #440]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005376:	0f1b      	lsrs	r3, r3, #28
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	019a      	lsls	r2, r3, #6
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	061b      	lsls	r3, r3, #24
 800538a:	431a      	orrs	r2, r3
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	071b      	lsls	r3, r3, #28
 8005390:	4966      	ldr	r1, [pc, #408]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005398:	4b64      	ldr	r3, [pc, #400]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800539a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800539e:	f023 021f 	bic.w	r2, r3, #31
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	4960      	ldr	r1, [pc, #384]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00d      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	019a      	lsls	r2, r3, #6
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	061b      	lsls	r3, r3, #24
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	071b      	lsls	r3, r3, #28
 80053d0:	4956      	ldr	r1, [pc, #344]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053d8:	4b54      	ldr	r3, [pc, #336]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a53      	ldr	r2, [pc, #332]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80053de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e4:	f7fc fd3e 	bl	8001e64 <HAL_GetTick>
 80053e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053ec:	f7fc fd3a 	bl	8001e64 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b64      	cmp	r3, #100	; 0x64
 80053f8:	d901      	bls.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e092      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053fe:	4b4b      	ldr	r3, [pc, #300]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2b01      	cmp	r3, #1
 800540e:	f040 8088 	bne.w	8005522 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005412:	4b46      	ldr	r3, [pc, #280]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a45      	ldr	r2, [pc, #276]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800541c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800541e:	f7fc fd21 	bl	8001e64 <HAL_GetTick>
 8005422:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005424:	e008      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005426:	f7fc fd1d 	bl	8001e64 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b64      	cmp	r3, #100	; 0x64
 8005432:	d901      	bls.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e075      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005438:	4b3c      	ldr	r3, [pc, #240]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005444:	d0ef      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005456:	2b00      	cmp	r3, #0
 8005458:	d009      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005462:	2b00      	cmp	r3, #0
 8005464:	d024      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	2b00      	cmp	r3, #0
 800546c:	d120      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800546e:	4b2f      	ldr	r3, [pc, #188]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005474:	0c1b      	lsrs	r3, r3, #16
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	019a      	lsls	r2, r3, #6
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	041b      	lsls	r3, r3, #16
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	061b      	lsls	r3, r3, #24
 800548e:	4927      	ldr	r1, [pc, #156]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005496:	4b25      	ldr	r3, [pc, #148]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800549c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	4920      	ldr	r1, [pc, #128]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d018      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x652>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054c4:	d113      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054c6:	4b19      	ldr	r3, [pc, #100]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054cc:	0e1b      	lsrs	r3, r3, #24
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	019a      	lsls	r2, r3, #6
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	041b      	lsls	r3, r3, #16
 80054e0:	431a      	orrs	r2, r3
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	061b      	lsls	r3, r3, #24
 80054e6:	4911      	ldr	r1, [pc, #68]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054ee:	4b0f      	ldr	r3, [pc, #60]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a0e      	ldr	r2, [pc, #56]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80054f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054fa:	f7fc fcb3 	bl	8001e64 <HAL_GetTick>
 80054fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005500:	e008      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005502:	f7fc fcaf 	bl	8001e64 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b64      	cmp	r3, #100	; 0x64
 800550e:	d901      	bls.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e007      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005514:	4b05      	ldr	r3, [pc, #20]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800551c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005520:	d1ef      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3720      	adds	r7, #32
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40023800 	.word	0x40023800

08005530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e049      	b.n	80055d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f841 	bl	80055de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	4619      	mov	r1, r3
 800556e:	4610      	mov	r0, r2
 8005570:	f000 fa00 	bl	8005974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
	...

080055f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d001      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e054      	b.n	80056b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a26      	ldr	r2, [pc, #152]	; (80056c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d022      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x80>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005636:	d01d      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x80>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a22      	ldr	r2, [pc, #136]	; (80056c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d018      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x80>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a21      	ldr	r2, [pc, #132]	; (80056cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d013      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x80>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a1f      	ldr	r2, [pc, #124]	; (80056d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00e      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x80>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1e      	ldr	r2, [pc, #120]	; (80056d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d009      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x80>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1c      	ldr	r2, [pc, #112]	; (80056d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d004      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x80>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a1b      	ldr	r2, [pc, #108]	; (80056dc <HAL_TIM_Base_Start_IT+0xe8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d115      	bne.n	80056a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	4b19      	ldr	r3, [pc, #100]	; (80056e0 <HAL_TIM_Base_Start_IT+0xec>)
 800567c:	4013      	ands	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b06      	cmp	r3, #6
 8005684:	d015      	beq.n	80056b2 <HAL_TIM_Base_Start_IT+0xbe>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568c:	d011      	beq.n	80056b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0201 	orr.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569e:	e008      	b.n	80056b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	e000      	b.n	80056b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40000400 	.word	0x40000400
 80056cc:	40000800 	.word	0x40000800
 80056d0:	40000c00 	.word	0x40000c00
 80056d4:	40010400 	.word	0x40010400
 80056d8:	40014000 	.word	0x40014000
 80056dc:	40001800 	.word	0x40001800
 80056e0:	00010007 	.word	0x00010007

080056e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d122      	bne.n	8005740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b02      	cmp	r3, #2
 8005706:	d11b      	bne.n	8005740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0202 	mvn.w	r2, #2
 8005710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f905 	bl	8005936 <HAL_TIM_IC_CaptureCallback>
 800572c:	e005      	b.n	800573a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f8f7 	bl	8005922 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f908 	bl	800594a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b04      	cmp	r3, #4
 800574c:	d122      	bne.n	8005794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b04      	cmp	r3, #4
 800575a:	d11b      	bne.n	8005794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f06f 0204 	mvn.w	r2, #4
 8005764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2202      	movs	r2, #2
 800576a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f8db 	bl	8005936 <HAL_TIM_IC_CaptureCallback>
 8005780:	e005      	b.n	800578e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f8cd 	bl	8005922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f8de 	bl	800594a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d122      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d11b      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0208 	mvn.w	r2, #8
 80057b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2204      	movs	r2, #4
 80057be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f8b1 	bl	8005936 <HAL_TIM_IC_CaptureCallback>
 80057d4:	e005      	b.n	80057e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f8a3 	bl	8005922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f8b4 	bl	800594a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0310 	and.w	r3, r3, #16
 80057f2:	2b10      	cmp	r3, #16
 80057f4:	d122      	bne.n	800583c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	2b10      	cmp	r3, #16
 8005802:	d11b      	bne.n	800583c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0210 	mvn.w	r2, #16
 800580c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2208      	movs	r2, #8
 8005812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f887 	bl	8005936 <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f879 	bl	8005922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f88a 	bl	800594a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b01      	cmp	r3, #1
 8005848:	d10e      	bne.n	8005868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b01      	cmp	r3, #1
 8005856:	d107      	bne.n	8005868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0201 	mvn.w	r2, #1
 8005860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fb fb9a 	bl	8000f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005872:	2b80      	cmp	r3, #128	; 0x80
 8005874:	d10e      	bne.n	8005894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005880:	2b80      	cmp	r3, #128	; 0x80
 8005882:	d107      	bne.n	8005894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800588c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f91a 	bl	8005ac8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a2:	d10e      	bne.n	80058c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ae:	2b80      	cmp	r3, #128	; 0x80
 80058b0:	d107      	bne.n	80058c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80058ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f90d 	bl	8005adc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058cc:	2b40      	cmp	r3, #64	; 0x40
 80058ce:	d10e      	bne.n	80058ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058da:	2b40      	cmp	r3, #64	; 0x40
 80058dc:	d107      	bne.n	80058ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f838 	bl	800595e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d10e      	bne.n	800591a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b20      	cmp	r3, #32
 8005908:	d107      	bne.n	800591a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f06f 0220 	mvn.w	r2, #32
 8005912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f8cd 	bl	8005ab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800591a:	bf00      	nop
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a40      	ldr	r2, [pc, #256]	; (8005a88 <TIM_Base_SetConfig+0x114>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d013      	beq.n	80059b4 <TIM_Base_SetConfig+0x40>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005992:	d00f      	beq.n	80059b4 <TIM_Base_SetConfig+0x40>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a3d      	ldr	r2, [pc, #244]	; (8005a8c <TIM_Base_SetConfig+0x118>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00b      	beq.n	80059b4 <TIM_Base_SetConfig+0x40>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a3c      	ldr	r2, [pc, #240]	; (8005a90 <TIM_Base_SetConfig+0x11c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d007      	beq.n	80059b4 <TIM_Base_SetConfig+0x40>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a3b      	ldr	r2, [pc, #236]	; (8005a94 <TIM_Base_SetConfig+0x120>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d003      	beq.n	80059b4 <TIM_Base_SetConfig+0x40>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a3a      	ldr	r2, [pc, #232]	; (8005a98 <TIM_Base_SetConfig+0x124>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d108      	bne.n	80059c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2f      	ldr	r2, [pc, #188]	; (8005a88 <TIM_Base_SetConfig+0x114>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d02b      	beq.n	8005a26 <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d4:	d027      	beq.n	8005a26 <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2c      	ldr	r2, [pc, #176]	; (8005a8c <TIM_Base_SetConfig+0x118>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d023      	beq.n	8005a26 <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2b      	ldr	r2, [pc, #172]	; (8005a90 <TIM_Base_SetConfig+0x11c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d01f      	beq.n	8005a26 <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a2a      	ldr	r2, [pc, #168]	; (8005a94 <TIM_Base_SetConfig+0x120>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d01b      	beq.n	8005a26 <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a29      	ldr	r2, [pc, #164]	; (8005a98 <TIM_Base_SetConfig+0x124>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d017      	beq.n	8005a26 <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a28      	ldr	r2, [pc, #160]	; (8005a9c <TIM_Base_SetConfig+0x128>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a27      	ldr	r2, [pc, #156]	; (8005aa0 <TIM_Base_SetConfig+0x12c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00f      	beq.n	8005a26 <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a26      	ldr	r2, [pc, #152]	; (8005aa4 <TIM_Base_SetConfig+0x130>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00b      	beq.n	8005a26 <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a25      	ldr	r2, [pc, #148]	; (8005aa8 <TIM_Base_SetConfig+0x134>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d007      	beq.n	8005a26 <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a24      	ldr	r2, [pc, #144]	; (8005aac <TIM_Base_SetConfig+0x138>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d003      	beq.n	8005a26 <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a23      	ldr	r2, [pc, #140]	; (8005ab0 <TIM_Base_SetConfig+0x13c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d108      	bne.n	8005a38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a0a      	ldr	r2, [pc, #40]	; (8005a88 <TIM_Base_SetConfig+0x114>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d003      	beq.n	8005a6c <TIM_Base_SetConfig+0xf8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a0c      	ldr	r2, [pc, #48]	; (8005a98 <TIM_Base_SetConfig+0x124>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d103      	bne.n	8005a74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	615a      	str	r2, [r3, #20]
}
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40000400 	.word	0x40000400
 8005a90:	40000800 	.word	0x40000800
 8005a94:	40000c00 	.word	0x40000c00
 8005a98:	40010400 	.word	0x40010400
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	40014400 	.word	0x40014400
 8005aa4:	40014800 	.word	0x40014800
 8005aa8:	40001800 	.word	0x40001800
 8005aac:	40001c00 	.word	0x40001c00
 8005ab0:	40002000 	.word	0x40002000

08005ab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e040      	b.n	8005b84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fb fe82 	bl	800181c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2224      	movs	r2, #36	; 0x24
 8005b1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0201 	bic.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fb1e 	bl	8006170 <UART_SetConfig>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e022      	b.n	8005b84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fd76 	bl	8006638 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fdfd 	bl	800677c <UART_CheckIdleState>
 8005b82:	4603      	mov	r3, r0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b0ba      	sub	sp, #232	; 0xe8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005bb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005bb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005bba:	4013      	ands	r3, r2
 8005bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005bc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d115      	bne.n	8005bf4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00f      	beq.n	8005bf4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d009      	beq.n	8005bf4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8297 	beq.w	8006118 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	4798      	blx	r3
      }
      return;
 8005bf2:	e291      	b.n	8006118 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005bf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8117 	beq.w	8005e2c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005c0e:	4b85      	ldr	r3, [pc, #532]	; (8005e24 <HAL_UART_IRQHandler+0x298>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 810a 	beq.w	8005e2c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d011      	beq.n	8005c48 <HAL_UART_IRQHandler+0xbc>
 8005c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2201      	movs	r2, #1
 8005c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c3e:	f043 0201 	orr.w	r2, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d011      	beq.n	8005c78 <HAL_UART_IRQHandler+0xec>
 8005c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00b      	beq.n	8005c78 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2202      	movs	r2, #2
 8005c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c6e:	f043 0204 	orr.w	r2, r3, #4
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d011      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x11c>
 8005c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00b      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2204      	movs	r2, #4
 8005c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c9e:	f043 0202 	orr.w	r2, r3, #2
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d017      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d105      	bne.n	8005ccc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cc4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cda:	f043 0208 	orr.w	r2, r3, #8
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d012      	beq.n	8005d16 <HAL_UART_IRQHandler+0x18a>
 8005cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00c      	beq.n	8005d16 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d0c:	f043 0220 	orr.w	r2, r3, #32
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 81fd 	beq.w	800611c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00d      	beq.n	8005d4a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b40      	cmp	r3, #64	; 0x40
 8005d60:	d005      	beq.n	8005d6e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d04f      	beq.n	8005e0e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fe01 	bl	8006976 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7e:	2b40      	cmp	r3, #64	; 0x40
 8005d80:	d141      	bne.n	8005e06 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3308      	adds	r3, #8
 8005d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3308      	adds	r3, #8
 8005daa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005dae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005dba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1d9      	bne.n	8005d82 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d013      	beq.n	8005dfe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dda:	4a13      	ldr	r2, [pc, #76]	; (8005e28 <HAL_UART_IRQHandler+0x29c>)
 8005ddc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fc fa9f 	bl	8002326 <HAL_DMA_Abort_IT>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d017      	beq.n	8005e1e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005df8:	4610      	mov	r0, r2
 8005dfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfc:	e00f      	b.n	8005e1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f9a0 	bl	8006144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e04:	e00b      	b.n	8005e1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f99c 	bl	8006144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0c:	e007      	b.n	8005e1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f998 	bl	8006144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005e1c:	e17e      	b.n	800611c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1e:	bf00      	nop
    return;
 8005e20:	e17c      	b.n	800611c <HAL_UART_IRQHandler+0x590>
 8005e22:	bf00      	nop
 8005e24:	04000120 	.word	0x04000120
 8005e28:	08006a3f 	.word	0x08006a3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	f040 814c 	bne.w	80060ce <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3a:	f003 0310 	and.w	r3, r3, #16
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 8145 	beq.w	80060ce <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 813e 	beq.w	80060ce <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2210      	movs	r2, #16
 8005e58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b40      	cmp	r3, #64	; 0x40
 8005e66:	f040 80b6 	bne.w	8005fd6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 8150 	beq.w	8006120 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	f080 8148 	bcs.w	8006120 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea4:	f000 8086 	beq.w	8005fb4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005eb4:	e853 3f00 	ldrex	r3, [r3]
 8005eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ed6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ede:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1da      	bne.n	8005ea8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f04:	f023 0301 	bic.w	r3, r3, #1
 8005f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3308      	adds	r3, #8
 8005f12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e1      	bne.n	8005ef2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3308      	adds	r3, #8
 8005f34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1e3      	bne.n	8005f2e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f84:	f023 0310 	bic.w	r3, r3, #16
 8005f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f96:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f98:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e4      	bne.n	8005f74 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fc f949 	bl	8002246 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f8c2 	bl	8006158 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fd4:	e0a4      	b.n	8006120 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 8096 	beq.w	8006124 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005ff8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8091 	beq.w	8006124 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006012:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006016:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006024:	647b      	str	r3, [r7, #68]	; 0x44
 8006026:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800602a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800602c:	e841 2300 	strex	r3, r2, [r1]
 8006030:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e4      	bne.n	8006002 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3308      	adds	r3, #8
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	623b      	str	r3, [r7, #32]
   return(result);
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	f023 0301 	bic.w	r3, r3, #1
 800604e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3308      	adds	r3, #8
 8006058:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800605c:	633a      	str	r2, [r7, #48]	; 0x30
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e3      	bne.n	8006038 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2220      	movs	r2, #32
 8006074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	60fb      	str	r3, [r7, #12]
   return(result);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f023 0310 	bic.w	r3, r3, #16
 8006098:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	69b9      	ldr	r1, [r7, #24]
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	617b      	str	r3, [r7, #20]
   return(result);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e4      	bne.n	8006084 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2202      	movs	r2, #2
 80060be:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f846 	bl	8006158 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060cc:	e02a      	b.n	8006124 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80060ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00e      	beq.n	80060f8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80060da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d008      	beq.n	80060f8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01c      	beq.n	8006128 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	4798      	blx	r3
    }
    return;
 80060f6:	e017      	b.n	8006128 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	d012      	beq.n	800612a <HAL_UART_IRQHandler+0x59e>
 8006104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00c      	beq.n	800612a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fcaa 	bl	8006a6a <UART_EndTransmit_IT>
    return;
 8006116:	e008      	b.n	800612a <HAL_UART_IRQHandler+0x59e>
      return;
 8006118:	bf00      	nop
 800611a:	e006      	b.n	800612a <HAL_UART_IRQHandler+0x59e>
    return;
 800611c:	bf00      	nop
 800611e:	e004      	b.n	800612a <HAL_UART_IRQHandler+0x59e>
      return;
 8006120:	bf00      	nop
 8006122:	e002      	b.n	800612a <HAL_UART_IRQHandler+0x59e>
      return;
 8006124:	bf00      	nop
 8006126:	e000      	b.n	800612a <HAL_UART_IRQHandler+0x59e>
    return;
 8006128:	bf00      	nop
  }

}
 800612a:	37e8      	adds	r7, #232	; 0xe8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	4313      	orrs	r3, r2
 8006192:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	4ba6      	ldr	r3, [pc, #664]	; (8006434 <UART_SetConfig+0x2c4>)
 800619c:	4013      	ands	r3, r2
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6812      	ldr	r2, [r2, #0]
 80061a2:	6979      	ldr	r1, [r7, #20]
 80061a4:	430b      	orrs	r3, r1
 80061a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	430a      	orrs	r2, r1
 80061e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a94      	ldr	r2, [pc, #592]	; (8006438 <UART_SetConfig+0x2c8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d120      	bne.n	800622e <UART_SetConfig+0xbe>
 80061ec:	4b93      	ldr	r3, [pc, #588]	; (800643c <UART_SetConfig+0x2cc>)
 80061ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d816      	bhi.n	8006228 <UART_SetConfig+0xb8>
 80061fa:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <UART_SetConfig+0x90>)
 80061fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006200:	08006211 	.word	0x08006211
 8006204:	0800621d 	.word	0x0800621d
 8006208:	08006217 	.word	0x08006217
 800620c:	08006223 	.word	0x08006223
 8006210:	2301      	movs	r3, #1
 8006212:	77fb      	strb	r3, [r7, #31]
 8006214:	e150      	b.n	80064b8 <UART_SetConfig+0x348>
 8006216:	2302      	movs	r3, #2
 8006218:	77fb      	strb	r3, [r7, #31]
 800621a:	e14d      	b.n	80064b8 <UART_SetConfig+0x348>
 800621c:	2304      	movs	r3, #4
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e14a      	b.n	80064b8 <UART_SetConfig+0x348>
 8006222:	2308      	movs	r3, #8
 8006224:	77fb      	strb	r3, [r7, #31]
 8006226:	e147      	b.n	80064b8 <UART_SetConfig+0x348>
 8006228:	2310      	movs	r3, #16
 800622a:	77fb      	strb	r3, [r7, #31]
 800622c:	e144      	b.n	80064b8 <UART_SetConfig+0x348>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a83      	ldr	r2, [pc, #524]	; (8006440 <UART_SetConfig+0x2d0>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d132      	bne.n	800629e <UART_SetConfig+0x12e>
 8006238:	4b80      	ldr	r3, [pc, #512]	; (800643c <UART_SetConfig+0x2cc>)
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623e:	f003 030c 	and.w	r3, r3, #12
 8006242:	2b0c      	cmp	r3, #12
 8006244:	d828      	bhi.n	8006298 <UART_SetConfig+0x128>
 8006246:	a201      	add	r2, pc, #4	; (adr r2, 800624c <UART_SetConfig+0xdc>)
 8006248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624c:	08006281 	.word	0x08006281
 8006250:	08006299 	.word	0x08006299
 8006254:	08006299 	.word	0x08006299
 8006258:	08006299 	.word	0x08006299
 800625c:	0800628d 	.word	0x0800628d
 8006260:	08006299 	.word	0x08006299
 8006264:	08006299 	.word	0x08006299
 8006268:	08006299 	.word	0x08006299
 800626c:	08006287 	.word	0x08006287
 8006270:	08006299 	.word	0x08006299
 8006274:	08006299 	.word	0x08006299
 8006278:	08006299 	.word	0x08006299
 800627c:	08006293 	.word	0x08006293
 8006280:	2300      	movs	r3, #0
 8006282:	77fb      	strb	r3, [r7, #31]
 8006284:	e118      	b.n	80064b8 <UART_SetConfig+0x348>
 8006286:	2302      	movs	r3, #2
 8006288:	77fb      	strb	r3, [r7, #31]
 800628a:	e115      	b.n	80064b8 <UART_SetConfig+0x348>
 800628c:	2304      	movs	r3, #4
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	e112      	b.n	80064b8 <UART_SetConfig+0x348>
 8006292:	2308      	movs	r3, #8
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e10f      	b.n	80064b8 <UART_SetConfig+0x348>
 8006298:	2310      	movs	r3, #16
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e10c      	b.n	80064b8 <UART_SetConfig+0x348>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a68      	ldr	r2, [pc, #416]	; (8006444 <UART_SetConfig+0x2d4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d120      	bne.n	80062ea <UART_SetConfig+0x17a>
 80062a8:	4b64      	ldr	r3, [pc, #400]	; (800643c <UART_SetConfig+0x2cc>)
 80062aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062b2:	2b30      	cmp	r3, #48	; 0x30
 80062b4:	d013      	beq.n	80062de <UART_SetConfig+0x16e>
 80062b6:	2b30      	cmp	r3, #48	; 0x30
 80062b8:	d814      	bhi.n	80062e4 <UART_SetConfig+0x174>
 80062ba:	2b20      	cmp	r3, #32
 80062bc:	d009      	beq.n	80062d2 <UART_SetConfig+0x162>
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d810      	bhi.n	80062e4 <UART_SetConfig+0x174>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <UART_SetConfig+0x15c>
 80062c6:	2b10      	cmp	r3, #16
 80062c8:	d006      	beq.n	80062d8 <UART_SetConfig+0x168>
 80062ca:	e00b      	b.n	80062e4 <UART_SetConfig+0x174>
 80062cc:	2300      	movs	r3, #0
 80062ce:	77fb      	strb	r3, [r7, #31]
 80062d0:	e0f2      	b.n	80064b8 <UART_SetConfig+0x348>
 80062d2:	2302      	movs	r3, #2
 80062d4:	77fb      	strb	r3, [r7, #31]
 80062d6:	e0ef      	b.n	80064b8 <UART_SetConfig+0x348>
 80062d8:	2304      	movs	r3, #4
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e0ec      	b.n	80064b8 <UART_SetConfig+0x348>
 80062de:	2308      	movs	r3, #8
 80062e0:	77fb      	strb	r3, [r7, #31]
 80062e2:	e0e9      	b.n	80064b8 <UART_SetConfig+0x348>
 80062e4:	2310      	movs	r3, #16
 80062e6:	77fb      	strb	r3, [r7, #31]
 80062e8:	e0e6      	b.n	80064b8 <UART_SetConfig+0x348>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a56      	ldr	r2, [pc, #344]	; (8006448 <UART_SetConfig+0x2d8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d120      	bne.n	8006336 <UART_SetConfig+0x1c6>
 80062f4:	4b51      	ldr	r3, [pc, #324]	; (800643c <UART_SetConfig+0x2cc>)
 80062f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006300:	d013      	beq.n	800632a <UART_SetConfig+0x1ba>
 8006302:	2bc0      	cmp	r3, #192	; 0xc0
 8006304:	d814      	bhi.n	8006330 <UART_SetConfig+0x1c0>
 8006306:	2b80      	cmp	r3, #128	; 0x80
 8006308:	d009      	beq.n	800631e <UART_SetConfig+0x1ae>
 800630a:	2b80      	cmp	r3, #128	; 0x80
 800630c:	d810      	bhi.n	8006330 <UART_SetConfig+0x1c0>
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <UART_SetConfig+0x1a8>
 8006312:	2b40      	cmp	r3, #64	; 0x40
 8006314:	d006      	beq.n	8006324 <UART_SetConfig+0x1b4>
 8006316:	e00b      	b.n	8006330 <UART_SetConfig+0x1c0>
 8006318:	2300      	movs	r3, #0
 800631a:	77fb      	strb	r3, [r7, #31]
 800631c:	e0cc      	b.n	80064b8 <UART_SetConfig+0x348>
 800631e:	2302      	movs	r3, #2
 8006320:	77fb      	strb	r3, [r7, #31]
 8006322:	e0c9      	b.n	80064b8 <UART_SetConfig+0x348>
 8006324:	2304      	movs	r3, #4
 8006326:	77fb      	strb	r3, [r7, #31]
 8006328:	e0c6      	b.n	80064b8 <UART_SetConfig+0x348>
 800632a:	2308      	movs	r3, #8
 800632c:	77fb      	strb	r3, [r7, #31]
 800632e:	e0c3      	b.n	80064b8 <UART_SetConfig+0x348>
 8006330:	2310      	movs	r3, #16
 8006332:	77fb      	strb	r3, [r7, #31]
 8006334:	e0c0      	b.n	80064b8 <UART_SetConfig+0x348>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a44      	ldr	r2, [pc, #272]	; (800644c <UART_SetConfig+0x2dc>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d125      	bne.n	800638c <UART_SetConfig+0x21c>
 8006340:	4b3e      	ldr	r3, [pc, #248]	; (800643c <UART_SetConfig+0x2cc>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800634a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800634e:	d017      	beq.n	8006380 <UART_SetConfig+0x210>
 8006350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006354:	d817      	bhi.n	8006386 <UART_SetConfig+0x216>
 8006356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800635a:	d00b      	beq.n	8006374 <UART_SetConfig+0x204>
 800635c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006360:	d811      	bhi.n	8006386 <UART_SetConfig+0x216>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <UART_SetConfig+0x1fe>
 8006366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636a:	d006      	beq.n	800637a <UART_SetConfig+0x20a>
 800636c:	e00b      	b.n	8006386 <UART_SetConfig+0x216>
 800636e:	2300      	movs	r3, #0
 8006370:	77fb      	strb	r3, [r7, #31]
 8006372:	e0a1      	b.n	80064b8 <UART_SetConfig+0x348>
 8006374:	2302      	movs	r3, #2
 8006376:	77fb      	strb	r3, [r7, #31]
 8006378:	e09e      	b.n	80064b8 <UART_SetConfig+0x348>
 800637a:	2304      	movs	r3, #4
 800637c:	77fb      	strb	r3, [r7, #31]
 800637e:	e09b      	b.n	80064b8 <UART_SetConfig+0x348>
 8006380:	2308      	movs	r3, #8
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e098      	b.n	80064b8 <UART_SetConfig+0x348>
 8006386:	2310      	movs	r3, #16
 8006388:	77fb      	strb	r3, [r7, #31]
 800638a:	e095      	b.n	80064b8 <UART_SetConfig+0x348>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a2f      	ldr	r2, [pc, #188]	; (8006450 <UART_SetConfig+0x2e0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d125      	bne.n	80063e2 <UART_SetConfig+0x272>
 8006396:	4b29      	ldr	r3, [pc, #164]	; (800643c <UART_SetConfig+0x2cc>)
 8006398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063a4:	d017      	beq.n	80063d6 <UART_SetConfig+0x266>
 80063a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063aa:	d817      	bhi.n	80063dc <UART_SetConfig+0x26c>
 80063ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063b0:	d00b      	beq.n	80063ca <UART_SetConfig+0x25a>
 80063b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063b6:	d811      	bhi.n	80063dc <UART_SetConfig+0x26c>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <UART_SetConfig+0x254>
 80063bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063c0:	d006      	beq.n	80063d0 <UART_SetConfig+0x260>
 80063c2:	e00b      	b.n	80063dc <UART_SetConfig+0x26c>
 80063c4:	2301      	movs	r3, #1
 80063c6:	77fb      	strb	r3, [r7, #31]
 80063c8:	e076      	b.n	80064b8 <UART_SetConfig+0x348>
 80063ca:	2302      	movs	r3, #2
 80063cc:	77fb      	strb	r3, [r7, #31]
 80063ce:	e073      	b.n	80064b8 <UART_SetConfig+0x348>
 80063d0:	2304      	movs	r3, #4
 80063d2:	77fb      	strb	r3, [r7, #31]
 80063d4:	e070      	b.n	80064b8 <UART_SetConfig+0x348>
 80063d6:	2308      	movs	r3, #8
 80063d8:	77fb      	strb	r3, [r7, #31]
 80063da:	e06d      	b.n	80064b8 <UART_SetConfig+0x348>
 80063dc:	2310      	movs	r3, #16
 80063de:	77fb      	strb	r3, [r7, #31]
 80063e0:	e06a      	b.n	80064b8 <UART_SetConfig+0x348>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a1b      	ldr	r2, [pc, #108]	; (8006454 <UART_SetConfig+0x2e4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d138      	bne.n	800645e <UART_SetConfig+0x2ee>
 80063ec:	4b13      	ldr	r3, [pc, #76]	; (800643c <UART_SetConfig+0x2cc>)
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063fa:	d017      	beq.n	800642c <UART_SetConfig+0x2bc>
 80063fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006400:	d82a      	bhi.n	8006458 <UART_SetConfig+0x2e8>
 8006402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006406:	d00b      	beq.n	8006420 <UART_SetConfig+0x2b0>
 8006408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800640c:	d824      	bhi.n	8006458 <UART_SetConfig+0x2e8>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <UART_SetConfig+0x2aa>
 8006412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006416:	d006      	beq.n	8006426 <UART_SetConfig+0x2b6>
 8006418:	e01e      	b.n	8006458 <UART_SetConfig+0x2e8>
 800641a:	2300      	movs	r3, #0
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e04b      	b.n	80064b8 <UART_SetConfig+0x348>
 8006420:	2302      	movs	r3, #2
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e048      	b.n	80064b8 <UART_SetConfig+0x348>
 8006426:	2304      	movs	r3, #4
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e045      	b.n	80064b8 <UART_SetConfig+0x348>
 800642c:	2308      	movs	r3, #8
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e042      	b.n	80064b8 <UART_SetConfig+0x348>
 8006432:	bf00      	nop
 8006434:	efff69f3 	.word	0xefff69f3
 8006438:	40011000 	.word	0x40011000
 800643c:	40023800 	.word	0x40023800
 8006440:	40004400 	.word	0x40004400
 8006444:	40004800 	.word	0x40004800
 8006448:	40004c00 	.word	0x40004c00
 800644c:	40005000 	.word	0x40005000
 8006450:	40011400 	.word	0x40011400
 8006454:	40007800 	.word	0x40007800
 8006458:	2310      	movs	r3, #16
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e02c      	b.n	80064b8 <UART_SetConfig+0x348>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a72      	ldr	r2, [pc, #456]	; (800662c <UART_SetConfig+0x4bc>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d125      	bne.n	80064b4 <UART_SetConfig+0x344>
 8006468:	4b71      	ldr	r3, [pc, #452]	; (8006630 <UART_SetConfig+0x4c0>)
 800646a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006472:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006476:	d017      	beq.n	80064a8 <UART_SetConfig+0x338>
 8006478:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800647c:	d817      	bhi.n	80064ae <UART_SetConfig+0x33e>
 800647e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006482:	d00b      	beq.n	800649c <UART_SetConfig+0x32c>
 8006484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006488:	d811      	bhi.n	80064ae <UART_SetConfig+0x33e>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <UART_SetConfig+0x326>
 800648e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006492:	d006      	beq.n	80064a2 <UART_SetConfig+0x332>
 8006494:	e00b      	b.n	80064ae <UART_SetConfig+0x33e>
 8006496:	2300      	movs	r3, #0
 8006498:	77fb      	strb	r3, [r7, #31]
 800649a:	e00d      	b.n	80064b8 <UART_SetConfig+0x348>
 800649c:	2302      	movs	r3, #2
 800649e:	77fb      	strb	r3, [r7, #31]
 80064a0:	e00a      	b.n	80064b8 <UART_SetConfig+0x348>
 80064a2:	2304      	movs	r3, #4
 80064a4:	77fb      	strb	r3, [r7, #31]
 80064a6:	e007      	b.n	80064b8 <UART_SetConfig+0x348>
 80064a8:	2308      	movs	r3, #8
 80064aa:	77fb      	strb	r3, [r7, #31]
 80064ac:	e004      	b.n	80064b8 <UART_SetConfig+0x348>
 80064ae:	2310      	movs	r3, #16
 80064b0:	77fb      	strb	r3, [r7, #31]
 80064b2:	e001      	b.n	80064b8 <UART_SetConfig+0x348>
 80064b4:	2310      	movs	r3, #16
 80064b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c0:	d15b      	bne.n	800657a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80064c2:	7ffb      	ldrb	r3, [r7, #31]
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d828      	bhi.n	800651a <UART_SetConfig+0x3aa>
 80064c8:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <UART_SetConfig+0x360>)
 80064ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ce:	bf00      	nop
 80064d0:	080064f5 	.word	0x080064f5
 80064d4:	080064fd 	.word	0x080064fd
 80064d8:	08006505 	.word	0x08006505
 80064dc:	0800651b 	.word	0x0800651b
 80064e0:	0800650b 	.word	0x0800650b
 80064e4:	0800651b 	.word	0x0800651b
 80064e8:	0800651b 	.word	0x0800651b
 80064ec:	0800651b 	.word	0x0800651b
 80064f0:	08006513 	.word	0x08006513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f4:	f7fe fc5c 	bl	8004db0 <HAL_RCC_GetPCLK1Freq>
 80064f8:	61b8      	str	r0, [r7, #24]
        break;
 80064fa:	e013      	b.n	8006524 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064fc:	f7fe fc6c 	bl	8004dd8 <HAL_RCC_GetPCLK2Freq>
 8006500:	61b8      	str	r0, [r7, #24]
        break;
 8006502:	e00f      	b.n	8006524 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006504:	4b4b      	ldr	r3, [pc, #300]	; (8006634 <UART_SetConfig+0x4c4>)
 8006506:	61bb      	str	r3, [r7, #24]
        break;
 8006508:	e00c      	b.n	8006524 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800650a:	f7fe fb7f 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 800650e:	61b8      	str	r0, [r7, #24]
        break;
 8006510:	e008      	b.n	8006524 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006516:	61bb      	str	r3, [r7, #24]
        break;
 8006518:	e004      	b.n	8006524 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	77bb      	strb	r3, [r7, #30]
        break;
 8006522:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d074      	beq.n	8006614 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	005a      	lsls	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	085b      	lsrs	r3, r3, #1
 8006534:	441a      	add	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	fbb2 f3f3 	udiv	r3, r2, r3
 800653e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b0f      	cmp	r3, #15
 8006544:	d916      	bls.n	8006574 <UART_SetConfig+0x404>
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800654c:	d212      	bcs.n	8006574 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f023 030f 	bic.w	r3, r3, #15
 8006556:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	085b      	lsrs	r3, r3, #1
 800655c:	b29b      	uxth	r3, r3
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	b29a      	uxth	r2, r3
 8006564:	89fb      	ldrh	r3, [r7, #14]
 8006566:	4313      	orrs	r3, r2
 8006568:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	89fa      	ldrh	r2, [r7, #14]
 8006570:	60da      	str	r2, [r3, #12]
 8006572:	e04f      	b.n	8006614 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	77bb      	strb	r3, [r7, #30]
 8006578:	e04c      	b.n	8006614 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800657a:	7ffb      	ldrb	r3, [r7, #31]
 800657c:	2b08      	cmp	r3, #8
 800657e:	d828      	bhi.n	80065d2 <UART_SetConfig+0x462>
 8006580:	a201      	add	r2, pc, #4	; (adr r2, 8006588 <UART_SetConfig+0x418>)
 8006582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006586:	bf00      	nop
 8006588:	080065ad 	.word	0x080065ad
 800658c:	080065b5 	.word	0x080065b5
 8006590:	080065bd 	.word	0x080065bd
 8006594:	080065d3 	.word	0x080065d3
 8006598:	080065c3 	.word	0x080065c3
 800659c:	080065d3 	.word	0x080065d3
 80065a0:	080065d3 	.word	0x080065d3
 80065a4:	080065d3 	.word	0x080065d3
 80065a8:	080065cb 	.word	0x080065cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ac:	f7fe fc00 	bl	8004db0 <HAL_RCC_GetPCLK1Freq>
 80065b0:	61b8      	str	r0, [r7, #24]
        break;
 80065b2:	e013      	b.n	80065dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065b4:	f7fe fc10 	bl	8004dd8 <HAL_RCC_GetPCLK2Freq>
 80065b8:	61b8      	str	r0, [r7, #24]
        break;
 80065ba:	e00f      	b.n	80065dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065bc:	4b1d      	ldr	r3, [pc, #116]	; (8006634 <UART_SetConfig+0x4c4>)
 80065be:	61bb      	str	r3, [r7, #24]
        break;
 80065c0:	e00c      	b.n	80065dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065c2:	f7fe fb23 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 80065c6:	61b8      	str	r0, [r7, #24]
        break;
 80065c8:	e008      	b.n	80065dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ce:	61bb      	str	r3, [r7, #24]
        break;
 80065d0:	e004      	b.n	80065dc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	77bb      	strb	r3, [r7, #30]
        break;
 80065da:	bf00      	nop
    }

    if (pclk != 0U)
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d018      	beq.n	8006614 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	085a      	lsrs	r2, r3, #1
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	441a      	add	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	2b0f      	cmp	r3, #15
 80065fa:	d909      	bls.n	8006610 <UART_SetConfig+0x4a0>
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006602:	d205      	bcs.n	8006610 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	b29a      	uxth	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	60da      	str	r2, [r3, #12]
 800660e:	e001      	b.n	8006614 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006620:	7fbb      	ldrb	r3, [r7, #30]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	40007c00 	.word	0x40007c00
 8006630:	40023800 	.word	0x40023800
 8006634:	00f42400 	.word	0x00f42400

08006638 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	f003 0308 	and.w	r3, r3, #8
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	f003 0310 	and.w	r3, r3, #16
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	d01a      	beq.n	800674e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006736:	d10a      	bne.n	800674e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	605a      	str	r2, [r3, #4]
  }
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af02      	add	r7, sp, #8
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800678c:	f7fb fb6a 	bl	8001e64 <HAL_GetTick>
 8006790:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0308 	and.w	r3, r3, #8
 800679c:	2b08      	cmp	r3, #8
 800679e:	d10e      	bne.n	80067be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f81b 	bl	80067ea <UART_WaitOnFlagUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e011      	b.n	80067e2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b09c      	sub	sp, #112	; 0x70
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	4613      	mov	r3, r2
 80067f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067fa:	e0a7      	b.n	800694c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006802:	f000 80a3 	beq.w	800694c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006806:	f7fb fb2d 	bl	8001e64 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006812:	429a      	cmp	r2, r3
 8006814:	d302      	bcc.n	800681c <UART_WaitOnFlagUntilTimeout+0x32>
 8006816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006818:	2b00      	cmp	r3, #0
 800681a:	d13f      	bne.n	800689c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800682a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006830:	667b      	str	r3, [r7, #100]	; 0x64
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800683a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800683c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006840:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e6      	bne.n	800681c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3308      	adds	r3, #8
 8006854:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006860:	f023 0301 	bic.w	r3, r3, #1
 8006864:	663b      	str	r3, [r7, #96]	; 0x60
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3308      	adds	r3, #8
 800686c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800686e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006870:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800687c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e5      	bne.n	800684e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2220      	movs	r2, #32
 8006886:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2220      	movs	r2, #32
 800688c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e068      	b.n	800696e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0304 	and.w	r3, r3, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d050      	beq.n	800694c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b8:	d148      	bne.n	800694c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e2:	637b      	str	r3, [r7, #52]	; 0x34
 80068e4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068ea:	e841 2300 	strex	r3, r2, [r1]
 80068ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e6      	bne.n	80068c4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	613b      	str	r3, [r7, #16]
   return(result);
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f023 0301 	bic.w	r3, r3, #1
 800690c:	66bb      	str	r3, [r7, #104]	; 0x68
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006916:	623a      	str	r2, [r7, #32]
 8006918:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	69f9      	ldr	r1, [r7, #28]
 800691c:	6a3a      	ldr	r2, [r7, #32]
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	61bb      	str	r3, [r7, #24]
   return(result);
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e5      	bne.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2220      	movs	r2, #32
 800692e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2220      	movs	r2, #32
 800693c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e010      	b.n	800696e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	69da      	ldr	r2, [r3, #28]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4013      	ands	r3, r2
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	429a      	cmp	r2, r3
 800695a:	bf0c      	ite	eq
 800695c:	2301      	moveq	r3, #1
 800695e:	2300      	movne	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	461a      	mov	r2, r3
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	429a      	cmp	r2, r3
 8006968:	f43f af48 	beq.w	80067fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3770      	adds	r7, #112	; 0x70
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006976:	b480      	push	{r7}
 8006978:	b095      	sub	sp, #84	; 0x54
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699c:	643b      	str	r3, [r7, #64]	; 0x40
 800699e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069a4:	e841 2300 	strex	r3, r2, [r1]
 80069a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e6      	bne.n	800697e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3308      	adds	r3, #8
 80069b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	61fb      	str	r3, [r7, #28]
   return(result);
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f023 0301 	bic.w	r3, r3, #1
 80069c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3308      	adds	r3, #8
 80069ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e5      	bne.n	80069b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d118      	bne.n	8006a1e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f023 0310 	bic.w	r3, r3, #16
 8006a00:	647b      	str	r3, [r7, #68]	; 0x44
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a0a:	61bb      	str	r3, [r7, #24]
 8006a0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	6979      	ldr	r1, [r7, #20]
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	613b      	str	r3, [r7, #16]
   return(result);
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e6      	bne.n	80069ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a32:	bf00      	nop
 8006a34:	3754      	adds	r7, #84	; 0x54
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f7ff fb71 	bl	8006144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b088      	sub	sp, #32
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a86:	61fb      	str	r3, [r7, #28]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6979      	ldr	r1, [r7, #20]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e6      	bne.n	8006a72 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff fb3d 	bl	8006130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ab6:	bf00      	nop
 8006ab8:	3720      	adds	r7, #32
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <LL_EXTI_EnableIT_0_31>:
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8006ac8:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <LL_EXTI_EnableIT_0_31+0x20>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	4904      	ldr	r1, [pc, #16]	; (8006ae0 <LL_EXTI_EnableIT_0_31+0x20>)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	600b      	str	r3, [r1, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	40013c00 	.word	0x40013c00

08006ae4 <LL_EXTI_DisableIT_0_31>:
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8006aec:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <LL_EXTI_DisableIT_0_31+0x24>)
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	43db      	mvns	r3, r3
 8006af4:	4904      	ldr	r1, [pc, #16]	; (8006b08 <LL_EXTI_DisableIT_0_31+0x24>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	600b      	str	r3, [r1, #0]
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40013c00 	.word	0x40013c00

08006b0c <LL_EXTI_EnableEvent_0_31>:
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <LL_EXTI_EnableEvent_0_31+0x20>)
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	4904      	ldr	r1, [pc, #16]	; (8006b2c <LL_EXTI_EnableEvent_0_31+0x20>)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	604b      	str	r3, [r1, #4]
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	40013c00 	.word	0x40013c00

08006b30 <LL_EXTI_DisableEvent_0_31>:
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8006b38:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	43db      	mvns	r3, r3
 8006b40:	4904      	ldr	r1, [pc, #16]	; (8006b54 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006b42:	4013      	ands	r3, r2
 8006b44:	604b      	str	r3, [r1, #4]
}
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	40013c00 	.word	0x40013c00

08006b58 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	4904      	ldr	r1, [pc, #16]	; (8006b78 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	608b      	str	r3, [r1, #8]
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	40013c00 	.word	0x40013c00

08006b7c <LL_EXTI_DisableRisingTrig_0_31>:
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	43db      	mvns	r3, r3
 8006b8c:	4904      	ldr	r1, [pc, #16]	; (8006ba0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006b8e:	4013      	ands	r3, r2
 8006b90:	608b      	str	r3, [r1, #8]
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40013c00 	.word	0x40013c00

08006ba4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8006bac:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	4904      	ldr	r1, [pc, #16]	; (8006bc4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60cb      	str	r3, [r1, #12]
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	40013c00 	.word	0x40013c00

08006bc8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8006bd0:	4b06      	ldr	r3, [pc, #24]	; (8006bec <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	43db      	mvns	r3, r3
 8006bd8:	4904      	ldr	r1, [pc, #16]	; (8006bec <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006bda:	4013      	ands	r3, r2
 8006bdc:	60cb      	str	r3, [r1, #12]
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40013c00 	.word	0x40013c00

08006bf0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	791b      	ldrb	r3, [r3, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d065      	beq.n	8006cd0 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d06c      	beq.n	8006ce6 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	795b      	ldrb	r3, [r3, #5]
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d01c      	beq.n	8006c4e <LL_EXTI_Init+0x5e>
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	dc25      	bgt.n	8006c64 <LL_EXTI_Init+0x74>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <LL_EXTI_Init+0x32>
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d00b      	beq.n	8006c38 <LL_EXTI_Init+0x48>
 8006c20:	e020      	b.n	8006c64 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7ff ff82 	bl	8006b30 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff ff45 	bl	8006ac0 <LL_EXTI_EnableIT_0_31>
          break;
 8006c36:	e018      	b.n	8006c6a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff ff51 	bl	8006ae4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff ff60 	bl	8006b0c <LL_EXTI_EnableEvent_0_31>
          break;
 8006c4c:	e00d      	b.n	8006c6a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7ff ff34 	bl	8006ac0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7ff ff55 	bl	8006b0c <LL_EXTI_EnableEvent_0_31>
          break;
 8006c62:	e002      	b.n	8006c6a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	73fb      	strb	r3, [r7, #15]
          break;
 8006c68:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	799b      	ldrb	r3, [r3, #6]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d039      	beq.n	8006ce6 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	799b      	ldrb	r3, [r3, #6]
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d01c      	beq.n	8006cb4 <LL_EXTI_Init+0xc4>
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	dc25      	bgt.n	8006cca <LL_EXTI_Init+0xda>
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d002      	beq.n	8006c88 <LL_EXTI_Init+0x98>
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d00b      	beq.n	8006c9e <LL_EXTI_Init+0xae>
 8006c86:	e020      	b.n	8006cca <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff ff9b 	bl	8006bc8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff ff5e 	bl	8006b58 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8006c9c:	e024      	b.n	8006ce8 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff ff6a 	bl	8006b7c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff ff79 	bl	8006ba4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006cb2:	e019      	b.n	8006ce8 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff ff4d 	bl	8006b58 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff ff6e 	bl	8006ba4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006cc8:	e00e      	b.n	8006ce8 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	73fb      	strb	r3, [r7, #15]
            break;
 8006cce:	e00b      	b.n	8006ce8 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7ff ff05 	bl	8006ae4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7ff ff26 	bl	8006b30 <LL_EXTI_DisableEvent_0_31>
 8006ce4:	e000      	b.n	8006ce8 <LL_EXTI_Init+0xf8>
      }
 8006ce6:	bf00      	nop
  }
  return status;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <LL_GPIO_SetPinMode>:
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b089      	sub	sp, #36	; 0x24
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	fa93 f3a3 	rbit	r3, r3
 8006d0c:	613b      	str	r3, [r7, #16]
  return result;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	fab3 f383 	clz	r3, r3
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	2103      	movs	r1, #3
 8006d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1e:	43db      	mvns	r3, r3
 8006d20:	401a      	ands	r2, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	fa93 f3a3 	rbit	r3, r3
 8006d2c:	61bb      	str	r3, [r7, #24]
  return result;
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	fab3 f383 	clz	r3, r3
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	6879      	ldr	r1, [r7, #4]
 8006d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	601a      	str	r2, [r3, #0]
}
 8006d44:	bf00      	nop
 8006d46:	3724      	adds	r7, #36	; 0x24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <LL_GPIO_SetPinOutputType>:
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	43db      	mvns	r3, r3
 8006d64:	401a      	ands	r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	fb01 f303 	mul.w	r3, r1, r3
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	605a      	str	r2, [r3, #4]
}
 8006d74:	bf00      	nop
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <LL_GPIO_SetPinSpeed>:
{
 8006d80:	b480      	push	{r7}
 8006d82:	b089      	sub	sp, #36	; 0x24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	fa93 f3a3 	rbit	r3, r3
 8006d9a:	613b      	str	r3, [r7, #16]
  return result;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	fab3 f383 	clz	r3, r3
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	2103      	movs	r1, #3
 8006da8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dac:	43db      	mvns	r3, r3
 8006dae:	401a      	ands	r2, r3
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	fa93 f3a3 	rbit	r3, r3
 8006dba:	61bb      	str	r3, [r7, #24]
  return result;
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	fab3 f383 	clz	r3, r3
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	609a      	str	r2, [r3, #8]
}
 8006dd2:	bf00      	nop
 8006dd4:	3724      	adds	r7, #36	; 0x24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <LL_GPIO_SetPinPull>:
{
 8006dde:	b480      	push	{r7}
 8006de0:	b089      	sub	sp, #36	; 0x24
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	68da      	ldr	r2, [r3, #12]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	fa93 f3a3 	rbit	r3, r3
 8006df8:	613b      	str	r3, [r7, #16]
  return result;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	fab3 f383 	clz	r3, r3
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	2103      	movs	r1, #3
 8006e06:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0a:	43db      	mvns	r3, r3
 8006e0c:	401a      	ands	r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	fa93 f3a3 	rbit	r3, r3
 8006e18:	61bb      	str	r3, [r7, #24]
  return result;
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	fab3 f383 	clz	r3, r3
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	60da      	str	r2, [r3, #12]
}
 8006e30:	bf00      	nop
 8006e32:	3724      	adds	r7, #36	; 0x24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <LL_GPIO_SetAFPin_0_7>:
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b089      	sub	sp, #36	; 0x24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a1a      	ldr	r2, [r3, #32]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	fa93 f3a3 	rbit	r3, r3
 8006e56:	613b      	str	r3, [r7, #16]
  return result;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	fab3 f383 	clz	r3, r3
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	210f      	movs	r1, #15
 8006e64:	fa01 f303 	lsl.w	r3, r1, r3
 8006e68:	43db      	mvns	r3, r3
 8006e6a:	401a      	ands	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	fa93 f3a3 	rbit	r3, r3
 8006e76:	61bb      	str	r3, [r7, #24]
  return result;
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	fab3 f383 	clz	r3, r3
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	fa01 f303 	lsl.w	r3, r1, r3
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	621a      	str	r2, [r3, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	3724      	adds	r7, #36	; 0x24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <LL_GPIO_SetAFPin_8_15>:
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b089      	sub	sp, #36	; 0x24
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	0a1b      	lsrs	r3, r3, #8
 8006eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	fa93 f3a3 	rbit	r3, r3
 8006eb6:	613b      	str	r3, [r7, #16]
  return result;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	fab3 f383 	clz	r3, r3
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	210f      	movs	r1, #15
 8006ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec8:	43db      	mvns	r3, r3
 8006eca:	401a      	ands	r2, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	0a1b      	lsrs	r3, r3, #8
 8006ed0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	fa93 f3a3 	rbit	r3, r3
 8006ed8:	61bb      	str	r3, [r7, #24]
  return result;
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	fab3 f383 	clz	r3, r3
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eea:	431a      	orrs	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006ef0:	bf00      	nop
 8006ef2:	3724      	adds	r7, #36	; 0x24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b088      	sub	sp, #32
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	fa93 f3a3 	rbit	r3, r3
 8006f1a:	613b      	str	r3, [r7, #16]
  return result;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	fab3 f383 	clz	r3, r3
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006f26:	e051      	b.n	8006fcc <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	fa01 f303 	lsl.w	r3, r1, r3
 8006f34:	4013      	ands	r3, r2
 8006f36:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d043      	beq.n	8006fc6 <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d003      	beq.n	8006f4e <LL_GPIO_Init+0x52>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d10e      	bne.n	8006f6c <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	461a      	mov	r2, r3
 8006f54:	69b9      	ldr	r1, [r7, #24]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff ff12 	bl	8006d80 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	6819      	ldr	r1, [r3, #0]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	461a      	mov	r2, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff fef2 	bl	8006d50 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	461a      	mov	r2, r3
 8006f72:	69b9      	ldr	r1, [r7, #24]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff ff32 	bl	8006dde <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d11a      	bne.n	8006fb8 <LL_GPIO_Init+0xbc>
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	fa93 f3a3 	rbit	r3, r3
 8006f8c:	60bb      	str	r3, [r7, #8]
  return result;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006f90:	fab3 f383 	clz	r3, r3
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b07      	cmp	r3, #7
 8006f98:	d807      	bhi.n	8006faa <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	69b9      	ldr	r1, [r7, #24]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff ff4a 	bl	8006e3c <LL_GPIO_SetAFPin_0_7>
 8006fa8:	e006      	b.n	8006fb8 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	69b9      	ldr	r1, [r7, #24]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7ff ff71 	bl	8006e9a <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	69b9      	ldr	r1, [r7, #24]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff fe96 	bl	8006cf2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1a6      	bne.n	8006f28 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3720      	adds	r7, #32
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	f107 001c 	add.w	r0, r7, #28
 8006ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d126      	bne.n	800704a <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007000:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	4b3f      	ldr	r3, [pc, #252]	; (800710c <USB_CoreInit+0x128>)
 800700e:	4013      	ands	r3, r2
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f043 0210 	orr.w	r2, r3, #16
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800702c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800702e:	2b01      	cmp	r3, #1
 8007030:	d105      	bne.n	800703e <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa10 	bl	8007464 <USB_CoreReset>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]
 8007048:	e048      	b.n	80070dc <USB_CoreInit+0xf8>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	2b03      	cmp	r3, #3
 800704e:	d134      	bne.n	80070ba <USB_CoreInit+0xd6>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007054:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	4b2a      	ldr	r3, [pc, #168]	; (800710c <USB_CoreInit+0x128>)
 8007062:	4013      	ands	r3, r2
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f023 0210 	bic.w	r2, r3, #16
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60da      	str	r2, [r3, #12]
#ifdef USBPHYC
    /* Enable USB HS PHY */
    USBx->GCCFG |= USB_OTG_GCCFG_PHYHSEN;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enables control of a High Speed USB PHY */
    if (USB_HS_PHYCInit(USBx) != HAL_OK)
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fa1d 	bl	80074cc <USB_HS_PHYCInit>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <USB_CoreInit+0xb8>
    {
      return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e02f      	b.n	80070fc <USB_CoreInit+0x118>
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800709c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d105      	bne.n	80070ae <USB_CoreInit+0xca>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f9d8 	bl	8007464 <USB_CoreReset>
 80070b4:	4603      	mov	r3, r0
 80070b6:	73fb      	strb	r3, [r7, #15]
 80070b8:	e010      	b.n	80070dc <USB_CoreInit+0xf8>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f9cc 	bl	8007464 <USB_CoreReset>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d10b      	bne.n	80070fa <USB_CoreInit+0x116>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f043 0206 	orr.w	r2, r3, #6
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f043 0220 	orr.w	r2, r3, #32
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007106:	b004      	add	sp, #16
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	ffbdffbf 	.word	0xffbdffbf

08007110 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f043 0201 	orr.w	r2, r3, #1
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007132:	b480      	push	{r7}
 8007134:	b083      	sub	sp, #12
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f023 0201 	bic.w	r2, r3, #1
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007170:	78fb      	ldrb	r3, [r7, #3]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d115      	bne.n	80071a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007182:	2001      	movs	r0, #1
 8007184:	f7fa fe7a 	bl	8001e7c <HAL_Delay>
      ms++;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3301      	adds	r3, #1
 800718c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f95a 	bl	8007448 <USB_GetMode>
 8007194:	4603      	mov	r3, r0
 8007196:	2b01      	cmp	r3, #1
 8007198:	d01e      	beq.n	80071d8 <USB_SetCurrentMode+0x84>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b31      	cmp	r3, #49	; 0x31
 800719e:	d9f0      	bls.n	8007182 <USB_SetCurrentMode+0x2e>
 80071a0:	e01a      	b.n	80071d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80071a2:	78fb      	ldrb	r3, [r7, #3]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d115      	bne.n	80071d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80071b4:	2001      	movs	r0, #1
 80071b6:	f7fa fe61 	bl	8001e7c <HAL_Delay>
      ms++;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3301      	adds	r3, #1
 80071be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f941 	bl	8007448 <USB_GetMode>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d005      	beq.n	80071d8 <USB_SetCurrentMode+0x84>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2b31      	cmp	r3, #49	; 0x31
 80071d0:	d9f0      	bls.n	80071b4 <USB_SetCurrentMode+0x60>
 80071d2:	e001      	b.n	80071d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e005      	b.n	80071e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b32      	cmp	r3, #50	; 0x32
 80071dc:	d101      	bne.n	80071e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3301      	adds	r3, #1
 80071fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4a13      	ldr	r2, [pc, #76]	; (8007250 <USB_FlushTxFifo+0x64>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d901      	bls.n	800720c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e01b      	b.n	8007244 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	daf2      	bge.n	80071fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	019b      	lsls	r3, r3, #6
 800721c:	f043 0220 	orr.w	r2, r3, #32
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3301      	adds	r3, #1
 8007228:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4a08      	ldr	r2, [pc, #32]	; (8007250 <USB_FlushTxFifo+0x64>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d901      	bls.n	8007236 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e006      	b.n	8007244 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b20      	cmp	r3, #32
 8007240:	d0f0      	beq.n	8007224 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	00030d40 	.word	0x00030d40

08007254 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3301      	adds	r3, #1
 8007264:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4a11      	ldr	r2, [pc, #68]	; (80072b0 <USB_FlushRxFifo+0x5c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d901      	bls.n	8007272 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e018      	b.n	80072a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	daf2      	bge.n	8007260 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2210      	movs	r2, #16
 8007282:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3301      	adds	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4a08      	ldr	r2, [pc, #32]	; (80072b0 <USB_FlushRxFifo+0x5c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d901      	bls.n	8007296 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e006      	b.n	80072a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0310 	and.w	r3, r3, #16
 800729e:	2b10      	cmp	r3, #16
 80072a0:	d0f0      	beq.n	8007284 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	00030d40 	.word	0x00030d40

080072b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b089      	sub	sp, #36	; 0x24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	4611      	mov	r1, r2
 80072c0:	461a      	mov	r2, r3
 80072c2:	460b      	mov	r3, r1
 80072c4:	71fb      	strb	r3, [r7, #7]
 80072c6:	4613      	mov	r3, r2
 80072c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80072d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d123      	bne.n	8007322 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80072da:	88bb      	ldrh	r3, [r7, #4]
 80072dc:	3303      	adds	r3, #3
 80072de:	089b      	lsrs	r3, r3, #2
 80072e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80072e2:	2300      	movs	r3, #0
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	e018      	b.n	800731a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072e8:	79fb      	ldrb	r3, [r7, #7]
 80072ea:	031a      	lsls	r2, r3, #12
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f4:	461a      	mov	r2, r3
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	3301      	adds	r3, #1
 8007300:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	3301      	adds	r3, #1
 8007306:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	3301      	adds	r3, #1
 800730c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	3301      	adds	r3, #1
 8007312:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	3301      	adds	r3, #1
 8007318:	61bb      	str	r3, [r7, #24]
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	429a      	cmp	r2, r3
 8007320:	d3e2      	bcc.n	80072e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3724      	adds	r7, #36	; 0x24
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007330:	b480      	push	{r7}
 8007332:	b08b      	sub	sp, #44	; 0x2c
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4613      	mov	r3, r2
 800733c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007346:	88fb      	ldrh	r3, [r7, #6]
 8007348:	089b      	lsrs	r3, r3, #2
 800734a:	b29b      	uxth	r3, r3
 800734c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800734e:	88fb      	ldrh	r3, [r7, #6]
 8007350:	f003 0303 	and.w	r3, r3, #3
 8007354:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007356:	2300      	movs	r3, #0
 8007358:	623b      	str	r3, [r7, #32]
 800735a:	e014      	b.n	8007386 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	601a      	str	r2, [r3, #0]
    pDest++;
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	3301      	adds	r3, #1
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	3301      	adds	r3, #1
 8007372:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	3301      	adds	r3, #1
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	3301      	adds	r3, #1
 800737e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	3301      	adds	r3, #1
 8007384:	623b      	str	r3, [r7, #32]
 8007386:	6a3a      	ldr	r2, [r7, #32]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	429a      	cmp	r2, r3
 800738c:	d3e6      	bcc.n	800735c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800738e:	8bfb      	ldrh	r3, [r7, #30]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d01e      	beq.n	80073d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800739e:	461a      	mov	r2, r3
 80073a0:	f107 0310 	add.w	r3, r7, #16
 80073a4:	6812      	ldr	r2, [r2, #0]
 80073a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	fa22 f303 	lsr.w	r3, r2, r3
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	701a      	strb	r2, [r3, #0]
      i++;
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	3301      	adds	r3, #1
 80073be:	623b      	str	r3, [r7, #32]
      pDest++;
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	3301      	adds	r3, #1
 80073c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80073c6:	8bfb      	ldrh	r3, [r7, #30]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80073cc:	8bfb      	ldrh	r3, [r7, #30]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1ea      	bne.n	80073a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	372c      	adds	r7, #44	; 0x2c
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4013      	ands	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073f8:	68fb      	ldr	r3, [r7, #12]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007406:	b480      	push	{r7}
 8007408:	b085      	sub	sp, #20
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	460b      	mov	r3, r1
 8007410:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007416:	78fb      	ldrb	r3, [r7, #3]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4413      	add	r3, r2
 800741e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007426:	78fb      	ldrb	r3, [r7, #3]
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4413      	add	r3, r2
 800742e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	4013      	ands	r3, r2
 8007438:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800743a:	68bb      	ldr	r3, [r7, #8]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	f003 0301 	and.w	r3, r3, #1
}
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3301      	adds	r3, #1
 8007474:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4a13      	ldr	r2, [pc, #76]	; (80074c8 <USB_CoreReset+0x64>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d901      	bls.n	8007482 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e01b      	b.n	80074ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	daf2      	bge.n	8007470 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	f043 0201 	orr.w	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3301      	adds	r3, #1
 800749e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4a09      	ldr	r2, [pc, #36]	; (80074c8 <USB_CoreReset+0x64>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d901      	bls.n	80074ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e006      	b.n	80074ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d0f0      	beq.n	800749a <USB_CoreReset+0x36>

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	00030d40 	.word	0x00030d40

080074cc <USB_HS_PHYCInit>:
  *         Init the low level hardware : GPIO, CLOCK, NVIC...
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_HS_PHYCInit(USB_OTG_GlobalTypeDef *USBx)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  __IO uint32_t count = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Enable LDO */
  USB_HS_PHYC->USB_HS_PHYC_LDO |= USB_HS_PHYC_LDO_ENABLE;
 80074d8:	4b16      	ldr	r3, [pc, #88]	; (8007534 <USB_HS_PHYCInit+0x68>)
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	4a15      	ldr	r2, [pc, #84]	; (8007534 <USB_HS_PHYCInit+0x68>)
 80074de:	f043 0304 	orr.w	r3, r3, #4
 80074e2:	6193      	str	r3, [r2, #24]

  /* wait for LDO Ready */
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 80074e4:	e008      	b.n	80074f8 <USB_HS_PHYCInit+0x2c>
  {
    count++;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3301      	adds	r3, #1
 80074ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4a12      	ldr	r2, [pc, #72]	; (8007538 <USB_HS_PHYCInit+0x6c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d901      	bls.n	80074f8 <USB_HS_PHYCInit+0x2c>
    {
      return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e019      	b.n	800752c <USB_HS_PHYCInit+0x60>
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 80074f8:	4b0e      	ldr	r3, [pc, #56]	; (8007534 <USB_HS_PHYCInit+0x68>)
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0f0      	beq.n	80074e6 <USB_HS_PHYCInit+0x1a>
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x4U << 1);
  }
  else if (HSE_VALUE == 25000000U) /* HSE = 25MHz */
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x5U << 1);
 8007504:	4b0b      	ldr	r3, [pc, #44]	; (8007534 <USB_HS_PHYCInit+0x68>)
 8007506:	220a      	movs	r2, #10
 8007508:	601a      	str	r2, [r3, #0]
  {
    /* ... */
  }

  /* Control the tuning interface of the High Speed PHY */
  USB_HS_PHYC->USB_HS_PHYC_TUNE |= USB_HS_PHYC_TUNE_VALUE;
 800750a:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <USB_HS_PHYCInit+0x68>)
 800750c:	68da      	ldr	r2, [r3, #12]
 800750e:	4909      	ldr	r1, [pc, #36]	; (8007534 <USB_HS_PHYCInit+0x68>)
 8007510:	f640 7313 	movw	r3, #3859	; 0xf13
 8007514:	4313      	orrs	r3, r2
 8007516:	60cb      	str	r3, [r1, #12]

  /* Enable PLL internal PHY */
  USB_HS_PHYC->USB_HS_PHYC_PLL |= USB_HS_PHYC_PLL_PLLEN;
 8007518:	4b06      	ldr	r3, [pc, #24]	; (8007534 <USB_HS_PHYCInit+0x68>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a05      	ldr	r2, [pc, #20]	; (8007534 <USB_HS_PHYCInit+0x68>)
 800751e:	f043 0301 	orr.w	r3, r3, #1
 8007522:	6013      	str	r3, [r2, #0]


  /* 2ms Delay required to get internal phy clock stable */
  HAL_Delay(2U);
 8007524:	2002      	movs	r0, #2
 8007526:	f7fa fca9 	bl	8001e7c <HAL_Delay>

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	40017c00 	.word	0x40017c00
 8007538:	00030d40 	.word	0x00030d40

0800753c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800753c:	b084      	sub	sp, #16
 800753e:	b580      	push	{r7, lr}
 8007540:	b086      	sub	sp, #24
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800754a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800755c:	461a      	mov	r2, r3
 800755e:	2300      	movs	r3, #0
 8007560:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007576:	2b00      	cmp	r3, #0
 8007578:	d018      	beq.n	80075ac <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757c:	2b01      	cmp	r3, #1
 800757e:	d10a      	bne.n	8007596 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800758e:	f043 0304 	orr.w	r3, r3, #4
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	e014      	b.n	80075c0 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075a4:	f023 0304 	bic.w	r3, r3, #4
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	e009      	b.n	80075c0 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075ba:	f023 0304 	bic.w	r3, r3, #4
 80075be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075c0:	2110      	movs	r1, #16
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff fe12 	bl	80071ec <USB_FlushTxFifo>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff fe3e 	bl	8007254 <USB_FlushRxFifo>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80075e2:	2300      	movs	r3, #0
 80075e4:	613b      	str	r3, [r7, #16]
 80075e6:	e015      	b.n	8007614 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f4:	461a      	mov	r2, r3
 80075f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075fa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4413      	add	r3, r2
 8007604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007608:	461a      	mov	r2, r3
 800760a:	2300      	movs	r3, #0
 800760c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	3301      	adds	r3, #1
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	429a      	cmp	r2, r3
 800761a:	d3e5      	bcc.n	80075e8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007628:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00b      	beq.n	800764e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800763c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a13      	ldr	r2, [pc, #76]	; (8007690 <USB_HostInit+0x154>)
 8007642:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a13      	ldr	r2, [pc, #76]	; (8007694 <USB_HostInit+0x158>)
 8007648:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800764c:	e009      	b.n	8007662 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2280      	movs	r2, #128	; 0x80
 8007652:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a10      	ldr	r2, [pc, #64]	; (8007698 <USB_HostInit+0x15c>)
 8007658:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a0f      	ldr	r2, [pc, #60]	; (800769c <USB_HostInit+0x160>)
 800765e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	2b00      	cmp	r3, #0
 8007666:	d105      	bne.n	8007674 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	f043 0210 	orr.w	r2, r3, #16
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699a      	ldr	r2, [r3, #24]
 8007678:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <USB_HostInit+0x164>)
 800767a:	4313      	orrs	r3, r2
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007680:	7dfb      	ldrb	r3, [r7, #23]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800768c:	b004      	add	sp, #16
 800768e:	4770      	bx	lr
 8007690:	01000200 	.word	0x01000200
 8007694:	00e00300 	.word	0x00e00300
 8007698:	00600080 	.word	0x00600080
 800769c:	004000e0 	.word	0x004000e0
 80076a0:	a3200008 	.word	0xa3200008

080076a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076c2:	f023 0303 	bic.w	r3, r3, #3
 80076c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	f003 0303 	and.w	r3, r3, #3
 80076d6:	68f9      	ldr	r1, [r7, #12]
 80076d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80076dc:	4313      	orrs	r3, r2
 80076de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d107      	bne.n	80076f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ec:	461a      	mov	r2, r3
 80076ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80076f2:	6053      	str	r3, [r2, #4]
 80076f4:	e009      	b.n	800770a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80076f6:	78fb      	ldrb	r3, [r7, #3]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d106      	bne.n	800770a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007702:	461a      	mov	r2, r3
 8007704:	f241 7370 	movw	r3, #6000	; 0x1770
 8007708:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007738:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007746:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007748:	2064      	movs	r0, #100	; 0x64
 800774a:	f7fa fb97 	bl	8001e7c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800775a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800775c:	200a      	movs	r0, #10
 800775e:	f7fa fb8d 	bl	8001e7c <HAL_Delay>

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007790:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d109      	bne.n	80077b0 <USB_DriveVbus+0x44>
 800779c:	78fb      	ldrb	r3, [r7, #3]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d106      	bne.n	80077b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80077ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ba:	d109      	bne.n	80077d0 <USB_DriveVbus+0x64>
 80077bc:	78fb      	ldrb	r3, [r7, #3]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d106      	bne.n	80077d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	0c5b      	lsrs	r3, r3, #17
 80077fc:	f003 0303 	and.w	r3, r3, #3
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	b29b      	uxth	r3, r3
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
	...

08007830 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	4608      	mov	r0, r1
 800783a:	4611      	mov	r1, r2
 800783c:	461a      	mov	r2, r3
 800783e:	4603      	mov	r3, r0
 8007840:	70fb      	strb	r3, [r7, #3]
 8007842:	460b      	mov	r3, r1
 8007844:	70bb      	strb	r3, [r7, #2]
 8007846:	4613      	mov	r3, r2
 8007848:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	4413      	add	r3, r2
 800785a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800785e:	461a      	mov	r2, r3
 8007860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007864:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007866:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800786a:	2b03      	cmp	r3, #3
 800786c:	d87e      	bhi.n	800796c <USB_HC_Init+0x13c>
 800786e:	a201      	add	r2, pc, #4	; (adr r2, 8007874 <USB_HC_Init+0x44>)
 8007870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007874:	08007885 	.word	0x08007885
 8007878:	0800792f 	.word	0x0800792f
 800787c:	08007885 	.word	0x08007885
 8007880:	080078f1 	.word	0x080078f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007884:	78fb      	ldrb	r3, [r7, #3]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	4413      	add	r3, r2
 800788c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007890:	461a      	mov	r2, r3
 8007892:	f240 439d 	movw	r3, #1181	; 0x49d
 8007896:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007898:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800789c:	2b00      	cmp	r3, #0
 800789e:	da10      	bge.n	80078c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	78fa      	ldrb	r2, [r7, #3]
 80078b0:	0151      	lsls	r1, r2, #5
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	440a      	add	r2, r1
 80078b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078be:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80078c0:	e057      	b.n	8007972 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d051      	beq.n	8007972 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	78fa      	ldrb	r2, [r7, #3]
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80078ec:	60d3      	str	r3, [r2, #12]
      break;
 80078ee:	e040      	b.n	8007972 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078fc:	461a      	mov	r2, r3
 80078fe:	f240 639d 	movw	r3, #1693	; 0x69d
 8007902:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007904:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007908:	2b00      	cmp	r3, #0
 800790a:	da34      	bge.n	8007976 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800790c:	78fb      	ldrb	r3, [r7, #3]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	4413      	add	r3, r2
 8007914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	78fa      	ldrb	r2, [r7, #3]
 800791c:	0151      	lsls	r1, r2, #5
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	440a      	add	r2, r1
 8007922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800792a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800792c:	e023      	b.n	8007976 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800792e:	78fb      	ldrb	r3, [r7, #3]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	4413      	add	r3, r2
 8007936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800793a:	461a      	mov	r2, r3
 800793c:	f240 2325 	movw	r3, #549	; 0x225
 8007940:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007942:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007946:	2b00      	cmp	r3, #0
 8007948:	da17      	bge.n	800797a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800794a:	78fb      	ldrb	r3, [r7, #3]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	4413      	add	r3, r2
 8007952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	78fa      	ldrb	r2, [r7, #3]
 800795a:	0151      	lsls	r1, r2, #5
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	440a      	add	r2, r1
 8007960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007964:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007968:	60d3      	str	r3, [r2, #12]
      }
      break;
 800796a:	e006      	b.n	800797a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	77fb      	strb	r3, [r7, #31]
      break;
 8007970:	e004      	b.n	800797c <USB_HC_Init+0x14c>
      break;
 8007972:	bf00      	nop
 8007974:	e002      	b.n	800797c <USB_HC_Init+0x14c>
      break;
 8007976:	bf00      	nop
 8007978:	e000      	b.n	800797c <USB_HC_Init+0x14c>
      break;
 800797a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800797c:	78fb      	ldrb	r3, [r7, #3]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	4413      	add	r3, r2
 8007984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	78fa      	ldrb	r2, [r7, #3]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	440a      	add	r2, r1
 8007992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007996:	f043 0302 	orr.w	r3, r3, #2
 800799a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079a2:	699a      	ldr	r2, [r3, #24]
 80079a4:	78fb      	ldrb	r3, [r7, #3]
 80079a6:	f003 030f 	and.w	r3, r3, #15
 80079aa:	2101      	movs	r1, #1
 80079ac:	fa01 f303 	lsl.w	r3, r1, r3
 80079b0:	6939      	ldr	r1, [r7, #16]
 80079b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079b6:	4313      	orrs	r3, r2
 80079b8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80079c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	da03      	bge.n	80079d6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80079ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079d2:	61bb      	str	r3, [r7, #24]
 80079d4:	e001      	b.n	80079da <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7ff feff 	bl	80077de <USB_GetHostSpeed>
 80079e0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80079e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d106      	bne.n	80079f8 <USB_HC_Init+0x1c8>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d003      	beq.n	80079f8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80079f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079f4:	617b      	str	r3, [r7, #20]
 80079f6:	e001      	b.n	80079fc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079fc:	787b      	ldrb	r3, [r7, #1]
 80079fe:	059b      	lsls	r3, r3, #22
 8007a00:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a04:	78bb      	ldrb	r3, [r7, #2]
 8007a06:	02db      	lsls	r3, r3, #11
 8007a08:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a0c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a12:	049b      	lsls	r3, r3, #18
 8007a14:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a18:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a1a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a20:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a26:	78fb      	ldrb	r3, [r7, #3]
 8007a28:	0159      	lsls	r1, r3, #5
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	440b      	add	r3, r1
 8007a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a32:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a38:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007a3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d003      	beq.n	8007a4a <USB_HC_Init+0x21a>
 8007a42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d10f      	bne.n	8007a6a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007a4a:	78fb      	ldrb	r3, [r7, #3]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	78fa      	ldrb	r2, [r7, #3]
 8007a5a:	0151      	lsls	r1, r2, #5
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	440a      	add	r2, r1
 8007a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a68:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007a6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3720      	adds	r7, #32
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b08c      	sub	sp, #48	; 0x30
 8007a78:	af02      	add	r7, sp, #8
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	785b      	ldrb	r3, [r3, #1]
 8007a8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a90:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d02d      	beq.n	8007afa <USB_HC_StartXfer+0x86>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	791b      	ldrb	r3, [r3, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d129      	bne.n	8007afa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007aa6:	79fb      	ldrb	r3, [r7, #7]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d117      	bne.n	8007adc <USB_HC_StartXfer+0x68>
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	79db      	ldrb	r3, [r3, #7]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <USB_HC_StartXfer+0x48>
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	79db      	ldrb	r3, [r3, #7]
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d10f      	bne.n	8007adc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	69fa      	ldr	r2, [r7, #28]
 8007acc:	0151      	lsls	r1, r2, #5
 8007ace:	6a3a      	ldr	r2, [r7, #32]
 8007ad0:	440a      	add	r2, r1
 8007ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ada:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10b      	bne.n	8007afa <USB_HC_StartXfer+0x86>
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	795b      	ldrb	r3, [r3, #5]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d107      	bne.n	8007afa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	785b      	ldrb	r3, [r3, #1]
 8007aee:	4619      	mov	r1, r3
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 fa0f 	bl	8007f14 <USB_DoPing>
      return HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	e0f8      	b.n	8007cec <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d018      	beq.n	8007b34 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	8912      	ldrh	r2, [r2, #8]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	8912      	ldrh	r2, [r2, #8]
 8007b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b16:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007b18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b1a:	8b7b      	ldrh	r3, [r7, #26]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d90b      	bls.n	8007b38 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007b20:	8b7b      	ldrh	r3, [r7, #26]
 8007b22:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	8912      	ldrh	r2, [r2, #8]
 8007b2a:	fb03 f202 	mul.w	r2, r3, r2
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	611a      	str	r2, [r3, #16]
 8007b32:	e001      	b.n	8007b38 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007b34:	2301      	movs	r3, #1
 8007b36:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	78db      	ldrb	r3, [r3, #3]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d007      	beq.n	8007b50 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	8912      	ldrh	r2, [r2, #8]
 8007b46:	fb03 f202 	mul.w	r2, r3, r2
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	611a      	str	r2, [r3, #16]
 8007b4e:	e003      	b.n	8007b58 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	695a      	ldr	r2, [r3, #20]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b62:	04d9      	lsls	r1, r3, #19
 8007b64:	4b63      	ldr	r3, [pc, #396]	; (8007cf4 <USB_HC_StartXfer+0x280>)
 8007b66:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b68:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	7a9b      	ldrb	r3, [r3, #10]
 8007b6e:	075b      	lsls	r3, r3, #29
 8007b70:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b74:	69f9      	ldr	r1, [r7, #28]
 8007b76:	0148      	lsls	r0, r1, #5
 8007b78:	6a39      	ldr	r1, [r7, #32]
 8007b7a:	4401      	add	r1, r0
 8007b7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b80:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b82:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007b84:	79fb      	ldrb	r3, [r7, #7]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d009      	beq.n	8007b9e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	68d9      	ldr	r1, [r3, #12]
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b9a:	460a      	mov	r2, r1
 8007b9c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	bf0c      	ite	eq
 8007bae:	2301      	moveq	r3, #1
 8007bb0:	2300      	movne	r3, #0
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	69fa      	ldr	r2, [r7, #28]
 8007bc6:	0151      	lsls	r1, r2, #5
 8007bc8:	6a3a      	ldr	r2, [r7, #32]
 8007bca:	440a      	add	r2, r1
 8007bcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bd0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007bd4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	7e7b      	ldrb	r3, [r7, #25]
 8007be6:	075b      	lsls	r3, r3, #29
 8007be8:	69f9      	ldr	r1, [r7, #28]
 8007bea:	0148      	lsls	r0, r1, #5
 8007bec:	6a39      	ldr	r1, [r7, #32]
 8007bee:	4401      	add	r1, r0
 8007bf0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c0e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	78db      	ldrb	r3, [r3, #3]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d004      	beq.n	8007c22 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c1e:	613b      	str	r3, [r7, #16]
 8007c20:	e003      	b.n	8007c2a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c28:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c30:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c3e:	461a      	mov	r2, r3
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e04e      	b.n	8007cec <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	78db      	ldrb	r3, [r3, #3]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d149      	bne.n	8007cea <USB_HC_StartXfer+0x276>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d045      	beq.n	8007cea <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	79db      	ldrb	r3, [r3, #7]
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d830      	bhi.n	8007cc8 <USB_HC_StartXfer+0x254>
 8007c66:	a201      	add	r2, pc, #4	; (adr r2, 8007c6c <USB_HC_StartXfer+0x1f8>)
 8007c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6c:	08007c7d 	.word	0x08007c7d
 8007c70:	08007ca1 	.word	0x08007ca1
 8007c74:	08007c7d 	.word	0x08007c7d
 8007c78:	08007ca1 	.word	0x08007ca1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	3303      	adds	r3, #3
 8007c82:	089b      	lsrs	r3, r3, #2
 8007c84:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007c86:	8afa      	ldrh	r2, [r7, #22]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d91c      	bls.n	8007ccc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	f043 0220 	orr.w	r2, r3, #32
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c9e:	e015      	b.n	8007ccc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	3303      	adds	r3, #3
 8007ca6:	089b      	lsrs	r3, r3, #2
 8007ca8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007caa:	8afa      	ldrh	r2, [r7, #22]
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d90a      	bls.n	8007cd0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	619a      	str	r2, [r3, #24]
        }
        break;
 8007cc6:	e003      	b.n	8007cd0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007cc8:	bf00      	nop
 8007cca:	e002      	b.n	8007cd2 <USB_HC_StartXfer+0x25e>
        break;
 8007ccc:	bf00      	nop
 8007cce:	e000      	b.n	8007cd2 <USB_HC_StartXfer+0x25e>
        break;
 8007cd0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	68d9      	ldr	r1, [r3, #12]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	785a      	ldrb	r2, [r3, #1]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	9000      	str	r0, [sp, #0]
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f7ff fae5 	bl	80072b4 <USB_WritePacket>
  }

  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3728      	adds	r7, #40	; 0x28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	1ff80000 	.word	0x1ff80000

08007cf8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	b29b      	uxth	r3, r3
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b089      	sub	sp, #36	; 0x24
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	0c9b      	lsrs	r3, r3, #18
 8007d42:	f003 0303 	and.w	r3, r3, #3
 8007d46:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	0fdb      	lsrs	r3, r3, #31
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f003 0320 	and.w	r3, r3, #32
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	d104      	bne.n	8007d74 <USB_HC_Halt+0x5a>
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	e0c8      	b.n	8007f06 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <USB_HC_Halt+0x66>
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d163      	bne.n	8007e48 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	0151      	lsls	r1, r2, #5
 8007d92:	69fa      	ldr	r2, [r7, #28]
 8007d94:	440a      	add	r2, r1
 8007d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d9e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f040 80ab 	bne.w	8007f04 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d133      	bne.n	8007e22 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	0151      	lsls	r1, r2, #5
 8007dcc:	69fa      	ldr	r2, [r7, #28]
 8007dce:	440a      	add	r2, r1
 8007dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dd8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	015a      	lsls	r2, r3, #5
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	4413      	add	r3, r2
 8007de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	0151      	lsls	r1, r2, #5
 8007dec:	69fa      	ldr	r2, [r7, #28]
 8007dee:	440a      	add	r2, r1
 8007df0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007df8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e06:	d81d      	bhi.n	8007e44 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e1e:	d0ec      	beq.n	8007dfa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e20:	e070      	b.n	8007f04 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	69fa      	ldr	r2, [r7, #28]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e40:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e42:	e05f      	b.n	8007f04 <USB_HC_Halt+0x1ea>
            break;
 8007e44:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e46:	e05d      	b.n	8007f04 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	0151      	lsls	r1, r2, #5
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	440a      	add	r2, r1
 8007e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e66:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d133      	bne.n	8007ee0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	015a      	lsls	r2, r3, #5
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	0151      	lsls	r1, r2, #5
 8007e8a:	69fa      	ldr	r2, [r7, #28]
 8007e8c:	440a      	add	r2, r1
 8007e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	0151      	lsls	r1, r2, #5
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	440a      	add	r2, r1
 8007eae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007eb6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ec4:	d81d      	bhi.n	8007f02 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007edc:	d0ec      	beq.n	8007eb8 <USB_HC_Halt+0x19e>
 8007ede:	e011      	b.n	8007f04 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007efe:	6013      	str	r3, [r2, #0]
 8007f00:	e000      	b.n	8007f04 <USB_HC_Halt+0x1ea>
          break;
 8007f02:	bf00      	nop
    }
  }

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3724      	adds	r7, #36	; 0x24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
	...

08007f14 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007f24:	78fb      	ldrb	r3, [r7, #3]
 8007f26:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	04da      	lsls	r2, r3, #19
 8007f30:	4b15      	ldr	r3, [pc, #84]	; (8007f88 <USB_DoPing+0x74>)
 8007f32:	4013      	ands	r3, r2
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	0151      	lsls	r1, r2, #5
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	440a      	add	r2, r1
 8007f3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f44:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f5c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f64:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f72:	461a      	mov	r2, r3
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	371c      	adds	r7, #28
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	1ff80000 	.word	0x1ff80000

08007f8c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff f8c6 	bl	8007132 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007fa6:	2110      	movs	r1, #16
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7ff f91f 	bl	80071ec <USB_FlushTxFifo>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7ff f94b 	bl	8007254 <USB_FlushRxFifo>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	61bb      	str	r3, [r7, #24]
 8007fcc:	e01f      	b.n	800800e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fe4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ff4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008002:	461a      	mov	r2, r3
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	3301      	adds	r3, #1
 800800c:	61bb      	str	r3, [r7, #24]
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	2b0f      	cmp	r3, #15
 8008012:	d9dc      	bls.n	8007fce <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008014:	2300      	movs	r3, #0
 8008016:	61bb      	str	r3, [r7, #24]
 8008018:	e034      	b.n	8008084 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	4413      	add	r3, r2
 8008022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008030:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008038:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008040:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	4413      	add	r3, r2
 800804a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800804e:	461a      	mov	r2, r3
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	3301      	adds	r3, #1
 8008058:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008060:	d80c      	bhi.n	800807c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	4413      	add	r3, r2
 800806a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008078:	d0ec      	beq.n	8008054 <USB_StopHost+0xc8>
 800807a:	e000      	b.n	800807e <USB_StopHost+0xf2>
        break;
 800807c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	3301      	adds	r3, #1
 8008082:	61bb      	str	r3, [r7, #24]
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	2b0f      	cmp	r3, #15
 8008088:	d9c7      	bls.n	800801a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008090:	461a      	mov	r2, r3
 8008092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008096:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800809e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff f835 	bl	8007110 <USB_EnableGlobalInt>

  return ret;
 80080a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3720      	adds	r7, #32
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBH_HID_InterfaceInit>:
 phost->pActiveClass->iface_initnum  - variable where last index of an active interface is hold. It
 is used as an index of HID_Handle index as well.

 phost->pActiveClass->interfaces - this variable hold all successfully initialised interfaces.
 */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost) {
 80080b0:	b5b0      	push	{r4, r5, r7, lr}
 80080b2:	b08c      	sub	sp, #48	; 0x30
 80080b4:	af04      	add	r7, sp, #16
 80080b6:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 80080b8:	2301      	movs	r3, #1
 80080ba:	77fb      	strb	r3, [r7, #31]
	USBH_StatusTypeDef ctlStatus = USBH_BUSY;
 80080bc:	2301      	movs	r3, #1
 80080be:	77bb      	strb	r3, [r7, #30]
	HID_HandleTypeDef *HID_Handle;
	USBH_InterfaceDescTypeDef *Itf_Desc;

	uint8_t iface_num = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	76fb      	strb	r3, [r7, #27]
	uint8_t i = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	777b      	strb	r3, [r7, #29]
	uint8_t max_ep;
	uint8_t num = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	773b      	strb	r3, [r7, #28]

	switch (phost->pActiveClass->iface_init) {
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080d2:	7f9b      	ldrb	r3, [r3, #30]
 80080d4:	2b07      	cmp	r3, #7
 80080d6:	f200 829f 	bhi.w	8008618 <USBH_HID_InterfaceInit+0x568>
 80080da:	a201      	add	r2, pc, #4	; (adr r2, 80080e0 <USBH_HID_InterfaceInit+0x30>)
 80080dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e0:	08008101 	.word	0x08008101
 80080e4:	080081b3 	.word	0x080081b3
 80080e8:	08008229 	.word	0x08008229
 80080ec:	080082a1 	.word	0x080082a1
 80080f0:	0800837b 	.word	0x0800837b
 80080f4:	080084d7 	.word	0x080084d7
 80080f8:	08008507 	.word	0x08008507
 80080fc:	080085bd 	.word	0x080085bd
	case IFACE_INIT: {

		phost->pActiveClass->iface_initnum = 0U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008106:	2200      	movs	r2, #0
 8008108:	775a      	strb	r2, [r3, #29]

		//init all possible HID_Handlers even if not all will be used.

		for (; i < USBH_MAX_NUM_INTERFACES; i++) {
 800810a:	e044      	b.n	8008196 <USBH_HID_InterfaceInit+0xe6>
			phost->pActiveClass->pData[i] = (HID_HandleTypeDef*) USBH_malloc(
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008112:	7f7d      	ldrb	r5, [r7, #29]
 8008114:	206c      	movs	r0, #108	; 0x6c
 8008116:	f004 fb23 	bl	800c760 <malloc>
 800811a:	4603      	mov	r3, r0
 800811c:	461a      	mov	r2, r3
 800811e:	f105 0308 	add.w	r3, r5, #8
 8008122:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
					sizeof(HID_HandleTypeDef));
			HID_Handle = (HID_HandleTypeDef*) phost->pActiveClass->pData[i];
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800812c:	7f7a      	ldrb	r2, [r7, #29]
 800812e:	3208      	adds	r2, #8
 8008130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008134:	617b      	str	r3, [r7, #20]
			memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8008136:	226c      	movs	r2, #108	; 0x6c
 8008138:	2100      	movs	r1, #0
 800813a:	6978      	ldr	r0, [r7, #20]
 800813c:	f004 fb20 	bl	800c780 <memset>

			// HID_Handle = phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
			HID_Handle->state = HID_INIT;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2200      	movs	r2, #0
 8008144:	709a      	strb	r2, [r3, #2]
			HID_Handle->ctl_state = HID_REQ_INIT;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2200      	movs	r2, #0
 800814a:	715a      	strb	r2, [r3, #5]
			HID_Handle->ep_addr =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].bEndpointAddress;
 800814c:	7f7b      	ldrb	r3, [r7, #29]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	211a      	movs	r1, #26
 8008152:	fb01 f303 	mul.w	r3, r1, r3
 8008156:	4413      	add	r3, r2
 8008158:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800815c:	781a      	ldrb	r2, [r3, #0]
			HID_Handle->ep_addr =
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	769a      	strb	r2, [r3, #26]
			HID_Handle->length =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].wMaxPacketSize;
 8008162:	7f7b      	ldrb	r3, [r7, #29]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	211a      	movs	r1, #26
 8008168:	fb01 f303 	mul.w	r3, r1, r3
 800816c:	4413      	add	r3, r2
 800816e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008172:	881a      	ldrh	r2, [r3, #0]
			HID_Handle->length =
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	831a      	strh	r2, [r3, #24]
			HID_Handle->poll =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].bInterval;
 8008178:	7f7b      	ldrb	r3, [r7, #29]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	211a      	movs	r1, #26
 800817e:	fb01 f303 	mul.w	r3, r1, r3
 8008182:	4413      	add	r3, r2
 8008184:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	b29a      	uxth	r2, r3
			HID_Handle->poll =
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	839a      	strh	r2, [r3, #28]
		for (; i < USBH_MAX_NUM_INTERFACES; i++) {
 8008190:	7f7b      	ldrb	r3, [r7, #29]
 8008192:	3301      	adds	r3, #1
 8008194:	777b      	strb	r3, [r7, #29]
 8008196:	7f7b      	ldrb	r3, [r7, #29]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d9b7      	bls.n	800810c <USBH_HID_InterfaceInit+0x5c>

		}
		phost->pActiveClass->interfaces = 0U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081a2:	2200      	movs	r2, #0
 80081a4:	771a      	strb	r2, [r3, #28]
		phost->pActiveClass->iface_init = IFACE_READHID;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081ac:	2201      	movs	r2, #1
 80081ae:	779a      	strb	r2, [r3, #30]

	}
		break;
 80081b0:	e232      	b.n	8008618 <USBH_HID_InterfaceInit+0x568>

	case IFACE_READHID: {
		iface_num =
				phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum].bInterfaceNumber;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081b8:	7f5b      	ldrb	r3, [r3, #29]
 80081ba:	4619      	mov	r1, r3
		iface_num =
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	231a      	movs	r3, #26
 80081c0:	fb01 f303 	mul.w	r3, r1, r3
 80081c4:	4413      	add	r3, r2
 80081c6:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	76fb      	strb	r3, [r7, #27]
		USBH_SelectInterface(phost, iface_num);
 80081ce:	7efb      	ldrb	r3, [r7, #27]
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f002 fc18 	bl	800aa08 <USBH_SelectInterface>

		if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE,
				phost->pActiveClass->iface_initnum) == USBH_OK) {
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
		if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE,
 80081de:	7f5b      	ldrb	r3, [r3, #29]
 80081e0:	461a      	mov	r2, r3
 80081e2:	2109      	movs	r1, #9
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fba3 	bl	8008930 <USBH_HID_GetHIDDescriptor>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f040 820c 	bne.w	800860a <USBH_HID_InterfaceInit+0x55a>

			HID_Handle =
					phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	f8d2 237c 	ldr.w	r2, [r2, #892]	; 0x37c
 80081fe:	7f52      	ldrb	r2, [r2, #29]
			HID_Handle =
 8008200:	3208      	adds	r2, #8
 8008202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008206:	617b      	str	r3, [r7, #20]
			USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008214:	4619      	mov	r1, r3
 8008216:	4610      	mov	r0, r2
 8008218:	f000 fc23 	bl	8008a62 <USBH_HID_ParseHIDDesc>
			phost->pActiveClass->iface_init = IFACE_READHIDRPTDESC;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008222:	2202      	movs	r2, #2
 8008224:	779a      	strb	r2, [r3, #30]
		} else {
			//TODO Check if device is XBOX360 game controller as it doesn't do HID Descriptors aparently
		}

	}
		break;
 8008226:	e1f0      	b.n	800860a <USBH_HID_InterfaceInit+0x55a>

	case IFACE_READHIDRPTDESC: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	f8d2 237c 	ldr.w	r2, [r2, #892]	; 0x37c
 8008234:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 8008236:	3208      	adds	r2, #8
 8008238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800823c:	617b      	str	r3, [r7, #20]
		iface_num =
				phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum].bInterfaceNumber;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008244:	7f5b      	ldrb	r3, [r3, #29]
 8008246:	4619      	mov	r1, r3
		iface_num =
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	231a      	movs	r3, #26
 800824c:	fb01 f303 	mul.w	r3, r1, r3
 8008250:	4413      	add	r3, r2
 8008252:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	76fb      	strb	r3, [r7, #27]
		USBH_SelectInterface(phost, iface_num);
 800825a:	7efb      	ldrb	r3, [r7, #27]
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f002 fbd2 	bl	800aa08 <USBH_SelectInterface>

		if (USBH_HID_GetHIDReportDescriptor(phost,
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
				HID_Handle->HID_Desc.wItemLength,
				phost->pActiveClass->iface_initnum) == USBH_OK) {
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
		if (USBH_HID_GetHIDReportDescriptor(phost,
 800826e:	7f5b      	ldrb	r3, [r3, #29]
 8008270:	461a      	mov	r2, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fb3f 	bl	80088f6 <USBH_HID_GetHIDReportDescriptor>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	f040 81c7 	bne.w	800860e <USBH_HID_InterfaceInit+0x55e>

			parse_report_descriptor(phost->device.Data,
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f503 708e 	add.w	r0, r3, #284	; 0x11c
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	3330      	adds	r3, #48	; 0x30
 800828e:	461a      	mov	r2, r3
 8008290:	f001 fba0 	bl	80099d4 <parse_report_descriptor>
					HID_Handle->HID_Desc.wItemLength,
					&(HID_Handle->HID_Desc.RptDesc));

			phost->pActiveClass->iface_init = IFACE_INITSUBCLASS;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800829a:	2203      	movs	r2, #3
 800829c:	779a      	strb	r2, [r3, #30]
		}
	}
		break;
 800829e:	e1b6      	b.n	800860e <USBH_HID_InterfaceInit+0x55e>

	case IFACE_INITSUBCLASS: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	f8d2 237c 	ldr.w	r2, [r2, #892]	; 0x37c
 80082ac:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 80082ae:	3208      	adds	r2, #8
 80082b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b4:	617b      	str	r3, [r7, #20]

		Itf_Desc =
				&phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum];
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082bc:	7f5b      	ldrb	r3, [r3, #29]
 80082be:	461a      	mov	r2, r3
		Itf_Desc =
 80082c0:	231a      	movs	r3, #26
 80082c2:	fb02 f303 	mul.w	r3, r2, r3
 80082c6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	4413      	add	r3, r2
 80082ce:	330a      	adds	r3, #10
 80082d0:	613b      	str	r3, [r7, #16]

		if ((Itf_Desc->bInterfaceClass == 0x03
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	795b      	ldrb	r3, [r3, #5]
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d107      	bne.n	80082ea <USBH_HID_InterfaceInit+0x23a>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	799b      	ldrb	r3, [r3, #6]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d103      	bne.n	80082ea <USBH_HID_InterfaceInit+0x23a>
				&& Itf_Desc->bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	79db      	ldrb	r3, [r3, #7]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d007      	beq.n	80082fa <USBH_HID_InterfaceInit+0x24a>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD))
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082f0:	f003 0303 	and.w	r3, r3, #3
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d109      	bne.n	800830e <USBH_HID_InterfaceInit+0x25e>

				{
			HID_Handle->Init = USBH_HID_KeybdInit;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	4aac      	ldr	r2, [pc, #688]	; (80085b0 <USBH_HID_InterfaceInit+0x500>)
 80082fe:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008306:	7f1a      	ldrb	r2, [r3, #28]
 8008308:	3201      	adds	r2, #1
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	771a      	strb	r2, [r3, #28]
		}

		if ((Itf_Desc->bInterfaceClass == 0x03
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	795b      	ldrb	r3, [r3, #5]
 8008312:	2b03      	cmp	r3, #3
 8008314:	d107      	bne.n	8008326 <USBH_HID_InterfaceInit+0x276>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	799b      	ldrb	r3, [r3, #6]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d103      	bne.n	8008326 <USBH_HID_InterfaceInit+0x276>
				&& Itf_Desc->bInterfaceProtocol == HID_MOUSE_BOOT_CODE)
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	79db      	ldrb	r3, [r3, #7]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d007      	beq.n	8008336 <USBH_HID_InterfaceInit+0x286>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE))
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800832c:	f003 0303 	and.w	r3, r3, #3
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b01      	cmp	r3, #1
 8008334:	d109      	bne.n	800834a <USBH_HID_InterfaceInit+0x29a>

				{
			HID_Handle->Init = USBH_HID_MouseInit;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	4a9e      	ldr	r2, [pc, #632]	; (80085b4 <USBH_HID_InterfaceInit+0x504>)
 800833a:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008342:	7f1a      	ldrb	r2, [r3, #28]
 8008344:	3201      	adds	r2, #1
 8008346:	b2d2      	uxtb	r2, r2
 8008348:	771a      	strb	r2, [r3, #28]
		}

		if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_JOYSTICK) {
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008350:	f003 0303 	and.w	r3, r3, #3
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b03      	cmp	r3, #3
 8008358:	d109      	bne.n	800836e <USBH_HID_InterfaceInit+0x2be>
			HID_Handle->Init = USBH_HID_GamepadInit;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	4a96      	ldr	r2, [pc, #600]	; (80085b8 <USBH_HID_InterfaceInit+0x508>)
 800835e:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008366:	7f1a      	ldrb	r2, [r3, #28]
 8008368:	3201      	adds	r2, #1
 800836a:	b2d2      	uxtb	r2, r2
 800836c:	771a      	strb	r2, [r3, #28]
		}

		phost->pActiveClass->iface_init = IFACE_INITENDPNT;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008374:	2204      	movs	r2, #4
 8008376:	779a      	strb	r2, [r3, #30]
	}
		break;
 8008378:	e14e      	b.n	8008618 <USBH_HID_InterfaceInit+0x568>

	case IFACE_INITENDPNT: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	f8d2 237c 	ldr.w	r2, [r2, #892]	; 0x37c
 8008386:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 8008388:	3208      	adds	r2, #8
 800838a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838e:	617b      	str	r3, [r7, #20]

		/* Check fo available number of endpoints*/
		/* Find the number of EPs in the Interface Descriptor*/
		/* Choose the lower number in order not to overrun the buffer allocated*/
		max_ep =
				((phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008396:	4619      	mov	r1, r3
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	231a      	movs	r3, #26
 800839c:	fb01 f303 	mul.w	r3, r1, r3
 80083a0:	4413      	add	r3, r2
 80083a2:	f203 3346 	addw	r3, r3, #838	; 0x346
 80083a6:	781b      	ldrb	r3, [r3, #0]
		max_ep =
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	bf28      	it	cs
 80083ac:	2302      	movcs	r3, #2
 80083ae:	73fb      	strb	r3, [r7, #15]
						<= USBH_MAX_NUM_ENDPOINTS) ?
						phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
						USBH_MAX_NUM_ENDPOINTS);

		/* Decode endpoint IN and OUT address from interface descriptor*/
		for (; num < max_ep; num++) {
 80083b0:	e086      	b.n	80084c0 <USBH_HID_InterfaceInit+0x410>
			if (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80083b8:	4618      	mov	r0, r3
 80083ba:	7f3b      	ldrb	r3, [r7, #28]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	3301      	adds	r3, #1
 80083c0:	00d9      	lsls	r1, r3, #3
 80083c2:	231a      	movs	r3, #26
 80083c4:	fb00 f303 	mul.w	r3, r0, r3
 80083c8:	440b      	add	r3, r1
 80083ca:	4413      	add	r3, r2
 80083cc:	f203 3346 	addw	r3, r3, #838	; 0x346
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	b25b      	sxtb	r3, r3
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	da38      	bge.n	800844a <USBH_HID_InterfaceInit+0x39a>
					& 0x80U) {
				HID_Handle->InEp =
						(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80083de:	4618      	mov	r0, r3
 80083e0:	7f3b      	ldrb	r3, [r7, #28]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	3301      	adds	r3, #1
 80083e6:	00d9      	lsls	r1, r3, #3
 80083e8:	231a      	movs	r3, #26
 80083ea:	fb00 f303 	mul.w	r3, r0, r3
 80083ee:	440b      	add	r3, r1
 80083f0:	4413      	add	r3, r2
 80083f2:	f203 3346 	addw	r3, r3, #838	; 0x346
 80083f6:	781a      	ldrb	r2, [r3, #0]
				HID_Handle->InEp =
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	711a      	strb	r2, [r3, #4]
				HID_Handle->InPipe =\
 USBH_AllocPipe(phost, HID_Handle->InEp);
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	791b      	ldrb	r3, [r3, #4]
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f003 fce3 	bl	800bdce <USBH_AllocPipe>
 8008408:	4603      	mov	r3, r0
 800840a:	461a      	mov	r2, r3
				HID_Handle->InPipe =\
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	705a      	strb	r2, [r3, #1]

				/* Open pipe for IN endpoint*/
				USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp,
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	7859      	ldrb	r1, [r3, #1]
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	7918      	ldrb	r0, [r3, #4]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	8b12      	ldrh	r2, [r2, #24]
 8008428:	9202      	str	r2, [sp, #8]
 800842a:	2203      	movs	r2, #3
 800842c:	9201      	str	r2, [sp, #4]
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	4623      	mov	r3, r4
 8008432:	4602      	mov	r2, r0
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f003 fc9b 	bl	800bd70 <USBH_OpenPipe>
						phost->device.address, phost->device.speed,
						USB_EP_TYPE_INTR, HID_Handle->length);

				USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	785b      	ldrb	r3, [r3, #1]
 800843e:	2200      	movs	r2, #0
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f004 f8fb 	bl	800c63e <USBH_LL_SetToggle>
 8008448:	e037      	b.n	80084ba <USBH_HID_InterfaceInit+0x40a>

			} else {
				HID_Handle->OutEp =
						(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008450:	4618      	mov	r0, r3
 8008452:	7f3b      	ldrb	r3, [r7, #28]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	3301      	adds	r3, #1
 8008458:	00d9      	lsls	r1, r3, #3
 800845a:	231a      	movs	r3, #26
 800845c:	fb00 f303 	mul.w	r3, r0, r3
 8008460:	440b      	add	r3, r1
 8008462:	4413      	add	r3, r2
 8008464:	f203 3346 	addw	r3, r3, #838	; 0x346
 8008468:	781a      	ldrb	r2, [r3, #0]
				HID_Handle->OutEp =
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	70da      	strb	r2, [r3, #3]
				HID_Handle->OutPipe =\
 USBH_AllocPipe(phost,
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	78db      	ldrb	r3, [r3, #3]
 8008472:	4619      	mov	r1, r3
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f003 fcaa 	bl	800bdce <USBH_AllocPipe>
 800847a:	4603      	mov	r3, r0
 800847c:	461a      	mov	r2, r3
				HID_Handle->OutPipe =\
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	701a      	strb	r2, [r3, #0]
						HID_Handle->OutEp);

				/* Open pipe for OUT endpoint*/
				USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp,
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	7819      	ldrb	r1, [r3, #0]
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	78d8      	ldrb	r0, [r3, #3]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	8b12      	ldrh	r2, [r2, #24]
 800849a:	9202      	str	r2, [sp, #8]
 800849c:	2203      	movs	r2, #3
 800849e:	9201      	str	r2, [sp, #4]
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	4623      	mov	r3, r4
 80084a4:	4602      	mov	r2, r0
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f003 fc62 	bl	800bd70 <USBH_OpenPipe>
						phost->device.address, phost->device.speed,
						USB_EP_TYPE_INTR, HID_Handle->length);

				USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	2200      	movs	r2, #0
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f004 f8c2 	bl	800c63e <USBH_LL_SetToggle>
		for (; num < max_ep; num++) {
 80084ba:	7f3b      	ldrb	r3, [r7, #28]
 80084bc:	3301      	adds	r3, #1
 80084be:	773b      	strb	r3, [r7, #28]
 80084c0:	7f3a      	ldrb	r2, [r7, #28]
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	f4ff af74 	bcc.w	80083b2 <USBH_HID_InterfaceInit+0x302>
			}

		}

		phost->pActiveClass->iface_init = IFACE_SETPROTOCOL;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084d0:	2205      	movs	r2, #5
 80084d2:	779a      	strb	r2, [r3, #30]
	}
		break;
 80084d4:	e0a0      	b.n	8008618 <USBH_HID_InterfaceInit+0x568>

	case IFACE_SETPROTOCOL: {
		//Set protocol (0U boot, 1U report)

		ctlStatus = USBH_HID_SetProtocol(phost, 1U,
				phost->device.current_interface);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
		ctlStatus = USBH_HID_SetProtocol(phost, 1U,
 80084dc:	b29b      	uxth	r3, r3
 80084de:	461a      	mov	r2, r3
 80084e0:	2101      	movs	r1, #1
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fa9b 	bl	8008a1e <USBH_HID_SetProtocol>
 80084e8:	4603      	mov	r3, r0
 80084ea:	77bb      	strb	r3, [r7, #30]

		if (ctlStatus == USBH_OK || ctlStatus == USBH_NOT_SUPPORTED) {
 80084ec:	7fbb      	ldrb	r3, [r7, #30]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <USBH_HID_InterfaceInit+0x44a>
 80084f2:	7fbb      	ldrb	r3, [r7, #30]
 80084f4:	2b03      	cmp	r3, #3
 80084f6:	f040 808c 	bne.w	8008612 <USBH_HID_InterfaceInit+0x562>
			phost->pActiveClass->iface_init = IFACE_SETIDLE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008500:	2206      	movs	r2, #6
 8008502:	779a      	strb	r2, [r3, #30]
		}

	}
		break;
 8008504:	e085      	b.n	8008612 <USBH_HID_InterfaceInit+0x562>

	case IFACE_SETIDLE: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	f8d2 237c 	ldr.w	r2, [r2, #892]	; 0x37c
 8008512:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 8008514:	3208      	adds	r2, #8
 8008516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851a:	617b      	str	r3, [r7, #20]
		Itf_Desc =
				&phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum];
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008522:	7f5b      	ldrb	r3, [r3, #29]
 8008524:	461a      	mov	r2, r3
		Itf_Desc =
 8008526:	231a      	movs	r3, #26
 8008528:	fb02 f303 	mul.w	r3, r2, r3
 800852c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	4413      	add	r3, r2
 8008534:	330a      	adds	r3, #10
 8008536:	613b      	str	r3, [r7, #16]

		if ((Itf_Desc->bInterfaceClass == 0x03
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	795b      	ldrb	r3, [r3, #5]
 800853c:	2b03      	cmp	r3, #3
 800853e:	d107      	bne.n	8008550 <USBH_HID_InterfaceInit+0x4a0>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	799b      	ldrb	r3, [r3, #6]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d103      	bne.n	8008550 <USBH_HID_InterfaceInit+0x4a0>
				&& Itf_Desc->bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	79db      	ldrb	r3, [r3, #7]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d007      	beq.n	8008560 <USBH_HID_InterfaceInit+0x4b0>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD)) {
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b02      	cmp	r3, #2
 800855e:	d10a      	bne.n	8008576 <USBH_HID_InterfaceInit+0x4c6>
			//set up polling at 500ms - 1 unit should be 4ms
			ctlStatus = USBH_HID_SetIdle(phost, 125U, 0U,
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008566:	2200      	movs	r2, #0
 8008568:	217d      	movs	r1, #125	; 0x7d
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f9fd 	bl	800896a <USBH_HID_SetIdle>
 8008570:	4603      	mov	r3, r0
 8008572:	77bb      	strb	r3, [r7, #30]
 8008574:	e009      	b.n	800858a <USBH_HID_InterfaceInit+0x4da>
					phost->device.current_interface);
		} else {
			ctlStatus = USBH_HID_SetIdle(phost, 0U, 0U,
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800857c:	2200      	movs	r2, #0
 800857e:	2100      	movs	r1, #0
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f9f2 	bl	800896a <USBH_HID_SetIdle>
 8008586:	4603      	mov	r3, r0
 8008588:	77bb      	strb	r3, [r7, #30]
					phost->device.current_interface);
		}

		if (ctlStatus == USBH_OK) {
 800858a:	7fbb      	ldrb	r3, [r7, #30]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d105      	bne.n	800859c <USBH_HID_InterfaceInit+0x4ec>
			phost->pActiveClass->iface_init = IFACE_SELECTIFACE;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008596:	2207      	movs	r2, #7
 8008598:	779a      	strb	r2, [r3, #30]

			}
		}

	}
		break;
 800859a:	e03c      	b.n	8008616 <USBH_HID_InterfaceInit+0x566>
			if (ctlStatus == USBH_NOT_SUPPORTED) {
 800859c:	7fbb      	ldrb	r3, [r7, #30]
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d139      	bne.n	8008616 <USBH_HID_InterfaceInit+0x566>
				phost->pActiveClass->iface_init = IFACE_SELECTIFACE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085a8:	2207      	movs	r2, #7
 80085aa:	779a      	strb	r2, [r3, #30]
		break;
 80085ac:	e033      	b.n	8008616 <USBH_HID_InterfaceInit+0x566>
 80085ae:	bf00      	nop
 80085b0:	080091d5 	.word	0x080091d5
 80085b4:	08009525 	.word	0x08009525
 80085b8:	08008c61 	.word	0x08008c61

	case IFACE_SELECTIFACE: {
		//Check if we have any other interfaces to phost->device.CfgDesc.bNumInterfaces
		if (++phost->pActiveClass->iface_initnum
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085c2:	7f5a      	ldrb	r2, [r3, #29]
 80085c4:	3201      	adds	r2, #1
 80085c6:	b2d2      	uxtb	r2, r2
 80085c8:	775a      	strb	r2, [r3, #29]
 80085ca:	7f5a      	ldrb	r2, [r3, #29]
				< phost->device.CfgDesc.bNumInterfaces) {
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
		if (++phost->pActiveClass->iface_initnum
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d212      	bcs.n	80085fc <USBH_HID_InterfaceInit+0x54c>
			//Have we reached maximum of interfaces? USBH_MAX_NUM_INTERFACES
			if (phost->pActiveClass->iface_initnum <= USBH_MAX_NUM_INTERFACES) {
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085dc:	7f5b      	ldrb	r3, [r3, #29]
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d805      	bhi.n	80085ee <USBH_HID_InterfaceInit+0x53e>
				phost->pActiveClass->iface_init = IFACE_READHID;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085e8:	2201      	movs	r2, #1
 80085ea:	779a      	strb	r2, [r3, #30]
			status = USBH_OK;
			phost->device.current_interface = 0;

		}
	}
		break;
 80085ec:	e014      	b.n	8008618 <USBH_HID_InterfaceInit+0x568>
				status = USBH_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	77fb      	strb	r3, [r7, #31]
				phost->device.current_interface = 0;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
		break;
 80085fa:	e00d      	b.n	8008618 <USBH_HID_InterfaceInit+0x568>
			status = USBH_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	77fb      	strb	r3, [r7, #31]
			phost->device.current_interface = 0;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
		break;
 8008608:	e006      	b.n	8008618 <USBH_HID_InterfaceInit+0x568>
		break;
 800860a:	bf00      	nop
 800860c:	e004      	b.n	8008618 <USBH_HID_InterfaceInit+0x568>
		break;
 800860e:	bf00      	nop
 8008610:	e002      	b.n	8008618 <USBH_HID_InterfaceInit+0x568>
		break;
 8008612:	bf00      	nop
 8008614:	e000      	b.n	8008618 <USBH_HID_InterfaceInit+0x568>
		break;
 8008616:	bf00      	nop
	}

	return status;
 8008618:	7ffb      	ldrb	r3, [r7, #31]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3720      	adds	r7, #32
 800861e:	46bd      	mov	sp, r7
 8008620:	bdb0      	pop	{r4, r5, r7, pc}
 8008622:	bf00      	nop

08008624 <USBH_HID_InterfaceDeInit>:
 * @brief  USBH_HID_InterfaceDeInit
 *         The function DeInit the Pipes used for the HID class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef static USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost) {
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]

	HID_HandleTypeDef *HID_Handle;

	uint8_t i = 0;
 800862c:	2300      	movs	r3, #0
 800862e:	73fb      	strb	r3, [r7, #15]
	for (; i <= (USBH_MAX_NUM_INTERFACES - 1); i++) {
 8008630:	e055      	b.n	80086de <USBH_HID_InterfaceDeInit+0xba>

		HID_Handle = (HID_HandleTypeDef*) phost->pActiveClass->pData[i];
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008638:	7bfa      	ldrb	r2, [r7, #15]
 800863a:	3208      	adds	r2, #8
 800863c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008640:	60bb      	str	r3, [r7, #8]

		if (HID_Handle->InPipe != 0x00U) {
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	785b      	ldrb	r3, [r3, #1]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00e      	beq.n	8008668 <USBH_HID_InterfaceDeInit+0x44>
			USBH_ClosePipe(phost, HID_Handle->InPipe);
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f003 fbac 	bl	800bdae <USBH_ClosePipe>
			USBH_FreePipe(phost, HID_Handle->InPipe);
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	785b      	ldrb	r3, [r3, #1]
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f003 fbd7 	bl	800be10 <USBH_FreePipe>
			HID_Handle->InPipe = 0U; /* Reset the pipe as Free */
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2200      	movs	r2, #0
 8008666:	705a      	strb	r2, [r3, #1]
		}

		if (HID_Handle->OutPipe != 0x00U) {
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00e      	beq.n	800868e <USBH_HID_InterfaceDeInit+0x6a>
			USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f003 fb99 	bl	800bdae <USBH_ClosePipe>
			USBH_FreePipe(phost, HID_Handle->OutPipe);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f003 fbc4 	bl	800be10 <USBH_FreePipe>
			HID_Handle->OutPipe = 0U; /* Reset the pipe as Free */
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2200      	movs	r2, #0
 800868c:	701a      	strb	r2, [r3, #0]
		}

		if (phost->pActiveClass->pData[i]) {
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008694:	7bfa      	ldrb	r2, [r7, #15]
 8008696:	3208      	adds	r2, #8
 8008698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d01b      	beq.n	80086d8 <USBH_HID_InterfaceDeInit+0xb4>
			USBH_free(phost->pActiveClass->pData[i]);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086a6:	7bfa      	ldrb	r2, [r7, #15]
 80086a8:	3208      	adds	r2, #8
 80086aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f004 f85e 	bl	800c770 <free>
			free(phost->pActiveClass->pData[i]);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086ba:	7bfa      	ldrb	r2, [r7, #15]
 80086bc:	3208      	adds	r2, #8
 80086be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f004 f854 	bl	800c770 <free>
			phost->pActiveClass->pData[i] = 0U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086ce:	7bfa      	ldrb	r2, [r7, #15]
 80086d0:	3208      	adds	r2, #8
 80086d2:	2100      	movs	r1, #0
 80086d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (; i <= (USBH_MAX_NUM_INTERFACES - 1); i++) {
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	3301      	adds	r3, #1
 80086dc:	73fb      	strb	r3, [r7, #15]
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d9a6      	bls.n	8008632 <USBH_HID_InterfaceDeInit+0xe>
		}
	}
	phost->pActiveClass->iface_init = 0U;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086ea:	2200      	movs	r2, #0
 80086ec:	779a      	strb	r2, [r3, #30]
	phost->pActiveClass->iface_initnum = 0U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086f4:	2200      	movs	r2, #0
 80086f6:	775a      	strb	r2, [r3, #29]
	phost->pActiveClass->interfaces = 0U;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086fe:	2200      	movs	r2, #0
 8008700:	771a      	strb	r2, [r3, #28]

	return USBH_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBH_HID_NextInterface>:
 *         for HID class.
 * @param  phost: Host handle
 * @retval USBH Status
 */

void USBH_HID_NextInterface(USBH_HandleTypeDef *phost) {
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
	phost->device.current_interface++;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800871a:	3301      	adds	r3, #1
 800871c:	b2da      	uxtb	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	if (phost->device.current_interface >= phost->pActiveClass->interfaces) {
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008730:	7f1b      	ldrb	r3, [r3, #28]
 8008732:	429a      	cmp	r2, r3
 8008734:	d303      	bcc.n	800873e <USBH_HID_NextInterface+0x32>
		phost->device.current_interface = 0;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
	}
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <USBH_HID_ClassRequest>:

static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost) {
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
	//All config has been done already in USBH_HID_InterfaceInit
	return USBH_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USBH_HID_Process>:
 * @brief  USBH_HID_Process
 *         The function is for managing state machine for HID data transfers
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost) {
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	75fb      	strb	r3, [r7, #23]
	HID_HandleTypeDef *HID_Handle =
			(HID_HandleTypeDef*) phost->pActiveClass->pData[phost->device.current_interface];
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
	HID_HandleTypeDef *HID_Handle =
 8008778:	3208      	adds	r2, #8
 800877a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877e:	613b      	str	r3, [r7, #16]
	uint32_t XferSize;

	switch (HID_Handle->state) {
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	789b      	ldrb	r3, [r3, #2]
 8008784:	2b06      	cmp	r3, #6
 8008786:	f200 8084 	bhi.w	8008892 <USBH_HID_Process+0x132>
 800878a:	a201      	add	r2, pc, #4	; (adr r2, 8008790 <USBH_HID_Process+0x30>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	080087ad 	.word	0x080087ad
 8008794:	08008893 	.word	0x08008893
 8008798:	08008893 	.word	0x08008893
 800879c:	08008893 	.word	0x08008893
 80087a0:	080087df 	.word	0x080087df
 80087a4:	080087c9 	.word	0x080087c9
 80087a8:	0800880d 	.word	0x0800880d
	case HID_INIT:
		HID_Handle->Init(phost);
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	4798      	blx	r3
		HID_Handle->state = HID_SYNC;
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	2205      	movs	r2, #5
 80087b8:	709a      	strb	r2, [r3, #2]
		phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087c0:	2102      	movs	r1, #2
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	4798      	blx	r3
		break;
 80087c6:	e069      	b.n	800889c <USBH_HID_Process+0x13c>

	case HID_SYNC:
		/* Sync with start of Even Frame */
		if (phost->Timer & 1U) {
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d05f      	beq.n	8008896 <USBH_HID_Process+0x136>
			HID_Handle->state = HID_GET_DATA;
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	2204      	movs	r2, #4
 80087da:	709a      	strb	r2, [r3, #2]
		}
		break;
 80087dc:	e05b      	b.n	8008896 <USBH_HID_Process+0x136>

	case HID_GET_DATA:
		USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	6959      	ldr	r1, [r3, #20]
				(uint8_t) HID_Handle->length, HID_Handle->InPipe);
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	8b1b      	ldrh	r3, [r3, #24]
		USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	785b      	ldrb	r3, [r3, #1]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f003 faa0 	bl	800bd32 <USBH_InterruptReceiveData>

		HID_Handle->state = HID_POLL;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	2206      	movs	r2, #6
 80087f6:	709a      	strb	r2, [r3, #2]
		HID_Handle->timer = phost->Timer;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	621a      	str	r2, [r3, #32]
		HID_Handle->DataReady = 0U;
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 800880a:	e047      	b.n	800889c <USBH_HID_Process+0x13c>

	case HID_POLL:
		if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE) {
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	785b      	ldrb	r3, [r3, #1]
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f003 fef2 	bl	800c5fc <USBH_LL_GetURBState>
 8008818:	4603      	mov	r3, r0
 800881a:	2b01      	cmp	r3, #1
 800881c:	d120      	bne.n	8008860 <USBH_HID_Process+0x100>

			XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	785b      	ldrb	r3, [r3, #1]
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f003 fe57 	bl	800c4d8 <USBH_LL_GetLastXferSize>
 800882a:	60f8      	str	r0, [r7, #12]

			if (HID_Handle->DataReady == 0U && XferSize != 0U) {
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008832:	2b00      	cmp	r3, #0
 8008834:	d131      	bne.n	800889a <USBH_HID_Process+0x13a>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d02e      	beq.n	800889a <USBH_HID_Process+0x13a>
				USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData,
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f103 0008 	add.w	r0, r3, #8
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	6959      	ldr	r1, [r3, #20]
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	8b1b      	ldrh	r3, [r3, #24]
 800884a:	461a      	mov	r2, r3
 800884c:	f000 f9a9 	bl	8008ba2 <USBH_HID_FifoWrite>
						HID_Handle->length);
				HID_Handle->DataReady = 1U;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				USBH_HID_EventCallback(phost);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f9f6 	bl	8008c4a <USBH_HID_EventCallback>
					HID_Handle->state = HID_GET_DATA;
					USBH_HID_NextInterface(phost);
				}
			}
		}
		break;
 800885e:	e01c      	b.n	800889a <USBH_HID_Process+0x13a>
			if (USBH_LL_GetURBState(phost, HID_Handle->InPipe)
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	785b      	ldrb	r3, [r3, #1]
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f003 fec8 	bl	800c5fc <USBH_LL_GetURBState>
 800886c:	4603      	mov	r3, r0
 800886e:	2b05      	cmp	r3, #5
 8008870:	d113      	bne.n	800889a <USBH_HID_Process+0x13a>
				if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK) {
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	7e9b      	ldrb	r3, [r3, #26]
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f002 fe6c 	bl	800b556 <USBH_ClrFeature>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10a      	bne.n	800889a <USBH_HID_Process+0x13a>
					HID_Handle->state = HID_GET_DATA;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	2204      	movs	r2, #4
 8008888:	709a      	strb	r2, [r3, #2]
					USBH_HID_NextInterface(phost);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7ff ff3e 	bl	800870c <USBH_HID_NextInterface>
		break;
 8008890:	e003      	b.n	800889a <USBH_HID_Process+0x13a>

	default:
		break;
 8008892:	bf00      	nop
 8008894:	e002      	b.n	800889c <USBH_HID_Process+0x13c>
		break;
 8008896:	bf00      	nop
 8008898:	e000      	b.n	800889c <USBH_HID_Process+0x13c>
		break;
 800889a:	bf00      	nop
	}

	return status;
 800889c:	7dfb      	ldrb	r3, [r7, #23]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop

080088a8 <USBH_HID_SOFProcess>:
 * @brief  USBH_HID_SOFProcess
 *         The function is for managing the SOF Process
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost) {
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
	HID_HandleTypeDef *HID_Handle =
			(HID_HandleTypeDef*) phost->pActiveClass->pData[phost->device.current_interface];
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
	HID_HandleTypeDef *HID_Handle =
 80088bc:	3208      	adds	r2, #8
 80088be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c2:	60fb      	str	r3, [r7, #12]

	if (HID_Handle->state == HID_POLL) {
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	789b      	ldrb	r3, [r3, #2]
 80088c8:	2b06      	cmp	r3, #6
 80088ca:	d10f      	bne.n	80088ec <USBH_HID_SOFProcess+0x44>
		if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll) {
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	8b92      	ldrh	r2, [r2, #28]
 80088dc:	4293      	cmp	r3, r2
 80088de:	d305      	bcc.n	80088ec <USBH_HID_SOFProcess+0x44>
			HID_Handle->state = HID_GET_DATA;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2204      	movs	r2, #4
 80088e4:	709a      	strb	r2, [r3, #2]
			USBH_HID_NextInterface(phost);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff ff10 	bl	800870c <USBH_HID_NextInterface>
		}
	}
	return USBH_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBH_HID_GetHIDReportDescriptor>:
 * @param  phost: Host handle
 * @param  Length : HID Report Descriptor Length
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
		uint16_t length, uint8_t iface_idx) {
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b086      	sub	sp, #24
 80088fa:	af02      	add	r7, sp, #8
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	460b      	mov	r3, r1
 8008900:	807b      	strh	r3, [r7, #2]
 8008902:	4613      	mov	r3, r2
 8008904:	707b      	strb	r3, [r7, #1]

	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID_REPORT, iface_idx, phost->device.Data, length);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f503 738e 	add.w	r3, r3, #284	; 0x11c
	status = USBH_GetDescriptor(phost,
 800890c:	7879      	ldrb	r1, [r7, #1]
 800890e:	887a      	ldrh	r2, [r7, #2]
 8008910:	9201      	str	r2, [sp, #4]
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	460b      	mov	r3, r1
 8008916:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800891a:	2101      	movs	r1, #1
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f002 fd75 	bl	800b40c <USBH_GetDescriptor>
 8008922:	4603      	mov	r3, r0
 8008924:	73fb      	strb	r3, [r7, #15]
	 In case of USB Boot Mode devices for In report handling ,
	 HID report descriptor parsing is not required.
	 In case, for supporting Non-Boot Protocol devices and output reports,
	 user may parse the report descriptor*/

	return status;
 8008926:	7bfb      	ldrb	r3, [r7, #15]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBH_HID_GetHIDDescriptor>:
 * @param  phost: Host handle
 * @param  Length : HID Descriptor Length
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor(USBH_HandleTypeDef *phost,
		uint16_t length, uint8_t iface_idx) {
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af02      	add	r7, sp, #8
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	807b      	strh	r3, [r7, #2]
 800893c:	4613      	mov	r3, r2
 800893e:	707b      	strb	r3, [r7, #1]
	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID, iface_idx, phost->device.Data, length);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f503 738e 	add.w	r3, r3, #284	; 0x11c
	status = USBH_GetDescriptor(phost,
 8008946:	7879      	ldrb	r1, [r7, #1]
 8008948:	887a      	ldrh	r2, [r7, #2]
 800894a:	9201      	str	r2, [sp, #4]
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	460b      	mov	r3, r1
 8008950:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8008954:	2101      	movs	r1, #1
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f002 fd58 	bl	800b40c <USBH_GetDescriptor>
 800895c:	4603      	mov	r3, r0
 800895e:	73fb      	strb	r3, [r7, #15]

	return status;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBH_HID_SetIdle>:
 * @param  duration: Duration for HID Idle request
 * @param  reportId : Targeted report ID for Set Idle request
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost, uint8_t duration,
		uint8_t reportId, uint8_t interface) {
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	4608      	mov	r0, r1
 8008974:	4611      	mov	r1, r2
 8008976:	461a      	mov	r2, r3
 8008978:	4603      	mov	r3, r0
 800897a:	70fb      	strb	r3, [r7, #3]
 800897c:	460b      	mov	r3, r1
 800897e:	70bb      	strb	r3, [r7, #2]
 8008980:	4613      	mov	r3, r2
 8008982:	707b      	strb	r3, [r7, #1]

	phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2221      	movs	r2, #33	; 0x21
 8008988:	741a      	strb	r2, [r3, #16]
			|
			USB_REQ_TYPE_CLASS;

	phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	220a      	movs	r2, #10
 800898e:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.w = (uint16_t) (((uint32_t) duration << 8U)
 8008990:	78fb      	ldrb	r3, [r7, #3]
 8008992:	b29b      	uxth	r3, r3
 8008994:	021b      	lsls	r3, r3, #8
 8008996:	b29a      	uxth	r2, r3
 8008998:	78bb      	ldrb	r3, [r7, #2]
 800899a:	b29b      	uxth	r3, r3
 800899c:	4313      	orrs	r3, r2
 800899e:	b29a      	uxth	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	825a      	strh	r2, [r3, #18]
			| (uint32_t) reportId);

	phost->Control.setup.b.wIndex.w = 0U;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	829a      	strh	r2, [r3, #20]
	phost->Control.setup.b.wLength.w = interface;
 80089aa:	787b      	ldrb	r3, [r7, #1]
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	82da      	strh	r2, [r3, #22]

	return USBH_CtlReq(phost, 0U, 0U);
 80089b2:	2200      	movs	r2, #0
 80089b4:	2100      	movs	r1, #0
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f002 ffad 	bl	800b916 <USBH_CtlReq>
 80089bc:	4603      	mov	r3, r0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBH_HID_SetReport>:
 * @param  reportLen   : Length of data report to be send
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_SetReport(USBH_HandleTypeDef *phost,
		uint8_t reportType, uint8_t reportId, uint8_t *reportBuff,
		uint8_t reportLen) {
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	607b      	str	r3, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	72fb      	strb	r3, [r7, #11]
 80089d4:	4613      	mov	r3, r2
 80089d6:	72bb      	strb	r3, [r7, #10]

	phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2221      	movs	r2, #33	; 0x21
 80089dc:	741a      	strb	r2, [r3, #16]
			|
			USB_REQ_TYPE_CLASS;

	phost->Control.setup.b.bRequest = USB_HID_SET_REPORT;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2209      	movs	r2, #9
 80089e2:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.w = (uint16_t) (((uint32_t) reportType << 8U)
 80089e4:	7afb      	ldrb	r3, [r7, #11]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	021b      	lsls	r3, r3, #8
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	7abb      	ldrb	r3, [r7, #10]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	4313      	orrs	r3, r2
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	825a      	strh	r2, [r3, #18]
			| (uint32_t) reportId);

	phost->Control.setup.b.wIndex.w = 0U;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	829a      	strh	r2, [r3, #20]
	phost->Control.setup.b.wLength.w = reportLen;
 80089fe:	7e3b      	ldrb	r3, [r7, #24]
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	82da      	strh	r2, [r3, #22]

	return USBH_CtlReq(phost, reportBuff, (uint16_t) reportLen);
 8008a06:	7e3b      	ldrb	r3, [r7, #24]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	6879      	ldr	r1, [r7, #4]
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f002 ff81 	bl	800b916 <USBH_CtlReq>
 8008a14:	4603      	mov	r3, r0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBH_HID_SetProtocol>:
 * @param  phost: Host handle
 * @param  protocol : Set Protocol for HID : boot/report protocol
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
		uint8_t protocol, uint16_t interface) {
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	803b      	strh	r3, [r7, #0]
	phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2221      	movs	r2, #33	; 0x21
 8008a32:	741a      	strb	r2, [r3, #16]
			| USB_REQ_TYPE_CLASS;

	phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	220b      	movs	r2, #11
 8008a38:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.w = protocol;
 8008a3a:	78fb      	ldrb	r3, [r7, #3]
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	825a      	strh	r2, [r3, #18]
	phost->Control.setup.b.wIndex.w = interface;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	883a      	ldrh	r2, [r7, #0]
 8008a46:	829a      	strh	r2, [r3, #20]
	phost->Control.setup.b.wLength.w = 0U;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	82da      	strh	r2, [r3, #22]

	return USBH_CtlReq(phost, 0U, 0U);
 8008a4e:	2200      	movs	r2, #0
 8008a50:	2100      	movs	r1, #0
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f002 ff5f 	bl	800b916 <USBH_CtlReq>
 8008a58:	4603      	mov	r3, r0

}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <USBH_HID_ParseHIDDesc>:
 *         This function Parse the HID descriptor
 * @param  desc: HID Descriptor
 * @param  buf: Buffer where the source descriptor is available
 * @retval None
 */
void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf) {
 8008a62:	b480      	push	{r7}
 8008a64:	b083      	sub	sp, #12
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	6039      	str	r1, [r7, #0]

	desc->bLength = *(uint8_t*) (buf + 0);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	781a      	ldrb	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	701a      	strb	r2, [r3, #0]
	desc->bDescriptorType = *(uint8_t*) (buf + 1);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	785a      	ldrb	r2, [r3, #1]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	705a      	strb	r2, [r3, #1]
	desc->bcdHID = LE16(buf + 2);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	3302      	adds	r3, #2
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	3303      	adds	r3, #3
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	021b      	lsls	r3, r3, #8
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	4313      	orrs	r3, r2
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	805a      	strh	r2, [r3, #2]
	desc->bCountryCode = *(uint8_t*) (buf + 4);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	791a      	ldrb	r2, [r3, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	711a      	strb	r2, [r3, #4]
	desc->bNumDescriptors = *(uint8_t*) (buf + 5);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	795a      	ldrb	r2, [r3, #5]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	715a      	strb	r2, [r3, #5]
	desc->bReportDescriptorType = *(uint8_t*) (buf + 6);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	799a      	ldrb	r2, [r3, #6]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	719a      	strb	r2, [r3, #6]
	desc->wItemLength = LE16(buf + 7);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	3307      	adds	r3, #7
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	3308      	adds	r3, #8
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	021b      	lsls	r3, r3, #8
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	811a      	strh	r2, [r3, #8]
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USBH_HID_FifoInit>:
 * @param  f: Fifo address
 * @param  buf: Fifo buffer
 * @param  size: Fifo Size
 * @retval none
 */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size) {
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	80fb      	strh	r3, [r7, #6]
	f->head = 0U;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	809a      	strh	r2, [r3, #4]
	f->tail = 0U;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	80da      	strh	r2, [r3, #6]
	f->lock = 0U;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	729a      	strb	r2, [r3, #10]
	f->size = size;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	88fa      	ldrh	r2, [r7, #6]
 8008afc:	811a      	strh	r2, [r3, #8]
	f->buf = buf;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	601a      	str	r2, [r3, #0]
}
 8008b04:	bf00      	nop
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <USBH_HID_FifoRead>:
 * @param  f: Fifo address
 * @param  buf: read buffer
 * @param  nbytes: number of item to read
 * @retval number of read items
 */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes) {
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t *p;

	p = (uint8_t*) buf;
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	613b      	str	r3, [r7, #16]

	if (f->lock == 0U) {
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	7a9b      	ldrb	r3, [r3, #10]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d131      	bne.n	8008b8e <USBH_HID_FifoRead+0x7e>
		f->lock = 1U;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	729a      	strb	r2, [r3, #10]

		for (i = 0U; i < nbytes; i++) {
 8008b30:	2300      	movs	r3, #0
 8008b32:	82fb      	strh	r3, [r7, #22]
 8008b34:	e027      	b.n	8008b86 <USBH_HID_FifoRead+0x76>
			if (f->tail != f->head) {
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	88da      	ldrh	r2, [r3, #6]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	889b      	ldrh	r3, [r3, #4]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d019      	beq.n	8008b76 <USBH_HID_FifoRead+0x66>
				*p++ = f->buf[f->tail];
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	88d2      	ldrh	r2, [r2, #6]
 8008b4a:	441a      	add	r2, r3
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	1c59      	adds	r1, r3, #1
 8008b50:	6139      	str	r1, [r7, #16]
 8008b52:	7812      	ldrb	r2, [r2, #0]
 8008b54:	701a      	strb	r2, [r3, #0]
				f->tail++;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	88db      	ldrh	r3, [r3, #6]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	80da      	strh	r2, [r3, #6]

				if (f->tail == f->size) {
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	88da      	ldrh	r2, [r3, #6]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	891b      	ldrh	r3, [r3, #8]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d108      	bne.n	8008b80 <USBH_HID_FifoRead+0x70>
					f->tail = 0U;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	80da      	strh	r2, [r3, #6]
 8008b74:	e004      	b.n	8008b80 <USBH_HID_FifoRead+0x70>
				}
			} else {
				f->lock = 0U;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	729a      	strb	r2, [r3, #10]
				return i;
 8008b7c:	8afb      	ldrh	r3, [r7, #22]
 8008b7e:	e00a      	b.n	8008b96 <USBH_HID_FifoRead+0x86>
		for (i = 0U; i < nbytes; i++) {
 8008b80:	8afb      	ldrh	r3, [r7, #22]
 8008b82:	3301      	adds	r3, #1
 8008b84:	82fb      	strh	r3, [r7, #22]
 8008b86:	8afa      	ldrh	r2, [r7, #22]
 8008b88:	88fb      	ldrh	r3, [r7, #6]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d3d3      	bcc.n	8008b36 <USBH_HID_FifoRead+0x26>
			}
		}
	}

	f->lock = 0U;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	729a      	strb	r2, [r3, #10]

	return nbytes;
 8008b94:	88fb      	ldrh	r3, [r7, #6]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	371c      	adds	r7, #28
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <USBH_HID_FifoWrite>:
 * @param  f: Fifo address
 * @param  buf: read buffer
 * @param  nbytes: number of item to write
 * @retval number of written items
 */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t nbytes) {
 8008ba2:	b480      	push	{r7}
 8008ba4:	b087      	sub	sp, #28
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	4613      	mov	r3, r2
 8008bae:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t *p;

	p = (uint8_t*) buf;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	613b      	str	r3, [r7, #16]

	if (f->lock == 0U) {
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	7a9b      	ldrb	r3, [r3, #10]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d13c      	bne.n	8008c36 <USBH_HID_FifoWrite+0x94>
		f->lock = 1U;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	729a      	strb	r2, [r3, #10]

		for (i = 0U; i < nbytes; i++) {
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	82fb      	strh	r3, [r7, #22]
 8008bc6:	e032      	b.n	8008c2e <USBH_HID_FifoWrite+0x8c>
			if ((f->head + 1U == f->tail)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	889b      	ldrh	r3, [r3, #4]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	88d2      	ldrh	r2, [r2, #6]
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d00a      	beq.n	8008bec <USBH_HID_FifoWrite+0x4a>
					|| ((f->head + 1U == f->size) && (f->tail == 0U))) {
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	889b      	ldrh	r3, [r3, #4]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	8912      	ldrh	r2, [r2, #8]
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d108      	bne.n	8008bf6 <USBH_HID_FifoWrite+0x54>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	88db      	ldrh	r3, [r3, #6]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d104      	bne.n	8008bf6 <USBH_HID_FifoWrite+0x54>
				f->lock = 0U;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	729a      	strb	r2, [r3, #10]
				return i;
 8008bf2:	8afb      	ldrh	r3, [r7, #22]
 8008bf4:	e023      	b.n	8008c3e <USBH_HID_FifoWrite+0x9c>
			} else {
				f->buf[f->head] = *p++;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	1c5a      	adds	r2, r3, #1
 8008bfa:	613a      	str	r2, [r7, #16]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	6812      	ldr	r2, [r2, #0]
 8008c00:	68f9      	ldr	r1, [r7, #12]
 8008c02:	8889      	ldrh	r1, [r1, #4]
 8008c04:	440a      	add	r2, r1
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	7013      	strb	r3, [r2, #0]
				f->head++;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	889b      	ldrh	r3, [r3, #4]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	809a      	strh	r2, [r3, #4]

				if (f->head == f->size) {
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	889a      	ldrh	r2, [r3, #4]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	891b      	ldrh	r3, [r3, #8]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d102      	bne.n	8008c28 <USBH_HID_FifoWrite+0x86>
					f->head = 0U;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	809a      	strh	r2, [r3, #4]
		for (i = 0U; i < nbytes; i++) {
 8008c28:	8afb      	ldrh	r3, [r7, #22]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	82fb      	strh	r3, [r7, #22]
 8008c2e:	8afa      	ldrh	r2, [r7, #22]
 8008c30:	88fb      	ldrh	r3, [r7, #6]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d3c8      	bcc.n	8008bc8 <USBH_HID_FifoWrite+0x26>
				}
			}
		}
	}

	f->lock = 0U;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	729a      	strb	r2, [r3, #10]

	return nbytes;
 8008c3c:	88fb      	ldrh	r3, [r7, #6]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	371c      	adds	r7, #28
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <USBH_HID_EventCallback>:
/**
 * @brief  The function is a callback about HID Data events
 *  @param  phost: Selected device
 * @retval None
 */
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) {
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(phost);
}
 8008c52:	bf00      	nop
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
	...

08008c60 <USBH_HID_GamepadInit>:
  *         The function init the HID gamepad.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GamepadInit(USBH_HandleTypeDef *phost)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8008c74:	3208      	adds	r2, #8
 8008c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7a:	60fb      	str	r3, [r7, #12]
  uint8_t reportSize = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	72fb      	strb	r3, [r7, #11]
  reportSize = HID_Handle->HID_Desc.RptDesc.report_size;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008c86:	72fb      	strb	r3, [r7, #11]





  HID_Handle->length = reportSize;
 8008c88:	7afb      	ldrb	r3, [r7, #11]
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	831a      	strh	r2, [r3, #24]


  HID_Handle->pData = (uint8_t*) malloc (reportSize *sizeof(uint8_t)); //(uint8_t*)(void *)
 8008c90:	7afb      	ldrb	r3, [r7, #11]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f003 fd64 	bl	800c760 <malloc>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	615a      	str	r2, [r3, #20]
  gamepad_report_data = HID_Handle->pData;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	695b      	ldr	r3, [r3, #20]
 8008ca4:	4a0a      	ldr	r2, [pc, #40]	; (8008cd0 <USBH_HID_GamepadInit+0x70>)
 8008ca6:	6013      	str	r3, [r2, #0]
  USBH_HID_FifoInit(&HID_Handle->fifo, gamepad_report_data_buf, HID_QUEUE_SIZE * reportSize);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f103 0008 	add.w	r0, r3, #8
 8008cae:	7afb      	ldrb	r3, [r7, #11]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	0092      	lsls	r2, r2, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	4905      	ldr	r1, [pc, #20]	; (8008cd4 <USBH_HID_GamepadInit+0x74>)
 8008cc0:	f7ff ff0a 	bl	8008ad8 <USBH_HID_FifoInit>

  return USBH_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	20000234 	.word	0x20000234
 8008cd4:	20000238 	.word	0x20000238

08008cd8 <USBH_HID_GetGamepadInfo>:
  *         The function return gamepad information.
  * @param  phost: Host handle
  * @retval gamepad information
  */
HID_gamepad_Info_TypeDef *USBH_HID_GetGamepadInfo(USBH_HandleTypeDef *phost)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
	//refresh value of joymap and return value
	if(USBH_HID_GamepadDecode(phost)== USBH_OK)
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f80d 	bl	8008d00 <USBH_HID_GamepadDecode>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <USBH_HID_GetGamepadInfo+0x18>
	{
		return &gamepad_info;
 8008cec:	4b03      	ldr	r3, [pc, #12]	; (8008cfc <USBH_HID_GetGamepadInfo+0x24>)
 8008cee:	e000      	b.n	8008cf2 <USBH_HID_GetGamepadInfo+0x1a>
	}
	else
	{
		return NULL;
 8008cf0:	2300      	movs	r3, #0
	}
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20000230 	.word	0x20000230

08008d00 <USBH_HID_GamepadDecode>:
  *         The function decode gamepad data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_GamepadDecode(USBH_HandleTypeDef *phost)
{
 8008d00:	b5b0      	push	{r4, r5, r7, lr}
 8008d02:	b098      	sub	sp, #96	; 0x60
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
	HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8008d14:	3208      	adds	r2, #8
 8008d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1a:	65bb      	str	r3, [r7, #88]	; 0x58

	  if(HID_Handle->length == 0U)
 8008d1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d1e:	8b1b      	ldrh	r3, [r3, #24]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <USBH_HID_GamepadDecode+0x28>
	  {
	    return USBH_FAIL;
 8008d24:	2302      	movs	r3, #2
 8008d26:	e24f      	b.n	80091c8 <USBH_HID_GamepadDecode+0x4c8>
	  }

	  if(USBH_HID_FifoRead(&HID_Handle->fifo, gamepad_report_data, HID_Handle->length) ==  HID_Handle->length)
 8008d28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d2a:	f103 0008 	add.w	r0, r3, #8
 8008d2e:	4bc6      	ldr	r3, [pc, #792]	; (8009048 <USBH_HID_GamepadDecode+0x348>)
 8008d30:	6819      	ldr	r1, [r3, #0]
 8008d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d34:	8b1b      	ldrh	r3, [r3, #24]
 8008d36:	461a      	mov	r2, r3
 8008d38:	f7ff feea 	bl	8008b10 <USBH_HID_FifoRead>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	461a      	mov	r2, r3
 8008d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d42:	8b1b      	ldrh	r3, [r3, #24]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	f040 823e 	bne.w	80091c6 <USBH_HID_GamepadDecode+0x4c6>
	    {


		uint8_t jmap = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		uint8_t btn = 0;
 8008d50:	2300      	movs	r3, #0
 8008d52:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		uint8_t btn_extra = 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		int16_t a[2];
		uint8_t i;

		hid_report_t conf = HID_Handle->HID_Desc.RptDesc;
 8008d5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d5e:	f107 040c 	add.w	r4, r7, #12
 8008d62:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8008d66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d72:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008d76:	6020      	str	r0, [r4, #0]
 8008d78:	3404      	adds	r4, #4
 8008d7a:	8021      	strh	r1, [r4, #0]

		// skip report id if present
		uint8_t *p = gamepad_report_data+(conf.report_id?1:0);
 8008d7c:	4bb2      	ldr	r3, [pc, #712]	; (8009048 <USBH_HID_GamepadDecode+0x348>)
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	7b7b      	ldrb	r3, [r7, #13]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <USBH_HID_GamepadDecode+0x8a>
 8008d86:	2301      	movs	r3, #1
 8008d88:	e000      	b.n	8008d8c <USBH_HID_GamepadDecode+0x8c>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	4413      	add	r3, r2
 8008d8e:	657b      	str	r3, [r7, #84]	; 0x54


		//process axis
		// two axes ...
				for(i=0;i<2;i++) {
 8008d90:	2300      	movs	r3, #0
 8008d92:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008d96:	e038      	b.n	8008e0a <USBH_HID_GamepadDecode+0x10a>
					// if logical minimum is > logical maximum then logical minimum
					// is signed. This means that the value itself is also signed
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 8008d98:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	00db      	lsls	r3, r3, #3
 8008da0:	3360      	adds	r3, #96	; 0x60
 8008da2:	443b      	add	r3, r7
 8008da4:	f833 2c50 	ldrh.w	r2, [r3, #-80]
					conf.joystick_mouse.axis[i].logical.max;
 8008da8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008dac:	3301      	adds	r3, #1
 8008dae:	00db      	lsls	r3, r3, #3
 8008db0:	3360      	adds	r3, #96	; 0x60
 8008db2:	443b      	add	r3, r7
 8008db4:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 8008db8:	429a      	cmp	r2, r3
 8008dba:	bf8c      	ite	hi
 8008dbc:	2301      	movhi	r3, #1
 8008dbe:	2300      	movls	r3, #0
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	64bb      	str	r3, [r7, #72]	; 0x48
					a[i] = collect_bits(p, conf.joystick_mouse.axis[i].offset,
 8008dc4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008dc8:	3301      	adds	r3, #1
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	3360      	adds	r3, #96	; 0x60
 8008dce:	443b      	add	r3, r7
 8008dd0:	f833 1c54 	ldrh.w	r1, [r3, #-84]
 8008dd4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008dd8:	3301      	adds	r3, #1
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	3360      	adds	r3, #96	; 0x60
 8008dde:	443b      	add	r3, r7
 8008de0:	f813 2c52 	ldrb.w	r2, [r3, #-82]
 8008de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008de6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008de8:	f000 fb08 	bl	80093fc <collect_bits>
 8008dec:	4603      	mov	r3, r0
 8008dee:	461a      	mov	r2, r3
 8008df0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008df4:	b212      	sxth	r2, r2
 8008df6:	005b      	lsls	r3, r3, #1
 8008df8:	3360      	adds	r3, #96	; 0x60
 8008dfa:	443b      	add	r3, r7
 8008dfc:	f823 2c1c 	strh.w	r2, [r3, #-28]
				for(i=0;i<2;i++) {
 8008e00:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e04:	3301      	adds	r3, #1
 8008e06:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008e0a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d9c2      	bls.n	8008d98 <USBH_HID_GamepadDecode+0x98>
								conf.joystick_mouse.axis[i].size, is_signed);
				}

		//process 4 first buttons
		for(i=0;i<4;i++)
 8008e12:	2300      	movs	r3, #0
 8008e14:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008e18:	e028      	b.n	8008e6c <USBH_HID_GamepadDecode+0x16c>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008e1a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e1e:	330c      	adds	r3, #12
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	3360      	adds	r3, #96	; 0x60
 8008e24:	443b      	add	r3, r7
 8008e26:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e2e:	4413      	add	r3, r2
 8008e30:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 8008e32:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e36:	330c      	adds	r3, #12
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	3360      	adds	r3, #96	; 0x60
 8008e3c:	443b      	add	r3, r7
 8008e3e:	f813 3c53 	ldrb.w	r3, [r3, #-83]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008e42:	4013      	ands	r3, r2
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00b      	beq.n	8008e62 <USBH_HID_GamepadDecode+0x162>
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 8008e4a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e4e:	2201      	movs	r2, #1
 8008e50:	fa02 f303 	lsl.w	r3, r2, r3
 8008e54:	b25a      	sxtb	r2, r3
 8008e56:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	b25b      	sxtb	r3, r3
 8008e5e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		for(i=0;i<4;i++)
 8008e62:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e66:	3301      	adds	r3, #1
 8008e68:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008e6c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d9d2      	bls.n	8008e1a <USBH_HID_GamepadDecode+0x11a>

		// ... and the eight extra buttons
		for(i=4;i<12;i++)
 8008e74:	2304      	movs	r3, #4
 8008e76:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008e7a:	e029      	b.n	8008ed0 <USBH_HID_GamepadDecode+0x1d0>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008e7c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e80:	330c      	adds	r3, #12
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	3360      	adds	r3, #96	; 0x60
 8008e86:	443b      	add	r3, r7
 8008e88:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e90:	4413      	add	r3, r2
 8008e92:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8008e94:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e98:	330c      	adds	r3, #12
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	3360      	adds	r3, #96	; 0x60
 8008e9e:	443b      	add	r3, r7
 8008ea0:	f813 3c53 	ldrb.w	r3, [r3, #-83]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00c      	beq.n	8008ec6 <USBH_HID_GamepadDecode+0x1c6>
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8008eac:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008eb0:	3b04      	subs	r3, #4
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb8:	b25a      	sxtb	r2, r3
 8008eba:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	b25b      	sxtb	r3, r3
 8008ec2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		for(i=4;i<12;i++)
 8008ec6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008eca:	3301      	adds	r3, #1
 8008ecc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008ed0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008ed4:	2b0b      	cmp	r3, #11
 8008ed6:	d9d1      	bls.n	8008e7c <USBH_HID_GamepadDecode+0x17c>



	for(i=0;i<2;i++) {
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8008ede:	e131      	b.n	8009144 <USBH_HID_GamepadDecode+0x444>

		int hrange = (conf.joystick_mouse.axis[i].logical.max - abs(conf.joystick_mouse.axis[i].logical.min)) / 2;
 8008ee0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	00db      	lsls	r3, r3, #3
 8008ee8:	3360      	adds	r3, #96	; 0x60
 8008eea:	443b      	add	r3, r7
 8008eec:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	00db      	lsls	r3, r3, #3
 8008efa:	3360      	adds	r3, #96	; 0x60
 8008efc:	443b      	add	r3, r7
 8008efe:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	da00      	bge.n	8008f0a <USBH_HID_GamepadDecode+0x20a>
 8008f08:	3301      	adds	r3, #1
 8008f0a:	105b      	asrs	r3, r3, #1
 8008f0c:	653b      	str	r3, [r7, #80]	; 0x50
		int dead = hrange/63;
 8008f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f10:	4a4e      	ldr	r2, [pc, #312]	; (800904c <USBH_HID_GamepadDecode+0x34c>)
 8008f12:	fb82 1203 	smull	r1, r2, r2, r3
 8008f16:	441a      	add	r2, r3
 8008f18:	1152      	asrs	r2, r2, #5
 8008f1a:	17db      	asrs	r3, r3, #31
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (a[i] < conf.joystick_mouse.axis[i].logical.min) a[i] = conf.joystick_mouse.axis[i].logical.min;
 8008f20:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	3360      	adds	r3, #96	; 0x60
 8008f28:	443b      	add	r3, r7
 8008f2a:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f34:	3301      	adds	r3, #1
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	3360      	adds	r3, #96	; 0x60
 8008f3a:	443b      	add	r3, r7
 8008f3c:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	da10      	bge.n	8008f66 <USBH_HID_GamepadDecode+0x266>
 8008f44:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f48:	3301      	adds	r3, #1
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	3360      	adds	r3, #96	; 0x60
 8008f4e:	443b      	add	r3, r7
 8008f50:	f833 2c50 	ldrh.w	r2, [r3, #-80]
 8008f54:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f58:	b212      	sxth	r2, r2
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	3360      	adds	r3, #96	; 0x60
 8008f5e:	443b      	add	r3, r7
 8008f60:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8008f64:	e021      	b.n	8008faa <USBH_HID_GamepadDecode+0x2aa>
		else if (a[i] > conf.joystick_mouse.axis[i].logical.max) a[i] = conf.joystick_mouse.axis[i].logical.max;
 8008f66:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	3360      	adds	r3, #96	; 0x60
 8008f6e:	443b      	add	r3, r7
 8008f70:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008f74:	461a      	mov	r2, r3
 8008f76:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	00db      	lsls	r3, r3, #3
 8008f7e:	3360      	adds	r3, #96	; 0x60
 8008f80:	443b      	add	r3, r7
 8008f82:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	dd0f      	ble.n	8008faa <USBH_HID_GamepadDecode+0x2aa>
 8008f8a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f8e:	3301      	adds	r3, #1
 8008f90:	00db      	lsls	r3, r3, #3
 8008f92:	3360      	adds	r3, #96	; 0x60
 8008f94:	443b      	add	r3, r7
 8008f96:	f833 2c4e 	ldrh.w	r2, [r3, #-78]
 8008f9a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f9e:	b212      	sxth	r2, r2
 8008fa0:	005b      	lsls	r3, r3, #1
 8008fa2:	3360      	adds	r3, #96	; 0x60
 8008fa4:	443b      	add	r3, r7
 8008fa6:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i] = a[i] - (abs(conf.joystick_mouse.axis[i].logical.min) + conf.joystick_mouse.axis[i].logical.max) / 2;
 8008faa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008fae:	005b      	lsls	r3, r3, #1
 8008fb0:	3360      	adds	r3, #96	; 0x60
 8008fb2:	443b      	add	r3, r7
 8008fb4:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	00db      	lsls	r3, r3, #3
 8008fc2:	3360      	adds	r3, #96	; 0x60
 8008fc4:	443b      	add	r3, r7
 8008fc6:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	3360      	adds	r3, #96	; 0x60
 8008fd6:	443b      	add	r3, r7
 8008fd8:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8008fdc:	440b      	add	r3, r1
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	da00      	bge.n	8008fe4 <USBH_HID_GamepadDecode+0x2e4>
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	105b      	asrs	r3, r3, #1
 8008fe6:	425b      	negs	r3, r3
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	4413      	add	r3, r2
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008ff2:	b212      	sxth	r2, r2
 8008ff4:	005b      	lsls	r3, r3, #1
 8008ff6:	3360      	adds	r3, #96	; 0x60
 8008ff8:	443b      	add	r3, r7
 8008ffa:	f823 2c1c 	strh.w	r2, [r3, #-28]

		hrange -= dead;
 8008ffe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	653b      	str	r3, [r7, #80]	; 0x50
		if (a[i] < -dead) a[i] += dead;
 8009006:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	3360      	adds	r3, #96	; 0x60
 800900e:	443b      	add	r3, r7
 8009010:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8009014:	461a      	mov	r2, r3
 8009016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009018:	425b      	negs	r3, r3
 800901a:	429a      	cmp	r2, r3
 800901c:	da18      	bge.n	8009050 <USBH_HID_GamepadDecode+0x350>
 800901e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009022:	005b      	lsls	r3, r3, #1
 8009024:	3360      	adds	r3, #96	; 0x60
 8009026:	443b      	add	r3, r7
 8009028:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 800902c:	b29a      	uxth	r2, r3
 800902e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009030:	b29b      	uxth	r3, r3
 8009032:	4413      	add	r3, r2
 8009034:	b29a      	uxth	r2, r3
 8009036:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800903a:	b212      	sxth	r2, r2
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	3360      	adds	r3, #96	; 0x60
 8009040:	443b      	add	r3, r7
 8009042:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8009046:	e02b      	b.n	80090a0 <USBH_HID_GamepadDecode+0x3a0>
 8009048:	20000234 	.word	0x20000234
 800904c:	82082083 	.word	0x82082083
		else if (a[i] > dead) a[i] -= dead;
 8009050:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009054:	005b      	lsls	r3, r3, #1
 8009056:	3360      	adds	r3, #96	; 0x60
 8009058:	443b      	add	r3, r7
 800905a:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 800905e:	461a      	mov	r2, r3
 8009060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009062:	4293      	cmp	r3, r2
 8009064:	da14      	bge.n	8009090 <USBH_HID_GamepadDecode+0x390>
 8009066:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800906a:	005b      	lsls	r3, r3, #1
 800906c:	3360      	adds	r3, #96	; 0x60
 800906e:	443b      	add	r3, r7
 8009070:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8009074:	b29a      	uxth	r2, r3
 8009076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009078:	b29b      	uxth	r3, r3
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	b29a      	uxth	r2, r3
 800907e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009082:	b212      	sxth	r2, r2
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	3360      	adds	r3, #96	; 0x60
 8009088:	443b      	add	r3, r7
 800908a:	f823 2c1c 	strh.w	r2, [r3, #-28]
 800908e:	e007      	b.n	80090a0 <USBH_HID_GamepadDecode+0x3a0>
		else a[i] = 0;
 8009090:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	3360      	adds	r3, #96	; 0x60
 8009098:	443b      	add	r3, r7
 800909a:	2200      	movs	r2, #0
 800909c:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i] = (a[i] * 127) / hrange;
 80090a0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80090a4:	005b      	lsls	r3, r3, #1
 80090a6:	3360      	adds	r3, #96	; 0x60
 80090a8:	443b      	add	r3, r7
 80090aa:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80090ae:	461a      	mov	r2, r3
 80090b0:	4613      	mov	r3, r2
 80090b2:	01db      	lsls	r3, r3, #7
 80090b4:	1a9a      	subs	r2, r3, r2
 80090b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090b8:	fb92 f2f3 	sdiv	r2, r2, r3
 80090bc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80090c0:	b212      	sxth	r2, r2
 80090c2:	005b      	lsls	r3, r3, #1
 80090c4:	3360      	adds	r3, #96	; 0x60
 80090c6:	443b      	add	r3, r7
 80090c8:	f823 2c1c 	strh.w	r2, [r3, #-28]

		if (a[i] < -127) a[i] = -127;
 80090cc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	3360      	adds	r3, #96	; 0x60
 80090d4:	443b      	add	r3, r7
 80090d6:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80090da:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80090de:	da09      	bge.n	80090f4 <USBH_HID_GamepadDecode+0x3f4>
 80090e0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	3360      	adds	r3, #96	; 0x60
 80090e8:	443b      	add	r3, r7
 80090ea:	f64f 7281 	movw	r2, #65409	; 0xff81
 80090ee:	f823 2c1c 	strh.w	r2, [r3, #-28]
 80090f2:	e010      	b.n	8009116 <USBH_HID_GamepadDecode+0x416>
		else if (a[i] > 127) a[i] = 127;
 80090f4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80090f8:	005b      	lsls	r3, r3, #1
 80090fa:	3360      	adds	r3, #96	; 0x60
 80090fc:	443b      	add	r3, r7
 80090fe:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8009102:	2b7f      	cmp	r3, #127	; 0x7f
 8009104:	dd07      	ble.n	8009116 <USBH_HID_GamepadDecode+0x416>
 8009106:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800910a:	005b      	lsls	r3, r3, #1
 800910c:	3360      	adds	r3, #96	; 0x60
 800910e:	443b      	add	r3, r7
 8009110:	227f      	movs	r2, #127	; 0x7f
 8009112:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i]=a[i]+127; // mist wants a value in the range [0..255]
 8009116:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800911a:	005b      	lsls	r3, r3, #1
 800911c:	3360      	adds	r3, #96	; 0x60
 800911e:	443b      	add	r3, r7
 8009120:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8009124:	b29b      	uxth	r3, r3
 8009126:	337f      	adds	r3, #127	; 0x7f
 8009128:	b29a      	uxth	r2, r3
 800912a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800912e:	b212      	sxth	r2, r2
 8009130:	005b      	lsls	r3, r3, #1
 8009132:	3360      	adds	r3, #96	; 0x60
 8009134:	443b      	add	r3, r7
 8009136:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for(i=0;i<2;i++) {
 800913a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800913e:	3301      	adds	r3, #1
 8009140:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8009144:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009148:	2b01      	cmp	r3, #1
 800914a:	f67f aec9 	bls.w	8008ee0 <USBH_HID_GamepadDecode+0x1e0>
	}

				if(a[0] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_LEFT;
 800914e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8009152:	2b3f      	cmp	r3, #63	; 0x3f
 8009154:	dc05      	bgt.n	8009162 <USBH_HID_GamepadDecode+0x462>
 8009156:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800915a:	f043 0302 	orr.w	r3, r3, #2
 800915e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[0] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_RIGHT;
 8009162:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8009166:	2bc0      	cmp	r3, #192	; 0xc0
 8009168:	dd05      	ble.n	8009176 <USBH_HID_GamepadDecode+0x476>
 800916a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800916e:	f043 0301 	orr.w	r3, r3, #1
 8009172:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[1] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_UP;
 8009176:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800917a:	2b3f      	cmp	r3, #63	; 0x3f
 800917c:	dc05      	bgt.n	800918a <USBH_HID_GamepadDecode+0x48a>
 800917e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009182:	f043 0308 	orr.w	r3, r3, #8
 8009186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[1] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_DOWN;
 800918a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800918e:	2bc0      	cmp	r3, #192	; 0xc0
 8009190:	dd05      	ble.n	800919e <USBH_HID_GamepadDecode+0x49e>
 8009192:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009196:	f043 0304 	orr.w	r3, r3, #4
 800919a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				jmap |= btn << JOY_BTN_SHIFT;      // add buttons
 800919e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80091a2:	011b      	lsls	r3, r3, #4
 80091a4:	b25a      	sxtb	r2, r3
 80091a6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80091aa:	4313      	orrs	r3, r2
 80091ac:	b25b      	sxtb	r3, r3
 80091ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

				gamepad_info.gamepad_data = jmap;
 80091b2:	4a07      	ldr	r2, [pc, #28]	; (80091d0 <USBH_HID_GamepadDecode+0x4d0>)
 80091b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091b8:	7013      	strb	r3, [r2, #0]
				gamepad_info.gamepad_extraBtn = btn_extra;
 80091ba:	4a05      	ldr	r2, [pc, #20]	; (80091d0 <USBH_HID_GamepadDecode+0x4d0>)
 80091bc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80091c0:	7053      	strb	r3, [r2, #1]

		  return USBH_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	e000      	b.n	80091c8 <USBH_HID_GamepadDecode+0x4c8>
	    }



	  return USBH_FAIL;
 80091c6:	2302      	movs	r3, #2

}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3760      	adds	r7, #96	; 0x60
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bdb0      	pop	{r4, r5, r7, pc}
 80091d0:	20000230 	.word	0x20000230

080091d4 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 80091e8:	3208      	adds	r2, #8
 80091ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ee:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 80091f0:	4b22      	ldr	r3, [pc, #136]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	709a      	strb	r2, [r3, #2]
 80091f6:	4b21      	ldr	r3, [pc, #132]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 80091f8:	789a      	ldrb	r2, [r3, #2]
 80091fa:	4b20      	ldr	r3, [pc, #128]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 80091fc:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 80091fe:	4b1f      	ldr	r3, [pc, #124]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 8009200:	2200      	movs	r2, #0
 8009202:	711a      	strb	r2, [r3, #4]
 8009204:	4b1d      	ldr	r3, [pc, #116]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 8009206:	791a      	ldrb	r2, [r3, #4]
 8009208:	4b1c      	ldr	r3, [pc, #112]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 800920a:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 800920c:	4b1b      	ldr	r3, [pc, #108]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 800920e:	2200      	movs	r2, #0
 8009210:	719a      	strb	r2, [r3, #6]
 8009212:	4b1a      	ldr	r3, [pc, #104]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 8009214:	799a      	ldrb	r2, [r3, #6]
 8009216:	4b19      	ldr	r3, [pc, #100]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 8009218:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 800921a:	4b18      	ldr	r3, [pc, #96]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 800921c:	2200      	movs	r2, #0
 800921e:	721a      	strb	r2, [r3, #8]
 8009220:	4b16      	ldr	r3, [pc, #88]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 8009222:	7a1a      	ldrb	r2, [r3, #8]
 8009224:	4b15      	ldr	r3, [pc, #84]	; (800927c <USBH_HID_KeybdInit+0xa8>)
 8009226:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8009228:	2300      	movs	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	e00c      	b.n	8009248 <USBH_HID_KeybdInit+0x74>
  {
    keybd_report_data[x] = 0U;
 800922e:	4a14      	ldr	r2, [pc, #80]	; (8009280 <USBH_HID_KeybdInit+0xac>)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2100      	movs	r1, #0
 8009234:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8009238:	4a12      	ldr	r2, [pc, #72]	; (8009284 <USBH_HID_KeybdInit+0xb0>)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2100      	movs	r1, #0
 800923e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3301      	adds	r3, #1
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d9ef      	bls.n	800922e <USBH_HID_KeybdInit+0x5a>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	8b1b      	ldrh	r3, [r3, #24]
 8009252:	2b08      	cmp	r3, #8
 8009254:	d902      	bls.n	800925c <USBH_HID_KeybdInit+0x88>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2208      	movs	r2, #8
 800925a:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	4a09      	ldr	r2, [pc, #36]	; (8009284 <USBH_HID_KeybdInit+0xb0>)
 8009260:	615a      	str	r2, [r3, #20]

  USBH_HID_FifoInit(&HID_Handle->fifo, keybd_fifo_buf, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	3308      	adds	r3, #8
 8009266:	2250      	movs	r2, #80	; 0x50
 8009268:	4907      	ldr	r1, [pc, #28]	; (8009288 <USBH_HID_KeybdInit+0xb4>)
 800926a:	4618      	mov	r0, r3
 800926c:	f7ff fc34 	bl	8008ad8 <USBH_HID_FifoInit>

  return USBH_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	200002b8 	.word	0x200002b8
 8009280:	200002d0 	.word	0x200002d0
 8009284:	200002c8 	.word	0x200002c8
 8009288:	200002d8 	.word	0x200002d8

0800928c <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f80d 	bl	80092b4 <USBH_HID_KeybdDecode>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 80092a0:	4b03      	ldr	r3, [pc, #12]	; (80092b0 <USBH_HID_GetKeybdInfo+0x24>)
 80092a2:	e000      	b.n	80092a6 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 80092a4:	2300      	movs	r3, #0
  }
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	200002b8 	.word	0x200002b8

080092b4 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 80092c8:	3208      	adds	r2, #8
 80092ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ce:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	8b1b      	ldrh	r3, [r3, #24]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <USBH_HID_KeybdDecode+0x28>
  {
    return USBH_FAIL;
 80092d8:	2302      	movs	r3, #2
 80092da:	e072      	b.n	80093c2 <USBH_HID_KeybdDecode+0x10e>
  }
  /*Fill report */

  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	f103 0008 	add.w	r0, r3, #8
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	8b1b      	ldrh	r3, [r3, #24]
 80092e6:	461a      	mov	r2, r3
 80092e8:	4938      	ldr	r1, [pc, #224]	; (80093cc <USBH_HID_KeybdDecode+0x118>)
 80092ea:	f7ff fc11 	bl	8008b10 <USBH_HID_FifoRead>
 80092ee:	4603      	mov	r3, r0
 80092f0:	461a      	mov	r2, r3
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	8b1b      	ldrh	r3, [r3, #24]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d162      	bne.n	80093c0 <USBH_HID_KeybdDecode+0x10c>
  {
	  if (keybd_report_data[0] == 0x1010000 && keybd_report_data[1]==0x1010101)
 80092fa:	4b34      	ldr	r3, [pc, #208]	; (80093cc <USBH_HID_KeybdDecode+0x118>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a34      	ldr	r2, [pc, #208]	; (80093d0 <USBH_HID_KeybdDecode+0x11c>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d106      	bne.n	8009312 <USBH_HID_KeybdDecode+0x5e>
 8009304:	4b31      	ldr	r3, [pc, #196]	; (80093cc <USBH_HID_KeybdDecode+0x118>)
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 800930c:	d101      	bne.n	8009312 <USBH_HID_KeybdDecode+0x5e>
	  {
		  return USBH_FAIL;
 800930e:	2302      	movs	r3, #2
 8009310:	e057      	b.n	80093c2 <USBH_HID_KeybdDecode+0x10e>
	  }
	//  if keybd_re  5055
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8009312:	2100      	movs	r1, #0
 8009314:	482f      	ldr	r0, [pc, #188]	; (80093d4 <USBH_HID_KeybdDecode+0x120>)
 8009316:	f000 fa8f 	bl	8009838 <HID_ReadItem>
 800931a:	4603      	mov	r3, r0
 800931c:	b2da      	uxtb	r2, r3
 800931e:	4b2e      	ldr	r3, [pc, #184]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009320:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 8009322:	2100      	movs	r1, #0
 8009324:	482d      	ldr	r0, [pc, #180]	; (80093dc <USBH_HID_KeybdDecode+0x128>)
 8009326:	f000 fa87 	bl	8009838 <HID_ReadItem>
 800932a:	4603      	mov	r3, r0
 800932c:	b2da      	uxtb	r2, r3
 800932e:	4b2a      	ldr	r3, [pc, #168]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009330:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8009332:	2100      	movs	r1, #0
 8009334:	482a      	ldr	r0, [pc, #168]	; (80093e0 <USBH_HID_KeybdDecode+0x12c>)
 8009336:	f000 fa7f 	bl	8009838 <HID_ReadItem>
 800933a:	4603      	mov	r3, r0
 800933c:	b2da      	uxtb	r2, r3
 800933e:	4b26      	ldr	r3, [pc, #152]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009340:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8009342:	2100      	movs	r1, #0
 8009344:	4827      	ldr	r0, [pc, #156]	; (80093e4 <USBH_HID_KeybdDecode+0x130>)
 8009346:	f000 fa77 	bl	8009838 <HID_ReadItem>
 800934a:	4603      	mov	r3, r0
 800934c:	b2da      	uxtb	r2, r3
 800934e:	4b22      	ldr	r3, [pc, #136]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009350:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8009352:	2100      	movs	r1, #0
 8009354:	4824      	ldr	r0, [pc, #144]	; (80093e8 <USBH_HID_KeybdDecode+0x134>)
 8009356:	f000 fa6f 	bl	8009838 <HID_ReadItem>
 800935a:	4603      	mov	r3, r0
 800935c:	b2da      	uxtb	r2, r3
 800935e:	4b1e      	ldr	r3, [pc, #120]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009360:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8009362:	2100      	movs	r1, #0
 8009364:	4821      	ldr	r0, [pc, #132]	; (80093ec <USBH_HID_KeybdDecode+0x138>)
 8009366:	f000 fa67 	bl	8009838 <HID_ReadItem>
 800936a:	4603      	mov	r3, r0
 800936c:	b2da      	uxtb	r2, r3
 800936e:	4b1a      	ldr	r3, [pc, #104]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009370:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 8009372:	2100      	movs	r1, #0
 8009374:	481e      	ldr	r0, [pc, #120]	; (80093f0 <USBH_HID_KeybdDecode+0x13c>)
 8009376:	f000 fa5f 	bl	8009838 <HID_ReadItem>
 800937a:	4603      	mov	r3, r0
 800937c:	b2da      	uxtb	r2, r3
 800937e:	4b16      	ldr	r3, [pc, #88]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009380:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8009382:	2100      	movs	r1, #0
 8009384:	481b      	ldr	r0, [pc, #108]	; (80093f4 <USBH_HID_KeybdDecode+0x140>)
 8009386:	f000 fa57 	bl	8009838 <HID_ReadItem>
 800938a:	4603      	mov	r3, r0
 800938c:	b2da      	uxtb	r2, r3
 800938e:	4b12      	ldr	r3, [pc, #72]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 8009390:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8009392:	2300      	movs	r3, #0
 8009394:	73fb      	strb	r3, [r7, #15]
 8009396:	e00e      	b.n	80093b6 <USBH_HID_KeybdDecode+0x102>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	4619      	mov	r1, r3
 800939c:	4816      	ldr	r0, [pc, #88]	; (80093f8 <USBH_HID_KeybdDecode+0x144>)
 800939e:	f000 fa4b 	bl	8009838 <HID_ReadItem>
 80093a2:	4602      	mov	r2, r0
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
 80093a6:	b2d1      	uxtb	r1, r2
 80093a8:	4a0b      	ldr	r2, [pc, #44]	; (80093d8 <USBH_HID_KeybdDecode+0x124>)
 80093aa:	4413      	add	r3, r2
 80093ac:	460a      	mov	r2, r1
 80093ae:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
 80093b2:	3301      	adds	r3, #1
 80093b4:	73fb      	strb	r3, [r7, #15]
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	2b05      	cmp	r3, #5
 80093ba:	d9ed      	bls.n	8009398 <USBH_HID_KeybdDecode+0xe4>
    }

    return USBH_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	e000      	b.n	80093c2 <USBH_HID_KeybdDecode+0x10e>
  }
  return   USBH_FAIL;
 80093c0:	2302      	movs	r3, #2
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	200002d0 	.word	0x200002d0
 80093d0:	01010000 	.word	0x01010000
 80093d4:	0800cadc 	.word	0x0800cadc
 80093d8:	200002b8 	.word	0x200002b8
 80093dc:	0800cafc 	.word	0x0800cafc
 80093e0:	0800cb1c 	.word	0x0800cb1c
 80093e4:	0800cb3c 	.word	0x0800cb3c
 80093e8:	0800cb5c 	.word	0x0800cb5c
 80093ec:	0800cb7c 	.word	0x0800cb7c
 80093f0:	0800cb9c 	.word	0x0800cb9c
 80093f4:	0800cbbc 	.word	0x0800cbbc
 80093f8:	0800cbdc 	.word	0x0800cbdc

080093fc <collect_bits>:


/**
  * @}
  */
uint16_t collect_bits(uint8_t *p, uint16_t offset, uint8_t size, int is_signed) {
 80093fc:	b480      	push	{r7}
 80093fe:	b089      	sub	sp, #36	; 0x24
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	607b      	str	r3, [r7, #4]
 8009406:	460b      	mov	r3, r1
 8009408:	817b      	strh	r3, [r7, #10]
 800940a:	4613      	mov	r3, r2
 800940c:	727b      	strb	r3, [r7, #9]
  // mask unused bits of first byte
  uint8_t mask = 0xff << (offset&7);
 800940e:	897b      	ldrh	r3, [r7, #10]
 8009410:	f003 0307 	and.w	r3, r3, #7
 8009414:	22ff      	movs	r2, #255	; 0xff
 8009416:	fa02 f303 	lsl.w	r3, r2, r3
 800941a:	75fb      	strb	r3, [r7, #23]
  uint8_t byte = offset/8;
 800941c:	897b      	ldrh	r3, [r7, #10]
 800941e:	08db      	lsrs	r3, r3, #3
 8009420:	b29b      	uxth	r3, r3
 8009422:	77fb      	strb	r3, [r7, #31]
  uint8_t bits = size;
 8009424:	7a7b      	ldrb	r3, [r7, #9]
 8009426:	77bb      	strb	r3, [r7, #30]
  uint8_t shift = offset&7;
 8009428:	897b      	ldrh	r3, [r7, #10]
 800942a:	b2db      	uxtb	r3, r3
 800942c:	f003 0307 	and.w	r3, r3, #7
 8009430:	777b      	strb	r3, [r7, #29]


  uint16_t rval = (p[byte++] & mask) >> shift;
 8009432:	7ffb      	ldrb	r3, [r7, #31]
 8009434:	1c5a      	adds	r2, r3, #1
 8009436:	77fa      	strb	r2, [r7, #31]
 8009438:	461a      	mov	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	4413      	add	r3, r2
 800943e:	781a      	ldrb	r2, [r3, #0]
 8009440:	7dfb      	ldrb	r3, [r7, #23]
 8009442:	4013      	ands	r3, r2
 8009444:	b2db      	uxtb	r3, r3
 8009446:	461a      	mov	r2, r3
 8009448:	7f7b      	ldrb	r3, [r7, #29]
 800944a:	fa42 f303 	asr.w	r3, r2, r3
 800944e:	837b      	strh	r3, [r7, #26]
  mask = 0xff;
 8009450:	23ff      	movs	r3, #255	; 0xff
 8009452:	75fb      	strb	r3, [r7, #23]
  shift = 8-shift;
 8009454:	7f7b      	ldrb	r3, [r7, #29]
 8009456:	f1c3 0308 	rsb	r3, r3, #8
 800945a:	777b      	strb	r3, [r7, #29]
  bits -= shift;
 800945c:	7fba      	ldrb	r2, [r7, #30]
 800945e:	7f7b      	ldrb	r3, [r7, #29]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	77bb      	strb	r3, [r7, #30]

  // first byte already contained more bits than we need
  if(shift > size) {
 8009464:	7f7a      	ldrb	r2, [r7, #29]
 8009466:	7a7b      	ldrb	r3, [r7, #9]
 8009468:	429a      	cmp	r2, r3
 800946a:	d937      	bls.n	80094dc <collect_bits+0xe0>
    // mask unused bits
    rval &= (1<<size)-1;
 800946c:	7a7b      	ldrb	r3, [r7, #9]
 800946e:	2201      	movs	r2, #1
 8009470:	fa02 f303 	lsl.w	r3, r2, r3
 8009474:	b29b      	uxth	r3, r3
 8009476:	3b01      	subs	r3, #1
 8009478:	b29b      	uxth	r3, r3
 800947a:	b21a      	sxth	r2, r3
 800947c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009480:	4013      	ands	r3, r2
 8009482:	b21b      	sxth	r3, r3
 8009484:	837b      	strh	r3, [r7, #26]
 8009486:	e02c      	b.n	80094e2 <collect_bits+0xe6>
  } else {
    // further bytes if required
    while(bits) {
      mask = (bits<8)?(0xff>>(8-bits)):0xff;
 8009488:	7fbb      	ldrb	r3, [r7, #30]
 800948a:	2b07      	cmp	r3, #7
 800948c:	d807      	bhi.n	800949e <collect_bits+0xa2>
 800948e:	7fbb      	ldrb	r3, [r7, #30]
 8009490:	f1c3 0308 	rsb	r3, r3, #8
 8009494:	22ff      	movs	r2, #255	; 0xff
 8009496:	fa42 f303 	asr.w	r3, r2, r3
 800949a:	b2db      	uxtb	r3, r3
 800949c:	e000      	b.n	80094a0 <collect_bits+0xa4>
 800949e:	23ff      	movs	r3, #255	; 0xff
 80094a0:	75fb      	strb	r3, [r7, #23]
      rval += (p[byte++] & mask) << shift;
 80094a2:	7ffb      	ldrb	r3, [r7, #31]
 80094a4:	1c5a      	adds	r2, r3, #1
 80094a6:	77fa      	strb	r2, [r7, #31]
 80094a8:	461a      	mov	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	4413      	add	r3, r2
 80094ae:	781a      	ldrb	r2, [r3, #0]
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
 80094b2:	4013      	ands	r3, r2
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	461a      	mov	r2, r3
 80094b8:	7f7b      	ldrb	r3, [r7, #29]
 80094ba:	fa02 f303 	lsl.w	r3, r2, r3
 80094be:	b29a      	uxth	r2, r3
 80094c0:	8b7b      	ldrh	r3, [r7, #26]
 80094c2:	4413      	add	r3, r2
 80094c4:	837b      	strh	r3, [r7, #26]
      shift += 8;
 80094c6:	7f7b      	ldrb	r3, [r7, #29]
 80094c8:	3308      	adds	r3, #8
 80094ca:	777b      	strb	r3, [r7, #29]
      bits -= (bits>8)?8:bits;
 80094cc:	7fbb      	ldrb	r3, [r7, #30]
 80094ce:	2b08      	cmp	r3, #8
 80094d0:	bf28      	it	cs
 80094d2:	2308      	movcs	r3, #8
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	7fba      	ldrb	r2, [r7, #30]
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	77bb      	strb	r3, [r7, #30]
    while(bits) {
 80094dc:	7fbb      	ldrb	r3, [r7, #30]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1d2      	bne.n	8009488 <collect_bits+0x8c>
    }
  }

  if(is_signed) {
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d016      	beq.n	8009516 <collect_bits+0x11a>
    // do sign expansion
    uint16_t sign_bit = 1<<(size-1);
 80094e8:	7a7b      	ldrb	r3, [r7, #9]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	2201      	movs	r2, #1
 80094ee:	fa02 f303 	lsl.w	r3, r2, r3
 80094f2:	833b      	strh	r3, [r7, #24]
    if(rval & sign_bit) {
 80094f4:	8b7a      	ldrh	r2, [r7, #26]
 80094f6:	8b3b      	ldrh	r3, [r7, #24]
 80094f8:	4013      	ands	r3, r2
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00a      	beq.n	8009516 <collect_bits+0x11a>
      while(sign_bit) {
 8009500:	e006      	b.n	8009510 <collect_bits+0x114>
	rval |= sign_bit;
 8009502:	8b7a      	ldrh	r2, [r7, #26]
 8009504:	8b3b      	ldrh	r3, [r7, #24]
 8009506:	4313      	orrs	r3, r2
 8009508:	837b      	strh	r3, [r7, #26]
	sign_bit <<= 1;
 800950a:	8b3b      	ldrh	r3, [r7, #24]
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	833b      	strh	r3, [r7, #24]
      while(sign_bit) {
 8009510:	8b3b      	ldrh	r3, [r7, #24]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1f5      	bne.n	8009502 <collect_bits+0x106>
      }
    }
  }

  return rval;
 8009516:	8b7b      	ldrh	r3, [r7, #26]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3724      	adds	r7, #36	; 0x24
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8009538:	3208      	adds	r2, #8
 800953a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800953e:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8009540:	4b25      	ldr	r3, [pc, #148]	; (80095d8 <USBH_HID_MouseInit+0xb4>)
 8009542:	2200      	movs	r2, #0
 8009544:	801a      	strh	r2, [r3, #0]
  mouse_info.y = 0U;
 8009546:	4b24      	ldr	r3, [pc, #144]	; (80095d8 <USBH_HID_MouseInit+0xb4>)
 8009548:	2200      	movs	r2, #0
 800954a:	805a      	strh	r2, [r3, #2]
  mouse_info.buttons[0] = 0U;
 800954c:	4b22      	ldr	r3, [pc, #136]	; (80095d8 <USBH_HID_MouseInit+0xb4>)
 800954e:	2200      	movs	r2, #0
 8009550:	711a      	strb	r2, [r3, #4]
  mouse_info.buttons[1] = 0U;
 8009552:	4b21      	ldr	r3, [pc, #132]	; (80095d8 <USBH_HID_MouseInit+0xb4>)
 8009554:	2200      	movs	r2, #0
 8009556:	715a      	strb	r2, [r3, #5]
  mouse_info.buttons[2] = 0U;
 8009558:	4b1f      	ldr	r3, [pc, #124]	; (80095d8 <USBH_HID_MouseInit+0xb4>)
 800955a:	2200      	movs	r2, #0
 800955c:	719a      	strb	r2, [r3, #6]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	e00c      	b.n	800957e <USBH_HID_MouseInit+0x5a>
  {
    mouse_report_data[i] = 0U;
 8009564:	4a1d      	ldr	r2, [pc, #116]	; (80095dc <USBH_HID_MouseInit+0xb8>)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4413      	add	r3, r2
 800956a:	2200      	movs	r2, #0
 800956c:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800956e:	4a1c      	ldr	r2, [pc, #112]	; (80095e0 <USBH_HID_MouseInit+0xbc>)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2100      	movs	r1, #0
 8009574:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3301      	adds	r3, #1
 800957c:	60fb      	str	r3, [r7, #12]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d9ef      	bls.n	8009564 <USBH_HID_MouseInit+0x40>

  //if (HID_Handle->length > sizeof(mouse_report_data))
  //{
  //  HID_Handle->length = sizeof(mouse_report_data);
  //}
  HID_Handle->length = HID_Handle->HID_Desc.RptDesc.report_size+ (HID_Handle->HID_Desc.RptDesc.report_id?1:0);
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800958a:	b29a      	uxth	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009592:	2b00      	cmp	r3, #0
 8009594:	bf14      	ite	ne
 8009596:	2301      	movne	r3, #1
 8009598:	2300      	moveq	r3, #0
 800959a:	b2db      	uxtb	r3, r3
 800959c:	b29b      	uxth	r3, r3
 800959e:	4413      	add	r3, r2
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	831a      	strh	r2, [r3, #24]
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	4a0d      	ldr	r2, [pc, #52]	; (80095e0 <USBH_HID_MouseInit+0xbc>)
 80095aa:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * HID_Handle->length);
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f103 0008 	add.w	r0, r3, #8
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	8b1b      	ldrh	r3, [r3, #24]
 80095bc:	461a      	mov	r2, r3
 80095be:	0092      	lsls	r2, r2, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	461a      	mov	r2, r3
 80095c8:	f7ff fa86 	bl	8008ad8 <USBH_HID_FifoInit>

  return USBH_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	200003d8 	.word	0x200003d8
 80095dc:	200003e0 	.word	0x200003e0
 80095e0:	200003e8 	.word	0x200003e8

080095e4 <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f80d 	bl	800960c <USBH_HID_MouseDecode>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 80095f8:	4b03      	ldr	r3, [pc, #12]	; (8009608 <USBH_HID_GetMouseInfo+0x24>)
 80095fa:	e000      	b.n	80095fe <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 80095fc:	2300      	movs	r3, #0
  }
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	200003d8 	.word	0x200003d8

0800960c <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b088      	sub	sp, #32
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8009620:	3208      	adds	r2, #8
 8009622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009626:	61bb      	str	r3, [r7, #24]

  if (HID_Handle->length == 0U)
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	8b1b      	ldrh	r3, [r3, #24]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d101      	bne.n	8009634 <USBH_HID_MouseDecode+0x28>
  {
    return USBH_FAIL;
 8009630:	2302      	movs	r3, #2
 8009632:	e0f6      	b.n	8009822 <USBH_HID_MouseDecode+0x216>
  }

  //Clear mouse_report_data

  memset(&mouse_report_data,0,sizeof(mouse_report_data));
 8009634:	2208      	movs	r2, #8
 8009636:	2100      	movs	r1, #0
 8009638:	487c      	ldr	r0, [pc, #496]	; (800982c <USBH_HID_MouseDecode+0x220>)
 800963a:	f003 f8a1 	bl	800c780 <memset>


  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) !=0)
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	f103 0008 	add.w	r0, r3, #8
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	8b1b      	ldrh	r3, [r3, #24]
 8009648:	461a      	mov	r2, r3
 800964a:	4978      	ldr	r1, [pc, #480]	; (800982c <USBH_HID_MouseDecode+0x220>)
 800964c:	f7ff fa60 	bl	8008b10 <USBH_HID_FifoRead>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 80e4 	beq.w	8009820 <USBH_HID_MouseDecode+0x214>
  {

	  uint8_t btn = 0;
 8009658:	2300      	movs	r3, #0
 800965a:	77fb      	strb	r3, [r7, #31]
	  uint8_t btn_extra = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	77bb      	strb	r3, [r7, #30]
	  uint8_t i;



	  // skip report id if present
	  uint8_t *p = mouse_report_data + (HID_Handle->HID_Desc.RptDesc.report_id?1:0);
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <USBH_HID_MouseDecode+0x62>
 800966a:	4b71      	ldr	r3, [pc, #452]	; (8009830 <USBH_HID_MouseDecode+0x224>)
 800966c:	e000      	b.n	8009670 <USBH_HID_MouseDecode+0x64>
 800966e:	4b6f      	ldr	r3, [pc, #444]	; (800982c <USBH_HID_MouseDecode+0x220>)
 8009670:	617b      	str	r3, [r7, #20]


	  //process axis
	  // two axes ...
	  		for(i=0;i<2;i++) {
 8009672:	2300      	movs	r3, #0
 8009674:	777b      	strb	r3, [r7, #29]
 8009676:	e02d      	b.n	80096d4 <USBH_HID_MouseDecode+0xc8>
	  			// if logical minimum is > logical maximum then logical minimum
	  			// is signed. This means that the value itself is also signed
	  			int is_signed = HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.min >
 8009678:	7f7b      	ldrb	r3, [r7, #29]
 800967a:	69ba      	ldr	r2, [r7, #24]
 800967c:	3306      	adds	r3, #6
 800967e:	00db      	lsls	r3, r3, #3
 8009680:	4413      	add	r3, r2
 8009682:	899a      	ldrh	r2, [r3, #12]
	  				HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.max;
 8009684:	7f7b      	ldrb	r3, [r7, #29]
 8009686:	69b9      	ldr	r1, [r7, #24]
 8009688:	3306      	adds	r3, #6
 800968a:	00db      	lsls	r3, r3, #3
 800968c:	440b      	add	r3, r1
 800968e:	89db      	ldrh	r3, [r3, #14]
	  			int is_signed = HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.min >
 8009690:	429a      	cmp	r2, r3
 8009692:	bf8c      	ite	hi
 8009694:	2301      	movhi	r3, #1
 8009696:	2300      	movls	r3, #0
 8009698:	b2db      	uxtb	r3, r3
 800969a:	613b      	str	r3, [r7, #16]
	  			a[i] = collect_bits(p, HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].offset,
 800969c:	7f7b      	ldrb	r3, [r7, #29]
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	3306      	adds	r3, #6
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	4413      	add	r3, r2
 80096a6:	8919      	ldrh	r1, [r3, #8]
 80096a8:	7f7b      	ldrb	r3, [r7, #29]
 80096aa:	69ba      	ldr	r2, [r7, #24]
 80096ac:	3306      	adds	r3, #6
 80096ae:	00db      	lsls	r3, r3, #3
 80096b0:	4413      	add	r3, r2
 80096b2:	7a9a      	ldrb	r2, [r3, #10]
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	6978      	ldr	r0, [r7, #20]
 80096b8:	f7ff fea0 	bl	80093fc <collect_bits>
 80096bc:	4603      	mov	r3, r0
 80096be:	461a      	mov	r2, r3
 80096c0:	7f7b      	ldrb	r3, [r7, #29]
 80096c2:	b212      	sxth	r2, r2
 80096c4:	005b      	lsls	r3, r3, #1
 80096c6:	3320      	adds	r3, #32
 80096c8:	443b      	add	r3, r7
 80096ca:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		for(i=0;i<2;i++) {
 80096ce:	7f7b      	ldrb	r3, [r7, #29]
 80096d0:	3301      	adds	r3, #1
 80096d2:	777b      	strb	r3, [r7, #29]
 80096d4:	7f7b      	ldrb	r3, [r7, #29]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d9ce      	bls.n	8009678 <USBH_HID_MouseDecode+0x6c>
	  					HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].size, is_signed);
	  		}

	  //process 4 first buttons
	  for(i=0;i<4;i++)
 80096da:	2300      	movs	r3, #0
 80096dc:	777b      	strb	r3, [r7, #29]
 80096de:	e020      	b.n	8009722 <USBH_HID_MouseDecode+0x116>
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 80096e0:	7f7b      	ldrb	r3, [r7, #29]
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	3320      	adds	r3, #32
 80096e6:	005b      	lsls	r3, r3, #1
 80096e8:	4413      	add	r3, r2
 80096ea:	7a1b      	ldrb	r3, [r3, #8]
 80096ec:	461a      	mov	r2, r3
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	4413      	add	r3, r2
 80096f2:	781a      	ldrb	r2, [r3, #0]
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 80096f4:	7f7b      	ldrb	r3, [r7, #29]
 80096f6:	69b9      	ldr	r1, [r7, #24]
 80096f8:	3320      	adds	r3, #32
 80096fa:	005b      	lsls	r3, r3, #1
 80096fc:	440b      	add	r3, r1
 80096fe:	7a5b      	ldrb	r3, [r3, #9]
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 8009700:	4013      	ands	r3, r2
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b00      	cmp	r3, #0
 8009706:	d009      	beq.n	800971c <USBH_HID_MouseDecode+0x110>
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 8009708:	7f7b      	ldrb	r3, [r7, #29]
 800970a:	2201      	movs	r2, #1
 800970c:	fa02 f303 	lsl.w	r3, r2, r3
 8009710:	b25a      	sxtb	r2, r3
 8009712:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009716:	4313      	orrs	r3, r2
 8009718:	b25b      	sxtb	r3, r3
 800971a:	77fb      	strb	r3, [r7, #31]
	  for(i=0;i<4;i++)
 800971c:	7f7b      	ldrb	r3, [r7, #29]
 800971e:	3301      	adds	r3, #1
 8009720:	777b      	strb	r3, [r7, #29]
 8009722:	7f7b      	ldrb	r3, [r7, #29]
 8009724:	2b03      	cmp	r3, #3
 8009726:	d9db      	bls.n	80096e0 <USBH_HID_MouseDecode+0xd4>

	  // ... and the eight extra buttons
	  for(i=4;i<12;i++)
 8009728:	2304      	movs	r3, #4
 800972a:	777b      	strb	r3, [r7, #29]
 800972c:	e021      	b.n	8009772 <USBH_HID_MouseDecode+0x166>
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 800972e:	7f7b      	ldrb	r3, [r7, #29]
 8009730:	69ba      	ldr	r2, [r7, #24]
 8009732:	3320      	adds	r3, #32
 8009734:	005b      	lsls	r3, r3, #1
 8009736:	4413      	add	r3, r2
 8009738:	7a1b      	ldrb	r3, [r3, #8]
 800973a:	461a      	mov	r2, r3
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	4413      	add	r3, r2
 8009740:	781a      	ldrb	r2, [r3, #0]
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8009742:	7f7b      	ldrb	r3, [r7, #29]
 8009744:	69b9      	ldr	r1, [r7, #24]
 8009746:	3320      	adds	r3, #32
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	440b      	add	r3, r1
 800974c:	7a5b      	ldrb	r3, [r3, #9]
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 800974e:	4013      	ands	r3, r2
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00a      	beq.n	800976c <USBH_HID_MouseDecode+0x160>
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8009756:	7f7b      	ldrb	r3, [r7, #29]
 8009758:	3b04      	subs	r3, #4
 800975a:	2201      	movs	r2, #1
 800975c:	fa02 f303 	lsl.w	r3, r2, r3
 8009760:	b25a      	sxtb	r2, r3
 8009762:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009766:	4313      	orrs	r3, r2
 8009768:	b25b      	sxtb	r3, r3
 800976a:	77bb      	strb	r3, [r7, #30]
	  for(i=4;i<12;i++)
 800976c:	7f7b      	ldrb	r3, [r7, #29]
 800976e:	3301      	adds	r3, #1
 8009770:	777b      	strb	r3, [r7, #29]
 8009772:	7f7b      	ldrb	r3, [r7, #29]
 8009774:	2b0b      	cmp	r3, #11
 8009776:	d9da      	bls.n	800972e <USBH_HID_MouseDecode+0x122>

	  //process mouse
	  if(HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE) {
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800977e:	f003 0303 	and.w	r3, r3, #3
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b01      	cmp	r3, #1
 8009786:	d149      	bne.n	800981c <USBH_HID_MouseDecode+0x210>
	  		// iprintf("mouse %d %d %x\n", (int16_t)a[0], (int16_t)a[1], btn);
	  		// limit mouse movement to +/- 128
	  		for(i=0;i<2;i++) {
 8009788:	2300      	movs	r3, #0
 800978a:	777b      	strb	r3, [r7, #29]
 800978c:	e022      	b.n	80097d4 <USBH_HID_MouseDecode+0x1c8>
	  		if((int16_t)a[i] >  127) a[i] =  127;
 800978e:	7f7b      	ldrb	r3, [r7, #29]
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	3320      	adds	r3, #32
 8009794:	443b      	add	r3, r7
 8009796:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800979a:	2b7f      	cmp	r3, #127	; 0x7f
 800979c:	dd06      	ble.n	80097ac <USBH_HID_MouseDecode+0x1a0>
 800979e:	7f7b      	ldrb	r3, [r7, #29]
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	3320      	adds	r3, #32
 80097a4:	443b      	add	r3, r7
 80097a6:	227f      	movs	r2, #127	; 0x7f
 80097a8:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		if((int16_t)a[i] < -128) a[i] = -128;
 80097ac:	7f7b      	ldrb	r3, [r7, #29]
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	3320      	adds	r3, #32
 80097b2:	443b      	add	r3, r7
 80097b4:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80097b8:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80097bc:	da07      	bge.n	80097ce <USBH_HID_MouseDecode+0x1c2>
 80097be:	7f7b      	ldrb	r3, [r7, #29]
 80097c0:	005b      	lsls	r3, r3, #1
 80097c2:	3320      	adds	r3, #32
 80097c4:	443b      	add	r3, r7
 80097c6:	f64f 7280 	movw	r2, #65408	; 0xff80
 80097ca:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		for(i=0;i<2;i++) {
 80097ce:	7f7b      	ldrb	r3, [r7, #29]
 80097d0:	3301      	adds	r3, #1
 80097d2:	777b      	strb	r3, [r7, #29]
 80097d4:	7f7b      	ldrb	r3, [r7, #29]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d9d9      	bls.n	800978e <USBH_HID_MouseDecode+0x182>
	  		}
	  		//btn
	  	  mouse_info.x = a[0];
 80097da:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80097de:	4b15      	ldr	r3, [pc, #84]	; (8009834 <USBH_HID_MouseDecode+0x228>)
 80097e0:	801a      	strh	r2, [r3, #0]
	  	  mouse_info.y = a[1];
 80097e2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80097e6:	4b13      	ldr	r3, [pc, #76]	; (8009834 <USBH_HID_MouseDecode+0x228>)
 80097e8:	805a      	strh	r2, [r3, #2]
	  	  mouse_info.buttons[0] = btn&0x1;
 80097ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	b25a      	sxtb	r2, r3
 80097f4:	4b0f      	ldr	r3, [pc, #60]	; (8009834 <USBH_HID_MouseDecode+0x228>)
 80097f6:	711a      	strb	r2, [r3, #4]
	  	  mouse_info.buttons[1] = (btn>>1)&0x1;
 80097f8:	7ffb      	ldrb	r3, [r7, #31]
 80097fa:	085b      	lsrs	r3, r3, #1
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	b25b      	sxtb	r3, r3
 8009800:	f003 0301 	and.w	r3, r3, #1
 8009804:	b25a      	sxtb	r2, r3
 8009806:	4b0b      	ldr	r3, [pc, #44]	; (8009834 <USBH_HID_MouseDecode+0x228>)
 8009808:	715a      	strb	r2, [r3, #5]
	  	  mouse_info.buttons[2] = (btn>>2)&0x1;
 800980a:	7ffb      	ldrb	r3, [r7, #31]
 800980c:	089b      	lsrs	r3, r3, #2
 800980e:	b2db      	uxtb	r3, r3
 8009810:	b25b      	sxtb	r3, r3
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	b25a      	sxtb	r2, r3
 8009818:	4b06      	ldr	r3, [pc, #24]	; (8009834 <USBH_HID_MouseDecode+0x228>)
 800981a:	719a      	strb	r2, [r3, #6]
	  	}
    return USBH_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	e000      	b.n	8009822 <USBH_HID_MouseDecode+0x216>
  }
  return   USBH_FAIL;
 8009820:	2302      	movs	r3, #2
}
 8009822:	4618      	mov	r0, r3
 8009824:	3720      	adds	r7, #32
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	200003e0 	.word	0x200003e0
 8009830:	200003e1 	.word	0x200003e1
 8009834:	200003d8 	.word	0x200003d8

08009838 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8009838:	b480      	push	{r7}
 800983a:	b089      	sub	sp, #36	; 0x24
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8009844:	2300      	movs	r3, #0
 8009846:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8009848:	2300      	movs	r3, #0
 800984a:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	7a1b      	ldrb	r3, [r3, #8]
 8009856:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	7a5b      	ldrb	r3, [r3, #9]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d01a      	beq.n	8009896 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	7a5b      	ldrb	r3, [r3, #9]
 8009864:	78fa      	ldrb	r2, [r7, #3]
 8009866:	429a      	cmp	r2, r3
 8009868:	d301      	bcc.n	800986e <HID_ReadItem+0x36>
    {
      return (0U);
 800986a:	2300      	movs	r3, #0
 800986c:	e076      	b.n	800995c <HID_ReadItem+0x124>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800986e:	78fb      	ldrb	r3, [r7, #3]
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	6852      	ldr	r2, [r2, #4]
 8009874:	fb02 f303 	mul.w	r3, r2, r3
 8009878:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800987a:	7cfb      	ldrb	r3, [r7, #19]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	4413      	add	r3, r2
 8009880:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	08db      	lsrs	r3, r3, #3
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	4413      	add	r3, r2
 800988a:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	b2db      	uxtb	r3, r3
 8009890:	f003 0307 	and.w	r3, r3, #7
 8009894:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 8009896:	2300      	movs	r3, #0
 8009898:	61bb      	str	r3, [r7, #24]
 800989a:	e00a      	b.n	80098b2 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	461a      	mov	r2, r3
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	00db      	lsls	r3, r3, #3
 80098a6:	fa02 f303 	lsl.w	r3, r2, r3
 80098aa:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	3301      	adds	r3, #1
 80098b0:	61bb      	str	r3, [r7, #24]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	f003 0307 	and.w	r3, r3, #7
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d004      	beq.n	80098c8 <HID_ReadItem+0x90>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	08db      	lsrs	r3, r3, #3
 80098c4:	3301      	adds	r3, #1
 80098c6:	e002      	b.n	80098ce <HID_ReadItem+0x96>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	08db      	lsrs	r3, r3, #3
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d8e3      	bhi.n	800989c <HID_ReadItem+0x64>
  }
  val = (val >> shift) & ((1U << ri->size) - 1U);
 80098d4:	7cfb      	ldrb	r3, [r7, #19]
 80098d6:	69fa      	ldr	r2, [r7, #28]
 80098d8:	40da      	lsrs	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	2101      	movs	r1, #1
 80098e0:	fa01 f303 	lsl.w	r3, r1, r3
 80098e4:	3b01      	subs	r3, #1
 80098e6:	4013      	ands	r3, r2
 80098e8:	61fb      	str	r3, [r7, #28]

  if (val < ri->logical_min || val > ri->logical_max)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	69fa      	ldr	r2, [r7, #28]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d304      	bcc.n	80098fe <HID_ReadItem+0xc6>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	69fa      	ldr	r2, [r7, #28]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d901      	bls.n	8009902 <HID_ReadItem+0xca>
  {
    return (0U);
 80098fe:	2300      	movs	r3, #0
 8009900:	e02c      	b.n	800995c <HID_ReadItem+0x124>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1U << (ri->size - 1U))))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	7a9b      	ldrb	r3, [r3, #10]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d01d      	beq.n	8009946 <HID_ReadItem+0x10e>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	3b01      	subs	r3, #1
 8009910:	2201      	movs	r2, #1
 8009912:	409a      	lsls	r2, r3
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	4013      	ands	r3, r2
 8009918:	2b00      	cmp	r3, #0
 800991a:	d014      	beq.n	8009946 <HID_ReadItem+0x10e>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	fa02 f303 	lsl.w	r3, r2, r3
 8009926:	425b      	negs	r3, r3
 8009928:	69fa      	ldr	r2, [r7, #28]
 800992a:	4313      	orrs	r3, r2
 800992c:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	69db      	ldr	r3, [r3, #28]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d101      	bne.n	800993a <HID_ReadItem+0x102>
    {
      return ((uint32_t)vs);
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	e010      	b.n	800995c <HID_ReadItem+0x124>
    }
    return ((uint32_t)(vs * ri->resolution));
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	fb02 f303 	mul.w	r3, r2, r3
 8009944:	e00a      	b.n	800995c <HID_ReadItem+0x124>
  }
  else
  {
    if (ri->resolution == 1U)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	69db      	ldr	r3, [r3, #28]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d101      	bne.n	8009952 <HID_ReadItem+0x11a>
    {
      return (val);
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	e004      	b.n	800995c <HID_ReadItem+0x124>
    }
    return (val * ri->resolution);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	69fa      	ldr	r2, [r7, #28]
 8009958:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800995c:	4618      	mov	r0, r3
 800995e:	3724      	adds	r7, #36	; 0x24
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <report_is_usable>:
  uint8_t bType: 2;
  uint8_t bTag: 4;
} __attribute__((packed)) item_t;


int report_is_usable(uint16_t bit_count, uint8_t report_complete, hid_report_t *conf) {
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	4603      	mov	r3, r0
 8009970:	603a      	str	r2, [r7, #0]
 8009972:	80fb      	strh	r3, [r7, #6]
 8009974:	460b      	mov	r3, r1
 8009976:	717b      	strb	r3, [r7, #5]
// hidp_debugf("  - total bit count: %d (%d bytes, %d bits)",
//	      bit_count, bit_count/8, bit_count%8);

  conf->report_size = bit_count/8;
 8009978:	88fb      	ldrh	r3, [r7, #6]
 800997a:	08db      	lsrs	r3, r3, #3
 800997c:	b29b      	uxth	r3, r3
 800997e:	b2da      	uxtb	r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	709a      	strb	r2, [r3, #2]

  // check if something useful was detected
  if( ((conf->type == REPORT_TYPE_JOYSTICK) && ((report_complete & JOYSTICK_COMPLETE) == JOYSTICK_COMPLETE)) ||
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	f003 0303 	and.w	r3, r3, #3
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b03      	cmp	r3, #3
 8009990:	d104      	bne.n	800999c <report_is_usable+0x34>
 8009992:	797b      	ldrb	r3, [r7, #5]
 8009994:	f003 0307 	and.w	r3, r3, #7
 8009998:	2b07      	cmp	r3, #7
 800999a:	d012      	beq.n	80099c2 <report_is_usable+0x5a>
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	f003 0303 	and.w	r3, r3, #3
 80099a4:	b2db      	uxtb	r3, r3
  if( ((conf->type == REPORT_TYPE_JOYSTICK) && ((report_complete & JOYSTICK_COMPLETE) == JOYSTICK_COMPLETE)) ||
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d104      	bne.n	80099b4 <report_is_usable+0x4c>
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 80099aa:	797b      	ldrb	r3, [r7, #5]
 80099ac:	f003 030f 	and.w	r3, r3, #15
 80099b0:	2b0f      	cmp	r3, #15
 80099b2:	d006      	beq.n	80099c2 <report_is_usable+0x5a>
      ((conf->type == REPORT_TYPE_KEYBOARD))) {
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	f003 0303 	and.w	r3, r3, #3
 80099bc:	b2db      	uxtb	r3, r3
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d101      	bne.n	80099c6 <report_is_usable+0x5e>
 //   hidp_debugf("  - report %d is usable", conf->report_id);
    return 1;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e000      	b.n	80099c8 <report_is_usable+0x60>
  }

//  hidp_debugf("  - unusable report %d", conf->report_id);
  return 0;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <parse_report_descriptor>:



int parse_report_descriptor(uint8_t *rep, uint16_t rep_size,hid_report_t *conf) {
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08e      	sub	sp, #56	; 0x38
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	460b      	mov	r3, r1
 80099de:	607a      	str	r2, [r7, #4]
 80099e0:	817b      	strh	r3, [r7, #10]
  int8_t app_collection = 0;
 80099e2:	2300      	movs	r3, #0
 80099e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int8_t phys_log_collection = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint8_t skip_collection = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  int8_t generic_desktop = -1;   // depth at which first gen_desk was found
 80099f4:	23ff      	movs	r3, #255	; 0xff
 80099f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  uint8_t collection_depth = 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33


  //
  uint8_t report_size = 0, report_count = 0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009a06:	2300      	movs	r3, #0
 8009a08:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  uint16_t bit_count = 0, usage_count = 0;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009a10:	2300      	movs	r3, #0
 8009a12:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t logical_minimum=0, logical_maximum=0;
 8009a14:	2300      	movs	r3, #0
 8009a16:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009a18:	2300      	movs	r3, #0
 8009a1a:	853b      	strh	r3, [r7, #40]	; 0x28

  // mask used to check of all required components have been found, so
  // that e.g. both axes and the button of a joystick are ready to be used
  uint8_t report_complete = 0;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  // joystick/mouse components
  int8_t axis[2] = { -1, -1};
 8009a22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a26:	823b      	strh	r3, [r7, #16]
  uint8_t btns = 0;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  int8_t hat = -1;
 8009a2e:	23ff      	movs	r3, #255	; 0xff
 8009a30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


  while(rep_size) {
 8009a34:	e2d2      	b.n	8009fdc <parse_report_descriptor+0x608>
    // extract short item
    uint8_t tag = ((item_t*)rep)->bTag;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	777b      	strb	r3, [r7, #29]
    uint8_t type = ((item_t*)rep)->bType;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	773b      	strb	r3, [r7, #28]
    uint8_t size = ((item_t*)rep)->bSize;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	76fb      	strb	r3, [r7, #27]

    rep++;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	60fb      	str	r3, [r7, #12]
    rep_size--;   // one byte consumed
 8009a60:	897b      	ldrh	r3, [r7, #10]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	817b      	strh	r3, [r7, #10]



    uint32_t value = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	623b      	str	r3, [r7, #32]
     if(size) {      // size 1/2/3
 8009a6a:	7efb      	ldrb	r3, [r7, #27]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d007      	beq.n	8009a80 <parse_report_descriptor+0xac>
       value = *rep++;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	60fa      	str	r2, [r7, #12]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	623b      	str	r3, [r7, #32]
       rep_size--;
 8009a7a:	897b      	ldrh	r3, [r7, #10]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	817b      	strh	r3, [r7, #10]
     }

     if(size > 1) {  // size 2/3
 8009a80:	7efb      	ldrb	r3, [r7, #27]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d90b      	bls.n	8009a9e <parse_report_descriptor+0xca>
       value = (value & 0xff) + ((uint32_t)(*rep++)<<8);
 8009a86:	6a3b      	ldr	r3, [r7, #32]
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	1c59      	adds	r1, r3, #1
 8009a8e:	60f9      	str	r1, [r7, #12]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	021b      	lsls	r3, r3, #8
 8009a94:	4413      	add	r3, r2
 8009a96:	623b      	str	r3, [r7, #32]
       rep_size--;
 8009a98:	897b      	ldrh	r3, [r7, #10]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	817b      	strh	r3, [r7, #10]
     }

     if(size > 2) {  // size 3
 8009a9e:	7efb      	ldrb	r3, [r7, #27]
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d915      	bls.n	8009ad0 <parse_report_descriptor+0xfc>
       value &= 0xffff;
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	623b      	str	r3, [r7, #32]
       value |= ((uint32_t)(*rep++)<<16);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	1c5a      	adds	r2, r3, #1
 8009aae:	60fa      	str	r2, [r7, #12]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	041b      	lsls	r3, r3, #16
 8009ab4:	6a3a      	ldr	r2, [r7, #32]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	623b      	str	r3, [r7, #32]
       value |= ((uint32_t)(*rep++)<<24);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	60fa      	str	r2, [r7, #12]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	061b      	lsls	r3, r3, #24
 8009ac4:	6a3a      	ldr	r2, [r7, #32]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	623b      	str	r3, [r7, #32]
       rep_size-=2;
 8009aca:	897b      	ldrh	r3, [r7, #10]
 8009acc:	3b02      	subs	r3, #2
 8009ace:	817b      	strh	r3, [r7, #10]
     }


       // we are currently skipping an unknown/unsupported collection)
           if(skip_collection) {
 8009ad0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d029      	beq.n	8009b2c <parse_report_descriptor+0x158>
             if(!type) {  // main item
 8009ad8:	7f3b      	ldrb	r3, [r7, #28]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f040 827e 	bne.w	8009fdc <parse_report_descriptor+0x608>
       				// any new collection increases the depth of collections to skip
       				if(tag == 10) {
 8009ae0:	7f7b      	ldrb	r3, [r7, #29]
 8009ae2:	2b0a      	cmp	r3, #10
 8009ae4:	d109      	bne.n	8009afa <parse_report_descriptor+0x126>
       					skip_collection++;
 8009ae6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009aea:	3301      	adds	r3, #1
 8009aec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
       					collection_depth++;
 8009af0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009af4:	3301      	adds	r3, #1
 8009af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
       				}

       				// any end collection decreases it
       				if(tag == 12) {
 8009afa:	7f7b      	ldrb	r3, [r7, #29]
 8009afc:	2b0c      	cmp	r3, #12
 8009afe:	f040 826d 	bne.w	8009fdc <parse_report_descriptor+0x608>
       					skip_collection--;
 8009b02:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009b06:	3b01      	subs	r3, #1
 8009b08:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
       					collection_depth--;
 8009b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b10:	3b01      	subs	r3, #1
 8009b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

       					// leaving the depth the generic desktop was valid for
       					if(generic_desktop > collection_depth)
 8009b16:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 8009b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	f340 825c 	ble.w	8009fdc <parse_report_descriptor+0x608>
       						generic_desktop = -1;
 8009b24:	23ff      	movs	r3, #255	; 0xff
 8009b26:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8009b2a:	e257      	b.n	8009fdc <parse_report_descriptor+0x608>
             }

           } else {


                 switch(type) {
 8009b2c:	7f3b      	ldrb	r3, [r7, #28]
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	f000 81c9 	beq.w	8009ec6 <parse_report_descriptor+0x4f2>
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	f300 8250 	bgt.w	8009fda <parse_report_descriptor+0x606>
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d003      	beq.n	8009b46 <parse_report_descriptor+0x172>
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	f000 8170 	beq.w	8009e24 <parse_report_descriptor+0x450>
 8009b44:	e249      	b.n	8009fda <parse_report_descriptor+0x606>
                 case 0:
           	// main item

           	switch(tag) {
 8009b46:	7f7b      	ldrb	r3, [r7, #29]
 8009b48:	3b08      	subs	r3, #8
 8009b4a:	2b04      	cmp	r3, #4
 8009b4c:	f200 8166 	bhi.w	8009e1c <parse_report_descriptor+0x448>
 8009b50:	a201      	add	r2, pc, #4	; (adr r2, 8009b58 <parse_report_descriptor+0x184>)
 8009b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b56:	bf00      	nop
 8009b58:	08009b6d 	.word	0x08009b6d
 8009b5c:	08009e21 	.word	0x08009e21
 8009b60:	08009d4f 	.word	0x08009d4f
 8009b64:	08009e21 	.word	0x08009e21
 8009b68:	08009dab 	.word	0x08009dab
           	case 8:
           	  // handle found buttons
           	  if(btns) {
 8009b6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d050      	beq.n	8009c16 <parse_report_descriptor+0x242>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) ||
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	f003 0303 	and.w	r3, r3, #3
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d006      	beq.n	8009b90 <parse_report_descriptor+0x1bc>
           	       (conf->type == REPORT_TYPE_MOUSE)) {
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	f003 0303 	and.w	r3, r3, #3
 8009b8a:	b2db      	uxtb	r3, r3
           	    if((conf->type == REPORT_TYPE_JOYSTICK) ||
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d142      	bne.n	8009c16 <parse_report_descriptor+0x242>
           	      // scan for up to four buttons
           	      uint8_t b;
           	      for(b=0;b<12;b++) {
 8009b90:	2300      	movs	r3, #0
 8009b92:	77fb      	strb	r3, [r7, #31]
 8009b94:	e02c      	b.n	8009bf0 <parse_report_descriptor+0x21c>
           		if(report_count > b) {
 8009b96:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8009b9a:	7ffb      	ldrb	r3, [r7, #31]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d91a      	bls.n	8009bd6 <parse_report_descriptor+0x202>
           		  uint16_t this_bit = bit_count+b;
 8009ba0:	7ffb      	ldrb	r3, [r7, #31]
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ba6:	4413      	add	r3, r2
 8009ba8:	833b      	strh	r3, [r7, #24]

           		  conf->joystick_mouse.button[b].byte_offset = this_bit/8;
 8009baa:	8b3b      	ldrh	r3, [r7, #24]
 8009bac:	08db      	lsrs	r3, r3, #3
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	7ffa      	ldrb	r2, [r7, #31]
 8009bb2:	b2d9      	uxtb	r1, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	320c      	adds	r2, #12
 8009bb8:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
           		  conf->joystick_mouse.button[b].bitmask = 1 << (this_bit%8);
 8009bbc:	8b3b      	ldrh	r3, [r7, #24]
 8009bbe:	f003 0307 	and.w	r3, r3, #7
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	409a      	lsls	r2, r3
 8009bc6:	7ffb      	ldrb	r3, [r7, #31]
 8009bc8:	b2d1      	uxtb	r1, r2
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	330c      	adds	r3, #12
 8009bce:	005b      	lsls	r3, r3, #1
 8009bd0:	4413      	add	r3, r2
 8009bd2:	460a      	mov	r2, r1
 8009bd4:	705a      	strb	r2, [r3, #1]
           		}
           					conf->joystick_mouse.button_count = report_count * report_size;
 8009bd6:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8009bda:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009bde:	fb12 f303 	smulbb	r3, r2, r3
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
           	      for(b=0;b<12;b++) {
 8009bea:	7ffb      	ldrb	r3, [r7, #31]
 8009bec:	3301      	adds	r3, #1
 8009bee:	77fb      	strb	r3, [r7, #31]
 8009bf0:	7ffb      	ldrb	r3, [r7, #31]
 8009bf2:	2b0b      	cmp	r3, #11
 8009bf4:	d9cf      	bls.n	8009b96 <parse_report_descriptor+0x1c2>
           	      }

           	      // we found at least one button which is all we want to accept this as a valid
           	      // joystick
           	      report_complete |= JOY_MOUSE_REQ_BTN_0;
 8009bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bfa:	f043 0304 	orr.w	r3, r3, #4
 8009bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	      if(report_count > 1) report_complete |= JOY_MOUSE_REQ_BTN_1;
 8009c02:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d905      	bls.n	8009c16 <parse_report_descriptor+0x242>
 8009c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c0e:	f043 0308 	orr.w	r3, r3, #8
 8009c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	    }
           	  }

           	  // handle found axes
           	  uint8_t c;
           	  for(c=0;c<2;c++) {
 8009c16:	2300      	movs	r3, #0
 8009c18:	77bb      	strb	r3, [r7, #30]
 8009c1a:	e05c      	b.n	8009cd6 <parse_report_descriptor+0x302>
           	    if(axis[c] >= 0) {
 8009c1c:	7fbb      	ldrb	r3, [r7, #30]
 8009c1e:	3338      	adds	r3, #56	; 0x38
 8009c20:	443b      	add	r3, r7
 8009c22:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	db52      	blt.n	8009cd0 <parse_report_descriptor+0x2fc>
           	      uint16_t cnt = bit_count + report_size * axis[c];
 8009c2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	7fbb      	ldrb	r3, [r7, #30]
 8009c32:	3338      	adds	r3, #56	; 0x38
 8009c34:	443b      	add	r3, r7
 8009c36:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	fb12 f303 	smulbb	r3, r2, r3
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009c44:	4413      	add	r3, r2
 8009c46:	82bb      	strh	r3, [r7, #20]

           	      if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	f003 0303 	and.w	r3, r3, #3
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b03      	cmp	r3, #3
 8009c54:	d006      	beq.n	8009c64 <parse_report_descriptor+0x290>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	f003 0303 	and.w	r3, r3, #3
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d135      	bne.n	8009cd0 <parse_report_descriptor+0x2fc>
           		// save in joystick report
           		conf->joystick_mouse.axis[c].offset = cnt;
 8009c64:	7fba      	ldrb	r2, [r7, #30]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3201      	adds	r2, #1
 8009c6a:	8ab9      	ldrh	r1, [r7, #20]
 8009c6c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
           		conf->joystick_mouse.axis[c].size = report_size;
 8009c70:	7fbb      	ldrb	r3, [r7, #30]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	3301      	adds	r3, #1
 8009c76:	00db      	lsls	r3, r3, #3
 8009c78:	4413      	add	r3, r2
 8009c7a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8009c7e:	709a      	strb	r2, [r3, #2]
           		conf->joystick_mouse.axis[c].logical.min = logical_minimum;
 8009c80:	7fbb      	ldrb	r3, [r7, #30]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	3301      	adds	r3, #1
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	4413      	add	r3, r2
 8009c8a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8009c8c:	809a      	strh	r2, [r3, #4]
           		conf->joystick_mouse.axis[c].logical.max = logical_maximum;
 8009c8e:	7fbb      	ldrb	r3, [r7, #30]
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	3301      	adds	r3, #1
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	4413      	add	r3, r2
 8009c98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009c9a:	80da      	strh	r2, [r3, #6]
           		conf->joystick_mouse.axis[c].size = report_size;
 8009c9c:	7fbb      	ldrb	r3, [r7, #30]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	00db      	lsls	r3, r3, #3
 8009ca4:	4413      	add	r3, r2
 8009ca6:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8009caa:	709a      	strb	r2, [r3, #2]
           		if(c==0) report_complete |= JOY_MOUSE_REQ_AXIS_X;
 8009cac:	7fbb      	ldrb	r3, [r7, #30]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d105      	bne.n	8009cbe <parse_report_descriptor+0x2ea>
 8009cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cb6:	f043 0301 	orr.w	r3, r3, #1
 8009cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           		if(c==1) report_complete |= JOY_MOUSE_REQ_AXIS_Y;
 8009cbe:	7fbb      	ldrb	r3, [r7, #30]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d105      	bne.n	8009cd0 <parse_report_descriptor+0x2fc>
 8009cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc8:	f043 0302 	orr.w	r3, r3, #2
 8009ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	  for(c=0;c<2;c++) {
 8009cd0:	7fbb      	ldrb	r3, [r7, #30]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	77bb      	strb	r3, [r7, #30]
 8009cd6:	7fbb      	ldrb	r3, [r7, #30]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d99f      	bls.n	8009c1c <parse_report_descriptor+0x248>
           	      }
           	    }
           	  }

           	  // handle found hat
           	  if(hat >= 0) {
 8009cdc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	db1a      	blt.n	8009d1a <parse_report_descriptor+0x346>
           	    uint16_t cnt = bit_count + report_size * hat;
 8009ce4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	fb12 f303 	smulbb	r3, r2, r3
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009cf8:	4413      	add	r3, r2
 8009cfa:	82fb      	strh	r3, [r7, #22]
           	    if(conf->type == REPORT_TYPE_JOYSTICK) {
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	f003 0303 	and.w	r3, r3, #3
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d107      	bne.n	8009d1a <parse_report_descriptor+0x346>
           	      conf->joystick_mouse.hat.offset = cnt;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	8afa      	ldrh	r2, [r7, #22]
 8009d0e:	861a      	strh	r2, [r3, #48]	; 0x30
           	      conf->joystick_mouse.hat.size = report_size;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8009d16:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
           	    }
           	  }


           	  // reset for next inputs
           	  bit_count += report_count * report_size;
 8009d1a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	fb12 f303 	smulbb	r3, r2, r3
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d2e:	4413      	add	r3, r2
 8009d30:	85fb      	strh	r3, [r7, #46]	; 0x2e
           	  usage_count = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  btns = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
           	  axis[0] = axis[1] = -1;
 8009d3c:	23ff      	movs	r3, #255	; 0xff
 8009d3e:	747b      	strb	r3, [r7, #17]
 8009d40:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8009d44:	743b      	strb	r3, [r7, #16]
           	  hat = -1;
 8009d46:	23ff      	movs	r3, #255	; 0xff
 8009d48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
           	  break;
 8009d4c:	e069      	b.n	8009e22 <parse_report_descriptor+0x44e>

           	case 11:
           	  break;

           	case 10:
           	  collection_depth++;
 8009d4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d52:	3301      	adds	r3, #1
 8009d54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
           	  usage_count = 0;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	85bb      	strh	r3, [r7, #44]	; 0x2c

           	  if(value == 1) {	   // app collection
 8009d5c:	6a3b      	ldr	r3, [r7, #32]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d107      	bne.n	8009d72 <parse_report_descriptor+0x39e>
           	    app_collection++;
 8009d62:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	3301      	adds	r3, #1
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
           	  } else if(value == 2) {  // logical collection
           	    phys_log_collection++;
           	  } else {
           	    skip_collection++;
           	  }
           	  break;
 8009d70:	e057      	b.n	8009e22 <parse_report_descriptor+0x44e>
           	  } else if(value == 0) {  // physical collection
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d107      	bne.n	8009d88 <parse_report_descriptor+0x3b4>
           	    phys_log_collection++;
 8009d78:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	3301      	adds	r3, #1
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	  break;
 8009d86:	e04c      	b.n	8009e22 <parse_report_descriptor+0x44e>
           	  } else if(value == 2) {  // logical collection
 8009d88:	6a3b      	ldr	r3, [r7, #32]
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d107      	bne.n	8009d9e <parse_report_descriptor+0x3ca>
           	    phys_log_collection++;
 8009d8e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	3301      	adds	r3, #1
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	  break;
 8009d9c:	e041      	b.n	8009e22 <parse_report_descriptor+0x44e>
           	    skip_collection++;
 8009d9e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009da2:	3301      	adds	r3, #1
 8009da4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
           	  break;
 8009da8:	e03b      	b.n	8009e22 <parse_report_descriptor+0x44e>

           	case 12:
           	  collection_depth--;
 8009daa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009dae:	3b01      	subs	r3, #1
 8009db0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

           	  // leaving the depth the generic desktop was valid for
           	  if(generic_desktop > collection_depth)
 8009db4:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 8009db8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	dd02      	ble.n	8009dc6 <parse_report_descriptor+0x3f2>
           	    generic_desktop = -1;
 8009dc0:	23ff      	movs	r3, #255	; 0xff
 8009dc2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

           	  if(phys_log_collection) {
 8009dc6:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d007      	beq.n	8009dde <parse_report_descriptor+0x40a>

           	    phys_log_collection--;
 8009dce:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	    }

           	  } else {
           	    return 0;
           	  }
           	  break;
 8009ddc:	e021      	b.n	8009e22 <parse_report_descriptor+0x44e>
           	  } else if(app_collection) {
 8009dde:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d018      	beq.n	8009e18 <parse_report_descriptor+0x444>
           	    app_collection--;
 8009de6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	3b01      	subs	r3, #1
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
           	     if(report_is_usable(bit_count, report_complete, conf))
 8009df4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8009df8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7ff fdb3 	bl	8009968 <report_is_usable>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d001      	beq.n	8009e0c <parse_report_descriptor+0x438>
           	      return 1;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e0ec      	b.n	8009fe6 <parse_report_descriptor+0x612>
           	      bit_count = 0;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
           	      report_complete = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	  break;
 8009e16:	e004      	b.n	8009e22 <parse_report_descriptor+0x44e>
           	    return 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	e0e4      	b.n	8009fe6 <parse_report_descriptor+0x612>

           	default:
           	  return 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	e0e2      	b.n	8009fe6 <parse_report_descriptor+0x612>
           	  break;
 8009e20:	bf00      	nop
           	  break;
           	}
           	break;
 8009e22:	e0db      	b.n	8009fdc <parse_report_descriptor+0x608>

                 case 1:
           	// global item
           	switch(tag) {
 8009e24:	7f7b      	ldrb	r3, [r7, #29]
 8009e26:	2b09      	cmp	r3, #9
 8009e28:	d847      	bhi.n	8009eba <parse_report_descriptor+0x4e6>
 8009e2a:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <parse_report_descriptor+0x45c>)
 8009e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e30:	08009e59 	.word	0x08009e59
 8009e34:	08009e95 	.word	0x08009e95
 8009e38:	08009e9b 	.word	0x08009e9b
 8009e3c:	08009ebf 	.word	0x08009ebf
 8009e40:	08009ebf 	.word	0x08009ebf
 8009e44:	08009ebf 	.word	0x08009ebf
 8009e48:	08009ebf 	.word	0x08009ebf
 8009e4c:	08009ea1 	.word	0x08009ea1
 8009e50:	08009ea9 	.word	0x08009ea9
 8009e54:	08009eb3 	.word	0x08009eb3
           	case 0:

           	  if(value == USAGE_PAGE_KEYBOARD) {
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	2b07      	cmp	r3, #7
 8009e5c:	d01a      	beq.n	8009e94 <parse_report_descriptor+0x4c0>
           	  } else if(value == USAGE_PAGE_GAMING) {
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	2b05      	cmp	r3, #5
 8009e62:	d017      	beq.n	8009e94 <parse_report_descriptor+0x4c0>
           	  } else if(value == USAGE_PAGE_LEDS) {
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	2b08      	cmp	r3, #8
 8009e68:	d014      	beq.n	8009e94 <parse_report_descriptor+0x4c0>
           	  } else if(value == USAGE_PAGE_CONSUMER) {
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	2b0c      	cmp	r3, #12
 8009e6e:	d011      	beq.n	8009e94 <parse_report_descriptor+0x4c0>
           	  } else if(value == USAGE_PAGE_BUTTON) {
 8009e70:	6a3b      	ldr	r3, [r7, #32]
 8009e72:	2b09      	cmp	r3, #9
 8009e74:	d103      	bne.n	8009e7e <parse_report_descriptor+0x4aa>
           	    btns = 1;
 8009e76:	2301      	movs	r3, #1
 8009e78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e7c:	e00a      	b.n	8009e94 <parse_report_descriptor+0x4c0>
           	  } else if(value == USAGE_PAGE_GENERIC_DESKTOP) {
 8009e7e:	6a3b      	ldr	r3, [r7, #32]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d11e      	bne.n	8009ec2 <parse_report_descriptor+0x4ee>
           	    if(generic_desktop < 0)
 8009e84:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	da03      	bge.n	8009e94 <parse_report_descriptor+0x4c0>
           	      generic_desktop = collection_depth;
 8009e8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e90:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
           	  } else

           	  break;

           	case 1:
           	  logical_minimum = value;
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	857b      	strh	r3, [r7, #42]	; 0x2a
           	  break;
 8009e98:	e014      	b.n	8009ec4 <parse_report_descriptor+0x4f0>

           	case 2:
           	  logical_maximum = value;
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	853b      	strh	r3, [r7, #40]	; 0x28
           	  break;
 8009e9e:	e011      	b.n	8009ec4 <parse_report_descriptor+0x4f0>

           	case 6:
           	  break;

           	case 7:
           	  report_size = value;
 8009ea0:	6a3b      	ldr	r3, [r7, #32]
 8009ea2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
           		break;
 8009ea6:	e00d      	b.n	8009ec4 <parse_report_descriptor+0x4f0>

           	case 8:
           	  conf->report_id = value;
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	705a      	strb	r2, [r3, #1]
           	  break;
 8009eb0:	e008      	b.n	8009ec4 <parse_report_descriptor+0x4f0>

           	case 9:
           		report_count = value;
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
           	  break;
 8009eb8:	e004      	b.n	8009ec4 <parse_report_descriptor+0x4f0>

           	default:
           	  return 0;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e093      	b.n	8009fe6 <parse_report_descriptor+0x612>
           	  break;
 8009ebe:	bf00      	nop
 8009ec0:	e08c      	b.n	8009fdc <parse_report_descriptor+0x608>
           	  break;
 8009ec2:	bf00      	nop
           	  break;
           	}
           	break;
 8009ec4:	e08a      	b.n	8009fdc <parse_report_descriptor+0x608>

                 case 2:
           	// local item
           	switch(tag) {
 8009ec6:	7f7b      	ldrb	r3, [r7, #29]
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d07e      	beq.n	8009fca <parse_report_descriptor+0x5f6>
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	f300 8082 	bgt.w	8009fd6 <parse_report_descriptor+0x602>
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d002      	beq.n	8009edc <parse_report_descriptor+0x508>
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d06f      	beq.n	8009fba <parse_report_descriptor+0x5e6>
           	  usage_count += value;
           	  break;

           	default:

           	  break;
 8009eda:	e07c      	b.n	8009fd6 <parse_report_descriptor+0x602>
           	  if( !collection_depth && (value == USAGE_KEYBOARD)) {
 8009edc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d109      	bne.n	8009ef8 <parse_report_descriptor+0x524>
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	2b06      	cmp	r3, #6
 8009ee8:	d106      	bne.n	8009ef8 <parse_report_descriptor+0x524>
           	    conf->type = REPORT_TYPE_KEYBOARD;
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	7813      	ldrb	r3, [r2, #0]
 8009eee:	2102      	movs	r1, #2
 8009ef0:	f361 0301 	bfi	r3, r1, #0, #2
 8009ef4:	7013      	strb	r3, [r2, #0]
 8009ef6:	e05c      	b.n	8009fb2 <parse_report_descriptor+0x5de>
           	  } else if(!collection_depth && (value == USAGE_MOUSE)) {
 8009ef8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d109      	bne.n	8009f14 <parse_report_descriptor+0x540>
 8009f00:	6a3b      	ldr	r3, [r7, #32]
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d106      	bne.n	8009f14 <parse_report_descriptor+0x540>
           	    conf->type = REPORT_TYPE_MOUSE;
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	7813      	ldrb	r3, [r2, #0]
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	f361 0301 	bfi	r3, r1, #0, #2
 8009f10:	7013      	strb	r3, [r2, #0]
 8009f12:	e04e      	b.n	8009fb2 <parse_report_descriptor+0x5de>
           	  } else if(!collection_depth &&
 8009f14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10b      	bne.n	8009f34 <parse_report_descriptor+0x560>
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	2b05      	cmp	r3, #5
 8009f20:	d002      	beq.n	8009f28 <parse_report_descriptor+0x554>
           		    ((value == USAGE_GAMEPAD) || (value == USAGE_JOYSTICK))) {
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d105      	bne.n	8009f34 <parse_report_descriptor+0x560>
           	    conf->type = REPORT_TYPE_JOYSTICK;
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	7813      	ldrb	r3, [r2, #0]
 8009f2c:	f043 0303 	orr.w	r3, r3, #3
 8009f30:	7013      	strb	r3, [r2, #0]
 8009f32:	e03e      	b.n	8009fb2 <parse_report_descriptor+0x5de>
           	  } else if(value == USAGE_POINTER && app_collection) {
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d103      	bne.n	8009f42 <parse_report_descriptor+0x56e>
 8009f3a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d137      	bne.n	8009fb2 <parse_report_descriptor+0x5de>
           	  } else if((value == USAGE_X || value == USAGE_Y) && app_collection) {
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	2b30      	cmp	r3, #48	; 0x30
 8009f46:	d002      	beq.n	8009f4e <parse_report_descriptor+0x57a>
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	2b31      	cmp	r3, #49	; 0x31
 8009f4c:	d11e      	bne.n	8009f8c <parse_report_descriptor+0x5b8>
 8009f4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d01a      	beq.n	8009f8c <parse_report_descriptor+0x5b8>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	f003 0303 	and.w	r3, r3, #3
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	2b03      	cmp	r3, #3
 8009f62:	d006      	beq.n	8009f72 <parse_report_descriptor+0x59e>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	f003 0303 	and.w	r3, r3, #3
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d11e      	bne.n	8009fb0 <parse_report_descriptor+0x5dc>
           	      if(value == USAGE_X) {
 8009f72:	6a3b      	ldr	r3, [r7, #32]
 8009f74:	2b30      	cmp	r3, #48	; 0x30
 8009f76:	d102      	bne.n	8009f7e <parse_report_descriptor+0x5aa>
           		axis[0] = usage_count;
 8009f78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009f7a:	b25b      	sxtb	r3, r3
 8009f7c:	743b      	strb	r3, [r7, #16]
           	      if(value == USAGE_Y) {
 8009f7e:	6a3b      	ldr	r3, [r7, #32]
 8009f80:	2b31      	cmp	r3, #49	; 0x31
 8009f82:	d115      	bne.n	8009fb0 <parse_report_descriptor+0x5dc>
           		axis[1] = usage_count;
 8009f84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009f86:	b25b      	sxtb	r3, r3
 8009f88:	747b      	strb	r3, [r7, #17]
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8009f8a:	e011      	b.n	8009fb0 <parse_report_descriptor+0x5dc>
           	  } else if((value == USAGE_HAT) && app_collection) {
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	2b39      	cmp	r3, #57	; 0x39
 8009f90:	d10f      	bne.n	8009fb2 <parse_report_descriptor+0x5de>
 8009f92:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00b      	beq.n	8009fb2 <parse_report_descriptor+0x5de>
           	    if(conf->type == REPORT_TYPE_JOYSTICK) {
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	2b03      	cmp	r3, #3
 8009fa6:	d104      	bne.n	8009fb2 <parse_report_descriptor+0x5de>
           	      hat = usage_count;
 8009fa8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009faa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009fae:	e000      	b.n	8009fb2 <parse_report_descriptor+0x5de>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8009fb0:	bf00      	nop
           	  usage_count++;
 8009fb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8009fb8:	e00e      	b.n	8009fd8 <parse_report_descriptor+0x604>
           	  usage_count -= (value-1);
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8009fc8:	e006      	b.n	8009fd8 <parse_report_descriptor+0x604>
           	  usage_count += value;
 8009fca:	6a3b      	ldr	r3, [r7, #32]
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009fd0:	4413      	add	r3, r2
 8009fd2:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8009fd4:	e000      	b.n	8009fd8 <parse_report_descriptor+0x604>
           	  break;
 8009fd6:	bf00      	nop
           	}
           	break;
 8009fd8:	e000      	b.n	8009fdc <parse_report_descriptor+0x608>

                 default:
           	// reserved

           	break;
 8009fda:	bf00      	nop
  while(rep_size) {
 8009fdc:	897b      	ldrh	r3, [r7, #10]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f47f ad29 	bne.w	8009a36 <parse_report_descriptor+0x62>
                 }
               }
             }

             // if we get here then no usable setup was found
             return 0;
 8009fe4:	2300      	movs	r3, #0
           }
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3738      	adds	r7, #56	; 0x38
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop

08009ff0 <USBH_HUB_GetGamepadInfo>:
  return USBH_OK;
}


HID_gamepad_Info_TypeDef *USBH_HUB_GetGamepadInfo(HUB_Port_Interface_HandleTypeDef *Itf)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
	//refresh value of joymap and return value
	if(USBH_HUB_GamepadDecode(Itf)== USBH_OK)
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f80d 	bl	800a018 <USBH_HUB_GamepadDecode>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d101      	bne.n	800a008 <USBH_HUB_GetGamepadInfo+0x18>
	{
		return &hub_gamepad_info;
 800a004:	4b03      	ldr	r3, [pc, #12]	; (800a014 <USBH_HUB_GetGamepadInfo+0x24>)
 800a006:	e000      	b.n	800a00a <USBH_HUB_GetGamepadInfo+0x1a>
	}
	else
	{
		return NULL;
 800a008:	2300      	movs	r3, #0
	}
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3708      	adds	r7, #8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	200003f4 	.word	0x200003f4

0800a018 <USBH_HUB_GamepadDecode>:



static USBH_StatusTypeDef USBH_HUB_GamepadDecode(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a01a:	b097      	sub	sp, #92	; 0x5c
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]

	  if(Itf->length == 0U)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	88db      	ldrh	r3, [r3, #6]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d101      	bne.n	800a02c <USBH_HUB_GamepadDecode+0x14>
	  {
	    return USBH_FAIL;
 800a028:	2302      	movs	r3, #2
 800a02a:	e259      	b.n	800a4e0 <USBH_HUB_GamepadDecode+0x4c8>
	  }

	  if(USBH_HID_FifoRead(&Itf->fifo, hub_gamepad_report_data, Itf->length) ==  Itf->length)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800a032:	4bcb      	ldr	r3, [pc, #812]	; (800a360 <USBH_HUB_GamepadDecode+0x348>)
 800a034:	6819      	ldr	r1, [r3, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	88db      	ldrh	r3, [r3, #6]
 800a03a:	461a      	mov	r2, r3
 800a03c:	f7fe fd68 	bl	8008b10 <USBH_HID_FifoRead>
 800a040:	4603      	mov	r3, r0
 800a042:	461a      	mov	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	88db      	ldrh	r3, [r3, #6]
 800a048:	429a      	cmp	r2, r3
 800a04a:	f040 8248 	bne.w	800a4de <USBH_HUB_GamepadDecode+0x4c6>
	    {


		uint8_t jmap = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		uint8_t btn = 0;
 800a054:	2300      	movs	r3, #0
 800a056:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		uint8_t btn_extra = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		int16_t a[2];
		uint8_t i;

		hid_report_t conf = Itf->HIDDesc->RptDesc;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a064:	f103 040a 	add.w	r4, r3, #10
 800a068:	f107 0608 	add.w	r6, r7, #8
 800a06c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800a070:	4635      	mov	r5, r6
 800a072:	4623      	mov	r3, r4
 800a074:	6818      	ldr	r0, [r3, #0]
 800a076:	6859      	ldr	r1, [r3, #4]
 800a078:	689a      	ldr	r2, [r3, #8]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a07e:	3410      	adds	r4, #16
 800a080:	3610      	adds	r6, #16
 800a082:	4564      	cmp	r4, ip
 800a084:	d1f4      	bne.n	800a070 <USBH_HUB_GamepadDecode+0x58>
 800a086:	4633      	mov	r3, r6
 800a088:	4622      	mov	r2, r4
 800a08a:	6810      	ldr	r0, [r2, #0]
 800a08c:	6018      	str	r0, [r3, #0]
 800a08e:	8892      	ldrh	r2, [r2, #4]
 800a090:	809a      	strh	r2, [r3, #4]

		// skip report id if present
		uint8_t *p = hub_gamepad_report_data+(conf.report_id?1:0);
 800a092:	4bb3      	ldr	r3, [pc, #716]	; (800a360 <USBH_HUB_GamepadDecode+0x348>)
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	7a7b      	ldrb	r3, [r7, #9]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <USBH_HUB_GamepadDecode+0x88>
 800a09c:	2301      	movs	r3, #1
 800a09e:	e000      	b.n	800a0a2 <USBH_HUB_GamepadDecode+0x8a>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	4413      	add	r3, r2
 800a0a4:	653b      	str	r3, [r7, #80]	; 0x50


		//process axis
		// two axes ...
				for(i=0;i<2;i++) {
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a0ac:	e038      	b.n	800a120 <USBH_HUB_GamepadDecode+0x108>
					// if logical minimum is > logical maximum then logical minimum
					// is signed. This means that the value itself is also signed
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 800a0ae:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	00db      	lsls	r3, r3, #3
 800a0b6:	3358      	adds	r3, #88	; 0x58
 800a0b8:	443b      	add	r3, r7
 800a0ba:	f833 2c4c 	ldrh.w	r2, [r3, #-76]
					conf.joystick_mouse.axis[i].logical.max;
 800a0be:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	00db      	lsls	r3, r3, #3
 800a0c6:	3358      	adds	r3, #88	; 0x58
 800a0c8:	443b      	add	r3, r7
 800a0ca:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	bf8c      	ite	hi
 800a0d2:	2301      	movhi	r3, #1
 800a0d4:	2300      	movls	r3, #0
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	647b      	str	r3, [r7, #68]	; 0x44
					a[i] = collect_bits(p, conf.joystick_mouse.axis[i].offset,
 800a0da:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a0de:	3301      	adds	r3, #1
 800a0e0:	00db      	lsls	r3, r3, #3
 800a0e2:	3358      	adds	r3, #88	; 0x58
 800a0e4:	443b      	add	r3, r7
 800a0e6:	f833 1c50 	ldrh.w	r1, [r3, #-80]
 800a0ea:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	3358      	adds	r3, #88	; 0x58
 800a0f4:	443b      	add	r3, r7
 800a0f6:	f813 2c4e 	ldrb.w	r2, [r3, #-78]
 800a0fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0fc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a0fe:	f7ff f97d 	bl	80093fc <collect_bits>
 800a102:	4603      	mov	r3, r0
 800a104:	461a      	mov	r2, r3
 800a106:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a10a:	b212      	sxth	r2, r2
 800a10c:	005b      	lsls	r3, r3, #1
 800a10e:	3358      	adds	r3, #88	; 0x58
 800a110:	443b      	add	r3, r7
 800a112:	f823 2c18 	strh.w	r2, [r3, #-24]
				for(i=0;i<2;i++) {
 800a116:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a11a:	3301      	adds	r3, #1
 800a11c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a120:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a124:	2b01      	cmp	r3, #1
 800a126:	d9c2      	bls.n	800a0ae <USBH_HUB_GamepadDecode+0x96>
								conf.joystick_mouse.axis[i].size, is_signed);
				}

		//process 4 first buttons
		for(i=0;i<4;i++)
 800a128:	2300      	movs	r3, #0
 800a12a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a12e:	e028      	b.n	800a182 <USBH_HUB_GamepadDecode+0x16a>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a130:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a134:	330c      	adds	r3, #12
 800a136:	005b      	lsls	r3, r3, #1
 800a138:	3358      	adds	r3, #88	; 0x58
 800a13a:	443b      	add	r3, r7
 800a13c:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800a140:	461a      	mov	r2, r3
 800a142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a144:	4413      	add	r3, r2
 800a146:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800a148:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a14c:	330c      	adds	r3, #12
 800a14e:	005b      	lsls	r3, r3, #1
 800a150:	3358      	adds	r3, #88	; 0x58
 800a152:	443b      	add	r3, r7
 800a154:	f813 3c4f 	ldrb.w	r3, [r3, #-79]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a158:	4013      	ands	r3, r2
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00b      	beq.n	800a178 <USBH_HUB_GamepadDecode+0x160>
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800a160:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a164:	2201      	movs	r2, #1
 800a166:	fa02 f303 	lsl.w	r3, r2, r3
 800a16a:	b25a      	sxtb	r2, r3
 800a16c:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800a170:	4313      	orrs	r3, r2
 800a172:	b25b      	sxtb	r3, r3
 800a174:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		for(i=0;i<4;i++)
 800a178:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a17c:	3301      	adds	r3, #1
 800a17e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a182:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a186:	2b03      	cmp	r3, #3
 800a188:	d9d2      	bls.n	800a130 <USBH_HUB_GamepadDecode+0x118>

		// ... and the eight extra buttons
		for(i=4;i<12;i++)
 800a18a:	2304      	movs	r3, #4
 800a18c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a190:	e029      	b.n	800a1e6 <USBH_HUB_GamepadDecode+0x1ce>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a192:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a196:	330c      	adds	r3, #12
 800a198:	005b      	lsls	r3, r3, #1
 800a19a:	3358      	adds	r3, #88	; 0x58
 800a19c:	443b      	add	r3, r7
 800a19e:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a6:	4413      	add	r3, r2
 800a1a8:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800a1aa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a1ae:	330c      	adds	r3, #12
 800a1b0:	005b      	lsls	r3, r3, #1
 800a1b2:	3358      	adds	r3, #88	; 0x58
 800a1b4:	443b      	add	r3, r7
 800a1b6:	f813 3c4f 	ldrb.w	r3, [r3, #-79]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00c      	beq.n	800a1dc <USBH_HUB_GamepadDecode+0x1c4>
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800a1c2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a1c6:	3b04      	subs	r3, #4
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ce:	b25a      	sxtb	r2, r3
 800a1d0:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	b25b      	sxtb	r3, r3
 800a1d8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		for(i=4;i<12;i++)
 800a1dc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a1e6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a1ea:	2b0b      	cmp	r3, #11
 800a1ec:	d9d1      	bls.n	800a192 <USBH_HUB_GamepadDecode+0x17a>



	for(i=0;i<2;i++) {
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a1f4:	e132      	b.n	800a45c <USBH_HUB_GamepadDecode+0x444>

		int hrange = (conf.joystick_mouse.axis[i].logical.max - abs(conf.joystick_mouse.axis[i].logical.min)) / 2;
 800a1f6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	00db      	lsls	r3, r3, #3
 800a1fe:	3358      	adds	r3, #88	; 0x58
 800a200:	443b      	add	r3, r7
 800a202:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 800a206:	461a      	mov	r2, r3
 800a208:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a20c:	3301      	adds	r3, #1
 800a20e:	00db      	lsls	r3, r3, #3
 800a210:	3358      	adds	r3, #88	; 0x58
 800a212:	443b      	add	r3, r7
 800a214:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	da00      	bge.n	800a220 <USBH_HUB_GamepadDecode+0x208>
 800a21e:	3301      	adds	r3, #1
 800a220:	105b      	asrs	r3, r3, #1
 800a222:	64fb      	str	r3, [r7, #76]	; 0x4c
		int dead = hrange/63;
 800a224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a226:	4a4f      	ldr	r2, [pc, #316]	; (800a364 <USBH_HUB_GamepadDecode+0x34c>)
 800a228:	fb82 1203 	smull	r1, r2, r2, r3
 800a22c:	441a      	add	r2, r3
 800a22e:	1152      	asrs	r2, r2, #5
 800a230:	17db      	asrs	r3, r3, #31
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	64bb      	str	r3, [r7, #72]	; 0x48

		if (a[i] < conf.joystick_mouse.axis[i].logical.min) a[i] = conf.joystick_mouse.axis[i].logical.min;
 800a236:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a23a:	005b      	lsls	r3, r3, #1
 800a23c:	3358      	adds	r3, #88	; 0x58
 800a23e:	443b      	add	r3, r7
 800a240:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a244:	461a      	mov	r2, r3
 800a246:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a24a:	3301      	adds	r3, #1
 800a24c:	00db      	lsls	r3, r3, #3
 800a24e:	3358      	adds	r3, #88	; 0x58
 800a250:	443b      	add	r3, r7
 800a252:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800a256:	429a      	cmp	r2, r3
 800a258:	da10      	bge.n	800a27c <USBH_HUB_GamepadDecode+0x264>
 800a25a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a25e:	3301      	adds	r3, #1
 800a260:	00db      	lsls	r3, r3, #3
 800a262:	3358      	adds	r3, #88	; 0x58
 800a264:	443b      	add	r3, r7
 800a266:	f833 2c4c 	ldrh.w	r2, [r3, #-76]
 800a26a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a26e:	b212      	sxth	r2, r2
 800a270:	005b      	lsls	r3, r3, #1
 800a272:	3358      	adds	r3, #88	; 0x58
 800a274:	443b      	add	r3, r7
 800a276:	f823 2c18 	strh.w	r2, [r3, #-24]
 800a27a:	e021      	b.n	800a2c0 <USBH_HUB_GamepadDecode+0x2a8>
		else if (a[i] > conf.joystick_mouse.axis[i].logical.max) a[i] = conf.joystick_mouse.axis[i].logical.max;
 800a27c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a280:	005b      	lsls	r3, r3, #1
 800a282:	3358      	adds	r3, #88	; 0x58
 800a284:	443b      	add	r3, r7
 800a286:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a28a:	461a      	mov	r2, r3
 800a28c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a290:	3301      	adds	r3, #1
 800a292:	00db      	lsls	r3, r3, #3
 800a294:	3358      	adds	r3, #88	; 0x58
 800a296:	443b      	add	r3, r7
 800a298:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	dd0f      	ble.n	800a2c0 <USBH_HUB_GamepadDecode+0x2a8>
 800a2a0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	00db      	lsls	r3, r3, #3
 800a2a8:	3358      	adds	r3, #88	; 0x58
 800a2aa:	443b      	add	r3, r7
 800a2ac:	f833 2c4a 	ldrh.w	r2, [r3, #-74]
 800a2b0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a2b4:	b212      	sxth	r2, r2
 800a2b6:	005b      	lsls	r3, r3, #1
 800a2b8:	3358      	adds	r3, #88	; 0x58
 800a2ba:	443b      	add	r3, r7
 800a2bc:	f823 2c18 	strh.w	r2, [r3, #-24]

		a[i] = a[i] - (abs(conf.joystick_mouse.axis[i].logical.min) + conf.joystick_mouse.axis[i].logical.max) / 2;
 800a2c0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a2c4:	005b      	lsls	r3, r3, #1
 800a2c6:	3358      	adds	r3, #88	; 0x58
 800a2c8:	443b      	add	r3, r7
 800a2ca:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	00db      	lsls	r3, r3, #3
 800a2d8:	3358      	adds	r3, #88	; 0x58
 800a2da:	443b      	add	r3, r7
 800a2dc:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	00db      	lsls	r3, r3, #3
 800a2ea:	3358      	adds	r3, #88	; 0x58
 800a2ec:	443b      	add	r3, r7
 800a2ee:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 800a2f2:	440b      	add	r3, r1
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	da00      	bge.n	800a2fa <USBH_HUB_GamepadDecode+0x2e2>
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	105b      	asrs	r3, r3, #1
 800a2fc:	425b      	negs	r3, r3
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	4413      	add	r3, r2
 800a302:	b29a      	uxth	r2, r3
 800a304:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a308:	b212      	sxth	r2, r2
 800a30a:	005b      	lsls	r3, r3, #1
 800a30c:	3358      	adds	r3, #88	; 0x58
 800a30e:	443b      	add	r3, r7
 800a310:	f823 2c18 	strh.w	r2, [r3, #-24]

		hrange -= dead;
 800a314:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (a[i] < -dead) a[i] += dead;
 800a31c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	3358      	adds	r3, #88	; 0x58
 800a324:	443b      	add	r3, r7
 800a326:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a32a:	461a      	mov	r2, r3
 800a32c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a32e:	425b      	negs	r3, r3
 800a330:	429a      	cmp	r2, r3
 800a332:	da19      	bge.n	800a368 <USBH_HUB_GamepadDecode+0x350>
 800a334:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a338:	005b      	lsls	r3, r3, #1
 800a33a:	3358      	adds	r3, #88	; 0x58
 800a33c:	443b      	add	r3, r7
 800a33e:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a342:	b29a      	uxth	r2, r3
 800a344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a346:	b29b      	uxth	r3, r3
 800a348:	4413      	add	r3, r2
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a350:	b212      	sxth	r2, r2
 800a352:	005b      	lsls	r3, r3, #1
 800a354:	3358      	adds	r3, #88	; 0x58
 800a356:	443b      	add	r3, r7
 800a358:	f823 2c18 	strh.w	r2, [r3, #-24]
 800a35c:	e02c      	b.n	800a3b8 <USBH_HUB_GamepadDecode+0x3a0>
 800a35e:	bf00      	nop
 800a360:	200003f0 	.word	0x200003f0
 800a364:	82082083 	.word	0x82082083
		else if (a[i] > dead) a[i] -= dead;
 800a368:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a36c:	005b      	lsls	r3, r3, #1
 800a36e:	3358      	adds	r3, #88	; 0x58
 800a370:	443b      	add	r3, r7
 800a372:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a376:	461a      	mov	r2, r3
 800a378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a37a:	4293      	cmp	r3, r2
 800a37c:	da14      	bge.n	800a3a8 <USBH_HUB_GamepadDecode+0x390>
 800a37e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	3358      	adds	r3, #88	; 0x58
 800a386:	443b      	add	r3, r7
 800a388:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a390:	b29b      	uxth	r3, r3
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	b29a      	uxth	r2, r3
 800a396:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a39a:	b212      	sxth	r2, r2
 800a39c:	005b      	lsls	r3, r3, #1
 800a39e:	3358      	adds	r3, #88	; 0x58
 800a3a0:	443b      	add	r3, r7
 800a3a2:	f823 2c18 	strh.w	r2, [r3, #-24]
 800a3a6:	e007      	b.n	800a3b8 <USBH_HUB_GamepadDecode+0x3a0>
		else a[i] = 0;
 800a3a8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a3ac:	005b      	lsls	r3, r3, #1
 800a3ae:	3358      	adds	r3, #88	; 0x58
 800a3b0:	443b      	add	r3, r7
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f823 2c18 	strh.w	r2, [r3, #-24]

		a[i] = (a[i] * 127) / hrange;
 800a3b8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a3bc:	005b      	lsls	r3, r3, #1
 800a3be:	3358      	adds	r3, #88	; 0x58
 800a3c0:	443b      	add	r3, r7
 800a3c2:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	01db      	lsls	r3, r3, #7
 800a3cc:	1a9a      	subs	r2, r3, r2
 800a3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3d0:	fb92 f2f3 	sdiv	r2, r2, r3
 800a3d4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a3d8:	b212      	sxth	r2, r2
 800a3da:	005b      	lsls	r3, r3, #1
 800a3dc:	3358      	adds	r3, #88	; 0x58
 800a3de:	443b      	add	r3, r7
 800a3e0:	f823 2c18 	strh.w	r2, [r3, #-24]

		if (a[i] < -127) a[i] = -127;
 800a3e4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	3358      	adds	r3, #88	; 0x58
 800a3ec:	443b      	add	r3, r7
 800a3ee:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a3f2:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 800a3f6:	da09      	bge.n	800a40c <USBH_HUB_GamepadDecode+0x3f4>
 800a3f8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a3fc:	005b      	lsls	r3, r3, #1
 800a3fe:	3358      	adds	r3, #88	; 0x58
 800a400:	443b      	add	r3, r7
 800a402:	f64f 7281 	movw	r2, #65409	; 0xff81
 800a406:	f823 2c18 	strh.w	r2, [r3, #-24]
 800a40a:	e010      	b.n	800a42e <USBH_HUB_GamepadDecode+0x416>
		else if (a[i] > 127) a[i] = 127;
 800a40c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a410:	005b      	lsls	r3, r3, #1
 800a412:	3358      	adds	r3, #88	; 0x58
 800a414:	443b      	add	r3, r7
 800a416:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a41a:	2b7f      	cmp	r3, #127	; 0x7f
 800a41c:	dd07      	ble.n	800a42e <USBH_HUB_GamepadDecode+0x416>
 800a41e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a422:	005b      	lsls	r3, r3, #1
 800a424:	3358      	adds	r3, #88	; 0x58
 800a426:	443b      	add	r3, r7
 800a428:	227f      	movs	r2, #127	; 0x7f
 800a42a:	f823 2c18 	strh.w	r2, [r3, #-24]

		a[i]=a[i]+127; // mist wants a value in the range [0..255]
 800a42e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a432:	005b      	lsls	r3, r3, #1
 800a434:	3358      	adds	r3, #88	; 0x58
 800a436:	443b      	add	r3, r7
 800a438:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	337f      	adds	r3, #127	; 0x7f
 800a440:	b29a      	uxth	r2, r3
 800a442:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a446:	b212      	sxth	r2, r2
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	3358      	adds	r3, #88	; 0x58
 800a44c:	443b      	add	r3, r7
 800a44e:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(i=0;i<2;i++) {
 800a452:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a456:	3301      	adds	r3, #1
 800a458:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800a45c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a460:	2b01      	cmp	r3, #1
 800a462:	f67f aec8 	bls.w	800a1f6 <USBH_HUB_GamepadDecode+0x1de>
	}

				if(a[0] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_LEFT;
 800a466:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800a46a:	2b3f      	cmp	r3, #63	; 0x3f
 800a46c:	dc05      	bgt.n	800a47a <USBH_HUB_GamepadDecode+0x462>
 800a46e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a472:	f043 0302 	orr.w	r3, r3, #2
 800a476:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(a[0] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_RIGHT;
 800a47a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800a47e:	2bc0      	cmp	r3, #192	; 0xc0
 800a480:	dd05      	ble.n	800a48e <USBH_HUB_GamepadDecode+0x476>
 800a482:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a486:	f043 0301 	orr.w	r3, r3, #1
 800a48a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(a[1] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_UP;
 800a48e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800a492:	2b3f      	cmp	r3, #63	; 0x3f
 800a494:	dc05      	bgt.n	800a4a2 <USBH_HUB_GamepadDecode+0x48a>
 800a496:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a49a:	f043 0308 	orr.w	r3, r3, #8
 800a49e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if(a[1] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_DOWN;
 800a4a2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800a4a6:	2bc0      	cmp	r3, #192	; 0xc0
 800a4a8:	dd05      	ble.n	800a4b6 <USBH_HUB_GamepadDecode+0x49e>
 800a4aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4ae:	f043 0304 	orr.w	r3, r3, #4
 800a4b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				jmap |= btn << JOY_BTN_SHIFT;      // add buttons
 800a4b6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800a4ba:	011b      	lsls	r3, r3, #4
 800a4bc:	b25a      	sxtb	r2, r3
 800a4be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	b25b      	sxtb	r3, r3
 800a4c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

				hub_gamepad_info.gamepad_data = jmap;
 800a4ca:	4a07      	ldr	r2, [pc, #28]	; (800a4e8 <USBH_HUB_GamepadDecode+0x4d0>)
 800a4cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4d0:	7013      	strb	r3, [r2, #0]
				hub_gamepad_info.gamepad_extraBtn = btn_extra;
 800a4d2:	4a05      	ldr	r2, [pc, #20]	; (800a4e8 <USBH_HUB_GamepadDecode+0x4d0>)
 800a4d4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800a4d8:	7053      	strb	r3, [r2, #1]

		  return USBH_OK;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	e000      	b.n	800a4e0 <USBH_HUB_GamepadDecode+0x4c8>
	    }



	  return USBH_FAIL;
 800a4de:	2302      	movs	r3, #2

}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	375c      	adds	r7, #92	; 0x5c
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4e8:	200003f4 	.word	0x200003f4

0800a4ec <USBH_HUB_GetKeybdInfo>:
  return USBH_OK;
}


HID_KEYBD_Info_TypeDef *USBH_HUB_GetKeybdInfo(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  if (USBH_HUB_KeybdDecode(Itf) == USBH_OK)
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f80d 	bl	800a514 <USBH_HUB_KeybdDecode>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d101      	bne.n	800a504 <USBH_HUB_GetKeybdInfo+0x18>
  {
    return &hub_keybd_info;
 800a500:	4b03      	ldr	r3, [pc, #12]	; (800a510 <USBH_HUB_GetKeybdInfo+0x24>)
 800a502:	e000      	b.n	800a506 <USBH_HUB_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800a504:	2300      	movs	r3, #0
  }
}
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	200003f8 	.word	0x200003f8

0800a514 <USBH_HUB_KeybdDecode>:



USBH_StatusTypeDef USBH_HUB_KeybdDecode(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  uint8_t x;


  if (Itf->length == 0U)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	88db      	ldrh	r3, [r3, #6]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d101      	bne.n	800a528 <USBH_HUB_KeybdDecode+0x14>
  {
    return USBH_FAIL;
 800a524:	2302      	movs	r3, #2
 800a526:	e072      	b.n	800a60e <USBH_HUB_KeybdDecode+0xfa>
  }
  /*Fill report */

  if (USBH_HID_FifoRead(&Itf->fifo, &hub_keybd_report_data, Itf->length) ==  Itf->length)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	88db      	ldrh	r3, [r3, #6]
 800a532:	461a      	mov	r2, r3
 800a534:	4938      	ldr	r1, [pc, #224]	; (800a618 <USBH_HUB_KeybdDecode+0x104>)
 800a536:	f7fe faeb 	bl	8008b10 <USBH_HID_FifoRead>
 800a53a:	4603      	mov	r3, r0
 800a53c:	461a      	mov	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	88db      	ldrh	r3, [r3, #6]
 800a542:	429a      	cmp	r2, r3
 800a544:	d162      	bne.n	800a60c <USBH_HUB_KeybdDecode+0xf8>
  {
	  if (hub_keybd_report_data[0] == 0x1010000 && hub_keybd_report_data[1]==0x1010101)
 800a546:	4b34      	ldr	r3, [pc, #208]	; (800a618 <USBH_HUB_KeybdDecode+0x104>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a34      	ldr	r2, [pc, #208]	; (800a61c <USBH_HUB_KeybdDecode+0x108>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d106      	bne.n	800a55e <USBH_HUB_KeybdDecode+0x4a>
 800a550:	4b31      	ldr	r3, [pc, #196]	; (800a618 <USBH_HUB_KeybdDecode+0x104>)
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 800a558:	d101      	bne.n	800a55e <USBH_HUB_KeybdDecode+0x4a>
  
	  {
		  return USBH_FAIL;
 800a55a:	2302      	movs	r3, #2
 800a55c:	e057      	b.n	800a60e <USBH_HUB_KeybdDecode+0xfa>
	  }
	//  if keybd_re  5055
    hub_keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800a55e:	2100      	movs	r1, #0
 800a560:	482f      	ldr	r0, [pc, #188]	; (800a620 <USBH_HUB_KeybdDecode+0x10c>)
 800a562:	f7ff f969 	bl	8009838 <HID_ReadItem>
 800a566:	4603      	mov	r3, r0
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	4b2e      	ldr	r3, [pc, #184]	; (800a624 <USBH_HUB_KeybdDecode+0x110>)
 800a56c:	705a      	strb	r2, [r3, #1]
    hub_keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800a56e:	2100      	movs	r1, #0
 800a570:	482d      	ldr	r0, [pc, #180]	; (800a628 <USBH_HUB_KeybdDecode+0x114>)
 800a572:	f7ff f961 	bl	8009838 <HID_ReadItem>
 800a576:	4603      	mov	r3, r0
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	4b2a      	ldr	r3, [pc, #168]	; (800a624 <USBH_HUB_KeybdDecode+0x110>)
 800a57c:	709a      	strb	r2, [r3, #2]
    hub_keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800a57e:	2100      	movs	r1, #0
 800a580:	482a      	ldr	r0, [pc, #168]	; (800a62c <USBH_HUB_KeybdDecode+0x118>)
 800a582:	f7ff f959 	bl	8009838 <HID_ReadItem>
 800a586:	4603      	mov	r3, r0
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	4b26      	ldr	r3, [pc, #152]	; (800a624 <USBH_HUB_KeybdDecode+0x110>)
 800a58c:	70da      	strb	r2, [r3, #3]
    hub_keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800a58e:	2100      	movs	r1, #0
 800a590:	4827      	ldr	r0, [pc, #156]	; (800a630 <USBH_HUB_KeybdDecode+0x11c>)
 800a592:	f7ff f951 	bl	8009838 <HID_ReadItem>
 800a596:	4603      	mov	r3, r0
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	4b22      	ldr	r3, [pc, #136]	; (800a624 <USBH_HUB_KeybdDecode+0x110>)
 800a59c:	711a      	strb	r2, [r3, #4]
    hub_keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800a59e:	2100      	movs	r1, #0
 800a5a0:	4824      	ldr	r0, [pc, #144]	; (800a634 <USBH_HUB_KeybdDecode+0x120>)
 800a5a2:	f7ff f949 	bl	8009838 <HID_ReadItem>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	4b1e      	ldr	r3, [pc, #120]	; (800a624 <USBH_HUB_KeybdDecode+0x110>)
 800a5ac:	715a      	strb	r2, [r3, #5]
    hub_keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	4821      	ldr	r0, [pc, #132]	; (800a638 <USBH_HUB_KeybdDecode+0x124>)
 800a5b2:	f7ff f941 	bl	8009838 <HID_ReadItem>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	4b1a      	ldr	r3, [pc, #104]	; (800a624 <USBH_HUB_KeybdDecode+0x110>)
 800a5bc:	719a      	strb	r2, [r3, #6]
    hub_keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800a5be:	2100      	movs	r1, #0
 800a5c0:	481e      	ldr	r0, [pc, #120]	; (800a63c <USBH_HUB_KeybdDecode+0x128>)
 800a5c2:	f7ff f939 	bl	8009838 <HID_ReadItem>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	4b16      	ldr	r3, [pc, #88]	; (800a624 <USBH_HUB_KeybdDecode+0x110>)
 800a5cc:	71da      	strb	r2, [r3, #7]
    hub_keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800a5ce:	2100      	movs	r1, #0
 800a5d0:	481b      	ldr	r0, [pc, #108]	; (800a640 <USBH_HUB_KeybdDecode+0x12c>)
 800a5d2:	f7ff f931 	bl	8009838 <HID_ReadItem>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	4b12      	ldr	r3, [pc, #72]	; (800a624 <USBH_HUB_KeybdDecode+0x110>)
 800a5dc:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(hub_keybd_info.keys); x++)
 800a5de:	2300      	movs	r3, #0
 800a5e0:	73fb      	strb	r3, [r7, #15]
 800a5e2:	e00e      	b.n	800a602 <USBH_HUB_KeybdDecode+0xee>
    {
      hub_keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	4816      	ldr	r0, [pc, #88]	; (800a644 <USBH_HUB_KeybdDecode+0x130>)
 800a5ea:	f7ff f925 	bl	8009838 <HID_ReadItem>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	7bfb      	ldrb	r3, [r7, #15]
 800a5f2:	b2d1      	uxtb	r1, r2
 800a5f4:	4a0b      	ldr	r2, [pc, #44]	; (800a624 <USBH_HUB_KeybdDecode+0x110>)
 800a5f6:	4413      	add	r3, r2
 800a5f8:	460a      	mov	r2, r1
 800a5fa:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(hub_keybd_info.keys); x++)
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	3301      	adds	r3, #1
 800a600:	73fb      	strb	r3, [r7, #15]
 800a602:	7bfb      	ldrb	r3, [r7, #15]
 800a604:	2b05      	cmp	r3, #5
 800a606:	d9ed      	bls.n	800a5e4 <USBH_HUB_KeybdDecode+0xd0>
    }

    return USBH_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	e000      	b.n	800a60e <USBH_HUB_KeybdDecode+0xfa>
  }
  return   USBH_FAIL;
 800a60c:	2302      	movs	r3, #2
 800a60e:	4618      	mov	r0, r3
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	20000408 	.word	0x20000408
 800a61c:	01010000 	.word	0x01010000
 800a620:	0800cbfc 	.word	0x0800cbfc
 800a624:	200003f8 	.word	0x200003f8
 800a628:	0800cc1c 	.word	0x0800cc1c
 800a62c:	0800cc3c 	.word	0x0800cc3c
 800a630:	0800cc5c 	.word	0x0800cc5c
 800a634:	0800cc7c 	.word	0x0800cc7c
 800a638:	0800cc9c 	.word	0x0800cc9c
 800a63c:	0800ccbc 	.word	0x0800ccbc
 800a640:	0800ccdc 	.word	0x0800ccdc
 800a644:	0800ccfc 	.word	0x0800ccfc

0800a648 <USBH_HUB_GetMouseInfo>:
  return USBH_OK;
}


HID_MOUSE_Info_TypeDef *USBH_HUB_GetMouseInfo(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  if (USBH_HUB_MouseDecode(Itf) == USBH_OK)
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 f80d 	bl	800a670 <USBH_HUB_MouseDecode>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <USBH_HUB_GetMouseInfo+0x18>
  {
    return &hub_mouse_info;
 800a65c:	4b03      	ldr	r3, [pc, #12]	; (800a66c <USBH_HUB_GetMouseInfo+0x24>)
 800a65e:	e000      	b.n	800a662 <USBH_HUB_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 800a660:	2300      	movs	r3, #0
  }
}
 800a662:	4618      	mov	r0, r3
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20000410 	.word	0x20000410

0800a670 <USBH_HUB_MouseDecode>:


USBH_StatusTypeDef USBH_HUB_MouseDecode(HUB_Port_Interface_HandleTypeDef *Itf)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]

  if (Itf->length == 0U)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	88db      	ldrh	r3, [r3, #6]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d101      	bne.n	800a684 <USBH_HUB_MouseDecode+0x14>
  {
    return USBH_FAIL;
 800a680:	2302      	movs	r3, #2
 800a682:	e0fe      	b.n	800a882 <USBH_HUB_MouseDecode+0x212>
  }

  //Clear mouse_report_data

  memset(&hub_mouse_report_data,0,sizeof(hub_mouse_report_data));
 800a684:	2208      	movs	r2, #8
 800a686:	2100      	movs	r1, #0
 800a688:	4880      	ldr	r0, [pc, #512]	; (800a88c <USBH_HUB_MouseDecode+0x21c>)
 800a68a:	f002 f879 	bl	800c780 <memset>


  /*Fill report */
  if (USBH_HID_FifoRead(&Itf->fifo, &hub_mouse_report_data, Itf->length) !=0)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	88db      	ldrh	r3, [r3, #6]
 800a698:	461a      	mov	r2, r3
 800a69a:	497c      	ldr	r1, [pc, #496]	; (800a88c <USBH_HUB_MouseDecode+0x21c>)
 800a69c:	f7fe fa38 	bl	8008b10 <USBH_HID_FifoRead>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 80ec 	beq.w	800a880 <USBH_HUB_MouseDecode+0x210>
  {

	  uint8_t btn = 0;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	75fb      	strb	r3, [r7, #23]
	  uint8_t btn_extra = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	75bb      	strb	r3, [r7, #22]
	  uint8_t i;



	  // skip report id if present
	  uint8_t *p = hub_mouse_report_data + (Itf->HIDDesc->RptDesc.report_id?1:0);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6b4:	7adb      	ldrb	r3, [r3, #11]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <USBH_HUB_MouseDecode+0x4e>
 800a6ba:	4b75      	ldr	r3, [pc, #468]	; (800a890 <USBH_HUB_MouseDecode+0x220>)
 800a6bc:	e000      	b.n	800a6c0 <USBH_HUB_MouseDecode+0x50>
 800a6be:	4b73      	ldr	r3, [pc, #460]	; (800a88c <USBH_HUB_MouseDecode+0x21c>)
 800a6c0:	613b      	str	r3, [r7, #16]


	  //process axis
	  // two axes ...
	  		for(i=0;i<2;i++) {
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	757b      	strb	r3, [r7, #21]
 800a6c6:	e031      	b.n	800a72c <USBH_HUB_MouseDecode+0xbc>
	  			// if logical minimum is > logical maximum then logical minimum
	  			// is signed. This means that the value itself is also signed
	  			int is_signed = Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].logical.min >
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a6cc:	7d7b      	ldrb	r3, [r7, #21]
 800a6ce:	3302      	adds	r3, #2
 800a6d0:	00db      	lsls	r3, r3, #3
 800a6d2:	4413      	add	r3, r2
 800a6d4:	88da      	ldrh	r2, [r3, #6]
	  				Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].logical.max;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800a6da:	7d7b      	ldrb	r3, [r7, #21]
 800a6dc:	3302      	adds	r3, #2
 800a6de:	00db      	lsls	r3, r3, #3
 800a6e0:	440b      	add	r3, r1
 800a6e2:	891b      	ldrh	r3, [r3, #8]
	  			int is_signed = Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].logical.min >
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	bf8c      	ite	hi
 800a6e8:	2301      	movhi	r3, #1
 800a6ea:	2300      	movls	r3, #0
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	60fb      	str	r3, [r7, #12]
	  			a[i] = collect_bits(p, Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].offset,
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a6f4:	7d7b      	ldrb	r3, [r7, #21]
 800a6f6:	3302      	adds	r3, #2
 800a6f8:	00db      	lsls	r3, r3, #3
 800a6fa:	4413      	add	r3, r2
 800a6fc:	8859      	ldrh	r1, [r3, #2]
	  					Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].size, is_signed);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	  			a[i] = collect_bits(p, Itf->HIDDesc->RptDesc.joystick_mouse.axis[i].offset,
 800a702:	7d7b      	ldrb	r3, [r7, #21]
 800a704:	3302      	adds	r3, #2
 800a706:	00db      	lsls	r3, r3, #3
 800a708:	4413      	add	r3, r2
 800a70a:	791a      	ldrb	r2, [r3, #4]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6938      	ldr	r0, [r7, #16]
 800a710:	f7fe fe74 	bl	80093fc <collect_bits>
 800a714:	4603      	mov	r3, r0
 800a716:	461a      	mov	r2, r3
 800a718:	7d7b      	ldrb	r3, [r7, #21]
 800a71a:	b212      	sxth	r2, r2
 800a71c:	005b      	lsls	r3, r3, #1
 800a71e:	3318      	adds	r3, #24
 800a720:	443b      	add	r3, r7
 800a722:	f823 2c10 	strh.w	r2, [r3, #-16]
	  		for(i=0;i<2;i++) {
 800a726:	7d7b      	ldrb	r3, [r7, #21]
 800a728:	3301      	adds	r3, #1
 800a72a:	757b      	strb	r3, [r7, #21]
 800a72c:	7d7b      	ldrb	r3, [r7, #21]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d9ca      	bls.n	800a6c8 <USBH_HUB_MouseDecode+0x58>
	  		}

	  //process 4 first buttons
	  for(i=0;i<4;i++)
 800a732:	2300      	movs	r3, #0
 800a734:	757b      	strb	r3, [r7, #21]
 800a736:	e022      	b.n	800a77e <USBH_HUB_MouseDecode+0x10e>
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a73c:	7d7b      	ldrb	r3, [r7, #21]
 800a73e:	3310      	adds	r3, #16
 800a740:	005b      	lsls	r3, r3, #1
 800a742:	4413      	add	r3, r2
 800a744:	789b      	ldrb	r3, [r3, #2]
 800a746:	461a      	mov	r2, r3
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	4413      	add	r3, r2
 800a74c:	781a      	ldrb	r2, [r3, #0]
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800a752:	7d7b      	ldrb	r3, [r7, #21]
 800a754:	3310      	adds	r3, #16
 800a756:	005b      	lsls	r3, r3, #1
 800a758:	440b      	add	r3, r1
 800a75a:	78db      	ldrb	r3, [r3, #3]
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800a75c:	4013      	ands	r3, r2
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	2b00      	cmp	r3, #0
 800a762:	d009      	beq.n	800a778 <USBH_HUB_MouseDecode+0x108>
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 800a764:	7d7b      	ldrb	r3, [r7, #21]
 800a766:	2201      	movs	r2, #1
 800a768:	fa02 f303 	lsl.w	r3, r2, r3
 800a76c:	b25a      	sxtb	r2, r3
 800a76e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a772:	4313      	orrs	r3, r2
 800a774:	b25b      	sxtb	r3, r3
 800a776:	75fb      	strb	r3, [r7, #23]
	  for(i=0;i<4;i++)
 800a778:	7d7b      	ldrb	r3, [r7, #21]
 800a77a:	3301      	adds	r3, #1
 800a77c:	757b      	strb	r3, [r7, #21]
 800a77e:	7d7b      	ldrb	r3, [r7, #21]
 800a780:	2b03      	cmp	r3, #3
 800a782:	d9d9      	bls.n	800a738 <USBH_HUB_MouseDecode+0xc8>

	  // ... and the eight extra buttons
	  for(i=4;i<12;i++)
 800a784:	2304      	movs	r3, #4
 800a786:	757b      	strb	r3, [r7, #21]
 800a788:	e023      	b.n	800a7d2 <USBH_HUB_MouseDecode+0x162>
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a78e:	7d7b      	ldrb	r3, [r7, #21]
 800a790:	3310      	adds	r3, #16
 800a792:	005b      	lsls	r3, r3, #1
 800a794:	4413      	add	r3, r2
 800a796:	789b      	ldrb	r3, [r3, #2]
 800a798:	461a      	mov	r2, r3
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	4413      	add	r3, r2
 800a79e:	781a      	ldrb	r2, [r3, #0]
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800a7a4:	7d7b      	ldrb	r3, [r7, #21]
 800a7a6:	3310      	adds	r3, #16
 800a7a8:	005b      	lsls	r3, r3, #1
 800a7aa:	440b      	add	r3, r1
 800a7ac:	78db      	ldrb	r3, [r3, #3]
	  	if(p[Itf->HIDDesc->RptDesc.joystick_mouse.button[i].byte_offset] &
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00a      	beq.n	800a7cc <USBH_HUB_MouseDecode+0x15c>
	  			Itf->HIDDesc->RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800a7b6:	7d7b      	ldrb	r3, [r7, #21]
 800a7b8:	3b04      	subs	r3, #4
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c0:	b25a      	sxtb	r2, r3
 800a7c2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	b25b      	sxtb	r3, r3
 800a7ca:	75bb      	strb	r3, [r7, #22]
	  for(i=4;i<12;i++)
 800a7cc:	7d7b      	ldrb	r3, [r7, #21]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	757b      	strb	r3, [r7, #21]
 800a7d2:	7d7b      	ldrb	r3, [r7, #21]
 800a7d4:	2b0b      	cmp	r3, #11
 800a7d6:	d9d8      	bls.n	800a78a <USBH_HUB_MouseDecode+0x11a>

	  //process mouse
	  if(Itf->HIDDesc->RptDesc.type == REPORT_TYPE_MOUSE) {
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7dc:	7a9b      	ldrb	r3, [r3, #10]
 800a7de:	f003 0303 	and.w	r3, r3, #3
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d149      	bne.n	800a87c <USBH_HUB_MouseDecode+0x20c>
	  		// iprintf("mouse %d %d %x\n", (int16_t)a[0], (int16_t)a[1], btn);
	  		// limit mouse movement to +/- 128
	  		for(i=0;i<2;i++) {
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	757b      	strb	r3, [r7, #21]
 800a7ec:	e022      	b.n	800a834 <USBH_HUB_MouseDecode+0x1c4>
	  		if((int16_t)a[i] >  127) a[i] =  127;
 800a7ee:	7d7b      	ldrb	r3, [r7, #21]
 800a7f0:	005b      	lsls	r3, r3, #1
 800a7f2:	3318      	adds	r3, #24
 800a7f4:	443b      	add	r3, r7
 800a7f6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800a7fa:	2b7f      	cmp	r3, #127	; 0x7f
 800a7fc:	dd06      	ble.n	800a80c <USBH_HUB_MouseDecode+0x19c>
 800a7fe:	7d7b      	ldrb	r3, [r7, #21]
 800a800:	005b      	lsls	r3, r3, #1
 800a802:	3318      	adds	r3, #24
 800a804:	443b      	add	r3, r7
 800a806:	227f      	movs	r2, #127	; 0x7f
 800a808:	f823 2c10 	strh.w	r2, [r3, #-16]
	  		if((int16_t)a[i] < -128) a[i] = -128;
 800a80c:	7d7b      	ldrb	r3, [r7, #21]
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	3318      	adds	r3, #24
 800a812:	443b      	add	r3, r7
 800a814:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800a818:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800a81c:	da07      	bge.n	800a82e <USBH_HUB_MouseDecode+0x1be>
 800a81e:	7d7b      	ldrb	r3, [r7, #21]
 800a820:	005b      	lsls	r3, r3, #1
 800a822:	3318      	adds	r3, #24
 800a824:	443b      	add	r3, r7
 800a826:	f64f 7280 	movw	r2, #65408	; 0xff80
 800a82a:	f823 2c10 	strh.w	r2, [r3, #-16]
	  		for(i=0;i<2;i++) {
 800a82e:	7d7b      	ldrb	r3, [r7, #21]
 800a830:	3301      	adds	r3, #1
 800a832:	757b      	strb	r3, [r7, #21]
 800a834:	7d7b      	ldrb	r3, [r7, #21]
 800a836:	2b01      	cmp	r3, #1
 800a838:	d9d9      	bls.n	800a7ee <USBH_HUB_MouseDecode+0x17e>
	  		}
	  		//btn
	  	  hub_mouse_info.x = a[0];
 800a83a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800a83e:	4b15      	ldr	r3, [pc, #84]	; (800a894 <USBH_HUB_MouseDecode+0x224>)
 800a840:	801a      	strh	r2, [r3, #0]
	  	  hub_mouse_info.y = a[1];
 800a842:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800a846:	4b13      	ldr	r3, [pc, #76]	; (800a894 <USBH_HUB_MouseDecode+0x224>)
 800a848:	805a      	strh	r2, [r3, #2]
	  	  hub_mouse_info.buttons[0] = btn&0x1;
 800a84a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	b25a      	sxtb	r2, r3
 800a854:	4b0f      	ldr	r3, [pc, #60]	; (800a894 <USBH_HUB_MouseDecode+0x224>)
 800a856:	711a      	strb	r2, [r3, #4]
	  	  hub_mouse_info.buttons[1] = (btn>>1)&0x1;
 800a858:	7dfb      	ldrb	r3, [r7, #23]
 800a85a:	085b      	lsrs	r3, r3, #1
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	b25b      	sxtb	r3, r3
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	b25a      	sxtb	r2, r3
 800a866:	4b0b      	ldr	r3, [pc, #44]	; (800a894 <USBH_HUB_MouseDecode+0x224>)
 800a868:	715a      	strb	r2, [r3, #5]
	  	  hub_mouse_info.buttons[2] = (btn>>2)&0x1;
 800a86a:	7dfb      	ldrb	r3, [r7, #23]
 800a86c:	089b      	lsrs	r3, r3, #2
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	b25b      	sxtb	r3, r3
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	b25a      	sxtb	r2, r3
 800a878:	4b06      	ldr	r3, [pc, #24]	; (800a894 <USBH_HUB_MouseDecode+0x224>)
 800a87a:	719a      	strb	r2, [r3, #6]
	  	}
    return USBH_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	e000      	b.n	800a882 <USBH_HUB_MouseDecode+0x212>
  }
  return   USBH_FAIL;
 800a880:	2302      	movs	r3, #2
 800a882:	4618      	mov	r0, r3
 800a884:	3718      	adds	r7, #24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	20000418 	.word	0x20000418
 800a890:	20000419 	.word	0x20000419
 800a894:	20000410 	.word	0x20000410

0800a898 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d101      	bne.n	800a8b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	e029      	b.n	800a904 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	79fa      	ldrb	r2, [r7, #7]
 800a8b4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 f81f 	bl	800a90c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d003      	beq.n	800a8fc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f001 fcfb 	bl	800c2f8 <USBH_LL_Init>

  return USBH_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a914:	2300      	movs	r3, #0
 800a916:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a918:	2300      	movs	r3, #0
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	e009      	b.n	800a932 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	33e0      	adds	r3, #224	; 0xe0
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	4413      	add	r3, r2
 800a928:	2200      	movs	r2, #0
 800a92a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	3301      	adds	r3, #1
 800a930:	60fb      	str	r3, [r7, #12]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2b0e      	cmp	r3, #14
 800a936:	d9f2      	bls.n	800a91e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a938:	2300      	movs	r3, #0
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	e009      	b.n	800a952 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	4413      	add	r3, r2
 800a944:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a948:	2200      	movs	r2, #0
 800a94a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	3301      	adds	r3, #1
 800a950:	60fb      	str	r3, [r7, #12]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a958:	d3f1      	bcc.n	800a93e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2201      	movs	r2, #1
 800a96a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2240      	movs	r2, #64	; 0x40
 800a97e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3714      	adds	r7, #20
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d016      	beq.n	800a9f6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10e      	bne.n	800a9f0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a9d8:	1c59      	adds	r1, r3, #1
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	33de      	adds	r3, #222	; 0xde
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	73fb      	strb	r3, [r7, #15]
 800a9ee:	e004      	b.n	800a9fa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	73fb      	strb	r3, [r7, #15]
 800a9f4:	e001      	b.n	800a9fa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	460b      	mov	r3, r1
 800aa12:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800aa14:	2300      	movs	r3, #0
 800aa16:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800aa1e:	78fa      	ldrb	r2, [r7, #3]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d204      	bcs.n	800aa2e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	78fa      	ldrb	r2, [r7, #3]
 800aa28:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800aa2c:	e001      	b.n	800aa32 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800aa2e:	2302      	movs	r3, #2
 800aa30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aa32:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3714      	adds	r7, #20
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f001 fccd 	bl	800c3e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800aa4e:	2101      	movs	r1, #1
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f001 fde6 	bl	800c622 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b088      	sub	sp, #32
 800aa64:	af04      	add	r7, sp, #16
 800aa66:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800aa68:	2302      	movs	r3, #2
 800aa6a:	737b      	strb	r3, [r7, #13]
  uint8_t idx = 0U;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d102      	bne.n	800aa82 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2203      	movs	r2, #3
 800aa80:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	2b0b      	cmp	r3, #11
 800aa8a:	f200 81b8 	bhi.w	800adfe <USBH_Process+0x39e>
 800aa8e:	a201      	add	r2, pc, #4	; (adr r2, 800aa94 <USBH_Process+0x34>)
 800aa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa94:	0800aac5 	.word	0x0800aac5
 800aa98:	0800aaf7 	.word	0x0800aaf7
 800aa9c:	0800ab5f 	.word	0x0800ab5f
 800aaa0:	0800ad99 	.word	0x0800ad99
 800aaa4:	0800adff 	.word	0x0800adff
 800aaa8:	0800ac03 	.word	0x0800ac03
 800aaac:	0800ad3f 	.word	0x0800ad3f
 800aab0:	0800ac39 	.word	0x0800ac39
 800aab4:	0800ac59 	.word	0x0800ac59
 800aab8:	0800ac79 	.word	0x0800ac79
 800aabc:	0800aca7 	.word	0x0800aca7
 800aac0:	0800ad81 	.word	0x0800ad81
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f000 8198 	beq.w	800ae02 <USBH_Process+0x3a2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800aad8:	20c8      	movs	r0, #200	; 0xc8
 800aada:	f001 fde0 	bl	800c69e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f001 fcdf 	bl	800c4a2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aaf4:	e185      	b.n	800ae02 <USBH_Process+0x3a2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d107      	bne.n	800ab10 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab0e:	e187      	b.n	800ae20 <USBH_Process+0x3c0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ab16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab1a:	d914      	bls.n	800ab46 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ab22:	3301      	adds	r3, #1
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ab32:	2b03      	cmp	r3, #3
 800ab34:	d903      	bls.n	800ab3e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	220d      	movs	r2, #13
 800ab3a:	701a      	strb	r2, [r3, #0]
      break;
 800ab3c:	e170      	b.n	800ae20 <USBH_Process+0x3c0>
            phost->gState = HOST_IDLE;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	701a      	strb	r2, [r3, #0]
      break;
 800ab44:	e16c      	b.n	800ae20 <USBH_Process+0x3c0>
          phost->Timeout += 10U;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ab4c:	f103 020a 	add.w	r2, r3, #10
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ab56:	200a      	movs	r0, #10
 800ab58:	f001 fda1 	bl	800c69e <USBH_Delay>
      break;
 800ab5c:	e160      	b.n	800ae20 <USBH_Process+0x3c0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d005      	beq.n	800ab74 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab6e:	2104      	movs	r1, #4
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ab74:	2064      	movs	r0, #100	; 0x64
 800ab76:	f001 fd92 	bl	800c69e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f001 fc6a 	bl	800c454 <USBH_LL_GetSpeed>
 800ab80:	4603      	mov	r3, r0
 800ab82:	461a      	mov	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2205      	movs	r2, #5
 800ab8e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ab90:	2100      	movs	r1, #0
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f001 f91b 	bl	800bdce <USBH_AllocPipe>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800aba0:	2180      	movs	r1, #128	; 0x80
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f001 f913 	bl	800bdce <USBH_AllocPipe>
 800aba8:	4603      	mov	r3, r0
 800abaa:	461a      	mov	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	7919      	ldrb	r1, [r3, #4]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800abc4:	b292      	uxth	r2, r2
 800abc6:	9202      	str	r2, [sp, #8]
 800abc8:	2200      	movs	r2, #0
 800abca:	9201      	str	r2, [sp, #4]
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	4603      	mov	r3, r0
 800abd0:	2280      	movs	r2, #128	; 0x80
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f001 f8cc 	bl	800bd70 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	7959      	ldrb	r1, [r3, #5]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800abec:	b292      	uxth	r2, r2
 800abee:	9202      	str	r2, [sp, #8]
 800abf0:	2200      	movs	r2, #0
 800abf2:	9201      	str	r2, [sp, #4]
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	4603      	mov	r3, r0
 800abf8:	2200      	movs	r2, #0
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f001 f8b8 	bl	800bd70 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac00:	e10e      	b.n	800ae20 <USBH_Process+0x3c0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f912 	bl	800ae2c <USBH_HandleEnum>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	737b      	strb	r3, [r7, #13]
      if (status == USBH_OK)
 800ac0c:	7b7b      	ldrb	r3, [r7, #13]
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f040 80f8 	bne.w	800ae06 <USBH_Process+0x3a6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d103      	bne.n	800ac30 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2208      	movs	r2, #8
 800ac2c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ac2e:	e0ea      	b.n	800ae06 <USBH_Process+0x3a6>
          phost->gState = HOST_INPUT;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2207      	movs	r2, #7
 800ac34:	701a      	strb	r2, [r3, #0]
      break;
 800ac36:	e0e6      	b.n	800ae06 <USBH_Process+0x3a6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f000 80e3 	beq.w	800ae0a <USBH_Process+0x3aa>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac4a:	2101      	movs	r1, #1
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2208      	movs	r2, #8
 800ac54:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ac56:	e0d8      	b.n	800ae0a <USBH_Process+0x3aa>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	4619      	mov	r1, r3
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 fc30 	bl	800b4c8 <USBH_SetCfg>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f040 80cf 	bne.w	800ae0e <USBH_Process+0x3ae>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2209      	movs	r2, #9
 800ac74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac76:	e0ca      	b.n	800ae0e <USBH_Process+0x3ae>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ac7e:	f003 0320 	and.w	r3, r3, #32
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00b      	beq.n	800ac9e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ac86:	2101      	movs	r1, #1
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fc40 	bl	800b50e <USBH_SetFeature>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f040 80be 	bne.w	800ae12 <USBH_Process+0x3b2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	220a      	movs	r2, #10
 800ac9a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac9c:	e0b9      	b.n	800ae12 <USBH_Process+0x3b2>
        phost->gState = HOST_CHECK_CLASS;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	220a      	movs	r2, #10
 800aca2:	701a      	strb	r2, [r3, #0]
      break;
 800aca4:	e0b5      	b.n	800ae12 <USBH_Process+0x3b2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800acac:	2b00      	cmp	r3, #0
 800acae:	f000 80b2 	beq.w	800ae16 <USBH_Process+0x3b6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800acba:	2300      	movs	r3, #0
 800acbc:	73fb      	strb	r3, [r7, #15]
 800acbe:	e016      	b.n	800acee <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800acc0:	7bfa      	ldrb	r2, [r7, #15]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	32de      	adds	r2, #222	; 0xde
 800acc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acca:	791a      	ldrb	r2, [r3, #4]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d108      	bne.n	800ace8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800acd6:	7bfa      	ldrb	r2, [r7, #15]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	32de      	adds	r2, #222	; 0xde
 800acdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ace6:	e005      	b.n	800acf4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
 800acea:	3301      	adds	r3, #1
 800acec:	73fb      	strb	r3, [r7, #15]
 800acee:	7bfb      	ldrb	r3, [r7, #15]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d0e5      	beq.n	800acc0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d01b      	beq.n	800ad36 <USBH_Process+0x2d6>
        {
         USBH_StatusTypeDef init_status = phost->pActiveClass->Init(phost);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	4798      	blx	r3
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	73bb      	strb	r3, [r7, #14]
          if (init_status == USBH_OK)
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d109      	bne.n	800ad28 <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2206      	movs	r2, #6
 800ad18:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad20:	2103      	movs	r1, #3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ad26:	e076      	b.n	800ae16 <USBH_Process+0x3b6>
          else if (init_status!= USBH_BUSY)
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d073      	beq.n	800ae16 <USBH_Process+0x3b6>
            phost->gState = HOST_ABORT_STATE;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	220d      	movs	r2, #13
 800ad32:	701a      	strb	r2, [r3, #0]
      break;
 800ad34:	e06f      	b.n	800ae16 <USBH_Process+0x3b6>
          phost->gState = HOST_ABORT_STATE;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	220d      	movs	r2, #13
 800ad3a:	701a      	strb	r2, [r3, #0]
      break;
 800ad3c:	e06b      	b.n	800ae16 <USBH_Process+0x3b6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d017      	beq.n	800ad78 <USBH_Process+0x318>
      {
        status = phost->pActiveClass->Requests(phost);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	4798      	blx	r3
 800ad54:	4603      	mov	r3, r0
 800ad56:	737b      	strb	r3, [r7, #13]

        if (status == USBH_OK)
 800ad58:	7b7b      	ldrb	r3, [r7, #13]
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d103      	bne.n	800ad68 <USBH_Process+0x308>
        {
          phost->gState = HOST_CLASS;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	220b      	movs	r2, #11
 800ad64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ad66:	e058      	b.n	800ae1a <USBH_Process+0x3ba>
        else if (status == USBH_FAIL)
 800ad68:	7b7b      	ldrb	r3, [r7, #13]
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d154      	bne.n	800ae1a <USBH_Process+0x3ba>
          phost->gState = HOST_ABORT_STATE;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	220d      	movs	r2, #13
 800ad74:	701a      	strb	r2, [r3, #0]
      break;
 800ad76:	e050      	b.n	800ae1a <USBH_Process+0x3ba>
        phost->gState = HOST_ABORT_STATE;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	220d      	movs	r2, #13
 800ad7c:	701a      	strb	r2, [r3, #0]
      break;
 800ad7e:	e04c      	b.n	800ae1a <USBH_Process+0x3ba>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d049      	beq.n	800ae1e <USBH_Process+0x3be>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad90:	695b      	ldr	r3, [r3, #20]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	4798      	blx	r3
      }
      break;
 800ad96:	e042      	b.n	800ae1e <USBH_Process+0x3be>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7ff fdb3 	bl	800a90c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adac:	2b00      	cmp	r3, #0
 800adae:	d009      	beq.n	800adc4 <USBH_Process+0x364>
      {
        phost->pActiveClass->DeInit(phost);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d005      	beq.n	800adda <USBH_Process+0x37a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800add4:	2105      	movs	r1, #5
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d107      	bne.n	800adf6 <USBH_Process+0x396>
      {
        phost->device.is_ReEnumerated = 0U;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7ff fe26 	bl	800aa40 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800adf4:	e014      	b.n	800ae20 <USBH_Process+0x3c0>
        USBH_LL_Start(phost);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f001 faf6 	bl	800c3e8 <USBH_LL_Start>
      break;
 800adfc:	e010      	b.n	800ae20 <USBH_Process+0x3c0>

    case HOST_ABORT_STATE:
    default :
      break;
 800adfe:	bf00      	nop
 800ae00:	e00e      	b.n	800ae20 <USBH_Process+0x3c0>
      break;
 800ae02:	bf00      	nop
 800ae04:	e00c      	b.n	800ae20 <USBH_Process+0x3c0>
      break;
 800ae06:	bf00      	nop
 800ae08:	e00a      	b.n	800ae20 <USBH_Process+0x3c0>
    break;
 800ae0a:	bf00      	nop
 800ae0c:	e008      	b.n	800ae20 <USBH_Process+0x3c0>
      break;
 800ae0e:	bf00      	nop
 800ae10:	e006      	b.n	800ae20 <USBH_Process+0x3c0>
      break;
 800ae12:	bf00      	nop
 800ae14:	e004      	b.n	800ae20 <USBH_Process+0x3c0>
      break;
 800ae16:	bf00      	nop
 800ae18:	e002      	b.n	800ae20 <USBH_Process+0x3c0>
      break;
 800ae1a:	bf00      	nop
 800ae1c:	e000      	b.n	800ae20 <USBH_Process+0x3c0>
      break;
 800ae1e:	bf00      	nop
  }
  return USBH_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop

0800ae2c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b088      	sub	sp, #32
 800ae30:	af04      	add	r7, sp, #16
 800ae32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ae34:	2301      	movs	r3, #1
 800ae36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	785b      	ldrb	r3, [r3, #1]
 800ae40:	2b07      	cmp	r3, #7
 800ae42:	f200 81c1 	bhi.w	800b1c8 <USBH_HandleEnum+0x39c>
 800ae46:	a201      	add	r2, pc, #4	; (adr r2, 800ae4c <USBH_HandleEnum+0x20>)
 800ae48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4c:	0800ae6d 	.word	0x0800ae6d
 800ae50:	0800af2b 	.word	0x0800af2b
 800ae54:	0800af95 	.word	0x0800af95
 800ae58:	0800b023 	.word	0x0800b023
 800ae5c:	0800b08d 	.word	0x0800b08d
 800ae60:	0800b0fd 	.word	0x0800b0fd
 800ae64:	0800b143 	.word	0x0800b143
 800ae68:	0800b189 	.word	0x0800b189
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ae6c:	2108      	movs	r1, #8
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fa50 	bl	800b314 <USBH_Get_DevDesc>
 800ae74:	4603      	mov	r3, r0
 800ae76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae78:	7bbb      	ldrb	r3, [r7, #14]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d130      	bne.n	800aee0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	7919      	ldrb	r1, [r3, #4]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aea2:	b292      	uxth	r2, r2
 800aea4:	9202      	str	r2, [sp, #8]
 800aea6:	2200      	movs	r2, #0
 800aea8:	9201      	str	r2, [sp, #4]
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	4603      	mov	r3, r0
 800aeae:	2280      	movs	r2, #128	; 0x80
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 ff5d 	bl	800bd70 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	7959      	ldrb	r1, [r3, #5]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aeca:	b292      	uxth	r2, r2
 800aecc:	9202      	str	r2, [sp, #8]
 800aece:	2200      	movs	r2, #0
 800aed0:	9201      	str	r2, [sp, #4]
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	4603      	mov	r3, r0
 800aed6:	2200      	movs	r2, #0
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 ff49 	bl	800bd70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aede:	e175      	b.n	800b1cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
 800aee2:	2b03      	cmp	r3, #3
 800aee4:	f040 8172 	bne.w	800b1cc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aeee:	3301      	adds	r3, #1
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d903      	bls.n	800af0a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	220d      	movs	r2, #13
 800af06:	701a      	strb	r2, [r3, #0]
      break;
 800af08:	e160      	b.n	800b1cc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	795b      	ldrb	r3, [r3, #5]
 800af0e:	4619      	mov	r1, r3
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 ff7d 	bl	800be10 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	791b      	ldrb	r3, [r3, #4]
 800af1a:	4619      	mov	r1, r3
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 ff77 	bl	800be10 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	701a      	strb	r2, [r3, #0]
      break;
 800af28:	e150      	b.n	800b1cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800af2a:	2112      	movs	r1, #18
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f9f1 	bl	800b314 <USBH_Get_DevDesc>
 800af32:	4603      	mov	r3, r0
 800af34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af36:	7bbb      	ldrb	r3, [r7, #14]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d103      	bne.n	800af44 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2202      	movs	r2, #2
 800af40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800af42:	e145      	b.n	800b1d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af44:	7bbb      	ldrb	r3, [r7, #14]
 800af46:	2b03      	cmp	r3, #3
 800af48:	f040 8142 	bne.w	800b1d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af52:	3301      	adds	r3, #1
 800af54:	b2da      	uxtb	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af62:	2b03      	cmp	r3, #3
 800af64:	d903      	bls.n	800af6e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	220d      	movs	r2, #13
 800af6a:	701a      	strb	r2, [r3, #0]
      break;
 800af6c:	e130      	b.n	800b1d0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	795b      	ldrb	r3, [r3, #5]
 800af72:	4619      	mov	r1, r3
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 ff4b 	bl	800be10 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	791b      	ldrb	r3, [r3, #4]
 800af7e:	4619      	mov	r1, r3
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 ff45 	bl	800be10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	701a      	strb	r2, [r3, #0]
      break;
 800af92:	e11d      	b.n	800b1d0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800af94:	2101      	movs	r1, #1
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fa72 	bl	800b480 <USBH_SetAddress>
 800af9c:	4603      	mov	r3, r0
 800af9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d132      	bne.n	800b00c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800afa6:	2002      	movs	r0, #2
 800afa8:	f001 fb79 	bl	800c69e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2203      	movs	r2, #3
 800afb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	7919      	ldrb	r1, [r3, #4]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800afce:	b292      	uxth	r2, r2
 800afd0:	9202      	str	r2, [sp, #8]
 800afd2:	2200      	movs	r2, #0
 800afd4:	9201      	str	r2, [sp, #4]
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	4603      	mov	r3, r0
 800afda:	2280      	movs	r2, #128	; 0x80
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 fec7 	bl	800bd70 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	7959      	ldrb	r1, [r3, #5]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aff6:	b292      	uxth	r2, r2
 800aff8:	9202      	str	r2, [sp, #8]
 800affa:	2200      	movs	r2, #0
 800affc:	9201      	str	r2, [sp, #4]
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	4603      	mov	r3, r0
 800b002:	2200      	movs	r2, #0
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 feb3 	bl	800bd70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b00a:	e0e3      	b.n	800b1d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
 800b00e:	2b03      	cmp	r3, #3
 800b010:	f040 80e0 	bne.w	800b1d4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	220d      	movs	r2, #13
 800b018:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	705a      	strb	r2, [r3, #1]
      break;
 800b020:	e0d8      	b.n	800b1d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b022:	2109      	movs	r1, #9
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f99e 	bl	800b366 <USBH_Get_CfgDesc>
 800b02a:	4603      	mov	r3, r0
 800b02c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b02e:	7bbb      	ldrb	r3, [r7, #14]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d103      	bne.n	800b03c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2204      	movs	r2, #4
 800b038:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b03a:	e0cd      	b.n	800b1d8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
 800b03e:	2b03      	cmp	r3, #3
 800b040:	f040 80ca 	bne.w	800b1d8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b04a:	3301      	adds	r3, #1
 800b04c:	b2da      	uxtb	r2, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b05a:	2b03      	cmp	r3, #3
 800b05c:	d903      	bls.n	800b066 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	220d      	movs	r2, #13
 800b062:	701a      	strb	r2, [r3, #0]
      break;
 800b064:	e0b8      	b.n	800b1d8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	795b      	ldrb	r3, [r3, #5]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 fecf 	bl	800be10 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	791b      	ldrb	r3, [r3, #4]
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fec9 	bl	800be10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	701a      	strb	r2, [r3, #0]
      break;
 800b08a:	e0a5      	b.n	800b1d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b092:	4619      	mov	r1, r3
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f966 	bl	800b366 <USBH_Get_CfgDesc>
 800b09a:	4603      	mov	r3, r0
 800b09c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b09e:	7bbb      	ldrb	r3, [r7, #14]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d103      	bne.n	800b0ac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2205      	movs	r2, #5
 800b0a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b0aa:	e097      	b.n	800b1dc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0ac:	7bbb      	ldrb	r3, [r7, #14]
 800b0ae:	2b03      	cmp	r3, #3
 800b0b0:	f040 8094 	bne.w	800b1dc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	d903      	bls.n	800b0d6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	220d      	movs	r2, #13
 800b0d2:	701a      	strb	r2, [r3, #0]
      break;
 800b0d4:	e082      	b.n	800b1dc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	795b      	ldrb	r3, [r3, #5]
 800b0da:	4619      	mov	r1, r3
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fe97 	bl	800be10 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	791b      	ldrb	r3, [r3, #4]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 fe91 	bl	800be10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	701a      	strb	r2, [r3, #0]
      break;
 800b0fa:	e06f      	b.n	800b1dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b102:	2b00      	cmp	r3, #0
 800b104:	d019      	beq.n	800b13a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b112:	23ff      	movs	r3, #255	; 0xff
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 f94c 	bl	800b3b2 <USBH_Get_StringDesc>
 800b11a:	4603      	mov	r3, r0
 800b11c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b11e:	7bbb      	ldrb	r3, [r7, #14]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d103      	bne.n	800b12c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2206      	movs	r2, #6
 800b128:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b12a:	e059      	b.n	800b1e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b12c:	7bbb      	ldrb	r3, [r7, #14]
 800b12e:	2b03      	cmp	r3, #3
 800b130:	d156      	bne.n	800b1e0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2206      	movs	r2, #6
 800b136:	705a      	strb	r2, [r3, #1]
      break;
 800b138:	e052      	b.n	800b1e0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2206      	movs	r2, #6
 800b13e:	705a      	strb	r2, [r3, #1]
      break;
 800b140:	e04e      	b.n	800b1e0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d019      	beq.n	800b180 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b158:	23ff      	movs	r3, #255	; 0xff
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f929 	bl	800b3b2 <USBH_Get_StringDesc>
 800b160:	4603      	mov	r3, r0
 800b162:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b164:	7bbb      	ldrb	r3, [r7, #14]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d103      	bne.n	800b172 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2207      	movs	r2, #7
 800b16e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b170:	e038      	b.n	800b1e4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b172:	7bbb      	ldrb	r3, [r7, #14]
 800b174:	2b03      	cmp	r3, #3
 800b176:	d135      	bne.n	800b1e4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2207      	movs	r2, #7
 800b17c:	705a      	strb	r2, [r3, #1]
      break;
 800b17e:	e031      	b.n	800b1e4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2207      	movs	r2, #7
 800b184:	705a      	strb	r2, [r3, #1]
      break;
 800b186:	e02d      	b.n	800b1e4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d017      	beq.n	800b1c2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b19e:	23ff      	movs	r3, #255	; 0xff
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 f906 	bl	800b3b2 <USBH_Get_StringDesc>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b1aa:	7bbb      	ldrb	r3, [r7, #14]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d102      	bne.n	800b1b6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b1b4:	e018      	b.n	800b1e8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1b6:	7bbb      	ldrb	r3, [r7, #14]
 800b1b8:	2b03      	cmp	r3, #3
 800b1ba:	d115      	bne.n	800b1e8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	73fb      	strb	r3, [r7, #15]
      break;
 800b1c0:	e012      	b.n	800b1e8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	73fb      	strb	r3, [r7, #15]
      break;
 800b1c6:	e00f      	b.n	800b1e8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b1c8:	bf00      	nop
 800b1ca:	e00e      	b.n	800b1ea <USBH_HandleEnum+0x3be>
      break;
 800b1cc:	bf00      	nop
 800b1ce:	e00c      	b.n	800b1ea <USBH_HandleEnum+0x3be>
      break;
 800b1d0:	bf00      	nop
 800b1d2:	e00a      	b.n	800b1ea <USBH_HandleEnum+0x3be>
      break;
 800b1d4:	bf00      	nop
 800b1d6:	e008      	b.n	800b1ea <USBH_HandleEnum+0x3be>
      break;
 800b1d8:	bf00      	nop
 800b1da:	e006      	b.n	800b1ea <USBH_HandleEnum+0x3be>
      break;
 800b1dc:	bf00      	nop
 800b1de:	e004      	b.n	800b1ea <USBH_HandleEnum+0x3be>
      break;
 800b1e0:	bf00      	nop
 800b1e2:	e002      	b.n	800b1ea <USBH_HandleEnum+0x3be>
      break;
 800b1e4:	bf00      	nop
 800b1e6:	e000      	b.n	800b1ea <USBH_HandleEnum+0x3be>
      break;
 800b1e8:	bf00      	nop
  }
  return Status;
 800b1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b206:	bf00      	nop
 800b208:	370c      	adds	r7, #12
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr

0800b212 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b082      	sub	sp, #8
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b220:	1c5a      	adds	r2, r3, #1
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 f804 	bl	800b236 <USBH_HandleSof>
}
 800b22e:	bf00      	nop
 800b230:	3708      	adds	r7, #8
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b082      	sub	sp, #8
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	b2db      	uxtb	r3, r3
 800b244:	2b0b      	cmp	r3, #11
 800b246:	d10a      	bne.n	800b25e <USBH_HandleSof+0x28>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d005      	beq.n	800b25e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	4798      	blx	r3
  }
}
 800b25e:	bf00      	nop
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2201      	movs	r2, #1
 800b272:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b276:	bf00      	nop
}
 800b278:	370c      	adds	r7, #12
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr

0800b282 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b282:	b480      	push	{r7}
 800b284:	b083      	sub	sp, #12
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b292:	bf00      	nop
}
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr

0800b29e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b29e:	b480      	push	{r7}
 800b2a0:	b083      	sub	sp, #12
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f001 f896 	bl	800c41e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	791b      	ldrb	r3, [r3, #4]
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 fd89 	bl	800be10 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	795b      	ldrb	r3, [r3, #5]
 800b302:	4619      	mov	r1, r3
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 fd83 	bl	800be10 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b086      	sub	sp, #24
 800b318:	af02      	add	r7, sp, #8
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	460b      	mov	r3, r1
 800b31e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, 0U,phost->device.Data,
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b326:	78fa      	ldrb	r2, [r7, #3]
 800b328:	b292      	uxth	r2, r2
 800b32a:	9201      	str	r2, [sp, #4]
 800b32c:	9300      	str	r3, [sp, #0]
 800b32e:	2300      	movs	r3, #0
 800b330:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b334:	2100      	movs	r1, #0
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f868 	bl	800b40c <USBH_GetDescriptor>
 800b33c:	4603      	mov	r3, r0
 800b33e:	73fb      	strb	r3, [r7, #15]
 800b340:	7bfb      	ldrb	r3, [r7, #15]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10a      	bne.n	800b35c <USBH_Get_DevDesc+0x48>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b352:	78fa      	ldrb	r2, [r7, #3]
 800b354:	b292      	uxth	r2, r2
 800b356:	4619      	mov	r1, r3
 800b358:	f000 f921 	bl	800b59e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b366:	b580      	push	{r7, lr}
 800b368:	b086      	sub	sp, #24
 800b36a:	af02      	add	r7, sp, #8
 800b36c:	6078      	str	r0, [r7, #4]
 800b36e:	460b      	mov	r3, r1
 800b370:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	331c      	adds	r3, #28
 800b376:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b378:	887b      	ldrh	r3, [r7, #2]
 800b37a:	9301      	str	r3, [sp, #4]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	2300      	movs	r3, #0
 800b382:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b386:	2100      	movs	r1, #0
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 f83f 	bl	800b40c <USBH_GetDescriptor>
 800b38e:	4603      	mov	r3, r0
 800b390:	72fb      	strb	r3, [r7, #11]
 800b392:	7afb      	ldrb	r3, [r7, #11]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d107      	bne.n	800b3a8 <USBH_Get_CfgDesc+0x42>
                                   USB_DESC_CONFIGURATION,0U,pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b39e:	887a      	ldrh	r2, [r7, #2]
 800b3a0:	68f9      	ldr	r1, [r7, #12]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f000 f96b 	bl	800b67e <USBH_ParseCfgDesc>
  }

  return status;
 800b3a8:	7afb      	ldrb	r3, [r7, #11]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b088      	sub	sp, #32
 800b3b6:	af02      	add	r7, sp, #8
 800b3b8:	60f8      	str	r0, [r7, #12]
 800b3ba:	607a      	str	r2, [r7, #4]
 800b3bc:	461a      	mov	r2, r3
 800b3be:	460b      	mov	r3, r1
 800b3c0:	72fb      	strb	r3, [r7, #11]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b3c6:	7afb      	ldrb	r3, [r7, #11]
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b3ce:	b299      	uxth	r1, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,0U,
                                   phost->device.Data, length)) == USBH_OK)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b3d6:	893a      	ldrh	r2, [r7, #8]
 800b3d8:	9201      	str	r2, [sp, #4]
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	2300      	movs	r3, #0
 800b3de:	460a      	mov	r2, r1
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f000 f812 	bl	800b40c <USBH_GetDescriptor>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	75fb      	strb	r3, [r7, #23]
 800b3ec:	7dfb      	ldrb	r3, [r7, #23]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d107      	bne.n	800b402 <USBH_Get_StringDesc+0x50>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b3f8:	893a      	ldrh	r2, [r7, #8]
 800b3fa:	6879      	ldr	r1, [r7, #4]
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f000 fa3c 	bl	800b87a <USBH_ParseStringDesc>
  }

  return status;
 800b402:	7dfb      	ldrb	r3, [r7, #23]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3718      	adds	r7, #24
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <USBH_GetDescriptor>:
                                      uint8_t  req_type,
                                      uint16_t value_idx,
									  uint8_t iface_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	4608      	mov	r0, r1
 800b416:	4611      	mov	r1, r2
 800b418:	461a      	mov	r2, r3
 800b41a:	4603      	mov	r3, r0
 800b41c:	70fb      	strb	r3, [r7, #3]
 800b41e:	460b      	mov	r3, r1
 800b420:	803b      	strh	r3, [r7, #0]
 800b422:	4613      	mov	r3, r2
 800b424:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	789b      	ldrb	r3, [r3, #2]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d11d      	bne.n	800b46a <USBH_GetDescriptor+0x5e>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b42e:	78fb      	ldrb	r3, [r7, #3]
 800b430:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b434:	b2da      	uxtb	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2206      	movs	r2, #6
 800b43e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	883a      	ldrh	r2, [r7, #0]
 800b444:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b446:	883b      	ldrh	r3, [r7, #0]
 800b448:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b44c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b450:	d104      	bne.n	800b45c <USBH_GetDescriptor+0x50>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f240 4209 	movw	r2, #1033	; 0x409
 800b458:	829a      	strh	r2, [r3, #20]
 800b45a:	e003      	b.n	800b464 <USBH_GetDescriptor+0x58>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = iface_idx;
 800b45c:	78bb      	ldrb	r3, [r7, #2]
 800b45e:	b29a      	uxth	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	8aba      	ldrh	r2, [r7, #20]
 800b468:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b46a:	8abb      	ldrh	r3, [r7, #20]
 800b46c:	461a      	mov	r2, r3
 800b46e:	6939      	ldr	r1, [r7, #16]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fa50 	bl	800b916 <USBH_CtlReq>
 800b476:	4603      	mov	r3, r0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	460b      	mov	r3, r1
 800b48a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	789b      	ldrb	r3, [r3, #2]
 800b490:	2b01      	cmp	r3, #1
 800b492:	d10f      	bne.n	800b4b4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2205      	movs	r2, #5
 800b49e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b4a0:	78fb      	ldrb	r3, [r7, #3]
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fa2c 	bl	800b916 <USBH_CtlReq>
 800b4be:	4603      	mov	r3, r0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	789b      	ldrb	r3, [r3, #2]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d10e      	bne.n	800b4fa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2209      	movs	r2, #9
 800b4e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	887a      	ldrh	r2, [r7, #2]
 800b4ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fa09 	bl	800b916 <USBH_CtlReq>
 800b504:	4603      	mov	r3, r0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3708      	adds	r7, #8
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b082      	sub	sp, #8
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	460b      	mov	r3, r1
 800b518:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	789b      	ldrb	r3, [r3, #2]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d10f      	bne.n	800b542 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2203      	movs	r2, #3
 800b52c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b52e:	78fb      	ldrb	r3, [r7, #3]
 800b530:	b29a      	uxth	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b542:	2200      	movs	r2, #0
 800b544:	2100      	movs	r1, #0
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f9e5 	bl	800b916 <USBH_CtlReq>
 800b54c:	4603      	mov	r3, r0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b082      	sub	sp, #8
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	460b      	mov	r3, r1
 800b560:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	789b      	ldrb	r3, [r3, #2]
 800b566:	2b01      	cmp	r3, #1
 800b568:	d10f      	bne.n	800b58a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2202      	movs	r2, #2
 800b56e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b57c:	78fb      	ldrb	r3, [r7, #3]
 800b57e:	b29a      	uxth	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b58a:	2200      	movs	r2, #0
 800b58c:	2100      	movs	r1, #0
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 f9c1 	bl	800b916 <USBH_CtlReq>
 800b594:	4603      	mov	r3, r0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3708      	adds	r7, #8
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b59e:	b480      	push	{r7}
 800b5a0:	b085      	sub	sp, #20
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	60f8      	str	r0, [r7, #12]
 800b5a6:	60b9      	str	r1, [r7, #8]
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	781a      	ldrb	r2, [r3, #0]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	785a      	ldrb	r2, [r3, #1]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	3302      	adds	r3, #2
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	b29a      	uxth	r2, r3
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	3303      	adds	r3, #3
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	021b      	lsls	r3, r3, #8
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	791a      	ldrb	r2, [r3, #4]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	795a      	ldrb	r2, [r3, #5]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	799a      	ldrb	r2, [r3, #6]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	79da      	ldrb	r2, [r3, #7]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b5f8:	88fb      	ldrh	r3, [r7, #6]
 800b5fa:	2b08      	cmp	r3, #8
 800b5fc:	d939      	bls.n	800b672 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	3308      	adds	r3, #8
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	b29a      	uxth	r2, r3
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	3309      	adds	r3, #9
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	021b      	lsls	r3, r3, #8
 800b610:	b29b      	uxth	r3, r3
 800b612:	4313      	orrs	r3, r2
 800b614:	b29a      	uxth	r2, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	330a      	adds	r3, #10
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	b29a      	uxth	r2, r3
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	330b      	adds	r3, #11
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	b29b      	uxth	r3, r3
 800b62a:	021b      	lsls	r3, r3, #8
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	4313      	orrs	r3, r2
 800b630:	b29a      	uxth	r2, r3
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	330c      	adds	r3, #12
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	330d      	adds	r3, #13
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	b29b      	uxth	r3, r3
 800b646:	021b      	lsls	r3, r3, #8
 800b648:	b29b      	uxth	r3, r3
 800b64a:	4313      	orrs	r3, r2
 800b64c:	b29a      	uxth	r2, r3
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	7b9a      	ldrb	r2, [r3, #14]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	7bda      	ldrb	r2, [r3, #15]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	7c1a      	ldrb	r2, [r3, #16]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	7c5a      	ldrb	r2, [r3, #17]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	745a      	strb	r2, [r3, #17]
  }
}
 800b672:	bf00      	nop
 800b674:	3714      	adds	r7, #20
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr

0800b67e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b08a      	sub	sp, #40	; 0x28
 800b682:	af00      	add	r7, sp, #0
 800b684:	60f8      	str	r0, [r7, #12]
 800b686:	60b9      	str	r1, [r7, #8]
 800b688:	4613      	mov	r3, r2
 800b68a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b690:	2300      	movs	r3, #0
 800b692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b696:	2300      	movs	r3, #0
 800b698:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	781a      	ldrb	r2, [r3, #0]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	785a      	ldrb	r2, [r3, #1]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	3302      	adds	r3, #2
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	3303      	adds	r3, #3
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	021b      	lsls	r3, r3, #8
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	791a      	ldrb	r2, [r3, #4]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	795a      	ldrb	r2, [r3, #5]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	799a      	ldrb	r2, [r3, #6]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	79da      	ldrb	r2, [r3, #7]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	7a1a      	ldrb	r2, [r3, #8]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b6f4:	88fb      	ldrh	r3, [r7, #6]
 800b6f6:	2b09      	cmp	r3, #9
 800b6f8:	d95f      	bls.n	800b7ba <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b6fa:	2309      	movs	r3, #9
 800b6fc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b6fe:	2300      	movs	r3, #0
 800b700:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b702:	e051      	b.n	800b7a8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b704:	f107 0316 	add.w	r3, r7, #22
 800b708:	4619      	mov	r1, r3
 800b70a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b70c:	f000 f8e8 	bl	800b8e0 <USBH_GetNextDesc>
 800b710:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b714:	785b      	ldrb	r3, [r3, #1]
 800b716:	2b04      	cmp	r3, #4
 800b718:	d146      	bne.n	800b7a8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b71a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b71e:	221a      	movs	r2, #26
 800b720:	fb02 f303 	mul.w	r3, r2, r3
 800b724:	3308      	adds	r3, #8
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	4413      	add	r3, r2
 800b72a:	3302      	adds	r3, #2
 800b72c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b72e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b730:	69f8      	ldr	r0, [r7, #28]
 800b732:	f000 f846 	bl	800b7c2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b736:	2300      	movs	r3, #0
 800b738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b73c:	2300      	movs	r3, #0
 800b73e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b740:	e022      	b.n	800b788 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b742:	f107 0316 	add.w	r3, r7, #22
 800b746:	4619      	mov	r1, r3
 800b748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b74a:	f000 f8c9 	bl	800b8e0 <USBH_GetNextDesc>
 800b74e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	785b      	ldrb	r3, [r3, #1]
 800b754:	2b05      	cmp	r3, #5
 800b756:	d117      	bne.n	800b788 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b758:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b75c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b760:	3201      	adds	r2, #1
 800b762:	00d2      	lsls	r2, r2, #3
 800b764:	211a      	movs	r1, #26
 800b766:	fb01 f303 	mul.w	r3, r1, r3
 800b76a:	4413      	add	r3, r2
 800b76c:	3308      	adds	r3, #8
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	4413      	add	r3, r2
 800b772:	3304      	adds	r3, #4
 800b774:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b778:	69b8      	ldr	r0, [r7, #24]
 800b77a:	f000 f851 	bl	800b820 <USBH_ParseEPDesc>
            ep_ix++;
 800b77e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b782:	3301      	adds	r3, #1
 800b784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	791b      	ldrb	r3, [r3, #4]
 800b78c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b790:	429a      	cmp	r2, r3
 800b792:	d204      	bcs.n	800b79e <USBH_ParseCfgDesc+0x120>
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	885a      	ldrh	r2, [r3, #2]
 800b798:	8afb      	ldrh	r3, [r7, #22]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d8d1      	bhi.n	800b742 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b79e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b7a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d804      	bhi.n	800b7ba <USBH_ParseCfgDesc+0x13c>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	885a      	ldrh	r2, [r3, #2]
 800b7b4:	8afb      	ldrh	r3, [r7, #22]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d8a4      	bhi.n	800b704 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b7ba:	bf00      	nop
 800b7bc:	3728      	adds	r7, #40	; 0x28
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b083      	sub	sp, #12
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	781a      	ldrb	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	785a      	ldrb	r2, [r3, #1]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	789a      	ldrb	r2, [r3, #2]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	78da      	ldrb	r2, [r3, #3]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	791a      	ldrb	r2, [r3, #4]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	795a      	ldrb	r2, [r3, #5]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	799a      	ldrb	r2, [r3, #6]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	79da      	ldrb	r2, [r3, #7]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	7a1a      	ldrb	r2, [r3, #8]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	721a      	strb	r2, [r3, #8]
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	781a      	ldrb	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	785a      	ldrb	r2, [r3, #1]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	789a      	ldrb	r2, [r3, #2]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	78da      	ldrb	r2, [r3, #3]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	3304      	adds	r3, #4
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	b29a      	uxth	r2, r3
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	3305      	adds	r3, #5
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	b29b      	uxth	r3, r3
 800b85a:	021b      	lsls	r3, r3, #8
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	4313      	orrs	r3, r2
 800b860:	b29a      	uxth	r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	799a      	ldrb	r2, [r3, #6]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	719a      	strb	r2, [r3, #6]
}
 800b86e:	bf00      	nop
 800b870:	370c      	adds	r7, #12
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr

0800b87a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b87a:	b480      	push	{r7}
 800b87c:	b087      	sub	sp, #28
 800b87e:	af00      	add	r7, sp, #0
 800b880:	60f8      	str	r0, [r7, #12]
 800b882:	60b9      	str	r1, [r7, #8]
 800b884:	4613      	mov	r3, r2
 800b886:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3301      	adds	r3, #1
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	2b03      	cmp	r3, #3
 800b890:	d120      	bne.n	800b8d4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	1e9a      	subs	r2, r3, #2
 800b898:	88fb      	ldrh	r3, [r7, #6]
 800b89a:	4293      	cmp	r3, r2
 800b89c:	bf28      	it	cs
 800b89e:	4613      	movcs	r3, r2
 800b8a0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3302      	adds	r3, #2
 800b8a6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	82fb      	strh	r3, [r7, #22]
 800b8ac:	e00b      	b.n	800b8c6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b8ae:	8afb      	ldrh	r3, [r7, #22]
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	781a      	ldrb	r2, [r3, #0]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b8c0:	8afb      	ldrh	r3, [r7, #22]
 800b8c2:	3302      	adds	r3, #2
 800b8c4:	82fb      	strh	r3, [r7, #22]
 800b8c6:	8afa      	ldrh	r2, [r7, #22]
 800b8c8:	8abb      	ldrh	r3, [r7, #20]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d3ef      	bcc.n	800b8ae <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	701a      	strb	r2, [r3, #0]
  }
}
 800b8d4:	bf00      	nop
 800b8d6:	371c      	adds	r7, #28
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	881a      	ldrh	r2, [r3, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	4413      	add	r3, r2
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4413      	add	r3, r2
 800b906:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b908:	68fb      	ldr	r3, [r7, #12]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b086      	sub	sp, #24
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	60f8      	str	r0, [r7, #12]
 800b91e:	60b9      	str	r1, [r7, #8]
 800b920:	4613      	mov	r3, r2
 800b922:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b924:	2301      	movs	r3, #1
 800b926:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	789b      	ldrb	r3, [r3, #2]
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d002      	beq.n	800b936 <USBH_CtlReq+0x20>
 800b930:	2b02      	cmp	r3, #2
 800b932:	d00f      	beq.n	800b954 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b934:	e027      	b.n	800b986 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	88fa      	ldrh	r2, [r7, #6]
 800b940:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2201      	movs	r2, #1
 800b946:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2202      	movs	r2, #2
 800b94c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b94e:	2301      	movs	r3, #1
 800b950:	75fb      	strb	r3, [r7, #23]
      break;
 800b952:	e018      	b.n	800b986 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f000 f81b 	bl	800b990 <USBH_HandleControl>
 800b95a:	4603      	mov	r3, r0
 800b95c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b95e:	7dfb      	ldrb	r3, [r7, #23]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <USBH_CtlReq+0x54>
 800b964:	7dfb      	ldrb	r3, [r7, #23]
 800b966:	2b03      	cmp	r3, #3
 800b968:	d106      	bne.n	800b978 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2201      	movs	r2, #1
 800b96e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	761a      	strb	r2, [r3, #24]
      break;
 800b976:	e005      	b.n	800b984 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b978:	7dfb      	ldrb	r3, [r7, #23]
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d102      	bne.n	800b984 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2201      	movs	r2, #1
 800b982:	709a      	strb	r2, [r3, #2]
      break;
 800b984:	bf00      	nop
  }
  return status;
 800b986:	7dfb      	ldrb	r3, [r7, #23]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3718      	adds	r7, #24
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af02      	add	r7, sp, #8
 800b996:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b998:	2301      	movs	r3, #1
 800b99a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b99c:	2300      	movs	r3, #0
 800b99e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	7e1b      	ldrb	r3, [r3, #24]
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	2b0a      	cmp	r3, #10
 800b9a8:	f200 8156 	bhi.w	800bc58 <USBH_HandleControl+0x2c8>
 800b9ac:	a201      	add	r2, pc, #4	; (adr r2, 800b9b4 <USBH_HandleControl+0x24>)
 800b9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b2:	bf00      	nop
 800b9b4:	0800b9e1 	.word	0x0800b9e1
 800b9b8:	0800b9fb 	.word	0x0800b9fb
 800b9bc:	0800ba65 	.word	0x0800ba65
 800b9c0:	0800ba8b 	.word	0x0800ba8b
 800b9c4:	0800bac3 	.word	0x0800bac3
 800b9c8:	0800baed 	.word	0x0800baed
 800b9cc:	0800bb3f 	.word	0x0800bb3f
 800b9d0:	0800bb61 	.word	0x0800bb61
 800b9d4:	0800bb9d 	.word	0x0800bb9d
 800b9d8:	0800bbc3 	.word	0x0800bbc3
 800b9dc:	0800bc01 	.word	0x0800bc01
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f103 0110 	add.w	r1, r3, #16
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	795b      	ldrb	r3, [r3, #5]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 f943 	bl	800bc78 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2202      	movs	r2, #2
 800b9f6:	761a      	strb	r2, [r3, #24]
      break;
 800b9f8:	e139      	b.n	800bc6e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	795b      	ldrb	r3, [r3, #5]
 800b9fe:	4619      	mov	r1, r3
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 fdfb 	bl	800c5fc <USBH_LL_GetURBState>
 800ba06:	4603      	mov	r3, r0
 800ba08:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ba0a:	7bbb      	ldrb	r3, [r7, #14]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d11e      	bne.n	800ba4e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	7c1b      	ldrb	r3, [r3, #16]
 800ba14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ba18:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	8adb      	ldrh	r3, [r3, #22]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00a      	beq.n	800ba38 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ba22:	7b7b      	ldrb	r3, [r7, #13]
 800ba24:	2b80      	cmp	r3, #128	; 0x80
 800ba26:	d103      	bne.n	800ba30 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2203      	movs	r2, #3
 800ba2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba2e:	e115      	b.n	800bc5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2205      	movs	r2, #5
 800ba34:	761a      	strb	r2, [r3, #24]
      break;
 800ba36:	e111      	b.n	800bc5c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ba38:	7b7b      	ldrb	r3, [r7, #13]
 800ba3a:	2b80      	cmp	r3, #128	; 0x80
 800ba3c:	d103      	bne.n	800ba46 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2209      	movs	r2, #9
 800ba42:	761a      	strb	r2, [r3, #24]
      break;
 800ba44:	e10a      	b.n	800bc5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2207      	movs	r2, #7
 800ba4a:	761a      	strb	r2, [r3, #24]
      break;
 800ba4c:	e106      	b.n	800bc5c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ba4e:	7bbb      	ldrb	r3, [r7, #14]
 800ba50:	2b04      	cmp	r3, #4
 800ba52:	d003      	beq.n	800ba5c <USBH_HandleControl+0xcc>
 800ba54:	7bbb      	ldrb	r3, [r7, #14]
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	f040 8100 	bne.w	800bc5c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	220b      	movs	r2, #11
 800ba60:	761a      	strb	r2, [r3, #24]
      break;
 800ba62:	e0fb      	b.n	800bc5c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba6a:	b29a      	uxth	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6899      	ldr	r1, [r3, #8]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	899a      	ldrh	r2, [r3, #12]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	791b      	ldrb	r3, [r3, #4]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 f93a 	bl	800bcf6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2204      	movs	r2, #4
 800ba86:	761a      	strb	r2, [r3, #24]
      break;
 800ba88:	e0f1      	b.n	800bc6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	791b      	ldrb	r3, [r3, #4]
 800ba8e:	4619      	mov	r1, r3
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fdb3 	bl	800c5fc <USBH_LL_GetURBState>
 800ba96:	4603      	mov	r3, r0
 800ba98:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ba9a:	7bbb      	ldrb	r3, [r7, #14]
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d102      	bne.n	800baa6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2209      	movs	r2, #9
 800baa4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800baa6:	7bbb      	ldrb	r3, [r7, #14]
 800baa8:	2b05      	cmp	r3, #5
 800baaa:	d102      	bne.n	800bab2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800baac:	2303      	movs	r3, #3
 800baae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bab0:	e0d6      	b.n	800bc60 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bab2:	7bbb      	ldrb	r3, [r7, #14]
 800bab4:	2b04      	cmp	r3, #4
 800bab6:	f040 80d3 	bne.w	800bc60 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	220b      	movs	r2, #11
 800babe:	761a      	strb	r2, [r3, #24]
      break;
 800bac0:	e0ce      	b.n	800bc60 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6899      	ldr	r1, [r3, #8]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	899a      	ldrh	r2, [r3, #12]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	795b      	ldrb	r3, [r3, #5]
 800bace:	2001      	movs	r0, #1
 800bad0:	9000      	str	r0, [sp, #0]
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 f8ea 	bl	800bcac <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bade:	b29a      	uxth	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2206      	movs	r2, #6
 800bae8:	761a      	strb	r2, [r3, #24]
      break;
 800baea:	e0c0      	b.n	800bc6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	795b      	ldrb	r3, [r3, #5]
 800baf0:	4619      	mov	r1, r3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 fd82 	bl	800c5fc <USBH_LL_GetURBState>
 800baf8:	4603      	mov	r3, r0
 800bafa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bafc:	7bbb      	ldrb	r3, [r7, #14]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d103      	bne.n	800bb0a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2207      	movs	r2, #7
 800bb06:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb08:	e0ac      	b.n	800bc64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bb0a:	7bbb      	ldrb	r3, [r7, #14]
 800bb0c:	2b05      	cmp	r3, #5
 800bb0e:	d105      	bne.n	800bb1c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	220c      	movs	r2, #12
 800bb14:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bb16:	2303      	movs	r3, #3
 800bb18:	73fb      	strb	r3, [r7, #15]
      break;
 800bb1a:	e0a3      	b.n	800bc64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb1c:	7bbb      	ldrb	r3, [r7, #14]
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d103      	bne.n	800bb2a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2205      	movs	r2, #5
 800bb26:	761a      	strb	r2, [r3, #24]
      break;
 800bb28:	e09c      	b.n	800bc64 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bb2a:	7bbb      	ldrb	r3, [r7, #14]
 800bb2c:	2b04      	cmp	r3, #4
 800bb2e:	f040 8099 	bne.w	800bc64 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	220b      	movs	r2, #11
 800bb36:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bb38:	2302      	movs	r3, #2
 800bb3a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb3c:	e092      	b.n	800bc64 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	791b      	ldrb	r3, [r3, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	2100      	movs	r1, #0
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 f8d5 	bl	800bcf6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2208      	movs	r2, #8
 800bb5c:	761a      	strb	r2, [r3, #24]

      break;
 800bb5e:	e086      	b.n	800bc6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	791b      	ldrb	r3, [r3, #4]
 800bb64:	4619      	mov	r1, r3
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fd48 	bl	800c5fc <USBH_LL_GetURBState>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bb70:	7bbb      	ldrb	r3, [r7, #14]
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d105      	bne.n	800bb82 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	220d      	movs	r2, #13
 800bb7a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb80:	e072      	b.n	800bc68 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bb82:	7bbb      	ldrb	r3, [r7, #14]
 800bb84:	2b04      	cmp	r3, #4
 800bb86:	d103      	bne.n	800bb90 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	220b      	movs	r2, #11
 800bb8c:	761a      	strb	r2, [r3, #24]
      break;
 800bb8e:	e06b      	b.n	800bc68 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bb90:	7bbb      	ldrb	r3, [r7, #14]
 800bb92:	2b05      	cmp	r3, #5
 800bb94:	d168      	bne.n	800bc68 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bb96:	2303      	movs	r3, #3
 800bb98:	73fb      	strb	r3, [r7, #15]
      break;
 800bb9a:	e065      	b.n	800bc68 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	795b      	ldrb	r3, [r3, #5]
 800bba0:	2201      	movs	r2, #1
 800bba2:	9200      	str	r2, [sp, #0]
 800bba4:	2200      	movs	r2, #0
 800bba6:	2100      	movs	r1, #0
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f87f 	bl	800bcac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bbb4:	b29a      	uxth	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	220a      	movs	r2, #10
 800bbbe:	761a      	strb	r2, [r3, #24]
      break;
 800bbc0:	e055      	b.n	800bc6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	795b      	ldrb	r3, [r3, #5]
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 fd17 	bl	800c5fc <USBH_LL_GetURBState>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d105      	bne.n	800bbe4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	220d      	movs	r2, #13
 800bbe0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bbe2:	e043      	b.n	800bc6c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bbe4:	7bbb      	ldrb	r3, [r7, #14]
 800bbe6:	2b02      	cmp	r3, #2
 800bbe8:	d103      	bne.n	800bbf2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2209      	movs	r2, #9
 800bbee:	761a      	strb	r2, [r3, #24]
      break;
 800bbf0:	e03c      	b.n	800bc6c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
 800bbf4:	2b04      	cmp	r3, #4
 800bbf6:	d139      	bne.n	800bc6c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	220b      	movs	r2, #11
 800bbfc:	761a      	strb	r2, [r3, #24]
      break;
 800bbfe:	e035      	b.n	800bc6c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	7e5b      	ldrb	r3, [r3, #25]
 800bc04:	3301      	adds	r3, #1
 800bc06:	b2da      	uxtb	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	765a      	strb	r2, [r3, #25]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	7e5b      	ldrb	r3, [r3, #25]
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d806      	bhi.n	800bc22 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bc20:	e025      	b.n	800bc6e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc28:	2106      	movs	r1, #6
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	795b      	ldrb	r3, [r3, #5]
 800bc38:	4619      	mov	r1, r3
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 f8e8 	bl	800be10 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	791b      	ldrb	r3, [r3, #4]
 800bc44:	4619      	mov	r1, r3
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 f8e2 	bl	800be10 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bc52:	2302      	movs	r3, #2
 800bc54:	73fb      	strb	r3, [r7, #15]
      break;
 800bc56:	e00a      	b.n	800bc6e <USBH_HandleControl+0x2de>

    default:
      break;
 800bc58:	bf00      	nop
 800bc5a:	e008      	b.n	800bc6e <USBH_HandleControl+0x2de>
      break;
 800bc5c:	bf00      	nop
 800bc5e:	e006      	b.n	800bc6e <USBH_HandleControl+0x2de>
      break;
 800bc60:	bf00      	nop
 800bc62:	e004      	b.n	800bc6e <USBH_HandleControl+0x2de>
      break;
 800bc64:	bf00      	nop
 800bc66:	e002      	b.n	800bc6e <USBH_HandleControl+0x2de>
      break;
 800bc68:	bf00      	nop
 800bc6a:	e000      	b.n	800bc6e <USBH_HandleControl+0x2de>
      break;
 800bc6c:	bf00      	nop
  }

  return status;
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b088      	sub	sp, #32
 800bc7c:	af04      	add	r7, sp, #16
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	4613      	mov	r3, r2
 800bc84:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc86:	79f9      	ldrb	r1, [r7, #7]
 800bc88:	2300      	movs	r3, #0
 800bc8a:	9303      	str	r3, [sp, #12]
 800bc8c:	2308      	movs	r3, #8
 800bc8e:	9302      	str	r3, [sp, #8]
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	9301      	str	r3, [sp, #4]
 800bc94:	2300      	movs	r3, #0
 800bc96:	9300      	str	r3, [sp, #0]
 800bc98:	2300      	movs	r3, #0
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f000 fc7c 	bl	800c59a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3710      	adds	r7, #16
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b088      	sub	sp, #32
 800bcb0:	af04      	add	r7, sp, #16
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	461a      	mov	r2, r3
 800bcba:	460b      	mov	r3, r1
 800bcbc:	80fb      	strh	r3, [r7, #6]
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d001      	beq.n	800bcd0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bccc:	2300      	movs	r3, #0
 800bcce:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bcd0:	7979      	ldrb	r1, [r7, #5]
 800bcd2:	7e3b      	ldrb	r3, [r7, #24]
 800bcd4:	9303      	str	r3, [sp, #12]
 800bcd6:	88fb      	ldrh	r3, [r7, #6]
 800bcd8:	9302      	str	r3, [sp, #8]
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	9301      	str	r3, [sp, #4]
 800bcde:	2301      	movs	r3, #1
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	2300      	movs	r3, #0
 800bce4:	2200      	movs	r2, #0
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f000 fc57 	bl	800c59a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b088      	sub	sp, #32
 800bcfa:	af04      	add	r7, sp, #16
 800bcfc:	60f8      	str	r0, [r7, #12]
 800bcfe:	60b9      	str	r1, [r7, #8]
 800bd00:	4611      	mov	r1, r2
 800bd02:	461a      	mov	r2, r3
 800bd04:	460b      	mov	r3, r1
 800bd06:	80fb      	strh	r3, [r7, #6]
 800bd08:	4613      	mov	r3, r2
 800bd0a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd0c:	7979      	ldrb	r1, [r7, #5]
 800bd0e:	2300      	movs	r3, #0
 800bd10:	9303      	str	r3, [sp, #12]
 800bd12:	88fb      	ldrh	r3, [r7, #6]
 800bd14:	9302      	str	r3, [sp, #8]
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	9301      	str	r3, [sp, #4]
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	9300      	str	r3, [sp, #0]
 800bd1e:	2300      	movs	r3, #0
 800bd20:	2201      	movs	r2, #1
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f000 fc39 	bl	800c59a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bd28:	2300      	movs	r3, #0

}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b088      	sub	sp, #32
 800bd36:	af04      	add	r7, sp, #16
 800bd38:	60f8      	str	r0, [r7, #12]
 800bd3a:	60b9      	str	r1, [r7, #8]
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	461a      	mov	r2, r3
 800bd40:	460b      	mov	r3, r1
 800bd42:	71fb      	strb	r3, [r7, #7]
 800bd44:	4613      	mov	r3, r2
 800bd46:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd48:	79fb      	ldrb	r3, [r7, #7]
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	79b9      	ldrb	r1, [r7, #6]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	9203      	str	r2, [sp, #12]
 800bd52:	9302      	str	r3, [sp, #8]
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	9301      	str	r3, [sp, #4]
 800bd58:	2301      	movs	r3, #1
 800bd5a:	9300      	str	r3, [sp, #0]
 800bd5c:	2303      	movs	r3, #3
 800bd5e:	2201      	movs	r2, #1
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f000 fc1a 	bl	800c59a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800bd66:	2300      	movs	r3, #0
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af04      	add	r7, sp, #16
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	4608      	mov	r0, r1
 800bd7a:	4611      	mov	r1, r2
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	4603      	mov	r3, r0
 800bd80:	70fb      	strb	r3, [r7, #3]
 800bd82:	460b      	mov	r3, r1
 800bd84:	70bb      	strb	r3, [r7, #2]
 800bd86:	4613      	mov	r3, r2
 800bd88:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bd8a:	7878      	ldrb	r0, [r7, #1]
 800bd8c:	78ba      	ldrb	r2, [r7, #2]
 800bd8e:	78f9      	ldrb	r1, [r7, #3]
 800bd90:	8b3b      	ldrh	r3, [r7, #24]
 800bd92:	9302      	str	r3, [sp, #8]
 800bd94:	7d3b      	ldrb	r3, [r7, #20]
 800bd96:	9301      	str	r3, [sp, #4]
 800bd98:	7c3b      	ldrb	r3, [r7, #16]
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fbad 	bl	800c4fe <USBH_LL_OpenPipe>

  return USBH_OK;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3708      	adds	r7, #8
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}

0800bdae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b082      	sub	sp, #8
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bdba:	78fb      	ldrb	r3, [r7, #3]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 fbcc 	bl	800c55c <USBH_LL_ClosePipe>

  return USBH_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b084      	sub	sp, #16
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f836 	bl	800be4c <USBH_GetFreePipe>
 800bde0:	4603      	mov	r3, r0
 800bde2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bde4:	89fb      	ldrh	r3, [r7, #14]
 800bde6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d00a      	beq.n	800be04 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bdee:	78fa      	ldrb	r2, [r7, #3]
 800bdf0:	89fb      	ldrh	r3, [r7, #14]
 800bdf2:	f003 030f 	and.w	r3, r3, #15
 800bdf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bdfa:	6879      	ldr	r1, [r7, #4]
 800bdfc:	33e0      	adds	r3, #224	; 0xe0
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	440b      	add	r3, r1
 800be02:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800be04:	89fb      	ldrh	r3, [r7, #14]
 800be06:	b2db      	uxtb	r3, r3
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	460b      	mov	r3, r1
 800be1a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800be1c:	78fb      	ldrb	r3, [r7, #3]
 800be1e:	2b0a      	cmp	r3, #10
 800be20:	d80d      	bhi.n	800be3e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800be22:	78fb      	ldrb	r3, [r7, #3]
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	33e0      	adds	r3, #224	; 0xe0
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4413      	add	r3, r2
 800be2c:	685a      	ldr	r2, [r3, #4]
 800be2e:	78fb      	ldrb	r3, [r7, #3]
 800be30:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800be34:	6879      	ldr	r1, [r7, #4]
 800be36:	33e0      	adds	r3, #224	; 0xe0
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	440b      	add	r3, r1
 800be3c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800be3e:	2300      	movs	r3, #0
}
 800be40:	4618      	mov	r0, r3
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800be54:	2300      	movs	r3, #0
 800be56:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800be58:	2300      	movs	r3, #0
 800be5a:	73fb      	strb	r3, [r7, #15]
 800be5c:	e00f      	b.n	800be7e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800be5e:	7bfb      	ldrb	r3, [r7, #15]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	33e0      	adds	r3, #224	; 0xe0
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	4413      	add	r3, r2
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d102      	bne.n	800be78 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800be72:	7bfb      	ldrb	r3, [r7, #15]
 800be74:	b29b      	uxth	r3, r3
 800be76:	e007      	b.n	800be88 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800be78:	7bfb      	ldrb	r3, [r7, #15]
 800be7a:	3301      	adds	r3, #1
 800be7c:	73fb      	strb	r3, [r7, #15]
 800be7e:	7bfb      	ldrb	r3, [r7, #15]
 800be80:	2b0a      	cmp	r3, #10
 800be82:	d9ec      	bls.n	800be5e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800be84:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3714      	adds	r7, #20
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <LL_GPIO_SetOutputPin>:
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	683a      	ldr	r2, [r7, #0]
 800bea2:	619a      	str	r2, [r3, #24]
}
 800bea4:	bf00      	nop
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <LL_GPIO_ResetOutputPin>:
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	041a      	lsls	r2, r3, #16
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	619a      	str	r2, [r3, #24]
}
 800bec2:	bf00      	nop
 800bec4:	370c      	adds	r7, #12
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
	...

0800bed0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess1, HOST_HS) != USBH_OK)
 800bed4:	2200      	movs	r2, #0
 800bed6:	4925      	ldr	r1, [pc, #148]	; (800bf6c <MX_USB_HOST_Init+0x9c>)
 800bed8:	4825      	ldr	r0, [pc, #148]	; (800bf70 <MX_USB_HOST_Init+0xa0>)
 800beda:	f7fe fcdd 	bl	800a898 <USBH_Init>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d001      	beq.n	800bee8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bee4:	f7f5 f86c 	bl	8000fc0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_HID_CLASS) != USBH_OK)
 800bee8:	4922      	ldr	r1, [pc, #136]	; (800bf74 <MX_USB_HOST_Init+0xa4>)
 800beea:	4821      	ldr	r0, [pc, #132]	; (800bf70 <MX_USB_HOST_Init+0xa0>)
 800beec:	f7fe fd62 	bl	800a9b4 <USBH_RegisterClass>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d001      	beq.n	800befa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bef6:	f7f5 f863 	bl	8000fc0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800befa:	481d      	ldr	r0, [pc, #116]	; (800bf70 <MX_USB_HOST_Init+0xa0>)
 800befc:	f7fe fda0 	bl	800aa40 <USBH_Start>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d001      	beq.n	800bf0a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bf06:	f7f5 f85b 	bl	8000fc0 <Error_Handler>
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess2, HOST_FS) != USBH_OK)
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	491a      	ldr	r1, [pc, #104]	; (800bf78 <MX_USB_HOST_Init+0xa8>)
 800bf0e:	481b      	ldr	r0, [pc, #108]	; (800bf7c <MX_USB_HOST_Init+0xac>)
 800bf10:	f7fe fcc2 	bl	800a898 <USBH_Init>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <MX_USB_HOST_Init+0x4e>
  {
    Error_Handler();
 800bf1a:	f7f5 f851 	bl	8000fc0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800bf1e:	4915      	ldr	r1, [pc, #84]	; (800bf74 <MX_USB_HOST_Init+0xa4>)
 800bf20:	4816      	ldr	r0, [pc, #88]	; (800bf7c <MX_USB_HOST_Init+0xac>)
 800bf22:	f7fe fd47 	bl	800a9b4 <USBH_RegisterClass>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d001      	beq.n	800bf30 <MX_USB_HOST_Init+0x60>
  {
    Error_Handler();
 800bf2c:	f7f5 f848 	bl	8000fc0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bf30:	4812      	ldr	r0, [pc, #72]	; (800bf7c <MX_USB_HOST_Init+0xac>)
 800bf32:	f7fe fd85 	bl	800aa40 <USBH_Start>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d001      	beq.n	800bf40 <MX_USB_HOST_Init+0x70>
  {
    Error_Handler();
 800bf3c:	f7f5 f840 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  hUsbHostHS.pActiveClass->pData[0] = NULL;
 800bf40:	4b0b      	ldr	r3, [pc, #44]	; (800bf70 <MX_USB_HOST_Init+0xa0>)
 800bf42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf46:	2200      	movs	r2, #0
 800bf48:	621a      	str	r2, [r3, #32]
  hUsbHostHS.pActiveClass->pData[1] = NULL;
 800bf4a:	4b09      	ldr	r3, [pc, #36]	; (800bf70 <MX_USB_HOST_Init+0xa0>)
 800bf4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf50:	2200      	movs	r2, #0
 800bf52:	625a      	str	r2, [r3, #36]	; 0x24
  hUsbHostFS.pActiveClass->pData[0] = NULL;
 800bf54:	4b09      	ldr	r3, [pc, #36]	; (800bf7c <MX_USB_HOST_Init+0xac>)
 800bf56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	621a      	str	r2, [r3, #32]
  hUsbHostFS.pActiveClass->pData[1] = NULL;
 800bf5e:	4b07      	ldr	r3, [pc, #28]	; (800bf7c <MX_USB_HOST_Init+0xac>)
 800bf60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf64:	2200      	movs	r2, #0
 800bf66:	625a      	str	r2, [r3, #36]	; 0x24


  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bf68:	bf00      	nop
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	0800bf9d 	.word	0x0800bf9d
 800bf70:	20000420 	.word	0x20000420
 800bf74:	20000010 	.word	0x20000010
 800bf78:	0800c00d 	.word	0x0800c00d
 800bf7c:	200007f8 	.word	0x200007f8

0800bf80 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800bf84:	4803      	ldr	r0, [pc, #12]	; (800bf94 <MX_USB_HOST_Process+0x14>)
 800bf86:	f7fe fd6b 	bl	800aa60 <USBH_Process>
  USBH_Process(&hUsbHostFS);
 800bf8a:	4803      	ldr	r0, [pc, #12]	; (800bf98 <MX_USB_HOST_Process+0x18>)
 800bf8c:	f7fe fd68 	bl	800aa60 <USBH_Process>
}
 800bf90:	bf00      	nop
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	20000420 	.word	0x20000420
 800bf98:	200007f8 	.word	0x200007f8

0800bf9c <USBH_UserProcess1>:
/*
 * user callback definition
 */
static void USBH_UserProcess1  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_2 */
  switch(id)
 800bfa8:	78fb      	ldrb	r3, [r7, #3]
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	2b04      	cmp	r3, #4
 800bfae:	d823      	bhi.n	800bff8 <USBH_UserProcess1+0x5c>
 800bfb0:	a201      	add	r2, pc, #4	; (adr r2, 800bfb8 <USBH_UserProcess1+0x1c>)
 800bfb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb6:	bf00      	nop
 800bfb8:	0800bff9 	.word	0x0800bff9
 800bfbc:	0800bfdf 	.word	0x0800bfdf
 800bfc0:	0800bff9 	.word	0x0800bff9
 800bfc4:	0800bff1 	.word	0x0800bff1
 800bfc8:	0800bfcd 	.word	0x0800bfcd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bfcc:	4b0d      	ldr	r3, [pc, #52]	; (800c004 <USBH_UserProcess1+0x68>)
 800bfce:	2203      	movs	r2, #3
 800bfd0:	701a      	strb	r2, [r3, #0]
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 800bfd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bfd6:	480c      	ldr	r0, [pc, #48]	; (800c008 <USBH_UserProcess1+0x6c>)
 800bfd8:	f7ff ff5c 	bl	800be94 <LL_GPIO_SetOutputPin>
  break;
 800bfdc:	e00d      	b.n	800bffa <USBH_UserProcess1+0x5e>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bfde:	4b09      	ldr	r3, [pc, #36]	; (800c004 <USBH_UserProcess1+0x68>)
 800bfe0:	2202      	movs	r2, #2
 800bfe2:	701a      	strb	r2, [r3, #0]
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_13);
 800bfe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bfe8:	4807      	ldr	r0, [pc, #28]	; (800c008 <USBH_UserProcess1+0x6c>)
 800bfea:	f7ff ff61 	bl	800beb0 <LL_GPIO_ResetOutputPin>
  break;
 800bfee:	e004      	b.n	800bffa <USBH_UserProcess1+0x5e>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bff0:	4b04      	ldr	r3, [pc, #16]	; (800c004 <USBH_UserProcess1+0x68>)
 800bff2:	2201      	movs	r2, #1
 800bff4:	701a      	strb	r2, [r3, #0]
  break;
 800bff6:	e000      	b.n	800bffa <USBH_UserProcess1+0x5e>

  default:
  break;
 800bff8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_2 */
}
 800bffa:	bf00      	nop
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	20000bd0 	.word	0x20000bd0
 800c008:	40020400 	.word	0x40020400

0800c00c <USBH_UserProcess2>:

static void USBH_UserProcess2  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_21 */
  switch(id)
 800c018:	78fb      	ldrb	r3, [r7, #3]
 800c01a:	3b01      	subs	r3, #1
 800c01c:	2b04      	cmp	r3, #4
 800c01e:	d823      	bhi.n	800c068 <USBH_UserProcess2+0x5c>
 800c020:	a201      	add	r2, pc, #4	; (adr r2, 800c028 <USBH_UserProcess2+0x1c>)
 800c022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c026:	bf00      	nop
 800c028:	0800c069 	.word	0x0800c069
 800c02c:	0800c04f 	.word	0x0800c04f
 800c030:	0800c069 	.word	0x0800c069
 800c034:	0800c061 	.word	0x0800c061
 800c038:	0800c03d 	.word	0x0800c03d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c03c:	4b0d      	ldr	r3, [pc, #52]	; (800c074 <USBH_UserProcess2+0x68>)
 800c03e:	2203      	movs	r2, #3
 800c040:	701a      	strb	r2, [r3, #0]
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 800c042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c046:	480c      	ldr	r0, [pc, #48]	; (800c078 <USBH_UserProcess2+0x6c>)
 800c048:	f7ff ff24 	bl	800be94 <LL_GPIO_SetOutputPin>
  break;
 800c04c:	e00d      	b.n	800c06a <USBH_UserProcess2+0x5e>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c04e:	4b09      	ldr	r3, [pc, #36]	; (800c074 <USBH_UserProcess2+0x68>)
 800c050:	2202      	movs	r2, #2
 800c052:	701a      	strb	r2, [r3, #0]
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_13);
 800c054:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c058:	4807      	ldr	r0, [pc, #28]	; (800c078 <USBH_UserProcess2+0x6c>)
 800c05a:	f7ff ff29 	bl	800beb0 <LL_GPIO_ResetOutputPin>


  break;
 800c05e:	e004      	b.n	800c06a <USBH_UserProcess2+0x5e>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c060:	4b04      	ldr	r3, [pc, #16]	; (800c074 <USBH_UserProcess2+0x68>)
 800c062:	2201      	movs	r2, #1
 800c064:	701a      	strb	r2, [r3, #0]
  break;
 800c066:	e000      	b.n	800c06a <USBH_UserProcess2+0x5e>

  default:
  break;
 800c068:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_21 */
}
 800c06a:	bf00      	nop
 800c06c:	3708      	adds	r7, #8
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	20000bd0 	.word	0x20000bd0
 800c078:	40020400 	.word	0x40020400

0800c07c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b0ae      	sub	sp, #184	; 0xb8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c084:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c088:	2200      	movs	r2, #0
 800c08a:	601a      	str	r2, [r3, #0]
 800c08c:	605a      	str	r2, [r3, #4]
 800c08e:	609a      	str	r2, [r3, #8]
 800c090:	60da      	str	r2, [r3, #12]
 800c092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c098:	2280      	movs	r2, #128	; 0x80
 800c09a:	2100      	movs	r1, #0
 800c09c:	4618      	mov	r0, r3
 800c09e:	f000 fb6f 	bl	800c780 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0aa:	d152      	bne.n	800c152 <HAL_HCD_MspInit+0xd6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c0ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c0b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c0b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7f8 feed 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 800c0c8:	f7f4 ff7a 	bl	8000fc0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c0cc:	4b5c      	ldr	r3, [pc, #368]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d0:	4a5b      	ldr	r2, [pc, #364]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c0d2:	f043 0301 	orr.w	r3, r3, #1
 800c0d6:	6313      	str	r3, [r2, #48]	; 0x30
 800c0d8:	4b59      	ldr	r3, [pc, #356]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0dc:	f003 0301 	and.w	r3, r3, #1
 800c0e0:	623b      	str	r3, [r7, #32]
 800c0e2:	6a3b      	ldr	r3, [r7, #32]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c0e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c0e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0ec:	2302      	movs	r3, #2
 800c0ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c0fe:	230a      	movs	r3, #10
 800c100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c104:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c108:	4619      	mov	r1, r3
 800c10a:	484e      	ldr	r0, [pc, #312]	; (800c244 <HAL_HCD_MspInit+0x1c8>)
 800c10c:	f7f6 fa9c 	bl	8002648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c110:	4b4b      	ldr	r3, [pc, #300]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c114:	4a4a      	ldr	r2, [pc, #296]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c11a:	6353      	str	r3, [r2, #52]	; 0x34
 800c11c:	4b48      	ldr	r3, [pc, #288]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c124:	61fb      	str	r3, [r7, #28]
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	4b45      	ldr	r3, [pc, #276]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c12a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c12c:	4a44      	ldr	r2, [pc, #272]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c12e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c132:	6453      	str	r3, [r2, #68]	; 0x44
 800c134:	4b42      	ldr	r3, [pc, #264]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c13c:	61bb      	str	r3, [r7, #24]
 800c13e:	69bb      	ldr	r3, [r7, #24]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 800c140:	2200      	movs	r2, #0
 800c142:	2101      	movs	r1, #1
 800c144:	2043      	movs	r0, #67	; 0x43
 800c146:	f7f5 ff75 	bl	8002034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c14a:	2043      	movs	r0, #67	; 0x43
 800c14c:	f7f5 ff8e 	bl	800206c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800c150:	e072      	b.n	800c238 <HAL_HCD_MspInit+0x1bc>
  else if(hcdHandle->Instance==USB_OTG_HS)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a3c      	ldr	r2, [pc, #240]	; (800c248 <HAL_HCD_MspInit+0x1cc>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d16d      	bne.n	800c238 <HAL_HCD_MspInit+0x1bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c15c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c160:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800c162:	2300      	movs	r3, #0
 800c164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7f8 fe95 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d001      	beq.n	800c17c <HAL_HCD_MspInit+0x100>
      Error_Handler();
 800c178:	f7f4 ff22 	bl	8000fc0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c17c:	4b30      	ldr	r3, [pc, #192]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c180:	4a2f      	ldr	r2, [pc, #188]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c182:	f043 0302 	orr.w	r3, r3, #2
 800c186:	6313      	str	r3, [r2, #48]	; 0x30
 800c188:	4b2d      	ldr	r3, [pc, #180]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c18c:	f003 0302 	and.w	r3, r3, #2
 800c190:	617b      	str	r3, [r7, #20]
 800c192:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800c194:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800c198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c19c:	2302      	movs	r3, #2
 800c19e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c1a8:	2303      	movs	r3, #3
 800c1aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800c1ae:	230c      	movs	r3, #12
 800c1b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c1b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	4824      	ldr	r0, [pc, #144]	; (800c24c <HAL_HCD_MspInit+0x1d0>)
 800c1bc:	f7f6 fa44 	bl	8002648 <HAL_GPIO_Init>
    __HAL_RCC_OTGPHYC_CLK_ENABLE();
 800c1c0:	4b1f      	ldr	r3, [pc, #124]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c1c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1c4:	4a1e      	ldr	r2, [pc, #120]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c1c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1ca:	6453      	str	r3, [r2, #68]	; 0x44
 800c1cc:	4b1c      	ldr	r3, [pc, #112]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c1ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1d4:	613b      	str	r3, [r7, #16]
 800c1d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800c1d8:	4b19      	ldr	r3, [pc, #100]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1dc:	4a18      	ldr	r2, [pc, #96]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c1de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c1e2:	6313      	str	r3, [r2, #48]	; 0x30
 800c1e4:	4b16      	ldr	r3, [pc, #88]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1ec:	60fb      	str	r3, [r7, #12]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800c1f0:	4b13      	ldr	r3, [pc, #76]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f4:	4a12      	ldr	r2, [pc, #72]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c1f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1fa:	6313      	str	r3, [r2, #48]	; 0x30
 800c1fc:	4b10      	ldr	r3, [pc, #64]	; (800c240 <HAL_HCD_MspInit+0x1c4>)
 800c1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c200:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c204:	60bb      	str	r3, [r7, #8]
 800c206:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 1, 0);
 800c208:	2200      	movs	r2, #0
 800c20a:	2101      	movs	r1, #1
 800c20c:	204a      	movs	r0, #74	; 0x4a
 800c20e:	f7f5 ff11 	bl	8002034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800c212:	204a      	movs	r0, #74	; 0x4a
 800c214:	f7f5 ff2a 	bl	800206c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 1, 0);
 800c218:	2200      	movs	r2, #0
 800c21a:	2101      	movs	r1, #1
 800c21c:	204b      	movs	r0, #75	; 0x4b
 800c21e:	f7f5 ff09 	bl	8002034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800c222:	204b      	movs	r0, #75	; 0x4b
 800c224:	f7f5 ff22 	bl	800206c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 0);
 800c228:	2200      	movs	r2, #0
 800c22a:	2101      	movs	r1, #1
 800c22c:	204d      	movs	r0, #77	; 0x4d
 800c22e:	f7f5 ff01 	bl	8002034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800c232:	204d      	movs	r0, #77	; 0x4d
 800c234:	f7f5 ff1a 	bl	800206c <HAL_NVIC_EnableIRQ>
}
 800c238:	bf00      	nop
 800c23a:	37b8      	adds	r7, #184	; 0xb8
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	40023800 	.word	0x40023800
 800c244:	40020000 	.word	0x40020000
 800c248:	40040000 	.word	0x40040000
 800c24c:	40020400 	.word	0x40020400

0800c250 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fe ffd7 	bl	800b212 <USBH_LL_IncTimer>
}
 800c264:	bf00      	nop
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7ff f80f 	bl	800b29e <USBH_LL_Connect>
}
 800c280:	bf00      	nop
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c296:	4618      	mov	r0, r3
 800c298:	f7ff f818 	bl	800b2cc <USBH_LL_Disconnect>
}
 800c29c:	bf00      	nop
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	70fb      	strb	r3, [r7, #3]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c2b4:	bf00      	nop
 800c2b6:	370c      	adds	r7, #12
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fe ffc9 	bl	800b266 <USBH_LL_PortEnabled>
}
 800c2d4:	bf00      	nop
 800c2d6:	3708      	adds	r7, #8
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fe ffc9 	bl	800b282 <USBH_LL_PortDisabled>
}
 800c2f0:	bf00      	nop
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c306:	2b01      	cmp	r3, #1
 800c308:	d12d      	bne.n	800c366 <USBH_LL_Init+0x6e>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c30a:	4a34      	ldr	r2, [pc, #208]	; (800c3dc <USBH_LL_Init+0xe4>)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a31      	ldr	r2, [pc, #196]	; (800c3dc <USBH_LL_Init+0xe4>)
 800c316:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c31a:	4b30      	ldr	r3, [pc, #192]	; (800c3dc <USBH_LL_Init+0xe4>)
 800c31c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c320:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800c322:	4b2e      	ldr	r3, [pc, #184]	; (800c3dc <USBH_LL_Init+0xe4>)
 800c324:	220c      	movs	r2, #12
 800c326:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = USB_OTG_SPEED_FULL;
 800c328:	4b2c      	ldr	r3, [pc, #176]	; (800c3dc <USBH_LL_Init+0xe4>)
 800c32a:	2203      	movs	r2, #3
 800c32c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c32e:	4b2b      	ldr	r3, [pc, #172]	; (800c3dc <USBH_LL_Init+0xe4>)
 800c330:	2200      	movs	r2, #0
 800c332:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c334:	4b29      	ldr	r3, [pc, #164]	; (800c3dc <USBH_LL_Init+0xe4>)
 800c336:	2202      	movs	r2, #2
 800c338:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c33a:	4b28      	ldr	r3, [pc, #160]	; (800c3dc <USBH_LL_Init+0xe4>)
 800c33c:	2200      	movs	r2, #0
 800c33e:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c340:	4b26      	ldr	r3, [pc, #152]	; (800c3dc <USBH_LL_Init+0xe4>)
 800c342:	2200      	movs	r2, #0
 800c344:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c346:	4825      	ldr	r0, [pc, #148]	; (800c3dc <USBH_LL_Init+0xe4>)
 800c348:	f7f6 fb1a 	bl	8002980 <HAL_HCD_Init>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d001      	beq.n	800c356 <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 800c352:	f7f4 fe35 	bl	8000fc0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c356:	4821      	ldr	r0, [pc, #132]	; (800c3dc <USBH_LL_Init+0xe4>)
 800c358:	f7f6 fefd 	bl	8003156 <HAL_HCD_GetCurrentFrame>
 800c35c:	4603      	mov	r3, r0
 800c35e:	4619      	mov	r1, r3
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f7fe ff47 	bl	800b1f4 <USBH_LL_SetTimer>
  }
  if (phost->id == HOST_HS) {
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d12f      	bne.n	800c3d0 <USBH_LL_Init+0xd8>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800c370:	4a1b      	ldr	r2, [pc, #108]	; (800c3e0 <USBH_LL_Init+0xe8>)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4a19      	ldr	r2, [pc, #100]	; (800c3e0 <USBH_LL_Init+0xe8>)
 800c37c:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c380:	4b17      	ldr	r3, [pc, #92]	; (800c3e0 <USBH_LL_Init+0xe8>)
 800c382:	4a18      	ldr	r2, [pc, #96]	; (800c3e4 <USBH_LL_Init+0xec>)
 800c384:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 800c386:	4b16      	ldr	r3, [pc, #88]	; (800c3e0 <USBH_LL_Init+0xe8>)
 800c388:	2210      	movs	r2, #16
 800c38a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c38c:	4b14      	ldr	r3, [pc, #80]	; (800c3e0 <USBH_LL_Init+0xe8>)
 800c38e:	2200      	movs	r2, #0
 800c390:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800c392:	4b13      	ldr	r3, [pc, #76]	; (800c3e0 <USBH_LL_Init+0xe8>)
 800c394:	2201      	movs	r2, #1
 800c396:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c398:	4b11      	ldr	r3, [pc, #68]	; (800c3e0 <USBH_LL_Init+0xe8>)
 800c39a:	2200      	movs	r2, #0
 800c39c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c39e:	4b10      	ldr	r3, [pc, #64]	; (800c3e0 <USBH_LL_Init+0xe8>)
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800c3a4:	4b0e      	ldr	r3, [pc, #56]	; (800c3e0 <USBH_LL_Init+0xe8>)
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 800c3aa:	4b0d      	ldr	r3, [pc, #52]	; (800c3e0 <USBH_LL_Init+0xe8>)
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800c3b0:	480b      	ldr	r0, [pc, #44]	; (800c3e0 <USBH_LL_Init+0xe8>)
 800c3b2:	f7f6 fae5 	bl	8002980 <HAL_HCD_Init>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d001      	beq.n	800c3c0 <USBH_LL_Init+0xc8>
  {
    Error_Handler( );
 800c3bc:	f7f4 fe00 	bl	8000fc0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800c3c0:	4807      	ldr	r0, [pc, #28]	; (800c3e0 <USBH_LL_Init+0xe8>)
 800c3c2:	f7f6 fec8 	bl	8003156 <HAL_HCD_GetCurrentFrame>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f7fe ff12 	bl	800b1f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c3d0:	2300      	movs	r3, #0
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3708      	adds	r7, #8
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	20000bd4 	.word	0x20000bd4
 800c3e0:	20000ed8 	.word	0x20000ed8
 800c3e4:	40040000 	.word	0x40040000

0800c3e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7f6 fe33 	bl	800306a <HAL_HCD_Start>
 800c404:	4603      	mov	r3, r0
 800c406:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c408:	7bfb      	ldrb	r3, [r7, #15]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 f952 	bl	800c6b4 <USBH_Get_USB_Status>
 800c410:	4603      	mov	r3, r0
 800c412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c414:	7bbb      	ldrb	r3, [r7, #14]
}
 800c416:	4618      	mov	r0, r3
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b084      	sub	sp, #16
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c434:	4618      	mov	r0, r3
 800c436:	f7f6 fe3b 	bl	80030b0 <HAL_HCD_Stop>
 800c43a:	4603      	mov	r3, r0
 800c43c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c43e:	7bfb      	ldrb	r3, [r7, #15]
 800c440:	4618      	mov	r0, r3
 800c442:	f000 f937 	bl	800c6b4 <USBH_Get_USB_Status>
 800c446:	4603      	mov	r3, r0
 800c448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c44a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3710      	adds	r7, #16
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c45c:	2301      	movs	r3, #1
 800c45e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c466:	4618      	mov	r0, r3
 800c468:	f7f6 fe83 	bl	8003172 <HAL_HCD_GetCurrentSpeed>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d00c      	beq.n	800c48c <USBH_LL_GetSpeed+0x38>
 800c472:	2b02      	cmp	r3, #2
 800c474:	d80d      	bhi.n	800c492 <USBH_LL_GetSpeed+0x3e>
 800c476:	2b00      	cmp	r3, #0
 800c478:	d002      	beq.n	800c480 <USBH_LL_GetSpeed+0x2c>
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d003      	beq.n	800c486 <USBH_LL_GetSpeed+0x32>
 800c47e:	e008      	b.n	800c492 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c480:	2300      	movs	r3, #0
 800c482:	73fb      	strb	r3, [r7, #15]
    break;
 800c484:	e008      	b.n	800c498 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c486:	2301      	movs	r3, #1
 800c488:	73fb      	strb	r3, [r7, #15]
    break;
 800c48a:	e005      	b.n	800c498 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c48c:	2302      	movs	r3, #2
 800c48e:	73fb      	strb	r3, [r7, #15]
    break;
 800c490:	e002      	b.n	800c498 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c492:	2301      	movs	r3, #1
 800c494:	73fb      	strb	r3, [r7, #15]
    break;
 800c496:	bf00      	nop
  }
  return  speed;
 800c498:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b084      	sub	sp, #16
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7f6 fe16 	bl	80030ea <HAL_HCD_ResetPort>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c4c2:	7bfb      	ldrb	r3, [r7, #15]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f000 f8f5 	bl	800c6b4 <USBH_Get_USB_Status>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4ea:	78fa      	ldrb	r2, [r7, #3]
 800c4ec:	4611      	mov	r1, r2
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7f6 fe1d 	bl	800312e <HAL_HCD_HC_GetXferCount>
 800c4f4:	4603      	mov	r3, r0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3708      	adds	r7, #8
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c4fe:	b590      	push	{r4, r7, lr}
 800c500:	b089      	sub	sp, #36	; 0x24
 800c502:	af04      	add	r7, sp, #16
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	4608      	mov	r0, r1
 800c508:	4611      	mov	r1, r2
 800c50a:	461a      	mov	r2, r3
 800c50c:	4603      	mov	r3, r0
 800c50e:	70fb      	strb	r3, [r7, #3]
 800c510:	460b      	mov	r3, r1
 800c512:	70bb      	strb	r3, [r7, #2]
 800c514:	4613      	mov	r3, r2
 800c516:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c518:	2300      	movs	r3, #0
 800c51a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c51c:	2300      	movs	r3, #0
 800c51e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c526:	787c      	ldrb	r4, [r7, #1]
 800c528:	78ba      	ldrb	r2, [r7, #2]
 800c52a:	78f9      	ldrb	r1, [r7, #3]
 800c52c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c52e:	9302      	str	r3, [sp, #8]
 800c530:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c534:	9301      	str	r3, [sp, #4]
 800c536:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	4623      	mov	r3, r4
 800c53e:	f7f6 fa81 	bl	8002a44 <HAL_HCD_HC_Init>
 800c542:	4603      	mov	r3, r0
 800c544:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c546:	7bfb      	ldrb	r3, [r7, #15]
 800c548:	4618      	mov	r0, r3
 800c54a:	f000 f8b3 	bl	800c6b4 <USBH_Get_USB_Status>
 800c54e:	4603      	mov	r3, r0
 800c550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c552:	7bbb      	ldrb	r3, [r7, #14]
}
 800c554:	4618      	mov	r0, r3
 800c556:	3714      	adds	r7, #20
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd90      	pop	{r4, r7, pc}

0800c55c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	460b      	mov	r3, r1
 800c566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c568:	2300      	movs	r3, #0
 800c56a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c56c:	2300      	movs	r3, #0
 800c56e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c576:	78fa      	ldrb	r2, [r7, #3]
 800c578:	4611      	mov	r1, r2
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7f6 faf1 	bl	8002b62 <HAL_HCD_HC_Halt>
 800c580:	4603      	mov	r3, r0
 800c582:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c584:	7bfb      	ldrb	r3, [r7, #15]
 800c586:	4618      	mov	r0, r3
 800c588:	f000 f894 	bl	800c6b4 <USBH_Get_USB_Status>
 800c58c:	4603      	mov	r3, r0
 800c58e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c590:	7bbb      	ldrb	r3, [r7, #14]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c59a:	b590      	push	{r4, r7, lr}
 800c59c:	b089      	sub	sp, #36	; 0x24
 800c59e:	af04      	add	r7, sp, #16
 800c5a0:	6078      	str	r0, [r7, #4]
 800c5a2:	4608      	mov	r0, r1
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	70fb      	strb	r3, [r7, #3]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	70bb      	strb	r3, [r7, #2]
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c5c2:	787c      	ldrb	r4, [r7, #1]
 800c5c4:	78ba      	ldrb	r2, [r7, #2]
 800c5c6:	78f9      	ldrb	r1, [r7, #3]
 800c5c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c5cc:	9303      	str	r3, [sp, #12]
 800c5ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c5d0:	9302      	str	r3, [sp, #8]
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d4:	9301      	str	r3, [sp, #4]
 800c5d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	4623      	mov	r3, r4
 800c5de:	f7f6 fae3 	bl	8002ba8 <HAL_HCD_HC_SubmitRequest>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c5e6:	7bfb      	ldrb	r3, [r7, #15]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f000 f863 	bl	800c6b4 <USBH_Get_USB_Status>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd90      	pop	{r4, r7, pc}

0800c5fc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	460b      	mov	r3, r1
 800c606:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c60e:	78fa      	ldrb	r2, [r7, #3]
 800c610:	4611      	mov	r1, r2
 800c612:	4618      	mov	r0, r3
 800c614:	f7f6 fd77 	bl	8003106 <HAL_HCD_HC_GetURBState>
 800c618:	4603      	mov	r3, r0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b082      	sub	sp, #8
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	460b      	mov	r3, r1
 800c62c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 800c62e:	20c8      	movs	r0, #200	; 0xc8
 800c630:	f7f5 fc24 	bl	8001e7c <HAL_Delay>
  return USBH_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c63e:	b480      	push	{r7}
 800c640:	b085      	sub	sp, #20
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
 800c646:	460b      	mov	r3, r1
 800c648:	70fb      	strb	r3, [r7, #3]
 800c64a:	4613      	mov	r3, r2
 800c64c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c654:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c656:	78fb      	ldrb	r3, [r7, #3]
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	212c      	movs	r1, #44	; 0x2c
 800c65c:	fb01 f303 	mul.w	r3, r1, r3
 800c660:	4413      	add	r3, r2
 800c662:	333b      	adds	r3, #59	; 0x3b
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d009      	beq.n	800c67e <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c66a:	78fb      	ldrb	r3, [r7, #3]
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	212c      	movs	r1, #44	; 0x2c
 800c670:	fb01 f303 	mul.w	r3, r1, r3
 800c674:	4413      	add	r3, r2
 800c676:	3354      	adds	r3, #84	; 0x54
 800c678:	78ba      	ldrb	r2, [r7, #2]
 800c67a:	701a      	strb	r2, [r3, #0]
 800c67c:	e008      	b.n	800c690 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c67e:	78fb      	ldrb	r3, [r7, #3]
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	212c      	movs	r1, #44	; 0x2c
 800c684:	fb01 f303 	mul.w	r3, r1, r3
 800c688:	4413      	add	r3, r2
 800c68a:	3355      	adds	r3, #85	; 0x55
 800c68c:	78ba      	ldrb	r2, [r7, #2]
 800c68e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	3714      	adds	r7, #20
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b082      	sub	sp, #8
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7f5 fbe8 	bl	8001e7c <HAL_Delay>
}
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b085      	sub	sp, #20
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c6c2:	79fb      	ldrb	r3, [r7, #7]
 800c6c4:	2b03      	cmp	r3, #3
 800c6c6:	d817      	bhi.n	800c6f8 <USBH_Get_USB_Status+0x44>
 800c6c8:	a201      	add	r2, pc, #4	; (adr r2, 800c6d0 <USBH_Get_USB_Status+0x1c>)
 800c6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ce:	bf00      	nop
 800c6d0:	0800c6e1 	.word	0x0800c6e1
 800c6d4:	0800c6e7 	.word	0x0800c6e7
 800c6d8:	0800c6ed 	.word	0x0800c6ed
 800c6dc:	0800c6f3 	.word	0x0800c6f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c6e4:	e00b      	b.n	800c6fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c6e6:	2302      	movs	r3, #2
 800c6e8:	73fb      	strb	r3, [r7, #15]
    break;
 800c6ea:	e008      	b.n	800c6fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c6f0:	e005      	b.n	800c6fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c6f2:	2302      	movs	r3, #2
 800c6f4:	73fb      	strb	r3, [r7, #15]
    break;
 800c6f6:	e002      	b.n	800c6fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c6f8:	2302      	movs	r3, #2
 800c6fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c6fc:	bf00      	nop
  }
  return usb_status;
 800c6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3714      	adds	r7, #20
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <__errno>:
 800c70c:	4b01      	ldr	r3, [pc, #4]	; (800c714 <__errno+0x8>)
 800c70e:	6818      	ldr	r0, [r3, #0]
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	20000038 	.word	0x20000038

0800c718 <__libc_init_array>:
 800c718:	b570      	push	{r4, r5, r6, lr}
 800c71a:	4d0d      	ldr	r5, [pc, #52]	; (800c750 <__libc_init_array+0x38>)
 800c71c:	4c0d      	ldr	r4, [pc, #52]	; (800c754 <__libc_init_array+0x3c>)
 800c71e:	1b64      	subs	r4, r4, r5
 800c720:	10a4      	asrs	r4, r4, #2
 800c722:	2600      	movs	r6, #0
 800c724:	42a6      	cmp	r6, r4
 800c726:	d109      	bne.n	800c73c <__libc_init_array+0x24>
 800c728:	4d0b      	ldr	r5, [pc, #44]	; (800c758 <__libc_init_array+0x40>)
 800c72a:	4c0c      	ldr	r4, [pc, #48]	; (800c75c <__libc_init_array+0x44>)
 800c72c:	f000 f92e 	bl	800c98c <_init>
 800c730:	1b64      	subs	r4, r4, r5
 800c732:	10a4      	asrs	r4, r4, #2
 800c734:	2600      	movs	r6, #0
 800c736:	42a6      	cmp	r6, r4
 800c738:	d105      	bne.n	800c746 <__libc_init_array+0x2e>
 800c73a:	bd70      	pop	{r4, r5, r6, pc}
 800c73c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c740:	4798      	blx	r3
 800c742:	3601      	adds	r6, #1
 800c744:	e7ee      	b.n	800c724 <__libc_init_array+0xc>
 800c746:	f855 3b04 	ldr.w	r3, [r5], #4
 800c74a:	4798      	blx	r3
 800c74c:	3601      	adds	r6, #1
 800c74e:	e7f2      	b.n	800c736 <__libc_init_array+0x1e>
 800c750:	0800cd24 	.word	0x0800cd24
 800c754:	0800cd24 	.word	0x0800cd24
 800c758:	0800cd24 	.word	0x0800cd24
 800c75c:	0800cd28 	.word	0x0800cd28

0800c760 <malloc>:
 800c760:	4b02      	ldr	r3, [pc, #8]	; (800c76c <malloc+0xc>)
 800c762:	4601      	mov	r1, r0
 800c764:	6818      	ldr	r0, [r3, #0]
 800c766:	f000 b87f 	b.w	800c868 <_malloc_r>
 800c76a:	bf00      	nop
 800c76c:	20000038 	.word	0x20000038

0800c770 <free>:
 800c770:	4b02      	ldr	r3, [pc, #8]	; (800c77c <free+0xc>)
 800c772:	4601      	mov	r1, r0
 800c774:	6818      	ldr	r0, [r3, #0]
 800c776:	f000 b80b 	b.w	800c790 <_free_r>
 800c77a:	bf00      	nop
 800c77c:	20000038 	.word	0x20000038

0800c780 <memset>:
 800c780:	4402      	add	r2, r0
 800c782:	4603      	mov	r3, r0
 800c784:	4293      	cmp	r3, r2
 800c786:	d100      	bne.n	800c78a <memset+0xa>
 800c788:	4770      	bx	lr
 800c78a:	f803 1b01 	strb.w	r1, [r3], #1
 800c78e:	e7f9      	b.n	800c784 <memset+0x4>

0800c790 <_free_r>:
 800c790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c792:	2900      	cmp	r1, #0
 800c794:	d044      	beq.n	800c820 <_free_r+0x90>
 800c796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c79a:	9001      	str	r0, [sp, #4]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f1a1 0404 	sub.w	r4, r1, #4
 800c7a2:	bfb8      	it	lt
 800c7a4:	18e4      	addlt	r4, r4, r3
 800c7a6:	f000 f8e3 	bl	800c970 <__malloc_lock>
 800c7aa:	4a1e      	ldr	r2, [pc, #120]	; (800c824 <_free_r+0x94>)
 800c7ac:	9801      	ldr	r0, [sp, #4]
 800c7ae:	6813      	ldr	r3, [r2, #0]
 800c7b0:	b933      	cbnz	r3, 800c7c0 <_free_r+0x30>
 800c7b2:	6063      	str	r3, [r4, #4]
 800c7b4:	6014      	str	r4, [r2, #0]
 800c7b6:	b003      	add	sp, #12
 800c7b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7bc:	f000 b8de 	b.w	800c97c <__malloc_unlock>
 800c7c0:	42a3      	cmp	r3, r4
 800c7c2:	d908      	bls.n	800c7d6 <_free_r+0x46>
 800c7c4:	6825      	ldr	r5, [r4, #0]
 800c7c6:	1961      	adds	r1, r4, r5
 800c7c8:	428b      	cmp	r3, r1
 800c7ca:	bf01      	itttt	eq
 800c7cc:	6819      	ldreq	r1, [r3, #0]
 800c7ce:	685b      	ldreq	r3, [r3, #4]
 800c7d0:	1949      	addeq	r1, r1, r5
 800c7d2:	6021      	streq	r1, [r4, #0]
 800c7d4:	e7ed      	b.n	800c7b2 <_free_r+0x22>
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	b10b      	cbz	r3, 800c7e0 <_free_r+0x50>
 800c7dc:	42a3      	cmp	r3, r4
 800c7de:	d9fa      	bls.n	800c7d6 <_free_r+0x46>
 800c7e0:	6811      	ldr	r1, [r2, #0]
 800c7e2:	1855      	adds	r5, r2, r1
 800c7e4:	42a5      	cmp	r5, r4
 800c7e6:	d10b      	bne.n	800c800 <_free_r+0x70>
 800c7e8:	6824      	ldr	r4, [r4, #0]
 800c7ea:	4421      	add	r1, r4
 800c7ec:	1854      	adds	r4, r2, r1
 800c7ee:	42a3      	cmp	r3, r4
 800c7f0:	6011      	str	r1, [r2, #0]
 800c7f2:	d1e0      	bne.n	800c7b6 <_free_r+0x26>
 800c7f4:	681c      	ldr	r4, [r3, #0]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	6053      	str	r3, [r2, #4]
 800c7fa:	4421      	add	r1, r4
 800c7fc:	6011      	str	r1, [r2, #0]
 800c7fe:	e7da      	b.n	800c7b6 <_free_r+0x26>
 800c800:	d902      	bls.n	800c808 <_free_r+0x78>
 800c802:	230c      	movs	r3, #12
 800c804:	6003      	str	r3, [r0, #0]
 800c806:	e7d6      	b.n	800c7b6 <_free_r+0x26>
 800c808:	6825      	ldr	r5, [r4, #0]
 800c80a:	1961      	adds	r1, r4, r5
 800c80c:	428b      	cmp	r3, r1
 800c80e:	bf04      	itt	eq
 800c810:	6819      	ldreq	r1, [r3, #0]
 800c812:	685b      	ldreq	r3, [r3, #4]
 800c814:	6063      	str	r3, [r4, #4]
 800c816:	bf04      	itt	eq
 800c818:	1949      	addeq	r1, r1, r5
 800c81a:	6021      	streq	r1, [r4, #0]
 800c81c:	6054      	str	r4, [r2, #4]
 800c81e:	e7ca      	b.n	800c7b6 <_free_r+0x26>
 800c820:	b003      	add	sp, #12
 800c822:	bd30      	pop	{r4, r5, pc}
 800c824:	200011dc 	.word	0x200011dc

0800c828 <sbrk_aligned>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	4e0e      	ldr	r6, [pc, #56]	; (800c864 <sbrk_aligned+0x3c>)
 800c82c:	460c      	mov	r4, r1
 800c82e:	6831      	ldr	r1, [r6, #0]
 800c830:	4605      	mov	r5, r0
 800c832:	b911      	cbnz	r1, 800c83a <sbrk_aligned+0x12>
 800c834:	f000 f88c 	bl	800c950 <_sbrk_r>
 800c838:	6030      	str	r0, [r6, #0]
 800c83a:	4621      	mov	r1, r4
 800c83c:	4628      	mov	r0, r5
 800c83e:	f000 f887 	bl	800c950 <_sbrk_r>
 800c842:	1c43      	adds	r3, r0, #1
 800c844:	d00a      	beq.n	800c85c <sbrk_aligned+0x34>
 800c846:	1cc4      	adds	r4, r0, #3
 800c848:	f024 0403 	bic.w	r4, r4, #3
 800c84c:	42a0      	cmp	r0, r4
 800c84e:	d007      	beq.n	800c860 <sbrk_aligned+0x38>
 800c850:	1a21      	subs	r1, r4, r0
 800c852:	4628      	mov	r0, r5
 800c854:	f000 f87c 	bl	800c950 <_sbrk_r>
 800c858:	3001      	adds	r0, #1
 800c85a:	d101      	bne.n	800c860 <sbrk_aligned+0x38>
 800c85c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c860:	4620      	mov	r0, r4
 800c862:	bd70      	pop	{r4, r5, r6, pc}
 800c864:	200011e0 	.word	0x200011e0

0800c868 <_malloc_r>:
 800c868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c86c:	1ccd      	adds	r5, r1, #3
 800c86e:	f025 0503 	bic.w	r5, r5, #3
 800c872:	3508      	adds	r5, #8
 800c874:	2d0c      	cmp	r5, #12
 800c876:	bf38      	it	cc
 800c878:	250c      	movcc	r5, #12
 800c87a:	2d00      	cmp	r5, #0
 800c87c:	4607      	mov	r7, r0
 800c87e:	db01      	blt.n	800c884 <_malloc_r+0x1c>
 800c880:	42a9      	cmp	r1, r5
 800c882:	d905      	bls.n	800c890 <_malloc_r+0x28>
 800c884:	230c      	movs	r3, #12
 800c886:	603b      	str	r3, [r7, #0]
 800c888:	2600      	movs	r6, #0
 800c88a:	4630      	mov	r0, r6
 800c88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c890:	4e2e      	ldr	r6, [pc, #184]	; (800c94c <_malloc_r+0xe4>)
 800c892:	f000 f86d 	bl	800c970 <__malloc_lock>
 800c896:	6833      	ldr	r3, [r6, #0]
 800c898:	461c      	mov	r4, r3
 800c89a:	bb34      	cbnz	r4, 800c8ea <_malloc_r+0x82>
 800c89c:	4629      	mov	r1, r5
 800c89e:	4638      	mov	r0, r7
 800c8a0:	f7ff ffc2 	bl	800c828 <sbrk_aligned>
 800c8a4:	1c43      	adds	r3, r0, #1
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	d14d      	bne.n	800c946 <_malloc_r+0xde>
 800c8aa:	6834      	ldr	r4, [r6, #0]
 800c8ac:	4626      	mov	r6, r4
 800c8ae:	2e00      	cmp	r6, #0
 800c8b0:	d140      	bne.n	800c934 <_malloc_r+0xcc>
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	4631      	mov	r1, r6
 800c8b6:	4638      	mov	r0, r7
 800c8b8:	eb04 0803 	add.w	r8, r4, r3
 800c8bc:	f000 f848 	bl	800c950 <_sbrk_r>
 800c8c0:	4580      	cmp	r8, r0
 800c8c2:	d13a      	bne.n	800c93a <_malloc_r+0xd2>
 800c8c4:	6821      	ldr	r1, [r4, #0]
 800c8c6:	3503      	adds	r5, #3
 800c8c8:	1a6d      	subs	r5, r5, r1
 800c8ca:	f025 0503 	bic.w	r5, r5, #3
 800c8ce:	3508      	adds	r5, #8
 800c8d0:	2d0c      	cmp	r5, #12
 800c8d2:	bf38      	it	cc
 800c8d4:	250c      	movcc	r5, #12
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	4638      	mov	r0, r7
 800c8da:	f7ff ffa5 	bl	800c828 <sbrk_aligned>
 800c8de:	3001      	adds	r0, #1
 800c8e0:	d02b      	beq.n	800c93a <_malloc_r+0xd2>
 800c8e2:	6823      	ldr	r3, [r4, #0]
 800c8e4:	442b      	add	r3, r5
 800c8e6:	6023      	str	r3, [r4, #0]
 800c8e8:	e00e      	b.n	800c908 <_malloc_r+0xa0>
 800c8ea:	6822      	ldr	r2, [r4, #0]
 800c8ec:	1b52      	subs	r2, r2, r5
 800c8ee:	d41e      	bmi.n	800c92e <_malloc_r+0xc6>
 800c8f0:	2a0b      	cmp	r2, #11
 800c8f2:	d916      	bls.n	800c922 <_malloc_r+0xba>
 800c8f4:	1961      	adds	r1, r4, r5
 800c8f6:	42a3      	cmp	r3, r4
 800c8f8:	6025      	str	r5, [r4, #0]
 800c8fa:	bf18      	it	ne
 800c8fc:	6059      	strne	r1, [r3, #4]
 800c8fe:	6863      	ldr	r3, [r4, #4]
 800c900:	bf08      	it	eq
 800c902:	6031      	streq	r1, [r6, #0]
 800c904:	5162      	str	r2, [r4, r5]
 800c906:	604b      	str	r3, [r1, #4]
 800c908:	4638      	mov	r0, r7
 800c90a:	f104 060b 	add.w	r6, r4, #11
 800c90e:	f000 f835 	bl	800c97c <__malloc_unlock>
 800c912:	f026 0607 	bic.w	r6, r6, #7
 800c916:	1d23      	adds	r3, r4, #4
 800c918:	1af2      	subs	r2, r6, r3
 800c91a:	d0b6      	beq.n	800c88a <_malloc_r+0x22>
 800c91c:	1b9b      	subs	r3, r3, r6
 800c91e:	50a3      	str	r3, [r4, r2]
 800c920:	e7b3      	b.n	800c88a <_malloc_r+0x22>
 800c922:	6862      	ldr	r2, [r4, #4]
 800c924:	42a3      	cmp	r3, r4
 800c926:	bf0c      	ite	eq
 800c928:	6032      	streq	r2, [r6, #0]
 800c92a:	605a      	strne	r2, [r3, #4]
 800c92c:	e7ec      	b.n	800c908 <_malloc_r+0xa0>
 800c92e:	4623      	mov	r3, r4
 800c930:	6864      	ldr	r4, [r4, #4]
 800c932:	e7b2      	b.n	800c89a <_malloc_r+0x32>
 800c934:	4634      	mov	r4, r6
 800c936:	6876      	ldr	r6, [r6, #4]
 800c938:	e7b9      	b.n	800c8ae <_malloc_r+0x46>
 800c93a:	230c      	movs	r3, #12
 800c93c:	603b      	str	r3, [r7, #0]
 800c93e:	4638      	mov	r0, r7
 800c940:	f000 f81c 	bl	800c97c <__malloc_unlock>
 800c944:	e7a1      	b.n	800c88a <_malloc_r+0x22>
 800c946:	6025      	str	r5, [r4, #0]
 800c948:	e7de      	b.n	800c908 <_malloc_r+0xa0>
 800c94a:	bf00      	nop
 800c94c:	200011dc 	.word	0x200011dc

0800c950 <_sbrk_r>:
 800c950:	b538      	push	{r3, r4, r5, lr}
 800c952:	4d06      	ldr	r5, [pc, #24]	; (800c96c <_sbrk_r+0x1c>)
 800c954:	2300      	movs	r3, #0
 800c956:	4604      	mov	r4, r0
 800c958:	4608      	mov	r0, r1
 800c95a:	602b      	str	r3, [r5, #0]
 800c95c:	f7f4 fee6 	bl	800172c <_sbrk>
 800c960:	1c43      	adds	r3, r0, #1
 800c962:	d102      	bne.n	800c96a <_sbrk_r+0x1a>
 800c964:	682b      	ldr	r3, [r5, #0]
 800c966:	b103      	cbz	r3, 800c96a <_sbrk_r+0x1a>
 800c968:	6023      	str	r3, [r4, #0]
 800c96a:	bd38      	pop	{r3, r4, r5, pc}
 800c96c:	200011e4 	.word	0x200011e4

0800c970 <__malloc_lock>:
 800c970:	4801      	ldr	r0, [pc, #4]	; (800c978 <__malloc_lock+0x8>)
 800c972:	f000 b809 	b.w	800c988 <__retarget_lock_acquire_recursive>
 800c976:	bf00      	nop
 800c978:	200011e8 	.word	0x200011e8

0800c97c <__malloc_unlock>:
 800c97c:	4801      	ldr	r0, [pc, #4]	; (800c984 <__malloc_unlock+0x8>)
 800c97e:	f000 b804 	b.w	800c98a <__retarget_lock_release_recursive>
 800c982:	bf00      	nop
 800c984:	200011e8 	.word	0x200011e8

0800c988 <__retarget_lock_acquire_recursive>:
 800c988:	4770      	bx	lr

0800c98a <__retarget_lock_release_recursive>:
 800c98a:	4770      	bx	lr

0800c98c <_init>:
 800c98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98e:	bf00      	nop
 800c990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c992:	bc08      	pop	{r3}
 800c994:	469e      	mov	lr, r3
 800c996:	4770      	bx	lr

0800c998 <_fini>:
 800c998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99a:	bf00      	nop
 800c99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c99e:	bc08      	pop	{r3}
 800c9a0:	469e      	mov	lr, r3
 800c9a2:	4770      	bx	lr
